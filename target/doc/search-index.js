var searchIndex = JSON.parse('{\
"ahash":{"doc":"AHash is a high performance keyed hash function.","t":"DDDGIGICLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKKLLALLLLLLLLLLLLLLKKLLLLLLLLLLLLLIDLLLLLLLLKLLLLFLLLLLL","n":["AHashMap","AHashSet","AHasher","HashMap","HashMapExt","HashSet","HashSetExt","RandomState","bitand","bitor","bitxor","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","default","default","default","deref","deref","deref_mut","deref_mut","eq","eq","extend","extend","extend","extend","finish","fmt","fmt","fmt","from","from","from","from","from","from","from","from_iter","from_iter","get","get_key_value","get_mut","index","insert","into","into","into","into","into","into_iter","into_iter","into_iter","into_iter","into_iter","into_keys","into_values","new","new","new","new","random_state","remove","sub","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","with_capacity","with_capacity","with_capacity","with_capacity","with_capacity_and_hasher","with_capacity_and_hasher","with_hasher","with_hasher","write","write_u128","write_u16","write_u32","write_u64","write_u8","write_usize","RandomSource","RandomState","borrow","borrow_mut","build_hasher","clone","clone_into","default","fmt","from","gen_hasher_seed","generate_with","hash_one","into","new","set_random_source","to_owned","try_from","try_into","type_id","with_seed","with_seeds"],"q":[[0,"ahash"],[100,"ahash::random_state"],[122,"core::cmp"],[123,"core::hash"],[124,"core::clone"],[125,"core::hash"],[126,"core::cmp"],[127,"core::iter::traits::collect"],[128,"core::fmt"],[129,"core::fmt"],[130,"std::collections::hash::set"],[131,"core::option"],[132,"core::marker"],[133,"std::collections::hash::map"],[134,"core::any"],[135,"core::marker"]],"d":["A <code>HashMap</code> using <code>RandomState</code> to hash the items. (Requires …","A <code>HashSet</code> using <code>RandomState</code> to hash the items. (Requires …","A <code>Hasher</code> for hashing an arbitrary stream of bytes.","Type alias for HashMap&lt;K, V, ahash::RandomState&gt;","A convenience trait that can be used together with the …","Type alias for HashSet&lt;K, ahash::RandomState&gt;","A convenience trait that can be used together with the …","","Returns the intersection of <code>self</code> and <code>rhs</code> as a new …","Returns the union of <code>self</code> and <code>rhs</code> as a new <code>AHashSet&lt;T, S&gt;</code>.","Returns the symmetric difference of <code>self</code> and <code>rhs</code> as a new …","","","","","","","","","","","","","Constructs a new AHasher with fixed keys. If <code>std</code> is …","","Creates an empty <code>AHashSet&lt;T, S&gt;</code> with the <code>Default</code> value for …","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Examples","","","Returns the argument unchanged.","Examples","This crates a hashmap from the provided iterator using …","This crates a hashset from the provided iterator using …","Returns a reference to the value corresponding to the key.","Returns the key-value pair corresponding to the supplied …","Returns a mutable reference to the value corresponding to …","Returns a reference to the value corresponding to the …","Inserts a key-value pair into the map.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Calls <code>U::from(self)</code>.","","","","","","","Creates a consuming iterator visiting all the keys in …","Creates a consuming iterator visiting all the values in …","Constructs a new HashMap","Constructs a new HashSet","This crates a hashmap using RandomState::new which obtains …","This crates a hashset using RandomState::new. See the …","","Removes a key from the map, returning the value at the key …","Returns the difference of <code>self</code> and <code>rhs</code> as a new …","","","","","","","","","","","","","Constructs a new HashMap with a given initial capacity","Constructs a new HashSet with a given initial capacity","This crates a hashmap with the specified capacity using …","This crates a hashset with the specified capacity using …","","","","","","","","","","","","A supplier of Randomness used for different hashers. See …","Provides a Hasher factory. This is typically used (e.g. by …","","","Constructs a new AHasher with keys based on this …","","","","","Returns the argument unchanged.","","Create a new <code>RandomState</code> <code>BuildHasher</code> based on the provided …","Calculates the hash of a single value. This provides a …","Calls <code>U::from(self)</code>.","Create a new <code>RandomState</code> <code>BuildHasher</code> using random keys.","Provides an optional way to manually supply a source of …","","","","","Build a <code>RandomState</code> from a single key. The provided key …","Allows for explicitly setting the seeds to used. All …"],"i":[0,0,0,0,0,0,0,0,1,1,1,7,8,1,7,8,1,7,8,1,7,8,1,7,8,1,8,1,8,1,8,1,8,8,1,1,7,7,8,1,7,8,8,8,1,1,1,8,1,8,8,8,8,8,7,8,8,1,1,8,8,8,1,1,8,8,38,39,8,1,0,8,1,7,8,1,7,8,1,7,8,1,7,8,1,38,39,8,1,8,1,8,1,7,7,7,7,7,7,7,0,0,10,10,10,10,10,10,10,10,35,10,10,10,10,0,10,10,10,10,10,10],"f":[0,0,0,0,0,0,0,0,[[[1,[-1,-2]],[1,[-1,-2]]],[[1,[-1,-2]]],[2,3,4],[5,6]],[[[1,[-1,-2]],[1,[-1,-2]]],[[1,[-1,-2]]],[2,3,4],[5,6]],[[[1,[-1,-2]],[1,[-1,-2]]],[[1,[-1,-2]]],[2,3,4],[5,6]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[7,7],[[[8,[-1,-2,-3]]],[[8,[-1,-2,-3]]],4,4,4],[[[1,[-1,-2]]],[[1,[-1,-2]]],4,4],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[],7],[[],[[8,[-1,-2,10]]],[],[]],[[],[[1,[-1,10]]],[]],[[[8,[-1,-2,-3]]],[],[],[],[]],[[[1,[-1,-2]]],[],[],[]],[[[8,[-1,-2,-3]]],[],[],[],[]],[[[1,[-1,-2]]],[],[],[]],[[[8,[-1,-2,-3]],[8,[-1,-2,-3]]],11,[2,3],12,5],[[[1,[-1,-2]],[1,[-1,-2]]],11,[2,3],5],[[[8,[-1,-2,-3]],-4],9,[2,3,13],13,5,14],[[[8,[-1,-2,-3]],-4],9,[2,3],[],5,14],[[[1,[-1,-2]],-3],9,[2,3,13],5,14],[[[1,[-1,-2]],-3],9,[2,3],5,14],[7,15],[[7,16],17],[[[8,[-1,-2,-3]],16],17,18,18,5],[[[1,[-1,-2]],16],17,18,5],[-1,-1,[]],[-1,-1,[]],[[[19,[[9,[-1,-2]]]]],[[8,[-1,-2]]],[2,3],[]],[[[20,[-1,-2,10]]],[[8,[-1,-2]]],[],[]],[[[21,[-1,10]]],[[1,[-1]]],[]],[-1,-1,[]],[[[19,[-1]]],[[1,[-1]]],[2,3]],[-1,[[8,[-2,-3,10]]],14,[2,3],[]],[-1,[[1,[-2]]],14,[2,3]],[[[8,[-2,-3,-4]],-1],[[22,[-3]]],[3,2,23],[[24,[-1]],3,2],[],5],[[[8,[-2,-3,-4]],-1],[[22,[[9,[-2,-3]]]]],[3,2,23],[[24,[-1]],3,2],[],5],[[[8,[-2,-3,-4]],-1],[[22,[-3]]],[3,2,23],[[24,[-1]],3,2],[],5],[[[8,[-2,-3,-4]],-1],-3,[2,3,23],[2,3,[24,[-1]]],[],5],[[[8,[-1,-2,-3]],-1,-2],[[22,[-2]]],[3,2],[],5],[-1,-2,[],[]],[-1,-2,[],[]],[[[8,[-1,-2]]],[[20,[-1,-2,10]]],[],[]],[-1,-2,[],[]],[[[1,[-1]]],[[21,[-1,10]]],[]],[[[8,[-1,-2,-3]]],[],[],[],[]],[[[8,[-1,-2,-3]]],[],[],[],[]],[[[8,[-1,-2,-3]]],[],[],[],[]],[[[1,[-1,-2]]],[],[],[]],[[[1,[-1,-2]]],[],[],[]],[[[8,[-1,-2,-3]]],[[25,[-1,-2]]],[3,2],[],5],[[[8,[-1,-2,-3]]],[[26,[-1,-2]]],[3,2],[],5],[[],-1,[]],[[],-1,[]],[[],[[8,[-1,-2,10]]],[],[]],[[],[[1,[-1,10]]],[]],0,[[[8,[-2,-3,-4]],-1],[[22,[-3]]],[3,2,23],[[24,[-1]],3,2],[],5],[[[1,[-1,-2]],[1,[-1,-2]]],[[1,[-1,-2]]],[2,3,4],[5,6]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[27,[-2]]],[],[]],[-1,[[27,[-2]]],[],[]],[-1,[[27,[-2]]],[],[]],[-1,[[27,[-2]]],[],[]],[-1,[[27,[-2]]],[],[]],[-1,[[27,[-2]]],[],[]],[-1,28,[]],[-1,28,[]],[-1,28,[]],[29,-1,[]],[29,-1,[]],[29,[[8,[-1,-2,10]]],[],[]],[29,[[1,[-1,10]]],[]],[[29,-1],[[8,[-2,-3,-1]]],5,[],[]],[[29,-1],[[1,[-2,-1]]],5,[]],[-1,[[8,[-2,-3,-1]]],5,[],[]],[-1,[[1,[-2,-1]]],5,[]],[[7,[31,[30]]],9],[[7,32],9],[[7,33],9],[[7,34],9],[[7,15],9],[[7,30],9],[[7,29],9],0,0,[-1,-2,[],[]],[-1,-2,[],[]],[10,7],[10,10],[[-1,-2],9,[],[]],[[],10],[[10,16],17],[-1,-1,[]],[-1,29,[]],[[15,15,15,15],10],[[10,-1],15,3],[-1,-2,[],[]],[[],10],[-1,[[27,[9,11]]],[35,36,37]],[-1,-2,[],[]],[-1,[[27,[-2]]],[],[]],[-1,[[27,[-2]]],[],[]],[-1,28,[]],[29,10],[[15,15,15,15],10]],"c":[],"p":[[3,"AHashSet",0],[8,"Eq",122],[8,"Hash",123],[8,"Clone",124],[8,"BuildHasher",123],[8,"Default",125],[3,"AHasher",0],[3,"AHashMap",0],[15,"tuple"],[3,"RandomState",100],[15,"bool"],[8,"PartialEq",122],[8,"Copy",126],[8,"IntoIterator",127],[15,"u64"],[3,"Formatter",128],[6,"Result",128],[8,"Debug",128],[15,"array"],[3,"HashMap",129],[3,"HashSet",130],[4,"Option",131],[8,"Sized",126],[8,"Borrow",132],[3,"IntoKeys",129],[3,"IntoValues",129],[4,"Result",133],[3,"TypeId",134],[15,"usize"],[15,"u8"],[15,"slice"],[15,"u128"],[15,"u16"],[15,"u32"],[8,"RandomSource",100],[8,"Send",126],[8,"Sync",126],[8,"HashMapExt",0],[8,"HashSetExt",0]],"b":[[32,"impl-Extend%3C(%26K,+%26V)%3E-for-AHashMap%3CK,+V,+S%3E"],[33,"impl-Extend%3C(K,+V)%3E-for-AHashMap%3CK,+V,+S%3E"],[34,"impl-Extend%3C%26T%3E-for-AHashSet%3CT,+S%3E"],[35,"impl-Extend%3CT%3E-for-AHashSet%3CT,+S%3E"],[42,"impl-From%3C%5B(K,+V);+N%5D%3E-for-AHashMap%3CK,+V%3E"],[43,"impl-From%3CHashMap%3CK,+V,+RandomState%3E%3E-for-AHashMap%3CK,+V%3E"],[44,"impl-From%3CHashSet%3CT,+RandomState%3E%3E-for-AHashSet%3CT%3E"],[46,"impl-From%3C%5BT;+N%5D%3E-for-AHashSet%3CT%3E"],[59,"impl-IntoIterator-for-%26AHashMap%3CK,+V,+S%3E"],[60,"impl-IntoIterator-for-AHashMap%3CK,+V,+S%3E"],[61,"impl-IntoIterator-for-%26mut+AHashMap%3CK,+V,+S%3E"],[62,"impl-IntoIterator-for-%26AHashSet%3CT,+S%3E"],[63,"impl-IntoIterator-for-AHashSet%3CT,+S%3E"]]},\
"alloc_no_stdlib":{"doc":"","t":"QIDIENDNNIIDKLOLLLLLLLLFMOLOOOOLLLLKLMMLLLLLLLLAMLLLLLLMLMMKLKLOMLLLLLLLLLLLLF","n":["AllocatedMemory","AllocatedSlice","AllocatedStackMemory","Allocator","AllocatorC","Calloc","CallocBackingStore","Custom","Malloc","SliceWrapper","SliceWrapperMut","StackAllocator","alloc_cell","alloc_cell","bind_global_buffers_to_allocator","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","bzero","data","declare_stack_allocator_struct","default","define_allocator_memory_pool","define_index_ops","define_index_ops_mut","define_stack_allocator_traits","deref","deref_mut","drop","fmt","free_cell","free_cell","free_list_overflow_count","free_list_start","from","from","from","from","index","index","index_mut","index_mut","init","initialize","into","into","into","into","len","len","mem","new","nop","raw_data","slice","slice","slice_mut","slice_mut","static_array","system_resources","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","uninitialized"],"q":[[0,"alloc_no_stdlib"],[78,"core::default"],[79,"core::fmt"],[80,"core::fmt"],[81,"core::result"],[82,"core::any"]],"d":["","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[17,0,0,0,0,13,0,13,13,0,0,0,17,2,0,2,3,13,8,2,3,13,8,0,8,0,3,0,0,0,0,3,3,8,8,17,2,2,2,2,3,13,8,3,3,3,3,0,2,2,3,13,8,18,18,3,8,2,8,18,3,19,3,0,2,2,3,13,8,2,3,13,8,2,3,13,8,0],"f":[0,0,0,0,0,0,0,0,0,0,0,0,[[-1,1],[],[]],[[[2,[-1,-2]],1],[[3,[-1]]],[],[[5,[[4,[-1]]]]]],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[4,[-1]]],6,7],0,0,[[],[[3,[-1]]],[]],0,0,0,0,[[[3,[-1]]],[[4,[-1]]],[]],[[[3,[-1]]],[[4,[-1]]],[]],[[[8,[-1]]],6,[]],[[[8,[-1]],9],10,11],[-1,6,[]],[[[2,[-1,-2]],[3,[-1]]],6,[],[[5,[[4,[-1]]]]]],0,0,[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[[3,[-1]],1],[],[]],[[[3,[-1]],[12,[1]]],[],[]],[[[3,[-1]],[12,[1]]],[],[]],[[[3,[-1]],1],[],[]],0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,1,[]],[-1,1,[]],0,[[1,13,14],[[8,[-1]]],[]],0,0,[-1,[[4,[-2]]],[],[]],[[[3,[-1]]],[[4,[-1]]],[]],[-1,[[4,[-2]]],[],[]],[[[3,[-1]]],[[4,[-1]]],[]],0,0,[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,16,[]],[-1,16,[]],[-1,16,[]],[-1,16,[]],[[[4,[-1]]],6,[]]],"c":[],"p":[[15,"usize"],[3,"StackAllocator",0],[3,"AllocatedStackMemory",0],[15,"slice"],[8,"AllocatedSlice",0],[15,"tuple"],[8,"Default",78],[3,"CallocBackingStore",0],[3,"Formatter",79],[6,"Result",79],[8,"Debug",79],[3,"Range",80],[4,"AllocatorC",0],[15,"bool"],[4,"Result",81],[3,"TypeId",82],[8,"Allocator",0],[8,"SliceWrapper",0],[8,"SliceWrapperMut",0]],"b":[[43,"impl-Index%3Cusize%3E-for-AllocatedStackMemory%3C\'a,+T%3E"],[44,"impl-Index%3CRange%3Cusize%3E%3E-for-AllocatedStackMemory%3C\'a,+T%3E"],[45,"impl-IndexMut%3CRange%3Cusize%3E%3E-for-AllocatedStackMemory%3C\'a,+T%3E"],[46,"impl-IndexMut%3Cusize%3E-for-AllocatedStackMemory%3C\'a,+T%3E"]]},\
"alloc_stdlib":{"doc":"","t":"QDICCIIDCKLLLLLLLLKLMMLLALLLLMLLLMMKLKLAMLLLLLLDGDDLLLLLLLLLLMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDLLLLLLLLLLLLLL","n":["AllocatedMemory","AllocatedStackMemory","Allocator","HeapAlloc","HeapPrealloc","SliceWrapper","SliceWrapperMut","StackAllocator","StandardAlloc","alloc_cell","alloc_cell","borrow","borrow","borrow_mut","borrow_mut","default","deref","deref_mut","free_cell","free_cell","free_list_overflow_count","free_list_start","from","from","heap_alloc","index","index","index_mut","index_mut","initialize","into","into","len","mem","nop","slice","slice","slice_mut","slice_mut","std_alloc","system_resources","try_from","try_from","try_into","try_into","type_id","type_id","HeapAlloc","HeapAllocUninitialized","HeapPrealloc","WrapBox","alloc_cell","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","default","default","default","default_value","default_value","free_cell","from","from","from","from","index","index","index","index_mut","index_mut","index_mut","into","into","into","into","new","new_allocator","slice","slice","slice_mut","slice_mut","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","StandardAlloc","alloc_cell","borrow","borrow_mut","clone","clone_into","default","fmt","free_cell","from","into","to_owned","try_from","try_into","type_id"],"q":[[0,"alloc_stdlib"],[47,"alloc_stdlib::heap_alloc"],[93,"alloc_stdlib::std_alloc"],[108,"alloc_no_stdlib::allocated_memory"],[109,"core::ops::range"],[110,"core::result"],[111,"core::any"],[112,"core::clone"],[113,"core::default"],[114,"alloc::vec"],[115,"alloc::boxed"],[116,"core::fmt"],[117,"core::fmt"]],"d":["","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","Calls <code>U::from(self)</code>.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","",""],"i":[20,0,0,0,0,0,0,0,0,20,2,2,3,2,3,3,3,3,20,2,2,2,2,3,0,3,3,3,3,2,2,3,21,3,2,21,3,22,3,0,2,2,3,2,3,2,3,0,0,0,0,10,11,10,14,11,10,14,11,10,14,10,23,10,11,11,10,14,11,11,14,11,11,14,11,11,10,14,10,14,11,14,11,14,11,10,14,11,10,14,11,10,14,0,17,17,17,17,17,17,17,17,17,17,17,17,17,17],"f":[0,0,0,0,0,0,0,0,0,[[-1,1],[],[]],[[[2,[-1,-2]],1],[[3,[-1]]],[],[[5,[[4,[-1]]]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[],[[3,[-1]]],[]],[[[3,[-1]]],[[4,[-1]]],[]],[[[3,[-1]]],[[4,[-1]]],[]],[-1,6,[]],[[[2,[-1,-2]],[3,[-1]]],6,[],[[5,[[4,[-1]]]]]],0,0,[-1,-1,[]],[-1,-1,[]],0,[[[3,[-1]],[7,[1]]],[],[]],[[[3,[-1]],1],[],[]],[[[3,[-1]],1],[],[]],[[[3,[-1]],[7,[1]]],[],[]],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,1,[]],0,0,[-1,[[4,[-2]]],[],[]],[[[3,[-1]]],[[4,[-1]]],[]],[-1,[[4,[-2]]],[],[]],[[[3,[-1]]],[[4,[-1]]],[]],0,0,[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,9,[]],[-1,9,[]],0,0,0,0,[[[10,[-1]],1],[[11,[-1]]],12],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[],[[11,[-1]]],[]],[[],[[10,[-1]]],[12,13]],[[],[[14,[-1]]],[]],0,0,[[[10,[-1]],[11,[-1]]],6,12],[[[15,[-1]]],[[11,[-1]]],[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[[11,[-1]],1],-1,[]],[[[11,[-1]],[7,[1]]],[[4,[-1]]],[]],[[[14,[-1]],1],[[4,[-1]]],[]],[[[11,[-1]],1],-1,[]],[[[11,[-1]],[7,[1]]],[[4,[-1]]],[]],[[[14,[-1]],1],[[4,[-1]]],[]],[-1,-2,[],[]],[[[11,[-1]]],[[16,[[4,[-1]]]]],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[10,[-1]]],12],[[1,[16,[[4,[-1]]]]],[[2,[-1,[14,[-1]]]]],12],[[[11,[-1]]],[[4,[-1]]],[]],[[[14,[-1]]],[[4,[[4,[-1]]]]],[]],[[[11,[-1]]],[[4,[-1]]],[]],[[[14,[-1]]],[[4,[[4,[-1]]]]],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,9,[]],[-1,9,[]],[-1,9,[]],0,[[17,1],[[11,[-1]]],[12,13]],[-1,-2,[],[]],[-1,-2,[],[]],[17,17],[[-1,-2],6,[],[]],[[],17],[[17,18],19],[[17,[11,[-1]]],6,[12,13]],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,9,[]]],"c":[48],"p":[[15,"usize"],[3,"StackAllocator",0],[3,"AllocatedStackMemory",0],[15,"slice"],[8,"AllocatedSlice",108],[15,"tuple"],[3,"Range",109],[4,"Result",110],[3,"TypeId",111],[3,"HeapAlloc",47],[3,"WrapBox",47],[8,"Clone",112],[8,"Default",113],[3,"HeapPrealloc",47],[3,"Vec",114],[3,"Box",115],[3,"StandardAlloc",93],[3,"Formatter",116],[6,"Result",116],[8,"Allocator",0],[8,"SliceWrapper",0],[8,"SliceWrapperMut",0],[6,"HeapAllocUninitialized",47]],"b":[[25,"impl-Index%3CRange%3Cusize%3E%3E-for-AllocatedStackMemory%3C\'a,+T%3E"],[26,"impl-Index%3Cusize%3E-for-AllocatedStackMemory%3C\'a,+T%3E"],[27,"impl-IndexMut%3Cusize%3E-for-AllocatedStackMemory%3C\'a,+T%3E"],[28,"impl-IndexMut%3CRange%3Cusize%3E%3E-for-AllocatedStackMemory%3C\'a,+T%3E"],[68,"impl-Index%3Cusize%3E-for-WrapBox%3CT%3E"],[69,"impl-Index%3CRange%3Cusize%3E%3E-for-WrapBox%3CT%3E"],[71,"impl-IndexMut%3Cusize%3E-for-WrapBox%3CT%3E"],[72,"impl-IndexMut%3CRange%3Cusize%3E%3E-for-WrapBox%3CT%3E"]]},\
"base64":{"doc":"Configs","t":"RRNNREDNERNNNNRRNRRNLLLLLLLLLLLLLFLFFFLAFFFFLLLLLLLLLLLLLALLLLLLLLLLLLLADLLLLLLLLLLDLLLLLLLLLLDDLLLLLLLLLLLLLLLLLLLLLLLLL","n":["BCRYPT","BINHEX","Bcrypt","BinHex","CRYPT","CharacterSet","Config","Crypt","DecodeError","IMAP_MUTF7","ImapMutf7","InvalidByte","InvalidLastSymbol","InvalidLength","STANDARD","STANDARD_NO_PAD","Standard","URL_SAFE","URL_SAFE_NO_PAD","UrlSafe","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","cause","clone","clone","clone","clone_into","clone_into","clone_into","decode","decode_allow_trailing_bits","decode_config","decode_config_buf","decode_config_slice","description","display","encode","encode_config","encode_config_buf","encode_config_slice","eq","fmt","fmt","fmt","fmt","from","from","from","into","into","into","new","pad","read","to_owned","to_owned","to_owned","to_string","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","write","Base64Display","borrow","borrow_mut","fmt","from","into","to_string","try_from","try_into","type_id","with_config","DecoderReader","borrow","borrow_mut","fmt","from","into","new","read","try_from","try_into","type_id","EncoderStringWriter","EncoderWriter","borrow","borrow","borrow_mut","borrow_mut","drop","finish","flush","flush","fmt","from","from","from","into","into","into_inner","new","new","try_from","try_from","try_into","try_into","type_id","type_id","write","write"],"q":[[0,"base64"],[72,"base64::display"],[83,"base64::read"],[94,"base64::write"],[121,"core::error"],[122,"core::option"],[123,"alloc::vec"],[124,"core::result"],[125,"core::convert"],[126,"alloc::string"],[127,"core::fmt"],[128,"core::fmt"],[129,"core::fmt"],[130,"std::io::error"],[131,"std::io"]],"d":["Bcrypt character set","BinHex character set","The bcrypt character set (uses …","The character set used in BinHex 4.0 files.","As per <code>crypt(3)</code> requirements","Available encoding character sets","Contains configuration parameters for base64 encoding","The <code>crypt(3)</code> character set (uses …","Errors that can occur while decoding.","IMAP modified UTF-7 requirements","The character set used in IMAP-modified UTF-7 (uses <code>+</code> and <code>,</code>…","An invalid byte was found in the input. The offset and …","The last non-padding input symbol’s encoded 6 bits have …","The length of the input is invalid. A typical cause of …","Standard character set with padding.","Standard character set without padding.","The standard character set (uses <code>+</code> and <code>/</code>).","URL-safe character set with padding","URL-safe character set without padding","The URL safe character set (uses <code>-</code> and <code>_</code>).","","","","","","","","","","","","","","Decode from string reference as octets. Returns a Result …","Sets whether to emit errors for nonzero trailing bits.","Decode from string reference as octets. Returns a Result …","Decode from string reference as octets. Writes into the …","Decode the input into the provided output slice.","","Enables base64’d output anywhere you might use a <code>Display</code> …","Encode arbitrary octets as base64. Returns a String. …","Encode arbitrary octets as base64. Returns a String.","Encode arbitrary octets as base64. Writes into the …","Encode arbitrary octets as base64. Writes into the …","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Create a new <code>Config</code>.","Sets whether to pad output with <code>=</code> characters.","Implementations of <code>io::Read</code> to transparently decode base64.","","","","","","","","","","","","","","Implementations of <code>io::Write</code> to transparently handle …","A convenience wrapper for base64’ing bytes into a format …","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","Create a <code>Base64Display</code> with the provided config.","A <code>Read</code> implementation that decodes base64 data read from …","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Create a new decoder that will read from the provided …","Decode input from the wrapped reader.","","","","A <code>Write</code> implementation that base64-encodes data using the …","A <code>Write</code> implementation that base64 encodes data before …","","","","","","Encode all remaining buffered data and write it, including …","Because this is usually treated as OK to call multiple …","","","Returns the argument unchanged.","Create a EncoderStringWriter that will append to the …","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Encode all remaining buffered data, including any trailing …","Create a new encoder that will write to the provided …","Create a EncoderStringWriter that will encode into a new …","","","","","","","Encode input and then write to the delegate writer.",""],"i":[0,0,4,4,0,0,0,4,0,0,4,1,1,1,0,0,4,0,0,4,1,4,5,1,4,5,1,1,4,5,1,4,5,0,5,0,0,0,1,0,0,0,0,0,1,1,1,4,5,1,4,5,1,4,5,5,5,0,1,4,5,1,1,4,5,1,4,5,1,4,5,0,0,19,19,19,19,19,19,19,19,19,19,0,21,21,21,21,21,21,21,21,21,21,0,0,24,26,24,26,24,24,24,26,24,24,26,26,24,26,26,24,26,24,26,24,26,24,26,24,26],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[1,[[3,[2]]]],[1,1],[4,4],[5,5],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[-1,[[9,[[8,[7]],1]]],[[11,[[10,[7]]]]]],[[5,12],5],[[-1,5],[[9,[[8,[7]],1]]],[[11,[[10,[7]]]]]],[[-1,5,[8,[7]]],[[9,[6,1]]],[[11,[[10,[7]]]]]],[[-1,5,[10,[7]]],[[9,[13,1]]],[[11,[[10,[7]]]]]],[1,14],0,[-1,15,[[11,[[10,[7]]]]]],[[-1,5],15,[[11,[[10,[7]]]]]],[[-1,5,15],6,[[11,[[10,[7]]]]]],[[-1,5,[10,[7]]],13,[[11,[[10,[7]]]]]],[[1,1],12],[[1,16],17],[[1,16],17],[[4,16],17],[[5,16],17],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[4,12],5],[[5,12],5],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,15,[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,18,[]],[-1,18,[]],[-1,18,[]],0,0,[-1,-2,[],[]],[-1,-2,[],[]],[[19,16],[[9,[6,20]]]],[-1,-1,[]],[-1,-2,[],[]],[-1,15,[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,18,[]],[[[10,[7]],5],19],0,[-1,-2,[],[]],[-1,-2,[],[]],[[[21,[-1]],16],17,22],[-1,-1,[]],[-1,-2,[],[]],[[-1,5],[[21,[-1]]],22],[[[21,[-1]],[10,[7]]],[[23,[13]]],22],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,18,[]],0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[24,[-1]]],6,25],[[[24,[-1]]],[[23,[-1]]],25],[[[24,[-1]]],[[23,[6]]],25],[[[26,[-1]]],[[23,[6]]],0],[[[24,[-1]],16],17,25],[-1,-1,[]],[[-1,5],[[26,[-1]]],0],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[26,[-1]]],-1,0],[[-1,5],[[24,[-1]]],25],[5,[[26,[15]]]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,18,[]],[-1,18,[]],[[[24,[-1]],[10,[7]]],[[23,[13]]],25],[[[26,[-1]],[10,[7]]],[[23,[13]]],0]],"c":[],"p":[[4,"DecodeError",0],[8,"Error",121],[4,"Option",122],[4,"CharacterSet",0],[3,"Config",0],[15,"tuple"],[15,"u8"],[3,"Vec",123],[4,"Result",124],[15,"slice"],[8,"AsRef",125],[15,"bool"],[15,"usize"],[15,"str"],[3,"String",126],[3,"Formatter",127],[6,"Result",127],[3,"TypeId",128],[3,"Base64Display",72],[3,"Error",127],[3,"DecoderReader",83],[8,"Read",129],[6,"Result",130],[3,"EncoderWriter",94],[8,"Write",129],[3,"EncoderStringWriter",94]],"b":[[45,"impl-Debug-for-DecodeError"],[46,"impl-Display-for-DecodeError"]]},\
"bitvec":{"doc":"<code>bitvec</code>","t":"OAAOOOOAAAAAAAAAAAAAIIDDDDDQQSLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDDSMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLEENNDNNLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMMMILKKLKKSDDDDDDSSSSSSSLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLSISSFFICDDKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFFCCOCCCCCCCCCCCCCCCOOOODEDDESDSSDNNDINNSSSNNLLLLLLLLFFLLLLLLLLLLLLLLLLLFLLLLLLLLLLLLLLLLLLLLLLLLLFLLFLLLLLLLLLFLMLFLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFFLLLLLLLLLLLLLLFLFLFLFLLLLFFMLLFLLFLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFLFFFLFLGDIDDDDDDDQDDDDDSSQDDDDDDDDDDDDDDDDDDDDDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFFFFFFLLLLKLKLKLKLLKLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLSSQQIQQSLKKKDDSCDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLIIIIQSKKKKLKKKKKK","n":["BitArr","access","array","bitarr","bitbox","bits","bitvec","boxed","domain","field","index","macros","mem","order","prelude","ptr","slice","store","vec","view","BitAccess","BitSafe","BitSafeU16","BitSafeU32","BitSafeU64","BitSafeU8","BitSafeUsize","Mem","Rad","ZERO","as_raw_mut_slice","as_raw_mut_slice","as_raw_mut_slice","as_raw_mut_slice","as_raw_mut_slice","as_raw_slice","as_raw_slice","as_raw_slice","as_raw_slice","as_raw_slice","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clear_bits","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","get_writers","into","into","into","into","into","invert_bits","load","load","load","load","load","load","load_value","load_value","load_value","load_value","load_value","new","new","new","new","new","set_bits","store_value","store_value","store_value","store_value","store_value","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_view_bits","try_view_bits","try_view_bits","try_view_bits","try_view_bits","try_view_bits_mut","try_view_bits_mut","try_view_bits_mut","try_view_bits_mut","try_view_bits_mut","type_id","type_id","type_id","type_id","type_id","view_bits","view_bits","view_bits","view_bits","view_bits","view_bits_mut","view_bits_mut","view_bits_mut","view_bits_mut","view_bits_mut","write_bit","BitArray","IntoIter","ZERO","_ord","as_bitslice","as_bitslice","as_mut","as_mut_bitslice","as_mut_bitslice","as_mut_slice","as_mut_slice","as_raw_mut_slice","as_raw_slice","as_ref","as_slice","as_slice","bitand","bitand_assign","bitor","bitor_assign","bitxor","bitxor_assign","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","cmp","count","data","default","deref","deref_mut","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","hash","index","index_mut","into","into","into_inner","into_iter","into_iter","into_iter","into_iter","is_empty","last","len","len","load_be","load_le","new","new","next","next_back","not","nth","nth_back","partial_cmp","size_hint","store_be","store_le","to_owned","to_owned","to_string","try_from","try_from","try_from","try_from","try_from","try_into","try_into","type_id","type_id","BitBox","IntoIter","as_bitslice","as_bitslice","as_mut","as_mut_bitslice","as_mut_bitslice","as_raw_mut_slice","as_raw_slice","as_ref","as_ref","bitand","bitand_assign","bitor","bitor_assign","bitxor","bitxor_assign","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","cmp","count","default","deref","deref_mut","drop","eq","fill_uninitialized","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","force_align","from","from","from","from","from","from","from","from_bitslice","from_boxed_slice","from_iter","from_raw","hash","index","index_mut","into","into","into_bitvec","into_boxed_slice","into_iter","into_iter","into_raw","last","leak","len","load_be","load_le","next","next_back","not","nth","nth_back","partial_cmp","size_hint","store_be","store_le","to_owned","to_owned","to_string","try_from","try_from","try_from","try_from_boxed_slice","try_into","try_into","type_id","type_id","BitDomain","Domain","Enclave","Enclave","PartialElement","Region","Region","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","bounds","clear","clone","clone","clone","clone_into","clone_into","clone_into","default","default","enclave","enclave","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","hash","head","into","into","into","into_bit_domain","into_bitslice","into_iter","invert","len","load_value","mask","next","next_back","region","region","set","store_value","store_value_aliased","tail","to_owned","to_owned","to_owned","to_string","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","body","head","tail","body","head","tail","BitField","load","load_be","load_le","store","store_be","store_le","ALL","BitEnd","BitIdx","BitIdxError","BitMask","BitPos","BitSel","MAX","MAX","MAX","MIN","MIN","MIN","ZERO","bitand","bitor","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmp","cmp","cmp","cmp","cmp","combine","default","default","default","default","default","default","eq","eq","eq","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","hash","hash","hash","hash","hash","hash","insert","into","into","into","into","into","into","into_inner","into_inner","into_inner","into_inner","into_inner","into_inner","mask","mask","mask","new","new","new","new","new","new_unchecked","new_unchecked","new_unchecked","next","not","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","position","prev","range","range_all","range_all","range_from","select","select","sum","test","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","ALL","BitRegister","INDX","MASK","bits_of","elts","BitOrder","LocalBits","Lsb0","Msb0","at","at","at","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","cmp","cmp","default","default","eq","eq","fmt","fmt","from","from","hash","hash","into","into","mask","mask","mask","partial_cmp","partial_cmp","select","select","select","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","verify","verify_for_type","AsBits","AsMutBits","BitArr","BitArray","BitBox","BitOrder","BitPtr","BitPtrRange","BitRef","BitSlice","BitStore","BitVec","LocalBits","Lsb0","Msb0","_","_","_","bitarr","bitbox","bits","bitvec","BitPtr","BitPtrError","BitPtrRange","BitRef","BitSpanError","CONTAINS_MUTABILITY","Const","DANGLING","EMPTY","MisalignError","Misaligned","Misaligned","Mut","Mutability","Null","Null","PEANO_NUMBER","RENDER","SELF","TooHigh","TooLong","add","address","align_offset","as_mut","as_mut","as_ref","as_ref","bit","bitslice_from_raw_parts","bitslice_from_raw_parts_mut","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","cast","check_alignment","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmp","cmp","cmp","cmp","cmp","cmp","commit","contains","copy","copy_from","copy_from_nonoverlapping","copy_nonoverlapping","copy_to","copy_to_nonoverlapping","count","default","default","default","deref","deref_mut","drop","drop_in_place","drop_in_place","end","end_bound","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","freeze","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_bitptr","from_mut","from_mut_slice","from_range","from_ref","from_slice","from_slice_mut","hash","hash","hash","hash","hash","hash","hash","hash","hash","into","into","into","into","into","into","into","into","into_bitptr","into_iter","into_range","is_empty","is_null","last","len","new","new_unchecked","next","next_back","not","nth","nth_back","null","null_mut","offset","offset_from","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","pointer","pointer","raw_parts","read","read","read_unaligned","read_unaligned","read_volatile","read_volatile","replace","replace","replace","set","size_hint","slice_from_raw_parts","slice_from_raw_parts_mut","start","start_bound","sub","swap","swap","swap","swap_nonoverlapping","thaw","to_const","to_mut","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_raw_parts","to_string","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","wrapping_add","wrapping_offset","wrapping_sub","write","write","write_bits","write_bytes","write_unaligned","write_unaligned","write_volatile","write_volatile","BitRefIter","BitSlice","BitSliceIndex","BitValIter","Chunks","ChunksExact","ChunksExactMut","ChunksExactMutNoAlias","ChunksMut","ChunksMutNoAlias","Immut","Iter","IterMut","IterMutNoAlias","IterOnes","IterZeros","MAX_BITS","MAX_ELTS","Mut","RChunks","RChunksExact","RChunksExactMut","RChunksExactMutNoAlias","RChunksMut","RChunksMutNoAlias","RSplit","RSplitMut","RSplitMutNoAlias","RSplitN","RSplitNMut","RSplitNMutNoAlias","Split","SplitInclusive","SplitInclusiveMut","SplitInclusiveMutNoAlias","SplitMut","SplitMutNoAlias","SplitN","SplitNMut","SplitNMutNoAlias","Windows","align_to","align_to_mut","all","any","as_bitptr","as_bitptr_range","as_bitslice","as_bitslice","as_mut","as_mut_bitptr","as_mut_bitptr_range","as_mut_ptr","as_mut_ptr_range","as_ptr","as_ptr_range","as_ref","as_ref","as_ref","as_slice","as_slice","bit_domain","bit_domain_mut","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","by_refs","by_vals","chunks","chunks_exact","chunks_exact_mut","chunks_mut","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_from_bitslice","clone_from_slice","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmp","cmp","contains","copied","copy_from_bitslice","copy_from_slice","copy_within","copy_within_unchecked","count","count","count","count","count","count","count","count","count","count","count","count","count","count","count","count","count","count","count","count","count","count","count","count","count_ones","count_zeros","default","default","default","default","domain","domain_mut","empty","empty_mut","ends_with","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","fill","fill_with","first","first_mut","first_one","first_zero","flush","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_element","from_element_mut","from_mut","from_raw_parts","from_raw_parts_mut","from_raw_parts_unchecked","from_raw_parts_unchecked_mut","from_ref","from_slice","from_slice_mut","from_slice_unchecked","from_slice_unchecked_mut","get","get","get_mut","get_mut","get_unchecked","get_unchecked","get_unchecked_mut","get_unchecked_mut","hash","index","index","index","index","index","index","index","index","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_bitslice","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_remainder","into_remainder","into_remainder","into_remainder","into_slice","is_empty","iter","iter_mut","iter_ones","iter_zeros","last","last","last","last","last","last","last","last","last","last","last","last","last","last","last","last","last","last","last","last","last","last","last","last","last","last_mut","last_one","last_zero","leading_ones","leading_zeros","len","len","len","len","len","len","len","len","len","len","len","len","len","len","len","len","len","len","len","len","len","len","len","len","len","load_be","load_be","load_le","load_le","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","not","not_all","not_any","nth","nth","nth","nth","nth","nth","nth","nth","nth","nth","nth","nth","nth","nth","nth","nth","nth","nth","nth","nth","nth","nth","nth_back","nth_back","nth_back","nth_back","nth_back","nth_back","nth_back","nth_back","nth_back","nth_back","nth_back","nth_back","nth_back","nth_back","nth_back","nth_back","nth_back","nth_back","nth_back","nth_back","nth_back","nth_back","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","rchunks","rchunks_exact","rchunks_exact_mut","rchunks_mut","read","remainder","remainder","remove_alias","remove_alias","remove_alias","remove_alias","remove_alias","remove_alias","remove_alias","remove_alias","remove_alias","remove_alias","repeat","replace","replace_unchecked","reverse","rotate_left","rotate_right","rsplit","rsplit_mut","rsplitn","rsplitn_mut","set","set_aliased","set_aliased_unchecked","set_unchecked","shift_left","shift_right","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","some","split","split_at","split_at_mut","split_at_unchecked","split_at_unchecked_mut","split_first","split_first_mut","split_inclusive","split_inclusive_mut","split_last","split_last_mut","split_mut","splitn","splitn_mut","starts_with","store_be","store_be","store_le","store_le","strip_prefix","strip_suffix","swap","swap_unchecked","swap_with_bitslice","swap_with_slice","take_remainder","take_remainder","take_remainder","take_remainder","to_bitvec","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_vec","trailing_ones","trailing_zeros","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from_slice","try_from_slice_mut","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","windows","write","ALIAS_WIDTH","ALIGNED_TO_SIZE","Access","Alias","BitStore","Mem","Unalias","ZERO","get_bit","load_value","new","store_value","BitVec","Drain","EMPTY","IntoIter","Splice","append","as_bitptr","as_bitslice","as_bitslice","as_mut","as_mut","as_mut_bitptr","as_mut_bitslice","as_mut_ptr","as_mut_slice","as_ptr","as_raw_mut_slice","as_raw_slice","as_ref","as_ref","as_ref","as_slice","as_slice","bitand","bitand_assign","bitor","bitor_assign","bitxor","bitxor_assign","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","capacity","clear","clone","clone_into","cmp","count","count","default","deref","deref_mut","drain","drop","drop","drop","eq","extend","extend","extend","extend","extend","extend_from_bitslice","extend_from_raw_slice","extend_from_slice","extend_from_within","flush","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","force_align","from","from","from","from","from","from","from","from","from_bitslice","from_element","from_iter","from_iter","from_iter","from_iter","from_iter","from_raw_parts","from_slice","from_vec","hash","index","index_mut","insert","into","into","into","into_boxed_bitslice","into_boxed_slice","into_iter","into_iter","into_iter","into_iter","into_iter","into_raw_parts","into_vec","is_empty","last","last","leak","len","len","len","load_be","load_le","new","next","next","next_back","next_back","not","nth","nth_back","nth_back","partial_cmp","pop","push","read","remove","repeat","reserve","reserve_exact","resize","resize_with","retain","set_elements","set_len","set_uninitialized","shrink_to_fit","size_hint","size_hint","splice","split_off","store_be","store_le","swap_remove","to_owned","to_string","truncate","try_from","try_from","try_from","try_from","try_from_slice","try_from_vec","try_into","try_into","try_into","type_id","type_id","type_id","with_capacity","write","AsBits","AsMutBits","BitView","BitViewSized","Store","ZERO","as_bits","as_mut_bits","as_raw_mut_slice","as_raw_slice","into_bitarray","try_as_bits","try_as_mut_bits","try_view_bits","try_view_bits_mut","view_bits","view_bits_mut"],"q":[[0,"bitvec"],[20,"bitvec::access"],[126,"bitvec::array"],[215,"bitvec::boxed"],[305,"bitvec::domain"],[374,"bitvec::domain::BitDomain"],[377,"bitvec::domain::Domain"],[380,"bitvec::field"],[387,"bitvec::index"],[547,"bitvec::mem"],[553,"bitvec::order"],[600,"bitvec::prelude"],[622,"bitvec::ptr"],[881,"bitvec::slice"],[1730,"bitvec::store"],[1742,"bitvec::vec"],[1905,"bitvec::view"],[1922,"core::fmt"],[1923,"core::fmt"],[1924,"core::any"],[1925,"core::clone"],[1926,"core::cmp"],[1927,"core::marker"],[1928,"core::hash"],[1929,"core::option"],[1930,"funty"],[1931,"alloc::string"],[1932,"core::cmp"],[1933,"alloc::borrow"],[1934,"core::iter::traits::collect"],[1935,"core::cmp"],[1936,"radium"],[1937,"core::cmp"],[1938,"core::hash"],[1939,"core::iter::traits::double_ended"],[1940,"core::iter::traits::exact_size"],[1941,"core::iter::traits::marker"],[1942,"core::convert"],[1943,"wyz::comu"],[1944,"core::fmt"],[1945,"wyz::range"],[1946,"std::io::error"],[1947,"core::ops::range"]],"d":["Bit-Array Type Definition","Memory Bus Access Management","Statically-Allocated, Fixed-Size, Bit Buffer","Bit-Array Value Constructor","Boxed Bit-Slice Constructor","Bit-Slice Region Constructor","Bit-Vector Constructor","Heap-Allocated, Fixed-Size, Bit Buffer","Memory Region Description","Bit-Field Memory Slots","Bit Indices","Constructor Macros","Memory Element Descriptions","In-Element Bit Ordering","Symbol Export","Raw Pointer Implementation","Bit-Addressable Memory Regions","Storage Memory Description","Dynamically-Allocated, Adjustable-Size, Bit Buffer","Bit View Adapters","Bit-Level Access Instructions","Read-Only Semivolatile Handle","Read-Only Shared-Mutable Handle","Read-Only Shared-Mutable Handle","Read-Only Shared-Mutable Handle","Read-Only Shared-Mutable Handle","Read-Only Shared-Mutable Handle","The element type being guarded against improper mutation.","The memory-access type this guards.","The zero constant.","","","","","","","","","","","","","","","","","","","","","Clears bits within a memory element to <code>0</code>.","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Gets the function that will write <code>value</code> into all bits …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Inverts bits within a memory element.","Loads the value from memory, allowing for the possibility …","","","","","","","","","","","","","","","","Sets bits within a memory element to <code>1</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Writes a value to one bit in a memory element, returning …","Bit-Precision Array Immediate","Bit-Array Iteration","A bit-array with all bits initialized to zero.","The ordering of bits within an <code>A::Store</code> element.","Explicitly views the bit-array as a bit-slice.","Views the remaining unyielded bits in the iterator.","","Explicitly views the bit-array as a mutable bit-slice.","Mutably views the remaining unyielded bits in the iterator.","Returns a mutable bit-slice containing the entire …","","Views the bit-array as a mutable slice of its underlying …","Views the bit-array as a slice of its underlying memory …","","Returns a bit-slice containing the entire bit-array. …","","","","","","","","","","","","","","","","","","","","The wrapped data buffer.","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Removes the bit-array wrapper, returning the contained …","","","","","Tests whether the array is empty.","","Gets the length (in bits) of the bit-array.","","","","Wraps an existing buffer as a bit-array.","Converts a bit-array into its iterator.","","","","","","","","","","","","","","","","","","","","","","Fixed-Size, Heap-Allocated, Bit Slice","An iterator over a <code>BitBox</code>.","Views the remaining unyielded bits as a bit-slice.","Explicitly views the bit-box as a bit-slice.","","Views the remaining unyielded bits as a mutable bit-slice.","Explicitly views the bit-box as a mutable bit-slice.","Views the bit-box as a mutable slice of its underlying …","Views the bit-box as a slice of its underlying memory …","","","","","","","","","","","","","","","","","","","","","","","","","","Sets the unused bits outside the <code>BitBox</code> buffer to a fixed …","","","","","","","","","Ensures that the allocated buffer has no dead bits between …","Returns the argument unchanged.","","Returns the argument unchanged.","","","","","Copies a bit-slice region into a new bit-box allocation.","Converts a <code>Box&lt;[T]&gt;</code> into a <code>BitBox&lt;T, O&gt;</code>, in place.","","Constructs a bit-box from a raw bit-slice pointer.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Converts the bit-box into a bit-vector.","Converts the bit-box back into an ordinary boxed element …","","","Consumes the bit-box, returning a raw bit-slice pointer.","","Deliberately leaks the allocated memory, returning an …","","","","","","","","","","","","","","","","","","","Attempts to convert an ordinary boxed slice into a boxed …","","","","","Bit-Slice Partitioning","Bit-Slice Element Partitioning","Indicates that a bit-slice’s contents are entirely in …","Indicates that a bit-slice’s contents are entirely in …","Partially-Owned Memory Element","Indicates that a bit-slice’s contents touch an element …","Indicates that a bit-slice’s contents touch an element …","","","","","","","Gets the semantic head and tail indices that constrain …","Clears all bits governed by the partial-element to <code>0</code>.","","","","","","","","","Attempts to unpack the bit-domain as an <code>Enclave</code> variant. …","Attempts to unpack the bit-domain as an <code>Enclave</code> variant. …","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Gets the starting index of the live bits in the element.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Converts the element-wise <code>Domain</code> into the equivalent …","Converts the partial element into a bit-slice over its …","","Inverts the value of each bit governed by the …","","Fetches the value stored through <code>self</code> and masks away extra …","Gets the bit-mask over all accessible bits.","","","Attempts to unpack the bit-domain as a <code>Region</code> variant. …","Attempts to unpack the bit-domain as a <code>Region</code> variant. …","Sets all bits governed by the partial-element to <code>1</code>.","Stores a value through <code>self</code> after masking away extra bits.","Performs a store operation on a partial-element whose bits …","Gets the ending index of the live bits in the element.","","","","","","","","","","","","","","Any bits that wholly-fill elements in the interior of the …","Any bits that partially-fill the first element of the …","Any bits that partially-fill the last element of the …","All fully-used elements in the bit-slice’s underlying …","The first element in the bit-slice’s underlying storage, …","The last element in the bit-slice’s underlying storage, …","C-Style Bit-Field Access","Integer Loading","Big-Endian Integer Loading","Little-Endian Integer Loading","Integer Storing","Big-Endian Integer Storing","Little-Endian Integer Storing","A full bit-mask with every bit set.","One-Bit-After Tail Index","Semantic Bit Index","Bit Index Error","Multi-Bit Selection Mask","Bit Position","One-Hot Bit Selection Mask","The inclusive maximum index within an <code>R</code> element.","The inclusive maximum tail within (or after) an <code>R</code> element.","The position value of the most significant bit in an <code>R</code> …","The inclusive minimum index within an <code>R</code> element.","The inclusive minimum tail within (or after) an <code>R</code> element.","The position value of the least significant bit in an <code>R</code> …","An empty bit-mask with every bit cleared.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Creates a new mask with a selector bit activated.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","Inserts a selector bit into a mask.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Removes the index wrapper, leaving the internal counter.","Removes the error wrapper, leaving the internal counter.","Removes the tail wrapper, leaving the internal counter.","Removes the position wrapper, leaving the internal counter.","Removes the one-hot selection wrapper, leaving the …","Removes the mask wrapper, leaving the internal value.","Computes the bit selector for <code>self</code> as an accessor mask.","Computes the bit selector for <code>self</code> as an accessor mask.","Computes a bit-mask for <code>self</code>. This is a type-cast.","Wraps a counter value as a known-good index into an <code>R</code> …","Wraps a counter value as a known-good tail of an <code>R</code> …","Wraps a counter value as a known-good position within an <code>R</code> …","Wraps a selector value as a known-good selection in an <code>R</code> …","Wraps any <code>R</code> value as a bit-mask.","Wraps a counter value as an assumed-good index into an <code>R</code> …","Wraps a counter value as an assumed-good position within …","Wraps a selector value as an assumed-good selection in an <code>R</code>…","Increments an index counter, wrapping at the back edge of …","","","","","","","","Computes the bit position corresponding to <code>self</code> under some …","Decrements an index counter, wrapping at the front edge of …","Iterates over all indices between an inclusive start and …","Iterates over all possible index values.","Iterates over all possible selector values.","Iterates over all tail indices at and after an inclusive …","Computes the bit selector corresponding to <code>self</code> under an …","Computes the bit selector corresponding to <code>self</code>.","","Tests if a mask contains a given selector bit.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The literal <code>!0</code>.","Register Descriptions","The number of bits required to store an index in the range …","A mask over all bits that can be used as an index within …","Counts the number of bits in a value of type <code>T</code>.","Bit Storage Calculator","In-Element Bit Ordering","C-Compatible Bit Ordering","Least-Significant-First Bit Traversal","Most-Significant-First Bit Traversal","Translates a semantic bit index into a real bit position.","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Produces a multi-bit selection mask from a range of …","","","","","Produces a single-bit selection mask from a bit-index.","","","","","","","","","","","Complete <code>BitOrder</code> Verification","Single-Type <code>BitOrder</code> Verification","","","Bit-Array Type Definition","","","","","","","","","","","","","","","","Bit-Array Value Constructor","Boxed Bit-Slice Constructor","Bit-Slice Region Constructor","Bit-Vector Constructor","Single-Bit Pointer","Errors produced by invalid bit-pointer components.","Bit-Pointer Range","Proxy Bit-Reference","An error produced when creating <code>BitSpan</code> encoded references.","Marks whether this type contains mutability permissions …","A basic <code>const</code> marker.","The canonical dangling pointer. This selects the starting …","The canonical empty range. All ranges with zero length …","The error produced when an address is insufficiently …","Attempted to construct a bit-pointer with an address not …","The base element pointer is not aligned.","A basic <code>mut</code> marker.","Generalized mutability permissions.","Attempted to construct a bit-pointer with the null element …","A null pointer was provided.","Counts the layers of <code>Frozen&lt;&gt;</code> wrapping around a base <code>Const</code> …","One of <code>*const</code> or <code>*mut</code>.","Allow instances to be constructed generically.","The requested address is too high, and wraps to zero.","The requested length exceeds the <code>BitSpan</code> length ceiling.","Adjusts a bit-pointer upwards in memory. This is …","Gets the address of the base storage element.","Computes the offset (in bits) that needs to be applied to …","","Produces a proxy reference to the referent bit.","","Produces a proxy reference to the referent bit.","Gets the <code>BitIdx</code> that selects the bit within the memory …","Bit-Slice Pointer Construction","Bit-Slice Pointer Construction","","","","","","","","","","","","","","","","","Casts to a <code>BitPtr</code> with a different storage parameter.","Ensures that an address is well-aligned to its referent …","","","","","","","","","","","","","","","","","","","","","","","","Commits a bit into the proxied location.","Tests if a given bit-pointer is contained within the range.","Bit-wise <code>memcpy</code>","Copies <code>count</code> bits from the region starting at <code>src</code> to the …","Copies <code>count</code> bits from the region starting at <code>src</code> to the …","Bit-wise <code>memcpy</code>","Copies <code>count</code> bits from <code>self</code> to <code>dest</code>. The source and …","Copies <code>count</code> bits from <code>self</code> to <code>dest</code>. The source and …","","","","","","","","Remote Destructor","Runs the destructor of the referent value.","The higher, exclusive, bound of the range. The bit to …","","Bit-Pointer Equality","","","","","","","","","","","","","","","","","","","","","","","","","Freeze this type, wrapping it in a <code>const</code> marker that may …","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","","Returns the argument unchanged.","","Returns the argument unchanged.","","","","Returns the argument unchanged.","Converts a bit-pointer into a proxy bit-reference.","Constructs a mutable <code>BitPtr</code> to the zeroth bit in a single …","Constructs a <code>BitPtr</code> to the zeroth bit in the zeroth …","Explicitly converts a <code>Range&lt;BitPtr&gt;</code> into a <code>BitPtrRange</code>.","Constructs a <code>BitPtr</code> to the zeroth bit in a single element.","Constructs a <code>BitPtr</code> to the zeroth bit in the zeroth …","Constructs a mutable <code>BitPtr</code> to the zeroth bit in the …","Bit-Pointer Hashing","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Decays the bit-reference to an ordinary bit-pointer.","","Explicitly converts a <code>BitPtrRange</code> into a <code>Range&lt;BitPtr&gt;</code>.","Tests if the range is empty (the distance between …","Tests if a bit-pointer is the null value.","","","Tries to construct a <code>BitPtr</code> from a memory location and a …","Constructs a <code>BitPtr</code> from an address and head index, …","","","","","","Bit-Pointer Sentinel Value","Bit-Pointer Sentinel Value","Creates a new bit-pointer at a specified offset from the …","Calculates the distance (in bits) between two bit-pointers.","","","","","","","","","","Gets a raw pointer to the memory location containing the …","Gets a raw pointer to the memory element containing the …","Decomposes a bit-pointer into its element address and bit …","Single-Bit Read","Reads the bit from <code>*self</code>.","Single-Bit Unaligned Read","Reads the bit from <code>*self</code> using an unaligned memory access.","Single-Bit Volatile Read","Reads the bit from <code>*self</code> using a volatile load.","Single-Bit Replacement","Moves <code>src</code> into the referenced bit, returning the previous …","Replaces the bit at <code>*self</code> with a new value, returning the …","Writes <code>value</code> into the proxy.","","Raw Bit-Slice Pointer Construction","Raw Bit-Slice Pointer Construction","The lower, inclusive, bound of the range. The bit to which …","","Adjusts a bit-pointer downwards in memory. This is …","Bit Swap","Swaps the bit values of two proxies.","Swaps the bits at two mutable locations.","Many-Bit Swap","Thaw a previously-frozen type, removing its <code>Frozen</code> marker …","Removes write permissions from a bit-pointer.","Adds write permissions to a bit-pointer.","","","","","","","","","Decomposes a bit-pointer into its address and head-index …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Adjusts a bit-pointer upwards in memory, using wrapping …","Creates a new bit-pointer at a specified offset from the …","Adjusts a bit-pointer downwards in memory, using wrapping …","Single-Bit Write","Writes a new bit into the given location.","Bit-wise <code>memset</code>","Bit-wise <code>memset</code>","Single-Bit Unaligned Write","Writes a bit into memory, tolerating unaligned addresses.","Single-Bit Volatile Write","Writes a new bit using volatile I/O operations.","An iterator over <code>BitSlice</code> that yields <code>&amp;bool</code> directly.","Bit-Addressable Memory","Bit-Slice Indexing","An iterator over <code>BitSlice</code> that yields <code>bool</code> directly.","Shared Bit-Slice Chunking","Shared Bit-Slice Exact Chunking","Exclusive Bit-Slice Exact Chunking","Anti-Aliasing Iterator Adapter","Exclusive Bit-Slice Chunking","Anti-Aliasing Iterator Adapter","The output type of immutable access.","Shared Bit-Slice Iteration","Exclusive Bit-Slice Iteration","Anti-Aliasing Iterator Adapter","Bit Seeking","Bit Seeking","The inclusive maximum length of a <code>BitSlice&lt;_, T&gt;</code>.","The inclusive maximum length that a <code>[T]</code> slice can be for …","The output type of mutable access.","Shared Bit-Slice Reverse Chunking","Shared Bit-Slice Reverse Exact Chunking","Exclusive Bit-Slice Reverse Exact Chunking","Anti-Aliasing Iterator Adapter","Exclusive Bit-Slice Chunking","Anti-Aliasing Iterator Adapter","Shared Bit-Slice Reverse Splitting","Exclusive Bit-Slice Reverse Splitting","Anti-Aliasing Iterator Adapter","Shared Bit-Slice Reverse Splitting","Exclusive Bit-Slice Reverse Splitting","Anti-Aliasing Iterator Adapter","Shared Bit-Slice Splitting","Shared Bit-Slice Splitting","Exclusive Bit-Slice Splitting","Anti-Aliasing Iterator Adapter","Exclusive Bit-Slice Splitting","Anti-Aliasing Iterator Adapter","Shared Bit-Slice Splitting","Exclusive Bit-Slice Splitting","Anti-Aliasing Iterator Adapter","Bit-Slice Windowing","Produces bit-slice view(s) with different underlying …","Produces bit-slice view(s) with different underlying …","Tests if every bit is set to <code>1</code> in the bit-slice.","Tests if there is at least one bit set to <code>1</code> in the …","Gets a raw pointer to the zeroth bit of the bit-slice.","Views the bit-slice as a half-open range of bit-pointers, …","Views the currently unyielded bit-slice.","Views the remaining bit-slice that has not yet been …","","Gets a raw, write-capable pointer to the zeroth bit of the …","Views the bit-slice as a half-open range of write-capable …","","Produces a range of mutable bit-pointers to each bit in …","","Produces a range of bit-pointers to each bit in the …","","","","","","Partitions a bit-slice into maybe-contended and …","Partitions a mutable bit-slice into maybe-contended and …","","","","","","","Boolean Arithmetic","","","Boolean Arithmetic","","","","","","","Boolean Arithmetic","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Adapts the iterator to yield regular <code>&amp;bool</code> references …","Adapts the iterator to yield <code>bool</code> values rather than the …","Iterates over non-overlapping subslices of a bit-slice.","Iterates over non-overlapping subslices of a bit-slice.","Iterates over non-overlapping mutable subslices of a …","Iterates over non-overlapping mutable subslices of a …","","","","","","","","","","","","","","Copies the bits from <code>src</code> into <code>self</code>.","","","","","","","","","","","","","","","","","","Tests if the bit-slice contains the given sequence …","Yields <code>bool</code> values directly, rather than proxy references.","Copies all bits from <code>src</code> into <code>self</code>, using batched …","","Copies a span of bits to another location in the bit-slice.","Copies bits from one region of the bit-slice to another …","","","","","","","","","","","","","","","","","","","","","","","","","Counts the number of bits set to <code>1</code> in the bit-slice …","Counts the number of bits cleared to <code>0</code> in the bit-slice …","","","","","Views the underlying memory of a bit-slice, removing alias …","Views the underlying memory of a bit-slice, removing alias …","Produces an empty bit-slice with an arbitrary lifetime.","Produces an empty bit-slice with an arbitrary lifetime.","Tests if the bit-slice ends with the given sequence.","","","","","","","","","","","","","","","Fills the bit-slice with a given bit.","Fills the bit-slice with bits produced by a generator …","Gets a reference to the first bit of the bit-slice, or <code>None</code>…","Gets a mutable reference to the first bit of the …","Finds the index of the first bit in the bit-slice set to <code>1</code>.","Finds the index of the first bit in the bit-slice cleared …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Constructs a shared <code>&amp;BitSlice</code> reference over a shared …","Constructs an exclusive <code>&amp;mut BitSlice</code> reference over an …","","Raw Bit-Slice Construction","Raw Bit-Slice Construction","Raw Bit-Slice Construction","Raw Bit-Slice Construction","","Constructs a shared <code>&amp;BitSlice</code> reference over a slice of …","Constructs an exclusive <code>&amp;mut BitSlice</code> reference over a …","Constructs a shared <code>&amp;BitSlice</code> over an element slice, …","Constructs an exclusive <code>&amp;mut BitSlice</code> over an element …","Immutably indexes into a bit-slice, returning <code>None</code> if <code>self</code> …","Gets a reference to a single bit or a subsection of the …","Mutably indexes into a bit-slice, returning <code>None</code> if <code>self</code> …","Gets a mutable reference to a single bit or a subsection …","Immutably indexes into a bit-slice without doing any …","Gets a reference to a single bit or to a subsection of the …","Mutably indexes into a bit-slice without doing any bounds …","Gets a mutable reference to a single bit or a subsection …","","Immutably indexes into a bit-slice, panicking if <code>self</code> is …","","","","","","","Looks up a single bit by its semantic index.","Mutably indexes into a bit-slice, panicking if <code>self</code> is out …","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Views the underlying bit-slice as a subslice of the …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Consumes the iterator, returning the remnant bit-slice …","Consumes the iterator, returning the remnant bit-slice …","See <code>ChunksExactMut::into_remainder()</code>.","See <code>RChunksExactMut::into_remainder()</code>","","Tests if the bit-slice is empty (length zero).","Produces an iterator over each bit in the bit-slice.","Produces a mutable iterator over each bit in the bit-slice.","Enumerates the index of each bit in a bit-slice set to <code>1</code>.","Enumerates the index of each bit in a bit-slice cleared to …","","","","Gets a reference to the last bit of the bit-slice, or <code>None</code> …","","","","","","","","","","","","","","","","","","","","","","Gets a mutable reference to the last bit of the bit-slice, …","Finds the index of the last bit in the bit-slice set to <code>1</code>.","Finds the index of the last bit in the bit-slice cleared …","Counts the number of bits from the start of the bit-slice …","Counts the number of bits from the start of the bit-slice …","","","","Gets the number of bits in the bit-slice.","","","","","","","","","","","","","","","","","","","","","","<code>Lsb0</code> Big-Endian Integer Loading","<code>Msb0</code> Big-Endian Integer Loading","<code>Lsb0</code> Little-Endian Integer Loading","<code>Msb0</code> Little-Endian Integer Loading","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Tests if at least one bit is cleared to <code>0</code> in the bit-slice.","Tests if every bit is cleared to <code>0</code> in the bit-slice.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Iterates over non-overlapping subslices of a bit-slice, …","Iterates over non-overlapping subslices of a bit-slice, …","Iterates over non-overlapping mutable subslices of a …","Iterates over non-overlapping mutable subslices of a …","","Gets the remnant bit-slice that the iterator will not …","Gets the remnant bit-slice that the iterator will not …","Removes a layer of <code>::Alias</code> tainting from the yielded item.","Removes a layer of <code>::Alias</code> tainting from the yielded item.","Removes a layer of <code>::Alias</code> tainting from the yielded item.","Removes a layer of <code>::Alias</code> tainting from the yielded item.","Removes a layer of <code>::Alias</code> tainting from the yielded item.","Removes a layer of <code>::Alias</code> tainting from the yielded item.","Removes a layer of <code>::Alias</code> tainting from the yielded item.","Removes a layer of <code>::Alias</code> tainting from the yielded item.","Removes a layer of <code>::Alias</code> tainting from the yielded item.","Removes a layer of <code>::Alias</code> tainting from the yielded item.","Creates a bit-vector by repeating a bit-slice <code>n</code> times.","Writes a new value into a bit, and returns its previous …","Writes a new value into a bit, returning the previous …","Reverses the order of bits in a bit-slice.","Rotates the contents of a bit-slice to the left (towards …","Rotates the contents of a bit-slice to the right (away …","Iterates over subslices separated by bits that match a …","Iterates over mutable subslices separated by bits that …","Iterates over mutable subslices separated by bits that …","Iterates over mutable subslices separated by bits that …","Writes a new value into a single bit.","Writes a new value into a single bit, using alias-safe …","Writes a new value into a single bit, using alias-safe …","Writes a new value into a single bit, without bounds …","Shifts the contents of a bit-slice “left” (towards the …","Shifts the contents of a bit-slice “right” (away from …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Tests if at least one bit is set to <code>1</code>, and at least one …","Iterates over subslices separated by bits that match a …","Splits a bit-slice in two parts at an index.","Splits a mutable bit-slice in two parts at an index.","Splits a bit-slice at an index, without bounds checking.","Splits a mutable bit-slice at an index, without bounds …","Splits the bit-slice into a reference to its first bit, …","Splits the bit-slice into mutable references of its first …","Iterates over subslices separated by bits that match a …","Iterates over mutable subslices separated by bits that …","Splits the bit-slice into a reference to its last bit, and …","Splits the bit-slice into mutable references to its last …","Iterates over mutable subslices separated by bits that …","Iterates over subslices separated by bits that match a …","Iterates over mutable subslices separated by bits that …","Tests if the bit-slice begins with the given sequence.","<code>Msb0</code> Big-Endian Integer Storing","<code>Lsb0</code> Big-Endian Integer Storing","<code>Lsb0</code> Little-Endian Integer Storing","<code>Msb0</code> Little-Endian Integer Storing","Removes a prefix bit-slice, if present.","Removes a suffix bit-slice, if present.","Exchanges the bit values at two indices.","Swaps two bits in a bit-slice, without bounds checking.","Swaps the contents of two bit-slices.","","Takes the remnant bit-slice out of the iterator.","Takes the remnant bit-slice out of the iterator.","See <code>ChunksExactMut::take_remainder()</code>","See <code>RChunksExactMut::take_remainder()</code>","Copies a bit-slice into an owned bit-vector.","","","","","","","","","","","","","","","","","Counts the number of bits from the end of the bit-slice to …","Counts the number of bits from the end of the bit-slice to …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Attempts to construct a shared <code>&amp;BitSlice</code> reference over a …","Attempts to construct an exclusive <code>&amp;mut BitSlice</code> reference …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Iterates over consecutive windowing subslices in a …","","All implementors are required to have <code>Self</code> and <code>Self::Alias</code> …","All implementors are required to have their alignment …","A type that selects the appropriate load/store …","A sibling <code>BitStore</code> implementor that is known to be …","Bit Storage","The element type used in the memory region underlying a …","The inverse of <code>::Alias</code>. It is used when a <code>BitSlice</code> removes …","The zero constant.","Reads a single bit out of the memory system according to …","Loads a value out of the memory system according to the …","Wraps a raw memory value as a <code>BitStore</code> type.","Stores a value into the memory system. This is only called …","Bit-Precision Dynamic Array","Draining Iteration","An empty bit-vector with no backing allocation.","","Splicing Iteration","Moves all the bits out of <code>other</code> into the back of <code>self</code>.","Creates an unsafe shared bit-pointer to the start of the …","Views the unyielded bits remaining in the drain.","Explicitly views the bit-vector as a bit-slice.","","","Creates an unsafe writable bit-pointer to the start of the …","Explicitly views the bit-vector as a mutable bit-slice.","","","","Views the bit-vector as a mutable slice of its underlying …","Views the bit-vector as a slice of its underlying memory …","","","","","","","","","","","","","","","","","","","","Gets the allocation capacity, measured in bits.","Empties the bit-vector.","","","","","","","","","Iterates over a portion of the bit-vector, <em>removing</em> all …","","","","","","","","","","Appends the contents of a bit-slice to a bit-vector.","Appends a slice of <code>T</code> elements to a bit-vector.","","Extends <code>self</code> by copying an internal range of its bit-slice …","","","","","","","","","","","Ensures that the live region of the bit-vector’s …","Returns the argument unchanged.","","","Returns the argument unchanged.","","","","Returns the argument unchanged.","Copies the contents of a bit-slice into a new heap …","Constructs a new bit-vector from a single element.","","","","","","Constructs a bit-vector handle from its constituent fields.","Constructs a new bit-vector from a slice of memory …","Converts a regular vector in-place into a bit-vector.","","","","Inserts a bit at a given position, shifting all bits after …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Converts a bit-vector into a boxed bit-slice.","","","","","","","Decomposes a bit-vector into its constituent member fields.","Converts a bit-vector into a <code>Vec</code> of its underlying storage.","Tests if the bit-vector is empty.","","","Destroys the <code>BitVec</code> handle without destroying the …","","Gets the length of the bit-vector.","","","","Constructs a new, empty, bit-vector.","","","","","","","","","","Attempts to remove the trailing bit from the bit-vector.","Appends a single bit to the vector.","","Removes a bit at a given position, shifting all bits after …","Creates a new bit-vector by repeating a bit for the …","Ensures that the bit-vector has allocation capacity for <em>at </em>…","Ensures that the bit-vector has allocation capacity for <em>at </em>…","Resizes the bit-vector to a new length. New bits are …","Resizes the bit-vector to a new length, using a function …","Retains only the bits that the predicate allows.","Overwrites each element (visible in <code>.as_raw_mut_slice()</code>) …","Resizes a bit-vector to a new length.","Sets the uninitialized bits of a bit-vector to a known …","Releases excess capacity back to the allocator.","","","Modifies <code>self.drain()</code> so that the removed bit-slice is …","Splits the bit-vector in half at an index, moving …","","","Takes a bit out of the bit-vector.","","","Shortens the bit-vector, keeping the first <code>new_len</code> bits …","","","","","Fallibly constructs a new bit-vector from a slice of …","Attempts to convert a regular vector in-place into a …","","","","","","","Allocates a new, empty, bit-vector with space for at least …","","Immutable Bit View","Mutable Bit View","Bit View","Helper trait for scalars and arrays, but not slices.","The underlying element type.","The zero constant.","Views <code>self</code> as an immutable bit-slice region with the <code>O</code> …","Views <code>self</code> as a mutable bit-slice region with the <code>O</code> …","Views the type as a mutable slice of its elements.","Views the type as a slice of its elements.","Wraps <code>self</code> in a <code>BitArray</code>.","Attempts to view <code>self</code> as an immutable bit-slice region …","Attempts to view <code>self</code> as a mutable bit-slice region with …","Attempts to view a memory region as an immutable bit-slice.","Attempts to view a memory region as a mutable bit-slice.","Views a memory region as an immutable bit-slice.","Views a memory region as a mutable bit-slice."],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,124,124,124,3,6,7,8,9,3,6,7,8,9,3,6,7,8,9,3,6,7,8,9,125,3,6,7,8,9,3,6,7,8,9,125,3,6,7,8,9,125,124,3,6,7,8,9,3,6,7,8,9,3,6,7,8,9,125,3,6,7,8,9,3,6,7,8,9,3,6,7,8,9,3,6,7,8,9,3,6,7,8,9,3,6,7,8,9,3,6,7,8,9,3,6,7,8,9,125,0,0,18,18,18,20,18,18,20,18,20,18,18,18,18,20,18,18,18,18,18,18,18,18,20,18,18,20,18,20,18,20,18,20,18,18,18,18,18,18,18,18,18,18,18,20,18,18,18,20,18,18,18,18,20,18,18,18,18,20,18,20,18,20,18,18,18,20,20,20,18,20,20,18,20,18,18,18,20,18,18,18,18,18,20,18,20,18,20,0,0,30,32,32,30,32,32,32,30,32,32,32,32,32,32,32,30,32,32,30,32,32,30,32,30,32,32,30,32,32,32,32,32,32,30,32,32,32,32,32,32,32,32,30,32,32,32,32,32,32,32,32,32,32,32,32,32,30,32,32,32,30,32,32,30,32,30,32,32,30,30,32,30,30,32,30,32,32,30,32,32,30,32,32,32,30,32,30,32,0,0,44,45,0,44,45,44,45,39,44,45,39,39,39,44,45,39,44,45,39,44,45,44,45,44,45,45,45,45,45,45,39,44,45,39,39,39,44,45,39,45,39,45,39,45,39,39,45,45,44,45,39,39,39,39,44,45,39,45,44,45,39,44,45,39,44,45,39,126,126,126,127,127,127,0,128,128,128,128,128,128,2,0,0,0,0,0,0,17,40,50,17,40,50,2,2,2,17,49,40,50,51,2,17,49,40,50,51,2,17,49,40,50,51,2,17,49,40,50,51,2,17,49,40,50,51,2,2,17,49,40,50,51,2,17,49,40,50,51,2,17,17,17,49,49,40,40,40,50,50,50,51,51,51,2,2,2,17,49,40,50,51,2,17,49,40,50,51,2,2,17,49,40,50,51,2,17,49,40,50,51,2,17,50,51,17,40,50,51,2,17,50,51,17,2,17,49,40,50,51,2,17,17,17,17,51,40,17,50,2,2,17,49,40,50,51,2,17,49,40,50,51,2,17,49,40,50,51,2,17,49,40,50,51,2,17,49,40,50,51,2,48,0,48,48,0,0,0,0,0,0,15,60,61,60,61,60,61,60,61,60,61,60,61,60,61,60,61,60,61,60,61,60,61,60,61,15,60,61,60,61,15,60,61,60,61,60,61,60,61,60,61,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,41,0,63,67,0,68,14,0,0,68,14,41,41,41,14,14,63,63,63,65,63,65,63,63,0,0,43,42,65,67,63,66,68,14,43,42,65,67,63,66,68,14,63,0,43,42,65,67,63,66,68,14,43,42,65,67,63,66,68,14,43,42,65,63,66,68,14,65,67,0,63,63,0,63,63,67,43,42,67,65,65,65,0,63,67,67,0,43,42,65,65,65,67,63,66,68,14,43,42,65,65,65,67,63,63,66,66,68,68,14,14,41,43,42,65,67,67,63,63,63,66,68,68,68,14,14,14,65,63,63,67,63,63,63,0,43,42,65,67,63,66,68,14,43,42,65,67,63,66,68,14,65,67,67,67,63,67,67,63,63,67,67,65,67,67,0,0,63,63,43,42,65,65,65,63,66,68,14,63,63,63,0,63,0,63,0,63,0,65,63,65,67,0,0,67,67,63,0,65,63,0,41,63,63,43,42,65,67,63,66,68,14,63,65,66,68,14,43,42,65,67,63,63,63,66,68,14,43,42,65,67,63,66,68,14,43,42,65,67,63,66,68,14,63,63,63,0,63,0,0,0,63,0,63,0,0,0,0,0,0,0,0,0,0,114,0,0,0,0,0,13,13,114,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,13,13,13,13,13,13,76,77,13,13,13,13,13,13,13,76,77,13,76,77,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,76,77,79,109,110,111,112,113,13,84,80,83,81,82,85,96,86,97,87,89,90,91,92,93,94,98,99,100,101,102,103,104,105,106,107,76,77,79,109,110,111,112,113,13,84,80,83,81,82,85,96,86,97,87,89,90,91,92,93,94,98,99,100,101,102,103,104,105,106,107,76,76,13,13,13,13,76,84,80,81,85,86,87,89,90,91,92,93,94,13,13,76,84,80,81,85,86,87,89,90,91,92,93,94,13,93,94,13,76,13,13,13,13,76,77,79,84,80,83,81,82,85,96,86,97,93,94,98,99,100,101,102,103,104,105,106,107,13,13,13,13,93,94,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,93,94,13,13,13,13,13,13,13,76,77,109,110,111,112,113,13,13,13,13,13,13,13,84,80,83,81,82,85,96,86,97,87,89,90,91,92,93,94,76,77,79,109,110,111,112,113,13,84,80,83,81,82,85,96,86,97,87,89,90,91,92,93,94,98,99,100,101,102,103,104,105,106,107,13,13,0,0,0,0,0,0,13,13,13,13,114,13,114,13,114,13,114,13,13,114,13,13,13,13,13,13,13,114,13,13,13,13,13,13,76,77,79,109,110,111,112,113,13,84,80,83,81,82,85,96,86,97,87,89,90,91,92,93,94,98,99,100,101,102,103,104,105,106,107,77,76,77,79,109,110,111,112,113,13,13,84,80,83,81,82,85,96,86,97,87,89,90,91,92,93,94,98,99,100,101,102,103,104,105,106,107,82,97,100,102,77,13,13,13,13,13,76,77,79,13,84,80,83,81,82,85,96,86,97,93,94,98,99,100,101,102,103,104,105,106,107,13,13,13,13,13,76,77,79,13,84,80,83,81,82,85,96,86,97,93,94,98,99,100,101,102,103,104,105,106,107,13,13,13,13,76,77,79,109,110,111,112,113,84,80,83,81,82,85,96,86,97,87,89,90,91,92,93,94,98,99,100,101,102,103,104,105,106,107,76,77,79,109,110,111,84,80,83,81,82,85,96,86,97,87,89,90,93,94,98,99,100,101,102,103,104,105,106,107,13,13,13,76,77,79,84,80,83,81,82,85,96,86,97,98,99,100,101,102,103,104,105,106,107,76,77,79,84,80,83,81,82,85,96,86,97,98,99,100,101,102,103,104,105,106,107,13,13,13,13,13,13,13,13,13,13,13,13,13,13,93,94,13,13,13,13,13,81,86,77,109,110,111,112,113,83,82,96,97,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,76,77,79,109,110,111,112,113,84,80,83,81,82,85,96,86,97,87,89,90,91,92,93,94,98,99,100,101,102,103,104,105,106,107,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,82,97,100,102,13,76,13,84,80,81,85,86,87,89,90,91,92,93,94,13,13,13,13,76,77,79,109,110,111,112,113,13,13,13,84,80,83,81,82,85,96,86,97,87,89,90,91,92,93,94,98,99,100,101,102,103,104,105,106,107,13,13,76,77,79,109,110,111,112,113,13,84,80,83,81,82,85,96,86,97,87,89,90,91,92,93,94,98,99,100,101,102,103,104,105,106,107,76,77,79,109,110,111,112,113,13,84,80,83,81,82,85,96,86,97,87,89,90,91,92,93,94,98,99,100,101,102,103,104,105,106,107,13,13,31,31,31,31,0,31,31,31,31,31,31,31,0,0,35,0,0,35,35,120,35,35,35,35,35,35,35,35,35,35,120,35,35,120,35,35,35,35,35,35,35,120,35,35,121,120,35,35,121,35,35,35,35,35,120,121,35,35,35,35,120,35,121,35,35,35,35,35,35,35,35,35,35,35,120,35,35,35,35,35,35,35,121,35,120,35,35,35,35,35,35,121,35,35,35,35,35,35,35,35,35,35,35,35,35,35,120,35,121,35,35,120,35,35,35,121,35,35,35,120,121,35,120,35,121,35,35,35,120,121,120,121,35,120,120,121,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,120,121,35,35,35,35,35,35,35,35,120,35,35,121,35,35,120,35,121,120,35,121,35,35,0,0,0,0,129,19,130,131,19,19,19,130,131,129,129,129,129],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,1,[]],[-1,1,[]],[-1,1,[]],[-1,1,[]],[-1,1,[]],[-1,1,[]],[-1,1,[]],[-1,1,[]],[-1,1,[]],[-1,1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[-1,2],[],[]],[[3,4],5],[[6,4],5],[[7,4],5],[[8,4],5],[[9,4],5],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[10],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[-1,2],[],[]],[-1,[],[]],[3],[6],[7],[8],[9],[3],[6],[7],[8],[9],[[],3],[[],6],[[],7],[[],8],[[],9],[[-1,2],[],[]],[3,11],[6,11],[7,11],[8,11],[9,11],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[[13,[-2,-3]],[14,[-2]]]]],[],[],15],[-1,[[12,[[13,[-2,-3]],[14,[-2]]]]],[],[],15],[-1,[[12,[[13,[-2,-3]],[14,[-2]]]]],[],[],15],[-1,[[12,[[13,[-2,-3]],[14,[-2]]]]],[],[],15],[-1,[[12,[[13,[-2,-3]],[14,[-2]]]]],[],[],15],[-1,[[12,[[13,[-2,-3]],[14,[-2]]]]],[],[],15],[-1,[[12,[[13,[-2,-3]],[14,[-2]]]]],[],[],15],[-1,[[12,[[13,[-2,-3]],[14,[-2]]]]],[],[],15],[-1,[[12,[[13,[-2,-3]],[14,[-2]]]]],[],[],15],[-1,[[12,[[13,[-2,-3]],[14,[-2]]]]],[],[],15],[-1,16,[]],[-1,16,[]],[-1,16,[]],[-1,16,[]],[-1,16,[]],[-1,[[13,[-2,-3]]],[],[],15],[-1,[[13,[-2,-3]]],[],[],15],[-1,[[13,[-2,-3]]],[],[],15],[-1,[[13,[-2,-3]]],[],[],15],[-1,[[13,[-2,-3]]],[],[],15],[-1,[[13,[-2,-3]]],[],[],15],[-1,[[13,[-2,-3]]],[],[],15],[-1,[[13,[-2,-3]]],[],[],15],[-1,[[13,[-2,-3]]],[],[],15],[-1,[[13,[-2,-3]]],[],[],15],[[-1,17,10],10,[]],0,0,0,0,[[[18,[-1,-2]]],[[13,[-2]]],19,15],[[[20,[-1,-2]]],[[13,[-2]]],19,15],[[[18,[-1,-2]]],[[13,[-2]]],19,15],[[[18,[-1,-2]]],[[13,[-2]]],19,15],[[[20,[-1,-2]]],[[13,[-2]]],19,15],[[[18,[-1,-2]]],[[13,[-2]]],19,15],[[[20,[-1,-2]]],[[13,[-2]]],19,15],[[[18,[-1,-2]]],1,19,15],[[[18,[-1,-2]]],1,19,15],[[[18,[-1,-2]]],[[13,[-2]]],19,15],[[[18,[-1,-2]]],[[13,[-2]]],19,15],[[[20,[-1,-2]]],[[13,[-2]]],19,15],[[[18,[-1,-2]],-3],[],19,15,[]],[[[18,[-1,-2]],-3],11,19,15,[]],[[[18,[-1,-2]],-3],[],19,15,[]],[[[18,[-1,-2]],-3],11,19,15,[]],[[[18,[-1,-2]],-3],[],19,15,[]],[[[18,[-1,-2]],-3],11,19,15,[]],[-1,-2,[],[]],[[[18,[-1,-2]]],[[13,[-2]]],19,15],[-1,-2,[],[]],[[[18,[-1,-2]]],[[13,[-2]]],19,15],[-1,-2,[],[]],[-1,-2,[],[]],[[[18,[-1,-2]]],[[18,[-1,-2]]],19,15],[[[20,[-1,-2]]],[[20,[-1,-2]]],[19,21],[15,21]],[[-1,-2],11,[],[]],[[-1,-2],11,[],[]],[[[18,[-1,-2]],[18,[-1,-2]]],22,19,15],[[[20,[-1,-2]]],23,19,15],0,[[],[[18,[-1,-2]]],19,15],[[[18,[-1,-2]]],[],19,15],[[[18,[-1,-2]]],[],19,15],[[[18,[-1,-2]],-3],10,19,15,24],[[[18,[-1,-2]],4],5,19,15],[[[18,[-1,-2]],4],5,19,15],[[[18,[-1,-2]],4],5,19,15],[[[18,[-1,-2]],4],5,19,15],[[[18,[-1,-2]],4],5,19,15],[[[18,[-1,-2]],4],5,19,15],[[[20,[-1,-2]],4],5,19,15],[-1,[[18,[-1,-2]]],19,15],[25,-1,[]],[-1,-1,[]],[-1,-1,[]],[[[18,[-1,-2]],-3],11,19,15,26],[[[18,[-1,-2]],-3],[],19,15,[]],[[[18,[-1,-2]],-3],[],19,15,[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[18,[-1,-2]]],-1,19,15],[[[18,[-1,-2]]],[],19,15],[[[18,[-1,-2]]],[],19,15],[[[18,[-1,-2]]],[],19,15],[-1,-2,[],[]],[[[18,[-1,-2]]],10,19,15],[[[20,[-1,-2]]],27,19,15],[[[18,[-1,-2]]],23,19,15],[[[20,[-1,-2]]],23,19,15],[[[18,[-1,-2]]],-3,19,15,28],[[[18,[-1,-2]]],-3,19,15,28],[-1,[[18,[-1,-2]]],19,15],[[[18,[-1,-2]]],[[20,[-1,-2]]],19,15],[[[20,[-1,-2]]],27,19,15],[[[20,[-1,-2]]],27,19,15],[[[18,[-1,-2]]],[],19,15],[[[20,[-1,-2]],23],27,19,15],[[[20,[-1,-2]],23],27,19,15],[[[18,[-1,-2]],-3],[[27,[22]]],19,15,24],[[[20,[-1,-2]]],[[11,[23,[27,[23]]]]],19,15],[[[18,[-1,-2]],-3],11,19,15,28],[[[18,[-1,-2]],-3],11,19,15,28],[-1,-2,[],[]],[-1,-2,[],[]],[-1,29,[]],[[[13,[-1]]],[[12,[[18,[-2,-1]]]]],15,19],[-1,[[12,[-2]]],[],[]],[[[13,[-1]]],[[12,[[18,[-2,-1]]]]],15,19],[[[13,[-1]]],[[12,[[18,[-2,-1]]]]],15,19],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,16,[]],[-1,16,[]],0,0,[[[30,[-1,-2]]],[[13,[-1,-2]]],31,15],[[[32,[-1,-2]]],[[13,[-1,-2]]],31,15],[[[32,[-1,-2]]],[[13,[-1,-2]]],31,15],[[[30,[-1,-2]]],[[13,[-1,-2]]],31,15],[[[32,[-1,-2]]],[[13,[-1,-2]]],31,15],[[[32,[-1,-2]]],[[1,[-1]]],31,15],[[[32,[-1,-2]]],[[1,[-1]]],31,15],[[[30,[-1,-2]]],[[13,[-1,-2]]],31,15],[[[32,[-1,-2]]],[[13,[-1,-2]]],31,15],[[[32,[-1,-2]],-3],[],31,15,[]],[[[32,[-1,-2]],-3],11,31,15,[]],[[[32,[-1,-2]],-3],[],31,15,[]],[[[32,[-1,-2]],-3],11,31,15,[]],[[[32,[-1,-2]],-3],[],31,15,[]],[[[32,[-1,-2]],-3],11,31,15,[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[32,[-1,-2]]],[[13,[-1,-2]]],31,15],[-1,-2,[],[]],[[[32,[-1,-2]]],[[13,[-1,-2]]],31,15],[-1,-2,[],[]],[[[30,[-1,-2]]],[[30,[-1,-2]]],31,15],[[[32,[-1,-2]]],[[32,[-1,-2]]],31,15],[[-1,-2],11,[],[]],[[-1,-2],11,[],[]],[[[32,[-1,-2]],[32,[-1,-2]]],22,31,15],[[[30,[-1,-2]]],23,31,15],[[],[[32,[-1,-2]]],31,15],[[[32,[-1,-2]]],[],31,15],[[[32,[-1,-2]]],[],31,15],[[[32,[-1,-2]]],11,31,15],[[[32,[-1,-2]],-3],10,31,15,[24,[33,[[13,[-1,-2]]]]]],[[[32,[-1,-2]],10],11,31,15],[[[30,[-1,-2]],4],5,31,15],[[[32,[-1,-2]],4],5,31,15],[[[32,[-1,-2]],4],5,31,15],[[[32,[-1,-2]],4],5,31,15],[[[32,[-1,-2]],4],5,31,15],[[[32,[-1,-2]],4],5,31,15],[[[32,[-1,-2]],4],5,31,15],[[[32,[-1,-2]],4],5,31,15],[[[32,[-1,-2]]],11,31,15],[-1,-1,[]],[[[34,[-1]]],[[32,[-1,-2]]],31,15],[-1,-1,[]],[[[13,[-1,-2]]],[[32,[-1,-2]]],31,15],[[[35,[-1,-2]]],[[32,[-1,-2]]],31,15],[[[36,[[13,[-1,-2]]]]],[[32,[-1,-2]]],31,15],[[[18,[-1,-2]]],[[32,[-2]]],19,15],[[[13,[-1,-2]]],[[32,[-1,-2]]],31,15],[[[34,[[1,[-1]]]]],[[32,[-1,-2]]],31,15],[-1,[[32,[-2,-3]]],37,31,15],[13,[[32,[-1,-2]]],31,15],[[[32,[-1,-2]],-3],11,31,15,26],[[[32,[-1,-2]],-3],[],31,15,[]],[[[32,[-1,-2]],-3],[],31,15,[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[32,[-1,-2]]],[[35,[-1,-2]]],31,15],[[[32,[-1,-2]]],[[34,[[1,[-1]]]]],31,15],[-1,-2,[],[]],[[[32,[-1,-2]]],[],31,15],[[[32,[-1,-2]]],13,31,15],[[[30,[-1,-2]]],27,31,15],[[[32,[-1,-2]]],[[13,[-1,-2]]],31,15],[[[30,[-1,-2]]],23,31,15],[[[32,[-1,-2]]],-3,31,15,28],[[[32,[-1,-2]]],-3,31,15,28],[[[30,[-1,-2]]],27,31,15],[[[30,[-1,-2]]],27,31,15],[[[32,[-1,-2]]],[],31,15],[[[30,[-1,-2]],23],27,31,15],[[[30,[-1,-2]],23],27,31,15],[[[32,[-1,-2]],-3],[[27,[22]]],31,15,[24,[38,[[13,[-1,-2]]]]]],[[[30,[-1,-2]]],[[11,[23,[27,[23]]]]],31,15],[[[32,[-1,-2]],-3],11,31,15,28],[[[32,[-1,-2]],-3],11,31,15,28],[-1,-2,[],[]],[-1,-2,[],[]],[-1,29,[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[[[34,[[1,[-1]]]]],[[12,[[32,[-1,-2]]]]],31,15],[[[34,[[1,[-1]]]]],[[12,[[32,[-1,-2]],[34,[[1,[-1]]]]]]],31,15],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,16,[]],[-1,16,[]],0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[39,[-1,-2,-3]]],[[11,[17,40]]],41,31,15],[[[39,[42,-1,-2]]],[],31,15],[[[44,[43,-1,-2]]],[[44,[43,-1,-2]]],31,15],[[[45,[43,-1,-2]]],[[45,[43,-1,-2]]],31,15],[[[39,[43,-1,-2]]],[[39,[43,-1,-2]]],31,15],[[-1,-2],11,[],[]],[[-1,-2],11,[],[]],[[-1,-2],11,[],[]],[[],[[44,[-1,-2,-3]]],41,31,15],[[],[[45,[-1,-2,-3]]],41,31,15],[[[44,[-1,-2,-3]]],[[27,[[46,[-1,[13,[-2,-3]]]]]]],41,31,15],[[[45,[-1,-2,-3]]],[[27,[[39,[-1,-2,-3]]]]],41,31,15],[[[44,[-1,-2,-3]],4],5,41,31,15],[[[45,[43,-1,-2]],4],5,31,15],[[[45,[-1,-2,-3]],4],5,41,31,15],[[[45,[43,-1,-2]],4],5,31,15],[[[45,[43,-1,-2]],4],5,31,15],[[[45,[43,-1,-2]],4],5,31,15],[[[45,[43,-1,-2]],4],5,31,15],[[[39,[-1,-2,-3]],4],5,41,31,15],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[[39,[-1,-2,-3]],-4],11,41,31,15,26],[[[39,[-1,-2,-3]]],17,41,31,15],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[45,[-1,-2,-3]]],[[44,[-1,-2,-3]]],41,31,15],[[[39,[-1,-2,-3]]],[[46,[-1,[13,[-2,-3]]]]],41,31,15],[-1,-2,[],[]],[[[39,[42,-1,-2]]],[],31,15],[[[45,[43,-1,-2]]],23,31,15],[[[39,[-1,-2,-3]]],[],41,31,15],[[[39,[-1,-2,-3]]],2,41,31,15],[[[45,[43,-1,-2]]],27,31,15],[[[45,[43,-1,-2]]],27,31,15],[[[44,[-1,-2,-3]]],[[27,[[11,[[46,[-1,[13,[-2,-3]]]],[46,[-1,[13,[-3]]]],[46,[-1,[13,[-2,-3]]]]]]]]],41,31,15],[[[45,[-1,-2,-3]]],[[27,[[11,[[27,[[39,[-1,-2,-3]]]],[46,[-1,1]],[27,[[39,[-1,-2,-3]]]]]]]]],41,31,15],[[[39,[42,-1,-2]]],[],31,15],[[[39,[42,-1,-2]]],[],31,15],[[[39,[-1,-2,-3]]],[],41,[31,47],15],[[[39,[-1,-2,-3]]],40,41,31,15],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,29,[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,16,[]],[-1,16,[]],[-1,16,[]],0,0,0,0,0,0,0,[-1,-2,[],28],[-1,-2,[],28],[-1,-2,[],28],[[-1,-2],11,[],28],[[-1,-2],11,[],28],[[-1,-2],11,[],28],0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[[2,[-1]],-1],[],48],[[[2,[-1]],-1],[],48],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[17,[-1]]],[[17,[-1]]],[48,21]],[[[49,[-1]]],[[49,[-1]]],[48,21]],[[[40,[-1]]],[[40,[-1]]],[48,21]],[[[50,[-1]]],[[50,[-1]]],[48,21]],[[[51,[-1]]],[[51,[-1]]],[48,21]],[[[2,[-1]]],[[2,[-1]]],[48,21]],[[-1,-2],11,[],[]],[[-1,-2],11,[],[]],[[-1,-2],11,[],[]],[[-1,-2],11,[],[]],[[-1,-2],11,[],[]],[[-1,-2],11,[],[]],[[[17,[-1]],[17,[-1]]],22,[48,52]],[[[49,[-1]],[49,[-1]]],22,[48,52]],[[[40,[-1]],[40,[-1]]],22,[48,52]],[[[50,[-1]],[50,[-1]]],22,[48,52]],[[[51,[-1]],[51,[-1]]],22,[48,52]],[[[2,[-1]],[2,[-1]]],22,[48,52]],[[[2,[-1]],[51,[-1]]],[[2,[-1]]],48],[[],[[17,[-1]]],[48,53]],[[],[[49,[-1]]],[48,53]],[[],[[40,[-1]]],[48,53]],[[],[[50,[-1]]],[48,53]],[[],[[51,[-1]]],[48,53]],[[],[[2,[-1]]],[48,53]],[[[17,[-1]],[17,[-1]]],10,[48,33]],[[[49,[-1]],[49,[-1]]],10,[48,33]],[[[40,[-1]],[40,[-1]]],10,[48,33]],[[[50,[-1]],[50,[-1]]],10,[48,33]],[[[51,[-1]],[51,[-1]]],10,[48,33]],[[[2,[-1]],[2,[-1]]],10,[48,33]],[[[17,[-1]],4],5,48],[[[17,[-1]],4],5,48],[[[17,[-1]],4],5,48],[[[49,[-1]],4],5,48],[[[49,[-1]],4],5,48],[[[40,[-1]],4],5,48],[[[40,[-1]],4],5,48],[[[40,[-1]],4],5,48],[[[50,[-1]],4],5,48],[[[50,[-1]],4],5,48],[[[50,[-1]],4],5,48],[[[51,[-1]],4],5,48],[[[51,[-1]],4],5,48],[[[51,[-1]],4],5,48],[[[2,[-1]],4],5,48],[[[2,[-1]],4],5,48],[[[2,[-1]],4],5,48],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[[17,[-1]],-2],11,[48,54],26],[[[49,[-1]],-2],11,[48,54],26],[[[40,[-1]],-2],11,[48,54],26],[[[50,[-1]],-2],11,[48,54],26],[[[51,[-1]],-2],11,[48,54],26],[[[2,[-1]],-2],11,[48,54],26],[[[2,[-1]],[51,[-1]]],11,48],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[17,[-1]]],55,48],[[[49,[-1]]],55,48],[[[40,[-1]]],55,48],[[[50,[-1]]],55,48],[[[51,[-1]]],-1,48],[[[2,[-1]]],-1,48],[[[17,[-1]]],[[2,[-1]]],48],[[[50,[-1]]],[[2,[-1]]],48],[[[51,[-1]]],[[2,[-1]]],48],[55,[[12,[[17,[-1]],[49,[-1]]]]],48],[55,[[27,[[40,[-1]]]]],48],[55,[[27,[[50,[-1]]]]],48],[-1,[[27,[[51,[-1]]]]],48],[-1,[[2,[-1]]],48],[55,[[17,[-1]]],48],[55,[[50,[-1]]],48],[-1,[[51,[-1]]],48],[[[17,[-1]]],[[11,[[17,[-1]],10]]],48],[[[2,[-1]]],[],48],[[[17,[-1]],[17,[-1]]],[[27,[22]]],[48,38]],[[[49,[-1]],[49,[-1]]],[[27,[22]]],[48,38]],[[[40,[-1]],[40,[-1]]],[[27,[22]]],[48,38]],[[[50,[-1]],[50,[-1]]],[[27,[22]]],[48,38]],[[[51,[-1]],[51,[-1]]],[[27,[22]]],[48,38]],[[[2,[-1]],[2,[-1]]],[[27,[22]]],[48,38]],[[[17,[-1]]],[[50,[-1]]],48],[[[17,[-1]]],[[11,[[17,[-1]],10]]],48],[[[17,[-1]],[40,[-1]]],[[0,[56,57,58,59]]],48],[[],[[0,[56,57,58,59]]]],[[],[[0,[56,57,58,59]]]],[[[17,[-1]]],[[0,[56,57,58,59]]],48],[[[17,[-1]]],[[51,[-1]]],48],[[[50,[-1]]],[[51,[-1]]],48],[-1,[[2,[-2]]],56,48],[[[2,[-1]],[51,[-1]]],10,48],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,29,[]],[-1,29,[]],[-1,29,[]],[-1,29,[]],[-1,29,[]],[-1,29,[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,16,[]],[-1,16,[]],[-1,16,[]],[-1,16,[]],[-1,16,[]],[-1,16,[]],0,0,0,0,[[],23],[23,23],0,0,0,0,[[[17,[-1]]],[[50,[-1]]],48],[[[17,[-1]]],[[50,[-1]]],48],[[[17,[-1]]],[[50,[-1]]],48],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[60,60],[61,61],[[-1,-2],11,[],[]],[[-1,-2],11,[],[]],[[60,60],22],[[61,61],22],[[],60],[[],61],[[60,60],10],[[61,61],10],[[60,4],5],[[61,4],5],[-1,-1,[]],[-1,-1,[]],[[60,-1],11,26],[[61,-1],11,26],[-1,-2,[],[]],[-1,-2,[],[]],[[-2,-3],[[2,[-1]]],48,[[62,[[27,[[17,[-1]]]]]]],[[62,[[27,[[40,[-1]]]]]]]],[[-2,-3],[[2,[-1]]],48,[[62,[[27,[[17,[-1]]]]]]],[[62,[[27,[[40,[-1]]]]]]]],[[-2,-3],[[2,[-1]]],48,[[62,[[27,[[17,[-1]]]]]]],[[62,[[27,[[40,[-1]]]]]]]],[[60,60],[[27,[22]]]],[[61,61],[[27,[22]]]],[[[17,[-1]]],[[51,[-1]]],48],[[[17,[-1]]],[[51,[-1]]],48],[[[17,[-1]]],[[51,[-1]]],48],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,16,[]],[-1,16,[]],[10,11],[10,11],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[[63,[-1,-2,-3]],23],[[63,[-1,-2,-3]]],41,31,15],[[[63,[-1,-2,-3]]],[[64,[-1,-2]]],41,31,15],[[[63,[-1,-2,-3]],23],23,41,31,15],[[[65,[42,-1,-2]]],10,31,15],[[[63,[42,-1,-2]]],[[27,[[65,[42,-1,-2]]]]],31,15],[[[65,[-1,-2,-3]]],10,41,31,15],[[[63,[-1,-2,-3]]],[[27,[[65,[43,-2,-3]]]]],41,31,15],[[[63,[-1,-2,-3]]],17,41,31,15],[[[63,[43,-1,-2]],23],13,31,15],[[[63,[42,-1,-2]],23],13,31,15],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[63,[-1,-2,-3]]],[[63,[-1,-4,-3]]],41,31,15,31],[[[64,[-1,-2]]],[[12,[[64,[-1,-2]],[66,[-2]]]]],41,[]],[43,43],[42,42],[[[65,[43,-1,-2]]],[[65,[43,-1,-2]]],31,15],[[[67,[-1,-2,-3]]],[[67,[-1,-2,-3]]],41,31,15],[[[63,[-1,-2,-3]]],[[63,[-1,-2,-3]]],41,31,15],[[[66,[-1]]],[[66,[-1]]],21],[[[68,[-1]]],[[68,[-1]]],[31,21]],[[[14,[-1]]],[[14,[-1]]],[31,21]],[[-1,-2],11,[],[]],[[-1,-2],11,[],[]],[[-1,-2],11,[],[]],[[-1,-2],11,[],[]],[[-1,-2],11,[],[]],[[-1,-2],11,[],[]],[[-1,-2],11,[],[]],[[-1,-2],11,[],[]],[[43,43],22],[[42,42],22],[[[65,[-1,-2,-3]],[65,[-1,-2,-3]]],22,41,31,15],[[[63,[-1,-2,-3]],[63,[-1,-2,-3]]],22,41,31,15],[[[66,[-1]],[66,[-1]]],22,52],[[[68,[-1]],[68,[-1]]],22,[31,52]],[[[14,[-1]],[14,[-1]]],22,[31,52]],[[[65,[42,-1,-2]],10],11,31,15],[[[67,[-1,-2,-3]],[63,[-4,-5,-3]]],10,41,31,15,41,31],[[[63,[43,-1,-2]],[63,[42,-3,-4]],23],11,31,15,31,15],[[[63,[42,-1,-2]],[63,[43,-3,-4]],23],11,31,15,31,15],[[[63,[42,-1,-2]],[63,[43,-3,-4]],23],11,31,15,31,15],[[[63,[43,-1,-2]],[63,[42,-3,-4]],23],11,31,15,31,15],[[[63,[-1,-2,-3]],[63,[42,-4,-5]],23],11,41,31,15,31,15],[[[63,[-1,-2,-3]],[63,[42,-4,-5]],23],11,41,31,15,31,15],[[[67,[-1,-2,-3]]],23,41,31,15],[[],43],[[],42],[[],[[67,[-1,-2,-3]]],41,31,15],[[[65,[-1,-2,-3]]],[],41,31,15],[[[65,[42,-1,-2]]],[],31,15],[[[65,[-1,-2,-3]]],11,41,31,15],[[[63,[42,-1,-2]]],11,31,15],[[[63,[42,-1,-2]]],11,31,15],0,[[[67,[-1,-2,-3]]],[[69,[[63,[-1,-2,-3]]]]],41,31,15],[[[63,[43,-1,-2]],[63,[43,-3,-2]]],10,31,15,31],[[43,43],10],[[42,42],10],[[[65,[-1,-2,-3]],10],10,41,31,15],[[[65,[-1,-2,-3]],[65,[-4,-5,-6]]],10,41,31,15,41,31,15],[[[65,[-1,-2,-3]],10],10,41,31,15],[[[67,[-1,-2,-3]],[67,[-4,-5,-3]]],10,41,31,15,41,31],[[[63,[-1,-2,-3]],[63,[-4,-5,-3]]],10,41,31,15,41,31],[[[66,[-1]],[66,[-1]]],10,33],[[[68,[-1]],[68,[-1]]],10,[31,33]],[[[14,[-1]],[14,[-1]]],10,[31,33]],[[43,4],[[12,[11,70]]]],[[42,4],[[12,[11,70]]]],[[[65,[-1,-2,-3]],4],5,41,31,15],[[[65,[-1,-2,-3]],4],5,41,31,15],[[[65,[-1,-2,-3]],4],5,41,31,15],[[[67,[-1,-2,-3]],4],5,41,31,15],[[[63,[-1,-2,-3]],4],5,41,31,15],[[[63,[-1,-2,-3]],4],5,41,31,15],[[[66,[-1]],4],5,[]],[[[66,[-1]],4],5,[]],[[[68,[-1]],4],5,[31,71]],[[[68,[-1]],4],5,31],[[[14,[-1]],4],5,31],[[[14,[-1]],4],5,31],[-1,[[72,[-1]]],[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[[73,[[63,[-1,-2,-3]]]]],[[67,[-1,-2,-3]]],41,31,15],[-1,-1,[]],[-1,[[63,[42,-1,-2]]],31,15],[-1,[[63,[43,-1,-2]]],31,15],[-1,-1,[]],[74,[[68,[-1]]],31],[-1,-1,[]],[[[66,[-1]]],[[68,[-1]]],31],[[[68,[-1]]],[[14,[-1]]],31],[[[66,[-1]]],[[14,[-1]]],31],[-1,-1,[]],[[[63,[-1,-2,-3]]],[[65,[-1,-2,-3]]],41,31,15],[-1,[[63,[42,-1,-2]]],31,15],[[[1,[-1]]],[[63,[42,-1,-2]]],31,15],[[[73,[[63,[-1,-2,-3]]]]],[[67,[-1,-2,-3]]],41,31,15],[-1,[[63,[43,-1,-2]]],31,15],[[[1,[-1]]],[[63,[43,-1,-2]]],31,15],[[[1,[-1]]],[[63,[42,-1,-2]]],31,15],[[[63,[43,-1,-2]],-3],11,31,15,26],[[43,-1],11,26],[[42,-1],11,26],[[[65,[-1,-2,-3]],-4],11,41,31,15,26],[[[67,[-1,-2,-3]],-4],11,41,31,15,26],[[[63,[-1,-2,-3]],-4],11,41,31,15,26],[[[66,[-1]],-2],11,54,26],[[[68,[-1]],-2],11,[31,54],26],[[[14,[-1]],-2],11,[31,54],26],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[65,[-1,-2,-3]]],[[63,[-1,-2,-3]]],41,31,15],[-1,-2,[],[]],[[[67,[-1,-2,-3]]],[[73,[[63,[-1,-2,-3]]]]],41,31,15],[[[67,[-1,-2,-3]]],10,41,31,15],[[[63,[-1,-2,-3]]],10,41,31,15],[[[67,[-1,-2,-3]]],27,41,31,15],[[[67,[-1,-2,-3]]],23,41,31,15],[[[64,[-1,-2]],17],[[12,[[63,[-1,-2,-3]],[66,[-2]]]]],41,31,15],[[[64,[-1,-2]],17],[[63,[-1,-2,-3]]],41,31,15],[[[67,[-1,-2,-3]]],27,41,31,15],[[[67,[-1,-2,-3]]],27,41,31,15],[[[65,[-1,-2,-3]]],[],41,31,15],[[[67,[-1,-2,-3]],23],27,41,31,15],[[[67,[-1,-2,-3]],23],27,41,31,15],[[],[[63,[43,-1,-2]]],31,15],[[],[[63,[42,-1,-2]]],31,15],[[[63,[-1,-2,-3]],75],[[63,[-1,-2,-3]]],41,31,15],[[[63,[-1,-2,-3]],[63,[-1,-4,-3]]],75,41,31,15,31],[[43,43],[[27,[22]]]],[[42,42],[[27,[22]]]],[[[65,[-1,-2,-3]],10],[[27,[22]]],41,31,15],[[[65,[-1,-2,-3]],[65,[-4,-5,-6]]],[[27,[22]]],41,31,15,41,31,15],[[[65,[-1,-2,-3]],10],[[27,[22]]],41,31,15],[[[63,[-1,-2,-3]],[63,[-4,-5,-3]]],[[27,[22]]],41,31,15,41,31],[[[66,[-1]],[66,[-1]]],[[27,[22]]],38],[[[68,[-1]],[68,[-1]]],[[27,[22]]],[31,38]],[[[14,[-1]],[14,[-1]]],[[27,[22]]],[31,38]],[[[63,[42,-1,-2]]],[],31,15],[[[63,[43,-1,-2]]],[],31,15],[[[63,[-1,-2,-3]]],[[11,[[64,[-1,-2]],17]]],41,31,15],[[[63,[43,-1,-2]]],10,31,15],[[[63,[-1,-2,-3]]],10,41,31,15],[[[63,[43,-1,-2]]],10,31,15],[[[63,[-1,-2,-3]]],10,41,31,15],[[[63,[43,-1,-2]]],10,31,15],[[[63,[-1,-2,-3]]],10,41,31,15],[[[63,[42,-1,-2]],10],10,31,15],[[[65,[42,-1,-2]],10],10,31,15],[[[63,[42,-1,-2]],10],10,31,15],[[[65,[42,-1,-2]],10],11,31,15],[[[67,[-1,-2,-3]]],[[11,[23,[27,[23]]]]],41,31,15],[[[63,[43,-1,-2]],23],13,31,15],[[[63,[42,-1,-2]],23],13,31,15],0,[[[67,[-1,-2,-3]]],[[69,[[63,[-1,-2,-3]]]]],41,31,15],[[[63,[-1,-2,-3]],23],[[63,[-1,-2,-3]]],41,31,15],[[[63,[42,-1,-2]],[63,[42,-3,-4]]],11,31,15,31,15],[[[65,[42,-1,-2]],[65,[42,-3,-4]]],11,31,15,31,15],[[[63,[42,-1,-2]],[63,[42,-3,-4]]],11,31,15,31,15],[[[63,[42,-1,-2]],[63,[42,-3,-4]],23],11,31,15,31,15],[[[72,[-1]]],-1,[]],[[[63,[-1,-2,-3]]],[[63,[43,-2,-3]]],41,31,15],[[[63,[-1,-2,-3]]],[[63,[42,-2,-3]]],41,31,15],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[63,[-1,-2,-3]]],[[11,[[64,[-1,-2]],17]]],41,31,15],[-1,29,[]],[-1,29,[]],[-1,29,[]],[-1,29,[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[[],[[12,[[63,[43,-1,-2]]]]],31,15],[-1,[[12,[-2]]],[],[]],[[],[[12,[[63,[42,-1,-2]]]]],31,15],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,16,[]],[-1,16,[]],[-1,16,[]],[-1,16,[]],[-1,16,[]],[-1,16,[]],[-1,16,[]],[-1,16,[]],[[[63,[-1,-2,-3]],23],[[63,[-1,-2,-3]]],41,31,15],[[[63,[-1,-2,-3]],75],[[63,[-1,-2,-3]]],41,31,15],[[[63,[-1,-2,-3]],23],[[63,[-1,-2,-3]]],41,31,15],[[[63,[42,-1,-2]],10],11,31,15],[[[63,[42,-1,-2]],10],11,31,15],[[[63,[42,-1,-2]],10,23],11,31,15],[[[63,[42,-1,-2]],10,23],11,31,15],[[[63,[42,-1,-2]],10],11,31,15],[[[63,[42,-1,-2]],10],11,31,15],[[[63,[42,-1,-2]],10],11,31,15],[[[63,[42,-1,-2]],10],11,31,15],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[[13,[-1,-2]]],[[11,[[13,[-1,-2]],[13,[-3,-2]],[13,[-1,-2]]]]],31,15,31],[[[13,[-1,-2]]],[[11,[[13,[-1,-2]],[13,[-3,-2]],[13,[-1,-2]]]]],31,15,31],[[[13,[-1,-2]]],10,31,15],[[[13,[-1,-2]]],10,31,15],[[[13,[-1,-2]]],[[63,[43,-1,-2]]],31,15],[[[13,[-1,-2]]],[[67,[43,-1,-2]]],31,15],[[[76,[-1,-2]]],[[13,[-1,-2]]],31,15],[[[77,[-1,-2]]],[[13,[-2]]],31,15],[[[13,[-1,-2]]],[[13,[-1,-2]]],31,15],[[[13,[-1,-2]]],[[63,[42,-1,-2]]],31,15],[[[13,[-1,-2]]],[[67,[42,-1,-2]]],31,15],[[[13,[-1,-2]]],[[63,[42,-1,-2]]],31,15],[[[13,[-1,-2]]],[[73,[[63,[42,-1,-2]]]]],31,15],[[[13,[-1,-2]]],[[63,[43,-1,-2]]],31,15],[[[13,[-1,-2]]],[[73,[[63,[43,-1,-2]]]]],31,15],[[[76,[-1,-2]]],[[13,[-1,-2]]],31,15],[[[77,[-1,-2]]],[[13,[-2]]],31,15],[[[13,[-1,-2]]],[[13,[-1,-2]]],31,15],[[[76,[-1,-2]]],[[13,[-1,-2]]],31,15],[[[77,[-1,-2]]],[[13,[-2]]],31,15],[[[13,[-1,-2]]],[[44,[43,-1,-2]]],31,15],[[[13,[-1,-2]]],[[44,[42,-1,-2]]],31,15],[[[13,[-1,-2]],[32,[-1,-2]]],11,31,15],[[[13,[-1]],[18,[-2,-1]]],11,15,19],[[[13,[-1,-2]],[35,[-1,-2]]],11,31,15],[[[13,[-1,-2]],[35,[-1,-2]]],11,31,15],[[[13,[-1]],[18,[-2,-1]]],11,15,19],[[[13,[-1,-2]],[32,[-1,-2]]],11,31,15],[[[13,[-1,-2]],[13,[-3,-4]]],11,31,15,31,15],[[[13,[-1,-2]],[35,[-1,-2]]],11,31,15],[[[13,[-1]],[18,[-2,-1]]],11,15,19],[[[13,[-1,-2]],[13,[-3,-4]]],11,31,15,31,15],[[[13,[-1,-2]],[32,[-1,-2]]],11,31,15],[[[13,[-1,-2]],[32,[-1,-2]]],11,31,15],[[[13,[-1]],[18,[-2,-1]]],11,15,19],[[[13,[-1,-2]],[35,[-1,-2]]],11,31,15],[[[13,[-1,-2]],[35,[-1,-2]]],11,31,15],[[[13,[-1]],[18,[-2,-1]]],11,15,19],[[[13,[-1,-2]],[13,[-3,-4]]],11,31,15,31,15],[[[13,[-1,-2]],[35,[-1,-2]]],11,31,15],[[[13,[-1,-2]],[32,[-1,-2]]],11,31,15],[[[13,[-1]],[18,[-2,-1]]],11,15,19],[[[13,[-1,-2]],[32,[-1,-2]]],11,31,15],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[76,[-1,-2]]],[[78,[-1,-2]]],31,15],[[[76,[-1,-2]]],[[79,[-1,-2]]],31,15],[[[13,[-1,-2]],23],[[80,[-1,-2]]],31,15],[[[13,[-1,-2]],23],[[81,[-1,-2]]],31,15],[[[13,[-1,-2]],23],[[82,[-1,-2]]],31,15],[[[13,[-1,-2]],23],[[83,[-1,-2]]],31,15],[[[76,[-1,-2]]],[[76,[-1,-2]]],31,15],[[[84,[-1,-2]]],[[84,[-1,-2]]],[31,21],[15,21]],[[[80,[-1,-2]]],[[80,[-1,-2]]],[31,21],[15,21]],[[[81,[-1,-2]]],[[81,[-1,-2]]],[31,21],[15,21]],[[[85,[-1,-2]]],[[85,[-1,-2]]],[31,21],[15,21]],[[[86,[-1,-2]]],[[86,[-1,-2]]],[31,21],[15,21]],[[[87,[-1,-2,-3]]],[[87,[-1,-2,-3]]],[31,21],[15,21],[88,21]],[[[89,[-1,-2,-3]]],[[89,[-1,-2,-3]]],[31,21],[15,21],[88,21]],[[[90,[-1,-2,-3]]],[[90,[-1,-2,-3]]],[31,21],[15,21],[88,21]],[[[91,[-1,-2,-3]]],[[91,[-1,-2,-3]]],[31,21],[15,21],[88,21]],[[[92,[-1,-2,-3]]],[[92,[-1,-2,-3]]],[31,21],[15,21],[88,21]],[[[93,[-1,-2]]],[[93,[-1,-2]]],[31,21],[15,21]],[[[94,[-1,-2]]],[[94,[-1,-2]]],[31,21],[15,21]],[[[13,[-1,-2]],[13,[-3,-4]]],11,31,15,31,15],[[[13,[-1,-2]],[13,[-3,-4]]],11,31,15,31,15],[[-1,-2],11,[],[]],[[-1,-2],11,[],[]],[[-1,-2],11,[],[]],[[-1,-2],11,[],[]],[[-1,-2],11,[],[]],[[-1,-2],11,[],[]],[[-1,-2],11,[],[]],[[-1,-2],11,[],[]],[[-1,-2],11,[],[]],[[-1,-2],11,[],[]],[[-1,-2],11,[],[]],[[-1,-2],11,[],[]],[[-1,-2],11,[],[]],[[[13,[-1,-2]],[13,[-1,-2]]],22,31,15],[[[93,[-1,-2]],[93,[-1,-2]]],22,[31,52],[15,52]],[[[94,[-1,-2]],[94,[-1,-2]]],22,[31,52],[15,52]],[[[13,[-1,-2]],[13,[-3,-4]]],10,31,15,31,15],[[[76,[-1,-2]]],[[79,[-1,-2]]],31,15],[[[13,[-1,-2]],[13,[-1,-2]]],11,31,15],[[[13,[-1,-2]],[13,[-1,-2]]],11,31,15],[[[13,[-1,-2]],-3,23],11,31,15,[[95,[23]]]],[[[13,[-1,-2]],-3,23],11,31,15,[[95,[23]]]],[[[76,[-1,-2]]],23,31,15],[[[77,[-1,-2]]],23,31,15],[[[79,[-1,-2]]],23,31,15],[[[84,[-1,-2]]],23,31,15],[[[80,[-1,-2]]],23,31,15],[[[83,[-1,-2]]],23,31,15],[[[81,[-1,-2]]],23,31,15],[[[82,[-1,-2]]],23,31,15],[[[85,[-1,-2]]],23,31,15],[[[96,[-1,-2]]],23,31,15],[[[86,[-1,-2]]],23,31,15],[[[97,[-1,-2]]],23,31,15],[[[93,[-1,-2]]],23,31,15],[[[94,[-1,-2]]],23,31,15],[[[98,[-1,-2]]],23,31,15],[[[99,[-1,-2]]],23,31,15],[[[100,[-1,-2]]],23,31,15],[[[101,[-1,-2]]],23,31,15],[[[102,[-1,-2]]],23,31,15],[[[103,[-1,-2,-3]]],23,31,15,88],[[[104,[-1,-2,-3]]],23,31,15,88],[[[105,[-1,-2,-3]]],23,31,15,88],[[[106,[-1,-2,-3]]],23,31,15,88],[[[107,[-1,-2,-3]]],23,31,15,88],[[[13,[-1,-2]]],23,31,15],[[[13,[-1,-2]]],23,31,15],[[],[[13,[-1,-2]]],31,15],[[],[[13,[-1,-2]]],31,15],[[],[[93,[-1,-2]]],31,15],[[],[[94,[-1,-2]]],31,15],[[[13,[-1,-2]]],[[45,[43,-1,-2]]],31,15],[[[13,[-1,-2]]],[[45,[42,-1,-2]]],31,15],[[],[[13,[-1,-2]]],31,15],[[],[[13,[-1,-2]]],31,15],[[[13,[-1,-2]],[13,[-3,-4]]],10,31,15,31,15],[[[13,[-1,-2]],[13,[-3,-4]]],10,31,15,31,15],[[[13,[-1,-2]],[32,[-3,-4]]],10,31,15,31,15],[[[13,[-1,-2]],[32,[-3,-4]]],10,31,15,31,15],[[[13,[-1,-2]],[13,[-3,-4]]],10,31,15,31,15],[[[13,[-1,-2]],[18,[-3,-4]]],10,31,15,19,15],[[[13,[-1,-2]],[13,[-3,-4]]],10,31,15,31,15],[[[13,[-1,-2]],[35,[-3,-4]]],10,31,15,31,15],[[[13,[-1,-2]],[13,[-3,-4]]],10,31,15,31,15],[[[13,[-1,-2]],[32,[-3,-4]]],10,31,15,31,15],[[[13,[-1,-2]],[13,[-3,-4]]],10,31,15,31,15],[[[13,[-1,-2]],[35,[-3,-4]]],10,31,15,31,15],[[[13,[-1,-2]],[35,[-3,-4]]],10,31,15,31,15],[[[93,[-1,-2]],[93,[-1,-2]]],10,[31,33],[15,33]],[[[94,[-1,-2]],[94,[-1,-2]]],10,[31,33],[15,33]],[[[13,[-1,-2]],10],11,31,15],[[[13,[-1,-2]],-3],11,31,15,88],[[[13,[-1,-2]]],[[27,[[65,[43,-1,-2]]]]],31,15],[[[13,[-1,-2]]],[[27,[[65,[42,-1,-2]]]]],31,15],[[[13,[-1,-2]]],[[27,[23]]],31,15],[[[13,[-1,-2]]],[[27,[23]]],31,15],[[[13,[-1,-2]]],[[108,[11]]],31,15],[[[76,[-1,-2]],4],5,31,15],[[[77,[-1,-2]],4],5,31,15],[[[109,[-1,-2,-3]],4],5,31,15,88],[[[110,[-1,-2,-3]],4],5,31,15,88],[[[111,[-1,-2,-3]],4],5,31,15,88],[[[112,[-1,-2,-3]],4],5,31,15,88],[[[113,[-1,-2,-3]],4],5,31,15,88],[[[13,[-1,-2]],4],5,31,15],[[[13,[-1,-2]],4],5,31,15],[[[13,[-1,-2]],4],5,31,15],[[[13,[-1,-2]],4],5,31,15],[[[13,[-1,-2]],4],5,31,15],[[[13,[-1,-2]],4],5,31,15],[[[13,[-1,-2]],4],5,31,15],[[[84,[-1,-2]],4],5,[31,71],[15,71]],[[[80,[-1,-2]],4],5,[31,71],[15,71]],[[[83,[-1,-2]],4],5,[31,71],[15,71]],[[[81,[-1,-2]],4],5,[31,71],[15,71]],[[[82,[-1,-2]],4],5,[31,71],[15,71]],[[[85,[-1,-2]],4],5,[31,71],[15,71]],[[[96,[-1,-2]],4],5,[31,71],[15,71]],[[[86,[-1,-2]],4],5,[31,71],[15,71]],[[[97,[-1,-2]],4],5,[31,71],[15,71]],[[[87,[-1,-2,-3]],4],5,31,15,88],[[[89,[-1,-2,-3]],4],5,31,15,88],[[[90,[-1,-2,-3]],4],5,31,15,88],[[[91,[-1,-2,-3]],4],5,31,15,88],[[[92,[-1,-2,-3]],4],5,31,15,88],[[[93,[-1,-2]],4],5,[31,71],[15,71]],[[[94,[-1,-2]],4],5,[31,71],[15,71]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,[[13,[-1,-2]]],31,15],[-1,[[13,[-1,-2]]],31,15],[-1,[[13,[-1,-2]]],31,15],[[[63,[43,-1,-2]],23],[[12,[[13,[-1,-2]],[14,[-1]]]]],31,15],[[[63,[42,-1,-2]],23],[[12,[[13,[-1,-2]],[14,[-1]]]]],31,15],[[[63,[43,-1,-2]],23],[[13,[-1,-2]]],31,15],[[[63,[42,-1,-2]],23],[[13,[-1,-2]]],31,15],[-1,[[13,[-1,-2]]],31,15],[[[1,[-1]]],[[13,[-1,-2]]],31,15],[[[1,[-1]]],[[13,[-1,-2]]],31,15],[[[1,[-1]]],[[13,[-1,-2]]],31,15],[[[1,[-1]]],[[13,[-1,-2]]],31,15],[[-1,[13,[-2,-3]]],27,[],[],[]],[[[13,[-1,-2]],-3],27,31,15,[[114,[-1,-2]]]],[[-1,[13,[-2,-3]]],27,[],[],[]],[[[13,[-1,-2]],-3],27,31,15,[[114,[-1,-2]]]],[[-1,[13,[-2,-3]]],[],[],[],[]],[[[13,[-1,-2]],-3],[],31,15,[[114,[-1,-2]]]],[[-1,[13,[-2,-3]]],[],[],[],[]],[[[13,[-1,-2]],-3],[],31,15,[[114,[-1,-2]]]],[[[13,[-1,-2]],-3],11,31,15,26],[[-1,[13,[-2,-3]]],[],[],[],[]],[[[13,[-1,-2]],[115,[23]]],[],31,15],[[[13,[-1,-2]],[116,[23]]],[],31,15],[[[13,[-1,-2]],[73,[23]]],[],31,15],[[[13,[-1,-2]],117],[],31,15],[[[13,[-1,-2]],[118,[23]]],[],31,15],[[[13,[-1,-2]],[119,[23]]],[],31,15],[[[13,[-1,-2]],23],[],31,15],[[-1,[13,[-2,-3]]],[],[],[],[]],[[[13,[-1,-2]],[115,[23]]],[],31,15],[[[13,[-1,-2]],[73,[23]]],[],31,15],[[[13,[-1,-2]],[118,[23]]],[],31,15],[[[13,[-1,-2]],[119,[23]]],[],31,15],[[[13,[-1,-2]],117],[],31,15],[[[13,[-1,-2]],[116,[23]]],[],31,15],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[77,[-1,-2]]],[[13,[-2]]],31,15],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[13,[-1,-2]]],[],31,15],[[[13,[-1,-2]]],[],31,15],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[82,[-1,-2]]],[[13,[-2]]],31,15],[[[97,[-1,-2]]],[[13,[-2]]],31,15],[[[100,[-1,-2]]],[[13,[-1,-2]]],31,15],[[[102,[-1,-2]]],[[13,[-1,-2]]],31,15],[[[77,[-1,-2]]],[[13,[-2]]],31,15],[[[13,[-1,-2]]],10,31,15],[[[13,[-1,-2]]],[[76,[-1,-2]]],31,15],[[[13,[-1,-2]]],[[77,[-1,-2]]],31,15],[[[13,[-1,-2]]],[[93,[-1,-2]]],31,15],[[[13,[-1,-2]]],[[94,[-1,-2]]],31,15],[[[76,[-1,-2]]],27,31,15],[[[77,[-1,-2]]],27,31,15],[[[79,[-1,-2]]],27,31,15],[[[13,[-1,-2]]],[[27,[[65,[43,-1,-2]]]]],31,15],[[[84,[-1,-2]]],27,31,15],[[[80,[-1,-2]]],27,31,15],[[[83,[-1,-2]]],27,31,15],[[[81,[-1,-2]]],27,31,15],[[[82,[-1,-2]]],27,31,15],[[[85,[-1,-2]]],27,31,15],[[[96,[-1,-2]]],27,31,15],[[[86,[-1,-2]]],27,31,15],[[[97,[-1,-2]]],27,31,15],[[[93,[-1,-2]]],27,31,15],[[[94,[-1,-2]]],27,31,15],[[[98,[-1,-2]]],27,31,15],[[[99,[-1,-2]]],27,31,15],[[[100,[-1,-2]]],27,31,15],[[[101,[-1,-2]]],27,31,15],[[[102,[-1,-2]]],27,31,15],[[[103,[-1,-2,-3]]],27,31,15,88],[[[104,[-1,-2,-3]]],27,31,15,88],[[[105,[-1,-2,-3]]],27,31,15,88],[[[106,[-1,-2,-3]]],27,31,15,88],[[[107,[-1,-2,-3]]],27,31,15,88],[[[13,[-1,-2]]],[[27,[[65,[42,-1,-2]]]]],31,15],[[[13,[-1,-2]]],[[27,[23]]],31,15],[[[13,[-1,-2]]],[[27,[23]]],31,15],[[[13,[-1,-2]]],23,31,15],[[[13,[-1,-2]]],23,31,15],[[[76,[-1,-2]]],23,31,15],[[[77,[-1,-2]]],23,31,15],[[[79,[-1,-2]]],23,31,15],[[[13,[-1,-2]]],23,31,15],[[[84,[-1,-2]]],23,31,15],[[[80,[-1,-2]]],23,31,15],[[[83,[-1,-2]]],23,31,15],[[[81,[-1,-2]]],23,31,15],[[[82,[-1,-2]]],23,31,15],[[[85,[-1,-2]]],23,31,15],[[[96,[-1,-2]]],23,31,15],[[[86,[-1,-2]]],23,31,15],[[[97,[-1,-2]]],23,31,15],[[[93,[-1,-2]]],23,31,15],[[[94,[-1,-2]]],23,31,15],[[[98,[-1,-2]]],23,31,15],[[[99,[-1,-2]]],23,31,15],[[[100,[-1,-2]]],23,31,15],[[[101,[-1,-2]]],23,31,15],[[[102,[-1,-2]]],23,31,15],[[[103,[-1,-2,-3]]],23,31,15,88],[[[104,[-1,-2,-3]]],23,31,15,88],[[[105,[-1,-2,-3]]],23,31,15,88],[[[106,[-1,-2,-3]]],23,31,15,88],[[[107,[-1,-2,-3]]],23,31,15,88],[[[13,[-1,60]]],-2,31,28],[[[13,[-1,61]]],-2,31,28],[[[13,[-1,60]]],-2,31,28],[[[13,[-1,61]]],-2,31,28],[[[76,[-1,-2]]],27,31,15],[[[77,[-1,-2]]],27,31,15],[[[79,[-1,-2]]],27,31,15],[[[109,[-1,-2,-3]]],27,31,15,88],[[[110,[-1,-2,-3]]],27,31,15,88],[[[111,[-1,-2,-3]]],27,31,15,88],[[[112,[-1,-2,-3]]],27,31,15,88],[[[113,[-1,-2,-3]]],27,31,15,88],[[[84,[-1,-2]]],27,31,15],[[[80,[-1,-2]]],27,31,15],[[[83,[-1,-2]]],27,31,15],[[[81,[-1,-2]]],27,31,15],[[[82,[-1,-2]]],27,31,15],[[[85,[-1,-2]]],27,31,15],[[[96,[-1,-2]]],27,31,15],[[[86,[-1,-2]]],27,31,15],[[[97,[-1,-2]]],27,31,15],[[[87,[-1,-2,-3]]],27,31,15,88],[[[89,[-1,-2,-3]]],27,31,15,88],[[[90,[-1,-2,-3]]],27,31,15,88],[[[91,[-1,-2,-3]]],27,31,15,88],[[[92,[-1,-2,-3]]],27,31,15,88],[[[93,[-1,-2]]],27,31,15],[[[94,[-1,-2]]],27,31,15],[[[98,[-1,-2]]],27,31,15],[[[99,[-1,-2]]],27,31,15],[[[100,[-1,-2]]],27,31,15],[[[101,[-1,-2]]],27,31,15],[[[102,[-1,-2]]],27,31,15],[[[103,[-1,-2,-3]]],27,31,15,88],[[[104,[-1,-2,-3]]],27,31,15,88],[[[105,[-1,-2,-3]]],27,31,15,88],[[[106,[-1,-2,-3]]],27,31,15,88],[[[107,[-1,-2,-3]]],27,31,15,88],[[[76,[-1,-2]]],27,31,15],[[[77,[-1,-2]]],27,31,15],[[[79,[-1,-2]]],27,31,15],[[[109,[-1,-2,-3]]],27,31,15,88],[[[110,[-1,-2,-3]]],27,31,15,88],[[[111,[-1,-2,-3]]],27,31,15,88],[[[84,[-1,-2]]],27,31,15],[[[80,[-1,-2]]],27,31,15],[[[83,[-1,-2]]],27,31,15],[[[81,[-1,-2]]],27,31,15],[[[82,[-1,-2]]],27,31,15],[[[85,[-1,-2]]],27,31,15],[[[96,[-1,-2]]],27,31,15],[[[86,[-1,-2]]],27,31,15],[[[97,[-1,-2]]],27,31,15],[[[87,[-1,-2,-3]]],27,31,15,88],[[[89,[-1,-2,-3]]],27,31,15,88],[[[90,[-1,-2,-3]]],27,31,15,88],[[[93,[-1,-2]]],27,31,15],[[[94,[-1,-2]]],27,31,15],[[[98,[-1,-2]]],27,31,15],[[[99,[-1,-2]]],27,31,15],[[[100,[-1,-2]]],27,31,15],[[[101,[-1,-2]]],27,31,15],[[[102,[-1,-2]]],27,31,15],[[[103,[-1,-2,-3]]],27,31,15,88],[[[104,[-1,-2,-3]]],27,31,15,88],[[[105,[-1,-2,-3]]],27,31,15,88],[[[106,[-1,-2,-3]]],27,31,15,88],[[[107,[-1,-2,-3]]],27,31,15,88],[[[13,[-1,-2]]],[],31,15],[[[13,[-1,-2]]],10,31,15],[[[13,[-1,-2]]],10,31,15],[[[76,[-1,-2]],23],27,31,15],[[[77,[-1,-2]],23],27,31,15],[[[79,[-1,-2]],23],27,31,15],[[[84,[-1,-2]],23],27,31,15],[[[80,[-1,-2]],23],27,31,15],[[[83,[-1,-2]],23],27,31,15],[[[81,[-1,-2]],23],27,31,15],[[[82,[-1,-2]],23],27,31,15],[[[85,[-1,-2]],23],27,31,15],[[[96,[-1,-2]],23],27,31,15],[[[86,[-1,-2]],23],27,31,15],[[[97,[-1,-2]],23],27,31,15],[[[98,[-1,-2]],23],27,31,15],[[[99,[-1,-2]],23],27,31,15],[[[100,[-1,-2]],23],27,31,15],[[[101,[-1,-2]],23],27,31,15],[[[102,[-1,-2]],23],27,31,15],[[[103,[-1,-2,-3]],23],27,31,15,88],[[[104,[-1,-2,-3]],23],27,31,15,88],[[[105,[-1,-2,-3]],23],27,31,15,88],[[[106,[-1,-2,-3]],23],27,31,15,88],[[[107,[-1,-2,-3]],23],27,31,15,88],[[[76,[-1,-2]],23],27,31,15],[[[77,[-1,-2]],23],27,31,15],[[[79,[-1,-2]],23],27,31,15],[[[84,[-1,-2]],23],27,31,15],[[[80,[-1,-2]],23],27,31,15],[[[83,[-1,-2]],23],27,31,15],[[[81,[-1,-2]],23],27,31,15],[[[82,[-1,-2]],23],27,31,15],[[[85,[-1,-2]],23],27,31,15],[[[96,[-1,-2]],23],27,31,15],[[[86,[-1,-2]],23],27,31,15],[[[97,[-1,-2]],23],27,31,15],[[[98,[-1,-2]],23],27,31,15],[[[99,[-1,-2]],23],27,31,15],[[[100,[-1,-2]],23],27,31,15],[[[101,[-1,-2]],23],27,31,15],[[[102,[-1,-2]],23],27,31,15],[[[103,[-1,-2,-3]],23],27,31,15,88],[[[104,[-1,-2,-3]],23],27,31,15,88],[[[105,[-1,-2,-3]],23],27,31,15,88],[[[106,[-1,-2,-3]],23],27,31,15,88],[[[107,[-1,-2,-3]],23],27,31,15,88],[[[13,[-1,-2]],[13,[-3,-4]]],[[27,[22]]],31,15,31,15],[[[13,[-1,-2]],[13,[-3,-4]]],[[27,[22]]],31,15,31,15],[[[13,[-1,-2]],[13,[-3,-4]]],[[27,[22]]],31,15,31,15],[[[13,[-1,-2]],[35,[-3,-4]]],[[27,[22]]],31,15,31,15],[[[13,[-1,-2]],[18,[-3,-2]]],[[27,[22]]],31,15,19],[[[13,[-1,-2]],[32,[-3,-4]]],[[27,[22]]],31,15,31,15],[[[13,[-1,-2]],[13,[-3,-4]]],[[27,[22]]],31,15,31,15],[[[13,[-1,-2]],[35,[-3,-4]]],[[27,[22]]],31,15,31,15],[[[13,[-1,-2]],[32,[-3,-4]]],[[27,[22]]],31,15,31,15],[[[13,[-1,-2]],[13,[-3,-4]]],[[27,[22]]],31,15,31,15],[[[13,[-1,-2]],[13,[-3,-4]]],[[27,[22]]],31,15,31,15],[[[13,[-1,-2]],[32,[-3,-4]]],[[27,[22]]],31,15,31,15],[[[13,[-1,-2]],[13,[-3,-4]]],[[27,[22]]],31,15,31,15],[[[13,[-1,-2]],[35,[-3,-4]]],[[27,[22]]],31,15,31,15],[[[93,[-1,-2]],[93,[-1,-2]]],[[27,[22]]],[31,38],[15,38]],[[[94,[-1,-2]],[94,[-1,-2]]],[[27,[22]]],[31,38],[15,38]],[[[13,[-1,-2]],23],[[85,[-1,-2]]],31,15],[[[13,[-1,-2]],23],[[86,[-1,-2]]],31,15],[[[13,[-1,-2]],23],[[97,[-1,-2]]],31,15],[[[13,[-1,-2]],23],[[96,[-1,-2]]],31,15],[[[13,[-1,-2]],[1,[55]]],[[108,[23]]],31,15],[[[81,[-1,-2]]],[[13,[-1,-2]]],31,15],[[[86,[-1,-2]]],[[13,[-1,-2]]],31,15],[[[77,[-1,-2]]],[[98,[-1,-2]]],31,15],[[[109,[-1,-2,-3]]],[[103,[-1,-2,-3]]],31,15,88],[[[110,[-1,-2,-3]]],[[104,[-1,-2,-3]]],31,15,88],[[[111,[-1,-2,-3]]],[[105,[-1,-2,-3]]],31,15,88],[[[112,[-1,-2,-3]]],[[106,[-1,-2,-3]]],31,15,88],[[[113,[-1,-2,-3]]],[[107,[-1,-2,-3]]],31,15,88],[[[83,[-1,-2]]],[[99,[-1,-2]]],31,15],[[[82,[-1,-2]]],[[100,[-1,-2]]],31,15],[[[96,[-1,-2]]],[[101,[-1,-2]]],31,15],[[[97,[-1,-2]]],[[102,[-1,-2]]],31,15],[[[13,[-1,-2]],23],[[35,[-2]]],31,15],[[[13,[-1,-2]],23,10],10,31,15],[[[13,[-1,-2]],23,10],10,31,15],[[[13,[-1,-2]]],11,31,15],[[[13,[-1,-2]],23],11,31,15],[[[13,[-1,-2]],23],11,31,15],[[[13,[-1,-2]],-3],[[90,[-1,-2,-3]]],31,15,88],[[[13,[-1,-2]],-3],[[111,[-1,-2,-3]]],31,15,88],[[[13,[-1,-2]],23,-3],[[92,[-1,-2,-3]]],31,15,88],[[[13,[-1,-2]],23,-3],[[113,[-1,-2,-3]]],31,15,88],[[[13,[-1,-2]],23,10],11,31,15],[[[13,[-1,-2]],23,10],11,[31,47],15],[[[13,[-1,-2]],23,10],11,[31,47],15],[[[13,[-1,-2]],23,10],11,31,15],[[[13,[-1,-2]],23],11,31,15],[[[13,[-1,-2]],23],11,31,15],[[[76,[-1,-2]]],[[11,[23,[27,[23]]]]],31,15],[[[77,[-1,-2]]],[[11,[23,[27,[23]]]]],31,15],[[[79,[-1,-2]]],[[11,[23,[27,[23]]]]],31,15],[[[109,[-1,-2,-3]]],[[11,[23,[27,[23]]]]],31,15,88],[[[110,[-1,-2,-3]]],[[11,[23,[27,[23]]]]],31,15,88],[[[111,[-1,-2,-3]]],[[11,[23,[27,[23]]]]],31,15,88],[[[112,[-1,-2,-3]]],[[11,[23,[27,[23]]]]],31,15,88],[[[113,[-1,-2,-3]]],[[11,[23,[27,[23]]]]],31,15,88],[[[84,[-1,-2]]],[[11,[23,[27,[23]]]]],31,15],[[[80,[-1,-2]]],[[11,[23,[27,[23]]]]],31,15],[[[83,[-1,-2]]],[[11,[23,[27,[23]]]]],31,15],[[[81,[-1,-2]]],[[11,[23,[27,[23]]]]],31,15],[[[82,[-1,-2]]],[[11,[23,[27,[23]]]]],31,15],[[[85,[-1,-2]]],[[11,[23,[27,[23]]]]],31,15],[[[96,[-1,-2]]],[[11,[23,[27,[23]]]]],31,15],[[[86,[-1,-2]]],[[11,[23,[27,[23]]]]],31,15],[[[97,[-1,-2]]],[[11,[23,[27,[23]]]]],31,15],[[[87,[-1,-2,-3]]],[[11,[23,[27,[23]]]]],31,15,88],[[[89,[-1,-2,-3]]],[[11,[23,[27,[23]]]]],31,15,88],[[[90,[-1,-2,-3]]],[[11,[23,[27,[23]]]]],31,15,88],[[[91,[-1,-2,-3]]],[[11,[23,[27,[23]]]]],31,15,88],[[[92,[-1,-2,-3]]],[[11,[23,[27,[23]]]]],31,15,88],[[[93,[-1,-2]]],[[11,[23,[27,[23]]]]],31,15],[[[94,[-1,-2]]],[[11,[23,[27,[23]]]]],31,15],[[[98,[-1,-2]]],[[11,[23,[27,[23]]]]],31,15],[[[99,[-1,-2]]],[[11,[23,[27,[23]]]]],31,15],[[[100,[-1,-2]]],[[11,[23,[27,[23]]]]],31,15],[[[101,[-1,-2]]],[[11,[23,[27,[23]]]]],31,15],[[[102,[-1,-2]]],[[11,[23,[27,[23]]]]],31,15],[[[103,[-1,-2,-3]]],[[11,[23,[27,[23]]]]],31,15,88],[[[104,[-1,-2,-3]]],[[11,[23,[27,[23]]]]],31,15,88],[[[105,[-1,-2,-3]]],[[11,[23,[27,[23]]]]],31,15,88],[[[106,[-1,-2,-3]]],[[11,[23,[27,[23]]]]],31,15,88],[[[107,[-1,-2,-3]]],[[11,[23,[27,[23]]]]],31,15,88],[[[13,[-1,-2]]],10,31,15],[[[13,[-1,-2]],-3],[[87,[-1,-2,-3]]],31,15,88],[[[13,[-1,-2]],23],[[11,[[13,[-1,-2]],[13,[-1,-2]]]]],31,15],[[[13,[-1,-2]],23],[[11,[[13,[-2]],[13,[-2]]]]],31,15],[[[13,[-1,-2]],23],[[11,[[13,[-1,-2]],[13,[-1,-2]]]]],31,15],[[[13,[-1,-2]],23],[[11,[[13,[-2]],[13,[-2]]]]],31,15],[[[13,[-1,-2]]],[[27,[[11,[[65,[43,-1,-2]],[13,[-1,-2]]]]]]],31,15],[[[13,[-1,-2]]],[[27,[[11,[[65,[42,-2]],[13,[-2]]]]]]],31,15],[[[13,[-1,-2]],-3],[[89,[-1,-2,-3]]],31,15,88],[[[13,[-1,-2]],-3],[[110,[-1,-2,-3]]],31,15,88],[[[13,[-1,-2]]],[[27,[[11,[[65,[43,-1,-2]],[13,[-1,-2]]]]]]],31,15],[[[13,[-1,-2]]],[[27,[[11,[[65,[42,-2]],[13,[-2]]]]]]],31,15],[[[13,[-1,-2]],-3],[[109,[-1,-2,-3]]],31,15,88],[[[13,[-1,-2]],23,-3],[[91,[-1,-2,-3]]],31,15,88],[[[13,[-1,-2]],23,-3],[[112,[-1,-2,-3]]],31,15,88],[[[13,[-1,-2]],[13,[-3,-4]]],10,31,15,31,15],[[[13,[-1,61]],-2],11,31,28],[[[13,[-1,60]],-2],11,31,28],[[[13,[-1,60]],-2],11,31,28],[[[13,[-1,61]],-2],11,31,28],[[[13,[-1,-2]],[13,[-3,-4]]],[[27,[[13,[-1,-2]]]]],31,15,31,15],[[[13,[-1,-2]],[13,[-3,-4]]],[[27,[[13,[-1,-2]]]]],31,15,31,15],[[[13,[-1,-2]],23,23],11,31,15],[[[13,[-1,-2]],23,23],11,31,15],[[[13,[-1,-2]],[13,[-3,-4]]],11,31,15,31,15],[[[13,[-1,-2]],[13,[-3,-4]]],11,31,15,31,15],[[[82,[-1,-2]]],[[13,[-2]]],31,15],[[[97,[-1,-2]]],[[13,[-2]]],31,15],[[[100,[-1,-2]]],[[13,[-1,-2]]],31,15],[[[102,[-1,-2]]],[[13,[-1,-2]]],31,15],[[[13,[-1,-2]]],[[35,[-2]]],31,15],[-1,-2,[],[]],[[[13,[-1,-2]]],[],31,15],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,29,[]],[[[13,[-1,-2]]],[[35,[-2]]],31,15],[[[13,[-1,-2]]],23,31,15],[[[13,[-1,-2]]],23,31,15],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[[[1,[-1]]],[[12,[[13,[-1,-2]]]]],31,15],[[[1,[-1]]],[[12,[[13,[-1,-2]]]]],31,15],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[[[1,[-1]]],[[12,[[13,[-1,-2]],[14,[-1]]]]],31,15],[[[1,[-1]]],[[12,[[13,[-1,-2]],[14,[-1]]]]],31,15],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,16,[]],[-1,16,[]],[-1,16,[]],[-1,16,[]],[-1,16,[]],[-1,16,[]],[-1,16,[]],[-1,16,[]],[-1,16,[]],[-1,16,[]],[-1,16,[]],[-1,16,[]],[-1,16,[]],[-1,16,[]],[-1,16,[]],[-1,16,[]],[-1,16,[]],[-1,16,[]],[-1,16,[]],[-1,16,[]],[-1,16,[]],[-1,16,[]],[-1,16,[]],[-1,16,[]],[-1,16,[]],[-1,16,[]],[-1,16,[]],[-1,16,[]],[-1,16,[]],[-1,16,[]],[-1,16,[]],[-1,16,[]],[-1,16,[]],[-1,16,[]],[-1,16,[]],[[[13,[-1,-2]],23],[[84,[-1,-2]]],31,15],[[[13,[-1,-2]],[1,[55]]],[[108,[23]]],31,15],0,0,0,0,0,0,0,0,[[-1,17],10,[]],[-1,[],[]],[[],-1,[]],[-1,11,[]],0,0,0,0,0,[[[35,[-1,-2]],[35,[-3,-4]]],11,31,15,31,15],[[[35,[-1,-2]]],[[63,[43,-1,-2]]],31,15],[[[120,[-1,-2]]],[[13,[-1,-2]]],31,15],[[[35,[-1,-2]]],[[13,[-1,-2]]],31,15],[[[35,[-1,-2]]],[[35,[-1,-2]]],31,15],[[[35,[-1,-2]]],[[13,[-1,-2]]],31,15],[[[35,[-1,-2]]],[[63,[42,-1,-2]]],31,15],[[[35,[-1,-2]]],[[13,[-1,-2]]],31,15],[[[35,[-1,-2]]],[[63,[42,-1,-2]]],31,15],[[[35,[-1,-2]]],[[13,[-1,-2]]],31,15],[[[35,[-1,-2]]],[[63,[43,-1,-2]]],31,15],[[[35,[-1,-2]]],[[1,[-1]]],31,15],[[[35,[-1,-2]]],[[1,[-1]]],31,15],[[[120,[-1,-2]]],[[13,[-1,-2]]],31,15],[[[35,[-1,-2]]],[[35,[-1,-2]]],31,15],[[[35,[-1,-2]]],[[13,[-1,-2]]],31,15],[[[120,[-1,-2]]],[[13,[-1,-2]]],31,15],[[[35,[-1,-2]]],[[13,[-1,-2]]],31,15],[[[35,[-1,-2]],-3],[],31,15,[]],[[[35,[-1,-2]],-3],11,31,15,[]],[[[35,[-1,-2]],-3],[],31,15,[]],[[[35,[-1,-2]],-3],11,31,15,[]],[[[35,[-1,-2]],-3],[],31,15,[]],[[[35,[-1,-2]],-3],11,31,15,[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[35,[-1,-2]]],[[13,[-1,-2]]],31,15],[-1,-2,[],[]],[-1,-2,[],[]],[[[35,[-1,-2]]],[[13,[-1,-2]]],31,15],[-1,-2,[],[]],[-1,-2,[],[]],[[[35,[-1,-2]]],23,31,15],[[[35,[-1,-2]]],11,31,15],[[[35,[-1,-2]]],[[35,[-1,-2]]],31,15],[[-1,-2],11,[],[]],[[[35,[-1,-2]],[35,[-1,-2]]],22,31,15],[[[120,[-1,-2]]],23,31,15],[[[121,[-1,-2,-3]]],23,31,15,56],[[],[[35,[-1,-2]]],31,15],[[[35,[-1,-2]]],[],31,15],[[[35,[-1,-2]]],[],31,15],[[[35,[-1,-2]],-3],[[120,[-1,-2]]],31,15,[[122,[23]]]],[[[120,[-1,-2]]],11,31,15],[[[35,[-1,-2]]],11,31,15],[[[121,[-1,-2,-3]]],11,31,15,56],[[[35,[-1,-2]],-3],10,31,15,[24,[33,[[13,[-1,-2]]]]]],[[[35,[-1,-2]],-3],11,31,15,37],[[[35,[-1,-2]],-3],11,31,15,37],[[[35,[-1,-2]],-3],11,31,15,37],[[[35,[-1,-2]],-3],11,31,15,37],[[[35,[-1,-2]],-3],11,31,15,37],[[[35,[-1,-2]],[13,[-3,-4]]],11,31,15,31,15],[[[35,[-1,-2]],[1,[-1]]],11,31,15],[[[35,[-1,-2]],[13,[-3,-4]]],11,31,15,31,15],[[[35,[-1,-2]],-3],11,31,15,[[95,[23]]]],[[[35,[-1,-2]]],[[108,[11]]],31,15],[[[120,[-1,-2]],4],5,31,15],[[[35,[-1,-2]],4],5,31,15],[[[35,[-1,-2]],4],5,31,15],[[[35,[-1,-2]],4],5,31,15],[[[35,[-1,-2]],4],5,31,15],[[[35,[-1,-2]],4],5,31,15],[[[35,[-1,-2]],4],5,31,15],[[[35,[-1,-2]],4],5,31,15],[[[121,[-1,-2,-3]],4],5,[31,71],[15,71],[56,71]],[[[35,[-1,-2]]],11,31,15],[-1,-1,[]],[[[32,[-1,-2]]],[[35,[-1,-2]]],31,15],[[[36,[[13,[-1,-2]]]]],[[35,[-1,-2]]],31,15],[-1,-1,[]],[[[13,[-1,-2]]],[[35,[-1,-2]]],31,15],[[[13,[-1,-2]]],[[35,[-1,-2]]],31,15],[[[18,[-1,-2]]],[[35,[-2]]],19,15],[-1,-1,[]],[[[13,[-1,-2]]],[[35,[-1,-2]]],31,15],[-1,[[35,[-1,-2]]],31,15],[-1,[[35,[-2,-3]]],37,31,15],[-1,[[35,[-2,-3]]],37,31,15],[-1,[[35,[-2,-3]]],37,31,15],[-1,[[35,[-2,-3]]],37,31,15],[-1,[[35,[-2,-3]]],37,31,15],[[[63,[42,-1,-2]],23,23],[[35,[-1,-2]]],31,15],[[[1,[-1]]],[[35,[-1,-2]]],31,15],[[[123,[-1]]],[[35,[-1,-2]]],31,15],[[[35,[-1,-2]],-3],11,31,15,26],[[[35,[-1,-2]],-3],[],31,15,[]],[[[35,[-1,-2]],-3],[],31,15,[]],[[[35,[-1,-2]],23,10],11,31,15],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[35,[-1,-2]]],[[32,[-1,-2]]],31,15],[[[35,[-1,-2]]],[[32,[-1,-2]]],31,15],[-1,-2,[],[]],[[[35,[-1,-2]]],[],31,15],[[[35,[-1,-2]]],[],31,15],[[[35,[-1,-2]]],[],31,15],[-1,-2,[],[]],[[[35,[-1,-2]]],[[11,[[63,[42,-1,-2]],23,23]]],31,15],[[[35,[-1,-2]]],[[123,[-1]]],31,15],[[[35,[-1,-2]]],10,31,15],[[[120,[-1,-2]]],27,31,15],[[[121,[-1,-2,-3]]],27,31,15,56],[[[35,[-1,-2]]],[[13,[-1,-2]]],31,15],[[[120,[-1,-2]]],23,31,15],[[[35,[-1,-2]]],23,31,15],[[[121,[-1,-2,-3]]],23,31,15,56],[[[35,[-1,-2]]],-3,31,15,28],[[[35,[-1,-2]]],-3,31,15,28],[[],[[35,[-1,-2]]],31,15],[[[120,[-1,-2]]],27,31,15],[[[121,[-1,-2,-3]]],27,31,15,56],[[[120,[-1,-2]]],27,31,15],[[[121,[-1,-2,-3]]],27,31,15,56],[[[35,[-1,-2]]],[],31,15],[[[120,[-1,-2]],23],27,31,15],[[[120,[-1,-2]],23],27,31,15],[[[121,[-1,-2,-3]],23],27,31,15,56],[[[35,[-1,-2]],-3],[[27,[22]]],31,15,[24,[38,[[13,[-1,-2]]]]]],[[[35,[-1,-2]]],[[27,[10]]],31,15],[[[35,[-1,-2]],10],11,31,15],[[[35,[-1,-2]],[1,[55]]],[[108,[23]]],31,15],[[[35,[-1,-2]],23],10,31,15],[[10,23],[[35,[-1,-2]]],31,15],[[[35,[-1,-2]],23],11,31,15],[[[35,[-1,-2]],23],11,31,15],[[[35,[-1,-2]],23,10],11,31,15],[[[35,[-1,-2]],23,-3],11,31,15,88],[[[35,[-1,-2]],-3],11,31,15,88],[[[35,[-1,-2]]],11,31,15],[[[35,[-1,-2]],23],11,31,15],[[[35,[-1,-2]],10],11,31,15],[[[35,[-1,-2]]],11,31,15],[[[120,[-1,-2]]],[[11,[23,[27,[23]]]]],31,15],[[[121,[-1,-2,-3]]],[[11,[23,[27,[23]]]]],31,15,56],[[[35,[-1,-2]],-3,-4],[[121,[-1,-2]]],31,15,[[122,[23]]],37],[[[35,[-1,-2]],23],[[35,[-1,-2]]],31,15],[[[35,[-1,-2]],-3],11,31,15,28],[[[35,[-1,-2]],-3],11,31,15,28],[[[35,[-1,-2]],23],10,31,15],[-1,-2,[],[]],[-1,29,[]],[[[35,[-1,-2]],23],11,31,15],[-1,[[12,[-2]]],[],[]],[[[123,[-1]]],[[12,[[35,[-1,-2]]]]],31,15],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[[[1,[-1]]],[[12,[[35,[-1,-2]],[14,[-1]]]]],31,15],[[[123,[-1]]],[[12,[[35,[-1,-2]],[123,[-1]]]]],31,15],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,16,[]],[-1,16,[]],[-1,16,[]],[23,[[35,[-1,-2]]],31,15],[[[35,[-1,-2]],[1,[55]]],[[108,[23]]],31,15],0,0,0,0,0,0,[-1,[[13,[-2,-3]]],[],[],15],[-1,[[13,[-2,-3]]],[],[],15],[-1,1,[]],[-1,1,[]],[-1,[[18,[-1,-2]]],[],15],[-1,[[12,[[13,[-2,-3]],[14,[-2]]]]],[],[],15],[-1,[[12,[[13,[-2,-3]],[14,[-2]]]]],[],[],15],[-1,[[12,[[13,[-2]],14]]],[],15],[-1,[[12,[[13,[-2]],14]]],[],15],[-1,[[13,[-2]]],[],15],[-1,[[13,[-2]]],[],15]],"c":[135,136,140,141,709,710,782,810,811,876,877,878,933,935,940,941,1055,1073,1075,1201,1206,1311,1595,1616,1755,1756,1757,1763,1764,1801,1840],"p":[[15,"slice"],[3,"BitMask",387],[3,"BitSafeU8",20],[3,"Formatter",1922],[6,"Result",1922],[3,"BitSafeU16",20],[3,"BitSafeU32",20],[3,"BitSafeU64",20],[3,"BitSafeUsize",20],[15,"bool"],[15,"tuple"],[4,"Result",1923],[3,"BitSlice",881],[4,"BitSpanError",622],[8,"BitOrder",553],[3,"TypeId",1924],[3,"BitIdx",387],[3,"BitArray",126],[8,"BitViewSized",1905],[3,"IntoIter",126],[8,"Clone",1925],[4,"Ordering",1926],[15,"usize"],[8,"Sized",1927],[15,"never"],[8,"Hasher",1928],[4,"Option",1929],[8,"Integral",1930],[3,"String",1931],[3,"IntoIter",215],[8,"BitStore",1730],[3,"BitBox",215],[8,"PartialEq",1926],[3,"Box",1932],[3,"BitVec",1742],[4,"Cow",1933],[8,"IntoIterator",1934],[8,"PartialOrd",1926],[3,"PartialElement",305],[3,"BitEnd",387],[8,"Mutability",622],[3,"Mut",622],[3,"Const",622],[4,"BitDomain",305],[4,"Domain",305],[6,"Reference",1935],[8,"Radium",1936],[8,"BitRegister",547],[3,"BitIdxError",387],[3,"BitPos",387],[3,"BitSel",387],[8,"Ord",1926],[8,"Default",1937],[8,"Hash",1928],[15,"u8"],[8,"Iterator",1938],[8,"DoubleEndedIterator",1939],[8,"ExactSizeIterator",1940],[8,"FusedIterator",1941],[3,"Lsb0",553],[3,"Msb0",553],[8,"Into",1942],[3,"BitPtr",622],[3,"Address",1935],[3,"BitRef",622],[3,"MisalignError",622],[3,"BitPtrRange",622],[4,"BitPtrError",622],[4,"Bound",1943],[3,"Error",1922],[8,"Debug",1922],[3,"Frozen",1935],[3,"Range",1943],[3,"NullPtrError",1935],[15,"isize"],[3,"Iter",881],[3,"IterMut",881],[6,"BitRefIter",881],[3,"BitValIter",881],[3,"Chunks",881],[3,"ChunksExact",881],[3,"ChunksExactMut",881],[3,"ChunksMut",881],[3,"Windows",881],[3,"RChunks",881],[3,"RChunksExact",881],[3,"Split",881],[8,"FnMut",1944],[3,"SplitInclusive",881],[3,"RSplit",881],[3,"SplitN",881],[3,"RSplitN",881],[3,"IterOnes",881],[3,"IterZeros",881],[8,"RangeExt",1945],[3,"RChunksMut",881],[3,"RChunksExactMut",881],[3,"IterMutNoAlias",881],[3,"ChunksMutNoAlias",881],[3,"ChunksExactMutNoAlias",881],[3,"RChunksMutNoAlias",881],[3,"RChunksExactMutNoAlias",881],[3,"SplitMutNoAlias",881],[3,"SplitInclusiveMutNoAlias",881],[3,"RSplitMutNoAlias",881],[3,"SplitNMutNoAlias",881],[3,"RSplitNMutNoAlias",881],[6,"Result",1946],[3,"SplitMut",881],[3,"SplitInclusiveMut",881],[3,"RSplitMut",881],[3,"SplitNMut",881],[3,"RSplitNMut",881],[8,"BitSliceIndex",881],[3,"RangeFrom",1943],[3,"RangeTo",1943],[3,"RangeFull",1943],[3,"RangeToInclusive",1943],[3,"RangeInclusive",1943],[3,"Drain",1742],[3,"Splice",1742],[8,"RangeBounds",1943],[3,"Vec",1947],[8,"BitSafe",20],[8,"BitAccess",20],[13,"Region",374],[13,"Region",377],[8,"BitField",380],[8,"BitView",1905],[8,"AsBits",1905],[8,"AsMutBits",1905]],"b":[[165,"impl-Display-for-BitArray%3CA,+O%3E"],[166,"impl-LowerHex-for-BitArray%3CA,+O%3E"],[167,"impl-Debug-for-BitArray%3CA,+O%3E"],[168,"impl-UpperHex-for-BitArray%3CA,+O%3E"],[169,"impl-Binary-for-BitArray%3CA,+O%3E"],[170,"impl-Octal-for-BitArray%3CA,+O%3E"],[182,"impl-IntoIterator-for-%26mut+BitArray%3CA,+O%3E"],[183,"impl-IntoIterator-for-%26BitArray%3CA,+O%3E"],[184,"impl-IntoIterator-for-BitArray%3CA,+O%3E"],[206,"impl-TryFrom%3C%26mut+BitSlice%3C%3CA+as+BitView%3E::Store,+O%3E%3E-for-%26mut+BitArray%3CA,+O%3E"],[208,"impl-TryFrom%3C%26BitSlice%3C%3CA+as+BitView%3E::Store,+O%3E%3E-for-%26BitArray%3CA,+O%3E"],[209,"impl-TryFrom%3C%26BitSlice%3C%3CA+as+BitView%3E::Store,+O%3E%3E-for-BitArray%3CA,+O%3E"],[251,"impl-UpperHex-for-BitBox%3CT,+O%3E"],[252,"impl-Binary-for-BitBox%3CT,+O%3E"],[253,"impl-LowerHex-for-BitBox%3CT,+O%3E"],[254,"impl-Pointer-for-BitBox%3CT,+O%3E"],[255,"impl-Octal-for-BitBox%3CT,+O%3E"],[256,"impl-Display-for-BitBox%3CT,+O%3E"],[257,"impl-Debug-for-BitBox%3CT,+O%3E"],[260,"impl-From%3CBox%3CT%3E%3E-for-BitBox%3CT,+O%3E"],[262,"impl-From%3C%26BitSlice%3CT,+O%3E%3E-for-BitBox%3CT,+O%3E"],[263,"impl-From%3CBitVec%3CT,+O%3E%3E-for-BitBox%3CT,+O%3E"],[264,"impl-From%3CCow%3C\'a,+BitSlice%3CT,+O%3E%3E%3E-for-BitBox%3CT,+O%3E"],[265,"impl-From%3CBitArray%3CA,+O%3E%3E-for-BitBox%3C%3CA+as+BitView%3E::Store,+O%3E"],[331,"impl-Octal-for-Domain%3C\'a,+Const,+T,+O%3E"],[332,"impl-Debug-for-Domain%3C\'a,+M,+T,+O%3E"],[333,"impl-Display-for-Domain%3C\'a,+Const,+T,+O%3E"],[334,"impl-LowerHex-for-Domain%3C\'a,+Const,+T,+O%3E"],[335,"impl-UpperHex-for-Domain%3C\'a,+Const,+T,+O%3E"],[336,"impl-Binary-for-Domain%3C\'a,+Const,+T,+O%3E"],[446,"impl-Binary-for-BitIdx%3CR%3E"],[447,"impl-Display-for-BitIdx%3CR%3E"],[448,"impl-Debug-for-BitIdx%3CR%3E"],[449,"impl-Display-for-BitIdxError%3CR%3E"],[450,"impl-Debug-for-BitIdxError%3CR%3E"],[451,"impl-Binary-for-BitEnd%3CR%3E"],[452,"impl-Debug-for-BitEnd%3CR%3E"],[453,"impl-Display-for-BitEnd%3CR%3E"],[454,"impl-Binary-for-BitPos%3CR%3E"],[455,"impl-Debug-for-BitPos%3CR%3E"],[456,"impl-Display-for-BitPos%3CR%3E"],[457,"impl-Debug-for-BitSel%3CR%3E"],[458,"impl-Binary-for-BitSel%3CR%3E"],[459,"impl-Display-for-BitSel%3CR%3E"],[460,"impl-Display-for-BitMask%3CR%3E"],[461,"impl-Debug-for-BitMask%3CR%3E"],[462,"impl-Binary-for-BitMask%3CR%3E"],[716,"impl-PartialEq%3C%26bool%3E-for-BitRef%3C\'_,+M,+T,+O%3E"],[717,"impl-PartialEq%3CBitRef%3C\'_,+M2,+T2,+O2%3E%3E-for-BitRef%3C\'_,+M1,+T1,+O1%3E"],[718,"impl-PartialEq%3Cbool%3E-for-BitRef%3C\'_,+M,+T,+O%3E"],[726,"impl-Debug-for-BitRef%3C\'_,+M,+T,+O%3E"],[727,"impl-Display-for-BitRef%3C\'_,+M,+T,+O%3E"],[728,"impl-Pointer-for-BitRef%3C\'_,+M,+T,+O%3E"],[730,"impl-Pointer-for-BitPtr%3CM,+T,+O%3E"],[731,"impl-Debug-for-BitPtr%3CM,+T,+O%3E"],[732,"impl-Debug-for-MisalignError%3CT%3E"],[733,"impl-Display-for-MisalignError%3CT%3E"],[734,"impl-Debug-for-BitPtrError%3CT%3E"],[735,"impl-Display-for-BitPtrError%3CT%3E"],[736,"impl-Debug-for-BitSpanError%3CT%3E"],[737,"impl-Display-for-BitSpanError%3CT%3E"],[745,"impl-From%3C%26mut+T%3E-for-BitPtr%3CMut,+T,+O%3E"],[746,"impl-From%3C%26T%3E-for-BitPtr%3CConst,+T,+O%3E"],[748,"impl-From%3CNullPtrError%3E-for-BitPtrError%3CT%3E"],[750,"impl-From%3CMisalignError%3CT%3E%3E-for-BitPtrError%3CT%3E"],[751,"impl-From%3CBitPtrError%3CT%3E%3E-for-BitSpanError%3CT%3E"],[752,"impl-From%3CMisalignError%3CT%3E%3E-for-BitSpanError%3CT%3E"],[798,"impl-PartialOrd%3Cbool%3E-for-BitRef%3C\'_,+M,+T,+O%3E"],[799,"impl-PartialOrd%3CBitRef%3C\'_,+M2,+T2,+O2%3E%3E-for-BitRef%3C\'_,+M1,+T1,+O1%3E"],[800,"impl-PartialOrd%3C%26bool%3E-for-BitRef%3C\'_,+M,+T,+O%3E"],[805,"impl-BitPtr%3CMut,+T,+O%3E"],[806,"impl-BitPtr%3CConst,+T,+O%3E"],[848,"impl-TryFrom%3C*const+T%3E-for-BitPtr%3CConst,+T,+O%3E"],[850,"impl-TryFrom%3C*mut+T%3E-for-BitPtr%3CMut,+T,+O%3E"],[944,"impl-BitAndAssign%3CBitBox%3CT,+O%3E%3E-for-BitSlice%3CT,+O%3E"],[945,"impl-BitAndAssign%3C%26BitArray%3CA,+O%3E%3E-for-BitSlice%3C%3CA+as+BitView%3E::Store,+O%3E"],[946,"impl-BitAndAssign%3C%26BitVec%3CT,+O%3E%3E-for-BitSlice%3CT,+O%3E"],[947,"impl-BitAndAssign%3CBitVec%3CT,+O%3E%3E-for-BitSlice%3CT,+O%3E"],[948,"impl-BitAndAssign%3CBitArray%3CA,+O%3E%3E-for-BitSlice%3C%3CA+as+BitView%3E::Store,+O%3E"],[949,"impl-BitAndAssign%3C%26BitBox%3CT,+O%3E%3E-for-BitSlice%3CT,+O%3E"],[950,"impl-BitAndAssign%3C%26BitSlice%3CT2,+O2%3E%3E-for-BitSlice%3CT1,+O1%3E"],[951,"impl-BitOrAssign%3C%26BitVec%3CT,+O%3E%3E-for-BitSlice%3CT,+O%3E"],[952,"impl-BitOrAssign%3C%26BitArray%3CA,+O%3E%3E-for-BitSlice%3C%3CA+as+BitView%3E::Store,+O%3E"],[953,"impl-BitOrAssign%3C%26BitSlice%3CT2,+O2%3E%3E-for-BitSlice%3CT1,+O1%3E"],[954,"impl-BitOrAssign%3C%26BitBox%3CT,+O%3E%3E-for-BitSlice%3CT,+O%3E"],[955,"impl-BitOrAssign%3CBitBox%3CT,+O%3E%3E-for-BitSlice%3CT,+O%3E"],[956,"impl-BitOrAssign%3CBitArray%3CA,+O%3E%3E-for-BitSlice%3C%3CA+as+BitView%3E::Store,+O%3E"],[957,"impl-BitOrAssign%3CBitVec%3CT,+O%3E%3E-for-BitSlice%3CT,+O%3E"],[958,"impl-BitXorAssign%3C%26BitVec%3CT,+O%3E%3E-for-BitSlice%3CT,+O%3E"],[959,"impl-BitXorAssign%3C%26BitArray%3CA,+O%3E%3E-for-BitSlice%3C%3CA+as+BitView%3E::Store,+O%3E"],[960,"impl-BitXorAssign%3C%26BitSlice%3CT2,+O2%3E%3E-for-BitSlice%3CT1,+O1%3E"],[961,"impl-BitXorAssign%3CBitVec%3CT,+O%3E%3E-for-BitSlice%3CT,+O%3E"],[962,"impl-BitXorAssign%3CBitBox%3CT,+O%3E%3E-for-BitSlice%3CT,+O%3E"],[963,"impl-BitXorAssign%3CBitArray%3CA,+O%3E%3E-for-BitSlice%3C%3CA+as+BitView%3E::Store,+O%3E"],[964,"impl-BitXorAssign%3C%26BitBox%3CT,+O%3E%3E-for-BitSlice%3CT,+O%3E"],[1104,"impl-Default-for-%26mut+BitSlice%3CT,+O%3E"],[1105,"impl-Default-for-%26BitSlice%3CT,+O%3E"],[1113,"impl-PartialEq%3CBitSlice%3CT2,+O2%3E%3E-for-%26mut+BitSlice%3CT1,+O1%3E"],[1114,"impl-PartialEq%3CBitBox%3CT2,+O2%3E%3E-for-BitSlice%3CT1,+O1%3E"],[1115,"impl-PartialEq%3CBitBox%3CT2,+O2%3E%3E-for-%26BitSlice%3CT1,+O1%3E"],[1116,"impl-PartialEq%3C%26mut+BitSlice%3CT2,+O2%3E%3E-for-BitSlice%3CT1,+O1%3E"],[1117,"impl-PartialEq%3CBitArray%3CA,+O2%3E%3E-for-BitSlice%3CT,+O1%3E"],[1118,"impl-PartialEq%3CBitSlice%3CT2,+O2%3E%3E-for-%26BitSlice%3CT1,+O1%3E"],[1119,"impl-PartialEq%3CBitVec%3CT2,+O2%3E%3E-for-%26mut+BitSlice%3CT1,+O1%3E"],[1120,"impl-PartialEq%3C%26BitSlice%3CT2,+O2%3E%3E-for-BitSlice%3CT1,+O1%3E"],[1121,"impl-PartialEq%3CBitBox%3CT2,+O2%3E%3E-for-%26mut+BitSlice%3CT1,+O1%3E"],[1122,"impl-PartialEq%3CBitSlice%3CT2,+O2%3E%3E-for-BitSlice%3CT1,+O1%3E"],[1123,"impl-PartialEq%3CBitVec%3CT2,+O2%3E%3E-for-%26BitSlice%3CT1,+O1%3E"],[1124,"impl-PartialEq%3CBitVec%3CT2,+O2%3E%3E-for-BitSlice%3CT1,+O1%3E"],[1141,"impl-UpperHex-for-BitSlice%3CT,+O%3E"],[1142,"impl-Binary-for-BitSlice%3CT,+O%3E"],[1143,"impl-Octal-for-BitSlice%3CT,+O%3E"],[1144,"impl-Display-for-BitSlice%3CT,+O%3E"],[1145,"impl-Debug-for-BitSlice%3CT,+O%3E"],[1146,"impl-LowerHex-for-BitSlice%3CT,+O%3E"],[1147,"impl-Pointer-for-BitSlice%3CT,+O%3E"],[1221,"impl-Index%3CRangeFrom%3Cusize%3E%3E-for-BitSlice%3CT,+O%3E"],[1222,"impl-Index%3CRangeTo%3Cusize%3E%3E-for-BitSlice%3CT,+O%3E"],[1223,"impl-Index%3CRange%3Cusize%3E%3E-for-BitSlice%3CT,+O%3E"],[1224,"impl-Index%3CRangeFull%3E-for-BitSlice%3CT,+O%3E"],[1225,"impl-Index%3CRangeToInclusive%3Cusize%3E%3E-for-BitSlice%3CT,+O%3E"],[1226,"impl-Index%3CRangeInclusive%3Cusize%3E%3E-for-BitSlice%3CT,+O%3E"],[1227,"impl-Index%3Cusize%3E-for-BitSlice%3CT,+O%3E"],[1229,"impl-IndexMut%3CRangeFrom%3Cusize%3E%3E-for-BitSlice%3CT,+O%3E"],[1230,"impl-IndexMut%3CRange%3Cusize%3E%3E-for-BitSlice%3CT,+O%3E"],[1231,"impl-IndexMut%3CRangeToInclusive%3Cusize%3E%3E-for-BitSlice%3CT,+O%3E"],[1232,"impl-IndexMut%3CRangeInclusive%3Cusize%3E%3E-for-BitSlice%3CT,+O%3E"],[1233,"impl-IndexMut%3CRangeFull%3E-for-BitSlice%3CT,+O%3E"],[1234,"impl-IndexMut%3CRangeTo%3Cusize%3E%3E-for-BitSlice%3CT,+O%3E"],[1279,"impl-IntoIterator-for-%26BitSlice%3CT,+O%3E"],[1280,"impl-IntoIterator-for-%26mut+BitSlice%3CT,+O%3E"],[1372,"impl-BitField-for-BitSlice%3CT%3E"],[1373,"impl-BitField-for-BitSlice%3CT,+Msb0%3E"],[1374,"impl-BitField-for-BitSlice%3CT%3E"],[1375,"impl-BitField-for-BitSlice%3CT,+Msb0%3E"],[1487,"impl-PartialOrd%3CBitSlice%3CT2,+O2%3E%3E-for-%26BitSlice%3CT1,+O1%3E"],[1488,"impl-PartialOrd%3CBitSlice%3CT2,+O2%3E%3E-for-%26mut+BitSlice%3CT1,+O1%3E"],[1489,"impl-PartialOrd%3C%26BitSlice%3CT2,+O2%3E%3E-for-%26mut+BitSlice%3CT1,+O1%3E"],[1490,"impl-PartialOrd%3CBitVec%3CT2,+O2%3E%3E-for-%26mut+BitSlice%3CT1,+O1%3E"],[1491,"impl-PartialOrd%3CBitArray%3CA,+O%3E%3E-for-BitSlice%3CT,+O%3E"],[1492,"impl-PartialOrd%3CBitBox%3CT2,+O2%3E%3E-for-%26mut+BitSlice%3CT1,+O1%3E"],[1493,"impl-PartialOrd%3CBitSlice%3CT2,+O2%3E%3E-for-BitSlice%3CT1,+O1%3E"],[1494,"impl-PartialOrd%3CBitVec%3CT2,+O2%3E%3E-for-BitSlice%3CT1,+O1%3E"],[1495,"impl-PartialOrd%3CBitBox%3CT2,+O2%3E%3E-for-%26BitSlice%3CT1,+O1%3E"],[1496,"impl-PartialOrd%3C%26mut+BitSlice%3CT2,+O2%3E%3E-for-BitSlice%3CT1,+O1%3E"],[1497,"impl-PartialOrd%3C%26mut+BitSlice%3CT2,+O2%3E%3E-for-%26BitSlice%3CT1,+O1%3E"],[1498,"impl-PartialOrd%3CBitBox%3CT2,+O2%3E%3E-for-BitSlice%3CT1,+O1%3E"],[1499,"impl-PartialOrd%3C%26BitSlice%3CT2,+O2%3E%3E-for-BitSlice%3CT1,+O1%3E"],[1500,"impl-PartialOrd%3CBitVec%3CT2,+O2%3E%3E-for-%26BitSlice%3CT1,+O1%3E"],[1586,"impl-BitField-for-BitSlice%3CT,+Msb0%3E"],[1587,"impl-BitField-for-BitSlice%3CT%3E"],[1588,"impl-BitField-for-BitSlice%3CT%3E"],[1589,"impl-BitField-for-BitSlice%3CT,+Msb0%3E"],[1627,"impl-TryFrom%3C%26%5BT%5D%3E-for-%26BitSlice%3CT,+O%3E"],[1628,"impl-TryFrom%3C%26mut+%5BT%5D%3E-for-%26mut+BitSlice%3CT,+O%3E"],[1751,"impl-AsMut%3CBitVec%3CT,+O%3E%3E-for-BitVec%3CT,+O%3E"],[1752,"impl-AsMut%3CBitSlice%3CT,+O%3E%3E-for-BitVec%3CT,+O%3E"],[1761,"impl-AsRef%3CBitVec%3CT,+O%3E%3E-for-BitVec%3CT,+O%3E"],[1762,"impl-AsRef%3CBitSlice%3CT,+O%3E%3E-for-BitVec%3CT,+O%3E"],[1794,"impl-Extend%3C%26T%3E-for-BitVec%3CT,+O%3E"],[1795,"impl-Extend%3CBitRef%3C\'a,+M,+T2,+O2%3E%3E-for-BitVec%3CT1,+O1%3E"],[1796,"impl-Extend%3C%26bool%3E-for-BitVec%3CT,+O%3E"],[1797,"impl-Extend%3Cbool%3E-for-BitVec%3CT,+O%3E"],[1798,"impl-Extend%3CT%3E-for-BitVec%3CT,+O%3E"],[1805,"impl-Debug-for-BitVec%3CT,+O%3E"],[1806,"impl-UpperHex-for-BitVec%3CT,+O%3E"],[1807,"impl-Binary-for-BitVec%3CT,+O%3E"],[1808,"impl-LowerHex-for-BitVec%3CT,+O%3E"],[1809,"impl-Display-for-BitVec%3CT,+O%3E"],[1810,"impl-Octal-for-BitVec%3CT,+O%3E"],[1811,"impl-Pointer-for-BitVec%3CT,+O%3E"],[1815,"impl-From%3CBitBox%3CT,+O%3E%3E-for-BitVec%3CT,+O%3E"],[1816,"impl-From%3CCow%3C\'a,+BitSlice%3CT,+O%3E%3E%3E-for-BitVec%3CT,+O%3E"],[1818,"impl-From%3C%26mut+BitSlice%3CT,+O%3E%3E-for-BitVec%3CT,+O%3E"],[1819,"impl-From%3C%26BitSlice%3CT,+O%3E%3E-for-BitVec%3CT,+O%3E"],[1820,"impl-From%3CBitArray%3CA,+O%3E%3E-for-BitVec%3C%3CA+as+BitView%3E::Store,+O%3E"],[1824,"impl-FromIterator%3C%26T%3E-for-BitVec%3CT,+O%3E"],[1825,"impl-FromIterator%3CBitRef%3C\'a,+M,+T2,+O2%3E%3E-for-BitVec%3CT1,+O1%3E"],[1826,"impl-FromIterator%3CT%3E-for-BitVec%3CT,+O%3E"],[1827,"impl-FromIterator%3Cbool%3E-for-BitVec%3CT,+O%3E"],[1828,"impl-FromIterator%3C%26bool%3E-for-BitVec%3CT,+O%3E"],[1842,"impl-IntoIterator-for-BitVec%3CT,+O%3E"],[1843,"impl-IntoIterator-for-%26mut+BitVec%3CT,+O%3E"],[1844,"impl-IntoIterator-for-%26BitVec%3CT,+O%3E"]]},\
"brotli":{"doc":"","t":"QDICCCCFFFFFLLEDLLLLCCCCCIIDDDDDDCCCDDDNNNNCIIDFRKLMMMMMLLLLLLLLLLLLLLLLLLLLLLMMMLLLLMMMAMMMMMMFMLMMLLMAMMMMMMMMMMLLALLMAKLLLLLKLMMLLLLLLLLLLLLLLLLLLLMMMMMCLLLLLLLLLLLLLLLMMMMLMMMMMMMMMMMLLLLLLLLLLLLMMMMMMMMMKLLLLAMMMMMMMKKMMMMMMMMMMMMMMCCLAMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMKLLLADENNNNNNNLLLLLLLLLLLLLLLLLLLLLLLLLLLHRRRRQDICCFFFFCCCCCCCCCCCDDDCCCCIIDDCCCCKACAAAAAAAAAFCCAAAAAAAACKMMCAMAAALAMAACMAAAGGAKKAAAMAAACCGAAANIDINNNNNNNKLLLLKLLLLDDDIDFEDDKLLLLIKLLLLKLLLLMMNNDNDNDDDDNNDDNNNDDNDRRRRDDKKLLLLLLLLKKLLLLLLLLDENKLLLLKLLLLKLLLLDDDKLLLLFKLLLLLLLLKKLLLLLLLLFKLLLLDKLLLLNEMMMMMMMMKLLLLMMMKLLLLMMKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMKLLLLMMMMMMMMMMMLLLLLLLLLLLLLLLLLLKLLLLLLLMMMLLLMMMMMMMMMLLLLLLLLLLLLMLLLLMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLKLLLLMMMMMKLLLLMMAMMMMMALLLLLLLLLLLLLLLLLLLLLLLLLLLLMRRHHHHMMMMMMMMKLLLLMMMMMMLMMMMMMMMMMMKLLLLMLLLLLLLLMMMMMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLMIDDLLLDDDILLFFLLLLLFLLEDMLLLLLLLLLLLLLLMLLLLLMNMLLLMLLLLMKLLLLLLLLLLLLLLLLMRMLLKLKLKLKLNLLNLLLLLLLLLLLLLLLLLLLLLLLLLMMRRRRFFFFFDDFDLLLLLLLLLLMMMMLMMLLLLLMLLLMMMMMLLLLLLLLLLLFFFDLLLLLMLLMMLLLMLFDDDFFFFFFFFFLFRDDDDMMMMMMLLLLLLLLLLLLLLLLLLMMMMLMMMMMMLLLLLLLMLLLLLLLMMMMMMMMMLLMMMMMLLLLLLLLLLLLLLLLMMMLLLLLLLFFFFFDLLLLMMLLMMLLLLLQIIDKLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLDFDFFFFFFFFFFFFMLLLLLLLLMMLMMMLLLLMLLMMLLLLLLLLFENNNLLLLLLLLLLLFFFFFFRRRRRRRHHHHHHHHHHHHHHHHHHCDCDLLLLLLLLLLLLLLLLLLLLLLLLCFLLLLLLLLLLHFRRRRRRRNRRNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNFFFFFFFFFFFEEFFFDEFFFNFNFENDFNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNMLLLLLLLLLLLLMLLLLLLLLMMMMMMMMMMMMLLLLLLLLLLLMMLLLLLLMMMMMMMMMMMMMMMMMMMMMMMFMMMMMMMLLLLMMLLLLLLLLLLLLLLLLLLFFFFFKLFIDFFDFLLLLLLLLLMMLLLMLLLLLLDDDDFRLLLLLLLLLMLMLLLLGLLLLLLLLLLLLLLLLLLLLLLLLMMLLLLLLLLLLLLLLMDRLLLLLLLLLLLLLLLDDDDFNNNNFFEIDFFFFDGDGDGFKLLLMMMLLLLLLLLLLLLLLLLLLLLLLLLLLMMMLLLLLLLLLLLLLLLLLQMLLLLLLLLLMKLLLKLLLKLLLLLLLLLMLLLLKLLLMMMLLLLLLLLLLLLLLLLLLMLLLLLLLLLDDDLLLLLLLLLLMMLLLLLLLLLLLLLLLLLMMLLLLLLLLLLLLLLLRDNNNNNNEINNDRNNDDICCCRRRRNNDDDRRRRRRRRIRNNDRRDGILLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLMLLMLLMLLLLLLLLLLLFFKLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLMLLLLLLKLLLLMLLMMKLLLLLLLLLLLLLLLLFLLLLLFKLKLFKLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFLLMMFIKKKKKKFKKFDFFFFFDMMMMLLLLMMLLLLMMMMMMMMMMMMMMMMLLLLLLDDDLLLLLLFLLLLLLLLLLLLLLLLLLLLLLLDLLLLLLLLLLLLNRDDNDRRNDNIDNNNNNRDDDDDELLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLQDIDDDDDDIIDDKLLLLLLLKMMLLLLLLMLLLLLLLMLLLMLLLKKMLLLLLLLLLLDDDDLLLLLLLLFFLLLLLLLLLLLLFLLLLLLLLLLLLLLLLFFFDFFFFFFFFLLMLLHRMMFLLLDLLLLLMLLHHHHHMLMLLLLLRDLLLLLLLLLLLLFLLLLLLLLLNIIINEFFDDNNNQQNEENNQQIGNDIGDNNLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKKKKLLLLKKLLLLLLLLLLLLLLLLLLLLLKLLLLKLFFFFFFFFFFFFFGFGGFFFFFGGDDDLLLLLLFLLLLLLLLLLFLLLLLLLLLLQDIDDDDDIIDDKLLLLLLLLLLKMMLLLLLLLLLMLLLLLLLMLLLMKKMLLLLLLLLLLLLLFAAAAADDLLLLLLLLLLLLLLLLLLLLCFFFFFFFFGDNNNNNNNNLLLLELLLLLLLLLLLLLLLLNNNNNNNNNNNFFFFFFFFFFFFEEFFDFFLLLLLLFMMLLLLLLLLLLLLLLLDFFFFFFFFFFFFFFFFFFFFDNNNNNMLLGGEMMMALLMLLLMNNNNNNNNNNNNNNNNNNNNNNNNNNNNNFFFFFFFEFFFFFFFFFFFDFFDDMMMAMMLLLLMMMLLMMMMMMMMMMMMMMMMMMMMMMMMMLLLMMMMALLMMMMMMMMMMMMMMMMMMMMMMMMMMMMMFFMMMMMMMMMMMMMLMMLLLLLLMMDDDLFLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLNNNNNNEEDNNNNNMLLLLLLGGELLMLLLLLLLMLLLLLLLLLLFFFFFDRLLLLLLLQDIFEDIIDDDDDDDDNNNNIIDDKMMMMMMLLMMMMMMMMMMMMMMMMMMMMMMMMMMMKKMMLLLMMMMMMLLMMMMLMMMMMMMMMMMMLLMMMMMMMMMMKLMMMMMMMKKMMMMMMMMMMMMMMMMLLLMMKDFLLLLRRMMMLLLQDIFEDIDDDDDDDNNNNIIDDKLLMMMMMMLLLLLLLLLLLLMMMLLLLMMMMMMMMMMMMMLLLLLMMMMMMMMMMMKLLLKLLMMLLLLLLLLLLMMMMLLLLLMMLLLLLLLMMMMLMMMMMMMMMMMMLLMMMMMMMMMMMMLMMMMMKLKLMMMMMMMMMMMMMMLMMLLLLLLLLLLLLLLLLLLMMKLLF","n":["AllocatedMemory","AllocatedStackMemory","Allocator","BrotliCompress","BrotliCompressCustomAlloc","BrotliCompressCustomIo","BrotliCompressCustomIoCustomDict","BrotliDecompress","BrotliDecompressCustomAlloc","BrotliDecompressCustomIo","BrotliDecompressCustomIoCustomDict","BrotliDecompressStream","BrotliHuffmanTreeGroupInit","BrotliHuffmanTreeGroupRelease","BrotliResult","BrotliState","BrotliStateCleanupAfterMetablock","BrotliStateIsStreamEnd","BrotliStateIsStreamStart","BrotliStateMetablockBegin","CombiningAllocator","CompressorReader","CompressorReaderCustomIo","CompressorWriter","CompressorWriterCustomIo","CustomRead","CustomWrite","Decompressor","DecompressorCustomIo","DecompressorWriter","DecompressorWriterCustomIo","HeapAlloc","HuffmanCode","InputPair","InputReference","InputReferenceMut","IntoIoReader","IoReaderWrapper","IoWriterWrapper","NeedsMoreInput","NeedsMoreOutput","ResultFailure","ResultSuccess","SliceOffset","SliceWrapper","SliceWrapperMut","StackAllocator","TransformDictionaryWord","VERSION","alloc_cell","alloc_cell","alloc_hc","alloc_u32","alloc_u8","bits","block_type_length_state","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","br","buffer","buffer_length","clone","clone_into","close","close","code","code_length_code_lengths","code_length_histo","concat","context_index","context_lookup","context_map","context_map_slice_index","context_map_table","context_modes","copy_from_to","copy_length","copy_to_front","custom_dict","custom_dict_size","default","default","default_value","dictionary","dist_context_map","dist_context_map_slice_index","dist_htree_index","dist_rb","dist_rb_idx","distance_code","distance_context","distance_hgroup","distance_postfix_bits","distance_postfix_mask","drop","drop","enc","eq","eq","error_code","ffi","flush","flush","flush","flush","fmt","fmt","free_cell","free_cell","free_list_overflow_count","free_list_start","from","from","from","from","from","from","from","from","from","from","from","get_mut","get_mut","get_mut","get_mut","get_ref","get_ref","get_ref","get_ref","htree_command_index","htree_index","htree_next_offset","initialize","insert_copy_hgroup","interface","into","into","into","into","into","into","into","into","into","into","into","into_inner","into_inner","into_inner","into_inner","is_last_metablock","is_metadata","is_uncompressed","large_window","len","literal_hgroup","literal_htree_index","loop_counter","max_backward_distance","max_backward_distance_minus_custom_dict_size","max_distance","max_run_length_prefix","mem","meta_block_remaining_len","mtf_or_error_string","mtf_upper_bound","new","new","new","new","new","new","new_strict","new_with_custom_dict","new_with_custom_dictionary","new_with_custom_dictionary","new_with_custom_dictionary","new_with_custom_dictionary","next_symbol","nop","num_direct_distance_codes","num_dist_htrees","num_literal_htrees","partial_pos_out","pos","prev_code_len","rb_roundtrips","read","read","read","read","read","reader","repeat","repeat_code_len","ringbuffer","ringbuffer_mask","ringbuffer_size","should_wrap_ringbuffer","size_nibbles","slice","slice_mut","space","state","sub_loop_counter","substate_context_map","substate_decode_uint8","substate_huffman","substate_metablock_header","substate_tree_group","substate_uncompressed","symbol","symbol_lists_index","symbols_lists_array","system_resources","table","thaw","thaw_pair","to_owned","transform","trivial_literal_context","trivial_literal_contexts","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","value","window_bits","write","write","write","write","writer","BroCatli","BroCatliResult","BrotliFileNotCraftedForAppend","BrotliFileNotCraftedForConcatenation","InvalidWindowSize","NeedsMoreInput","NeedsMoreOutput","Success","WindowSizeLargerThanPreviousFile","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","default","deserialize_from_buffer","eq","finish","fmt","from","from","into","into","new","new_brotli_file","new_with_window_size","serialize_to_buffer","stream","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","kBrotliDictionary","kBrotliDictionaryOffsetsByLength","kBrotliDictionarySizeBitsByLength","kBrotliMaxDictionaryWordLength","kBrotliMinDictionaryWordLength","AllocatedMemory","AllocatedStackMemory","Allocator","BatchSpawnableLite","BrotliAlloc","BrotliCompress","BrotliCompressCustomAlloc","BrotliCompressCustomIo","BrotliCompressCustomIoCustomDict","BrotliEncoderInitParams","BrotliEncoderMaxCompressedSize","BrotliEncoderMaxCompressedSizeMulti","BrotliEncoderParams","BrotliEncoderSetParameter","BrotliEncoderThreadError","CombiningAllocator","CompressionThreadResult","InputPair","InputReference","InputReferenceMut","IntoIoReader","IoReaderWrapper","IoWriterWrapper","Mem256f","Owned","PDF","SendAlloc","SliceWrapper","SliceWrapperMut","StackAllocator","StandardAlloc","StaticCommand","UnionHasher","WorkerPool","ZopfliNode","alloc_cell","backward_references","backward_references_hq","bit_cost","block_split","block_splitter","brotli_bit_stream","cluster","combined_alloc","command","compress_fragment","compress_fragment_two_pass","compress_multi","compress_multi_no_threadpool","compress_worker_pool","constants","context_map_entropy","dictionary_hash","encode","entropy_encode","fast_log","find_stride","fixed_queue","floatX","free_cell","free_list_overflow_count","free_list_start","hash_to_binary_tree","histogram","initialize","input_pair","interface","ir_interpret","len","literal_cost","mem","metablock","multithreading","new_work_pool","nop","pdf","prior_eval","reader","s16","s8","singlethreading","slice","slice_mut","static_dict","static_dict_lut","stride_eval","system_resources","threading","utf8_util","util","v256","v256i","v8","vectorization","worker_pool","writer","ALREADY_PREPARED","AdvHashSpecialization","AdvHasher","AnyHasher","BROTLI_FORCE_LSB_PRIOR","BROTLI_FORCE_MSB_PRIOR","BROTLI_FORCE_SIGNED_PRIOR","BROTLI_FORCE_UTF8_PRIOR","BROTLI_MODE_FONT","BROTLI_MODE_GENERIC","BROTLI_MODE_TEXT","BUCKET_BITS","BUCKET_BITS","BUCKET_BITS","BUCKET_BITS","BUCKET_BITS","BUCKET_SWEEP","BUCKET_SWEEP","BUCKET_SWEEP","BUCKET_SWEEP","BUCKET_SWEEP","BankH40","BankH41","BankH42","BasicHashComputer","BasicHasher","BrotliCreateBackwardReferences","BrotliEncoderMode","BrotliEncoderParams","BrotliHasherParams","BulkStoreRange","BulkStoreRange","BulkStoreRange","BulkStoreRange","BulkStoreRange","CloneWithAlloc","FindLongestMatch","FindLongestMatch","FindLongestMatch","FindLongestMatch","FindLongestMatch","GetHasherCommon","GetHasherCommon","GetHasherCommon","GetHasherCommon","GetHasherCommon","GetHasherCommon","GetHasherCommon","H10","H2","H2Sub","H3","H3Sub","H4","H40","H41","H42","H4Sub","H5","H54","H54Sub","H5Sub","H5q5","H5q7","H6","H6Sub","H9","H9","H9Opts","H9_BLOCK_BITS","H9_BLOCK_SIZE","H9_BUCKET_BITS","H9_NUM_LAST_DISTANCES_TO_CHECK","HQ5Sub","HQ7Sub","HashBytes","HashBytes","HashBytes","HashBytes","HashBytes","HashBytes","HashBytes","HashBytes","HashBytes","HashBytes","HashTypeLength","HashTypeLength","HashTypeLength","HashTypeLength","HashTypeLength","HashTypeLength","HashTypeLength","HashTypeLength","HashTypeLength","HashTypeLength","HasherSearchResult","HowPrepared","NEWLY_PREPARED","Opts","Opts","Opts","Opts","Opts","Prepare","Prepare","Prepare","Prepare","Prepare","PrepareDistanceCache","PrepareDistanceCache","PrepareDistanceCache","PrepareDistanceCache","PrepareDistanceCache","SlotH40","SlotH41","SlotH42","StitchToPreviousBlock","StitchToPreviousBlock","StitchToPreviousBlock","StitchToPreviousBlock","StitchToPreviousBlock","StitchToPreviousBlockInternal","Store","Store","Store","Store","Store","Store4Vec4","Store4Vec4","StoreEvenVec4","StoreEvenVec4","StoreLookahead","StoreLookahead","StoreLookahead","StoreLookahead","StoreLookahead","StoreLookahead","StoreLookahead","StoreLookahead","StoreLookahead","StoreLookahead","StoreLookaheadThenStore","StoreRange","StoreRange","StoreRange","StoreRange","StoreRange","Struct1","USE_DICTIONARY","USE_DICTIONARY","USE_DICTIONARY","USE_DICTIONARY","USE_DICTIONARY","Uninit","UnionHasher","addr","addr","addr","appendable","avoid_distance_prefix_search","banks","banks","banks","block_bits","block_bits","block_bits","block_bits","block_bits","block_bits","block_bits_","block_bits_","block_mask","block_mask","block_mask","block_mask","block_mask","block_mask_","block_mask_","block_size","block_size","block_size","block_size","block_size","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","bucket_bits","bucket_size","bucket_size","bucket_size","bucket_size","bucket_size","bucket_size_","bucket_size_","buckets","buckets_","buckets_","buckets_","buckets_","buckets_","buckets_","catable","cdf_adaptation_detection","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_with_alloc","clone_with_alloc","clone_with_alloc","clone_with_alloc","clone_with_alloc","clone_with_alloc","clone_with_alloc","clone_with_alloc","common","common","common","default","default","default","delta","delta","delta","dict_num_lookups","dict_num_matches","dict_search_stats_","disable_literal_context_modeling","dist","distance","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","favor_cpu_efficiency","fmt","fmt","fmt","free","free_slot_idx","free_slot_idx","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","get_hash_mask","get_hash_mask","get_hash_mask","get_hash_mask","get_hash_mask","get_k_hash_mul","get_k_hash_mul","get_k_hash_mul","get_k_hash_mul","get_k_hash_mul","h9_opts","h9_opts","h9_opts","hash_len","hash_mask","hash_shift","hash_shift","hash_shift","hash_shift","hash_shift","hash_shift_","hash_shift_","hash_to_binary_tree","hasher","head","head","head","high_entropy_detection_quality","hq","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","is_prepared_","kDistanceCacheIndex","kDistanceCacheOffset","kHashMul32","kHashMul64","kHashMul64Long","kInvalidMatch","large_window","len","len_x_code","lgblock","lgwin","literal_adaptation","literal_byte_score","literal_byte_score","load_and_mix_word","load_and_mix_word","load_and_mix_word","load_and_mix_word","load_and_mix_word","log_meta_block","magic_number","max_hops","max_hops","max_hops","mode","new","next","next","next","num","num_","num_last_distances_to_check","params","prior_bitmask_detection","q9_5","quality","score","set_hash_mask","set_hash_mask","set_hash_mask","set_hash_mask","set_hash_mask","size_hint","slice","slice","slice","slice","slice_mut","slice_mut","slice_mut","slice_mut","slots","slots","slots","specialization","stride_detection_quality","tiny_hash","tiny_hash","tiny_hash","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","use_dictionary","Allocable","BackwardMatch","BackwardMatchMut","BulkStoreRange","FindLongestMatch","GetHasherCommon","H10","H10Buckets","H10DefaultParams","H10Params","HashBytes","HashTypeLength","InitBackwardMatch","InitializeH10","Opts","Prepare","PrepareDistanceCache","StitchToPreviousBlock","Store","StoreAndFindMatchesH10","StoreLookahead","StoreRange","Union1","ZopfliNode","_params","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","buckets_","clone","clone","clone_into","clone_into","clone_with_alloc","common","cost","dcode_insert_length","default","distance","distance","distance","eq","eq","fmt","fmt","forest","free","free","free","from","from","from","from","from","from","from","into","into","into","into","into","into","into","invalid_pos_","kInfinity","length","length_and_code","length_and_code","max_tree_comp_length","max_tree_comp_length","max_tree_search_depth","max_tree_search_depth","new","new","new_uninit","new_uninit","next","set_distance","set_length_and_code","shortcut","slice","slice_mut","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","u","window_mask_","BROTLI_MAX_EFFECTIVE_DISTANCE_ALPHABET_SIZE","BROTLI_NUM_COMMAND_SYMBOLS","BROTLI_NUM_LITERAL_SYMBOLS","BROTLI_SIMPLE_DISTANCE_ALPHABET_SIZE","BrotliCreateHqZopfliBackwardReferences","BrotliCreateZopfliBackwardReferences","BrotliInitZopfliNodes","BrotliZopfliComputeShortestPath","BrotliZopfliCreateCommands","PosData","StartPosQueue","StitchToPreviousBlockH10","ZopfliCostModel","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","cost","cost_cmd_","cost_dist_","costdiff","default","distance_cache","distance_histogram_size","fmt","fmt","from","from","from","idx_","into","into","into","literal_costs_","min_cost_cmd_","num_bytes_","pos","q_","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","BitsEntropy","BrotliPopulationCost","ShannonEntropy","BlockSplit","borrow","borrow_mut","destroy","from","into","lengths","lengths_alloc_size","new","num_blocks","num_types","try_from","try_into","type_id","types","types_alloc_size","BrotliSplitBlock","BlockEncoder","BlockSplitCode","BlockTypeCodeCalculator","BrotliBuildAndStoreHuffmanTreeFast","BrotliStoreHuffmanTree","BrotliStoreMetaBlock","BrotliStoreMetaBlockFast","BrotliStoreMetaBlockTrivial","BrotliStoreSyncMetaBlock","BrotliStoreUncompressedMetaBlock","BrotliWriteEmptyLastMetaBlock","BrotliWriteMetadataMetaBlock","Cmp","JumpToByteBoundary","MAX_SIMPLE_DISTANCE_ALPHABET_SIZE","MetaBlockSplit","PrefixCodeRange","RecoderState","SimpleSortHuffmanTree","bits_","block_ix_","block_len_","block_lengths_","block_split_code_","block_types_","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","command_histograms","command_histograms_size","command_split","depths_","destroy","distance_context_map","distance_context_map_size","distance_histograms","distance_histograms_size","distance_split","entropy_ix_","from","from","from","from","from","from","from","histogram_length_","into","into","into","into","into","into","into","last_type","length_bits","length_depths","literal_context_map","literal_context_map_size","literal_histograms","literal_histograms_size","literal_split","nbits","new","new","num_block_types_","num_blocks_","num_bytes_encoded","offset","second_last_type","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_bits","type_code_calculator","type_depths","type_id","type_id","type_id","type_id","type_id","type_id","type_id","BrotliClusterHistograms","BrotliHistogramBitCostDistance","BrotliHistogramCombine","BrotliHistogramReindex","BrotliHistogramRemap","HistogramPair","borrow","borrow_mut","clone","clone_into","cost_combo","cost_diff","default","from","idx1","idx2","into","to_owned","try_from","try_into","type_id","AllocatedMemory","Allocator","BrotliAlloc","CombiningAllocator","alloc_cell","alloc_cell","alloc_cell","alloc_cell","alloc_cell","alloc_cell","alloc_cell","alloc_cell","alloc_cell","alloc_cell","alloc_cell","alloc_cell","alloc_cell","alloc_cell","alloc_cell","alloc_cell","alloc_cell","borrow","borrow_mut","clone","clone_into","default","free_cell","free_cell","free_cell","free_cell","free_cell","free_cell","free_cell","free_cell","free_cell","free_cell","free_cell","free_cell","free_cell","free_cell","free_cell","free_cell","free_cell","from","into","new","to_owned","try_from","try_into","type_id","BrotliDistanceParams","CombineLengthCodes","Command","CommandCopyLen","CommandDistanceContext","CommandDistanceIndexAndOffset","CommandRestoreDistanceCode","ComputeDistanceCode","GetCopyLengthCode","GetInsertLengthCode","GetLengthCode","InitCommand","NewCommand","PrefixEncodeCopyDistance","RecomputeDistancePrefixes","alphabet_size","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","cmd_prefix_","copy_len_","default","dist_extra_","dist_prefix_","distance_postfix_bits","fmt","fmt","from","from","insert_len_","into","into","max_distance","num_direct_distance_codes","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","BrotliCompressFragmentFast","CodeBlockState","EMIT_COMMANDS","EMIT_REMAINDER","NEXT_BLOCK","borrow","borrow_mut","clone","clone_into","eq","from","into","to_owned","try_from","try_into","type_id","BrotliCompressFragmentTwoPass","BrotliStoreMetaBlockHeader","BrotliWriteBits","memcpy","BROTLI_CONTEXT","BROTLI_CONTEXT_LUT","BROTLI_MAX_NDIRECT","BROTLI_MAX_NPOSTFIX","BROTLI_NUM_BLOCK_LEN_SYMBOLS","BROTLI_NUM_COMMAND_SYMBOLS","BROTLI_NUM_HISTOGRAM_DISTANCE_SYMBOLS","BROTLI_NUM_LITERAL_SYMBOLS","BROTLI_WINDOW_GAP","kBrotliMaxWindowBits","kBrotliMinWindowBits","kCodeLengthBits","kCodeLengthDepth","kCopyBase","kCopyExtra","kInsBase","kInsExtra","kNonZeroRepsBits","kNonZeroRepsDepth","kSigned3BitContextLookup","kStaticCommandCodeBits","kStaticCommandCodeDepth","kStaticDistanceCodeBits","kStaticDistanceCodeDepth","kUTF8ContextLookup","kZeroRepsBits","kZeroRepsDepth","Context","ContextMapEntropy","IRInterpreter","SpeedAndMax","best_singleton_speeds","best_speeds","best_speeds_costs","block_type","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","fmt","free","from","from","inc_local_byte_offset","into","into","literal_context_map","literal_data_at_offset","local_byte_offset","new","prediction_mode","prediction_mode_mut","push","push_base","speed_to_tuple","take_prediction_mode","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","update_block_type","update_cost","kStaticDictionaryHash","BROTLI_DISTANCE_ALPHABET_SIZE","BROTLI_LARGE_MAX_DISTANCE_BITS","BROTLI_LARGE_MAX_WBITS","BROTLI_LARGE_MIN_WBITS","BROTLI_MAX_ALLOWED_DISTANCE","BROTLI_MAX_DISTANCE","BROTLI_MAX_DISTANCE_BITS","BROTLI_MAX_WINDOW_BITS","BROTLI_METABLOCK_CALLBACK","BROTLI_NUM_DISTANCE_SHORT_CODES","BROTLI_NUM_DISTANCE_SYMBOLS","BROTLI_OPERATION_EMIT_METADATA","BROTLI_OPERATION_FINISH","BROTLI_OPERATION_FLUSH","BROTLI_OPERATION_PROCESS","BROTLI_PARAM_APPENDABLE","BROTLI_PARAM_AVOID_DISTANCE_PREFIX_SEARCH","BROTLI_PARAM_CATABLE","BROTLI_PARAM_CDF_ADAPTATION_DETECTION","BROTLI_PARAM_CM_SPEED","BROTLI_PARAM_CM_SPEED_LOW","BROTLI_PARAM_CM_SPEED_LOW_MAX","BROTLI_PARAM_CM_SPEED_MAX","BROTLI_PARAM_DISABLE_LITERAL_CONTEXT_MODELING","BROTLI_PARAM_FAVOR_EFFICIENCY","BROTLI_PARAM_HIGH_ENTROPY_DETECTION_QUALITY","BROTLI_PARAM_LARGE_WINDOW","BROTLI_PARAM_LGBLOCK","BROTLI_PARAM_LGWIN","BROTLI_PARAM_LITERAL_BYTE_SCORE","BROTLI_PARAM_MAGIC_NUMBER","BROTLI_PARAM_MODE","BROTLI_PARAM_NO_DICTIONARY","BROTLI_PARAM_PRIOR_BITMASK_DETECTION","BROTLI_PARAM_Q9_5","BROTLI_PARAM_QUALITY","BROTLI_PARAM_SIZE_HINT","BROTLI_PARAM_SPEED","BROTLI_PARAM_SPEED_LOW","BROTLI_PARAM_SPEED_LOW_MAX","BROTLI_PARAM_SPEED_MAX","BROTLI_PARAM_STRIDE_DETECTION_QUALITY","BROTLI_STREAM_FINISHED","BROTLI_STREAM_FLUSH_REQUESTED","BROTLI_STREAM_METADATA_BODY","BROTLI_STREAM_METADATA_HEAD","BROTLI_STREAM_PROCESSING","BothCatableBytesWritten","BrotliEncoderCompress","BrotliEncoderCompressStream","BrotliEncoderCopyInputToRingBuffer","BrotliEncoderCreateInstance","BrotliEncoderDestroyInstance","BrotliEncoderHasMoreOutput","BrotliEncoderInitParams","BrotliEncoderInputBlockSize","BrotliEncoderIsFinished","BrotliEncoderMaxCompressedSize","BrotliEncoderMaxCompressedSizeMulti","BrotliEncoderOperation","BrotliEncoderParameter","BrotliEncoderSetCustomDictionary","BrotliEncoderSetCustomDictionaryWithOptionalPrecomputedHasher","BrotliEncoderSetParameter","BrotliEncoderStateStruct","BrotliEncoderStreamState","BrotliEncoderTakeOutput","BrotliEncoderVersion","BrotliEncoderWriteData","FirstCatableByteWritten","HasherSetup","HeaderWritten","InitInsertCommand","IsFirst","NothingWritten","RingBuffer","SanitizeParams","UNUSED10","UNUSED100","UNUSED101","UNUSED102","UNUSED103","UNUSED104","UNUSED105","UNUSED106","UNUSED107","UNUSED108","UNUSED109","UNUSED11","UNUSED110","UNUSED111","UNUSED112","UNUSED113","UNUSED114","UNUSED115","UNUSED116","UNUSED117","UNUSED118","UNUSED119","UNUSED12","UNUSED120","UNUSED121","UNUSED122","UNUSED123","UNUSED124","UNUSED125","UNUSED126","UNUSED127","UNUSED128","UNUSED129","UNUSED13","UNUSED130","UNUSED131","UNUSED132","UNUSED133","UNUSED134","UNUSED135","UNUSED136","UNUSED137","UNUSED138","UNUSED139","UNUSED14","UNUSED140","UNUSED141","UNUSED142","UNUSED143","UNUSED144","UNUSED145","UNUSED146","UNUSED147","UNUSED148","UNUSED149","UNUSED15","UNUSED16","UNUSED17","UNUSED172","UNUSED173","UNUSED174","UNUSED175","UNUSED176","UNUSED177","UNUSED178","UNUSED179","UNUSED18","UNUSED180","UNUSED181","UNUSED182","UNUSED183","UNUSED184","UNUSED185","UNUSED186","UNUSED187","UNUSED188","UNUSED189","UNUSED19","UNUSED190","UNUSED191","UNUSED192","UNUSED193","UNUSED194","UNUSED195","UNUSED196","UNUSED197","UNUSED198","UNUSED199","UNUSED20","UNUSED200","UNUSED201","UNUSED202","UNUSED203","UNUSED204","UNUSED205","UNUSED206","UNUSED207","UNUSED208","UNUSED209","UNUSED21","UNUSED210","UNUSED211","UNUSED212","UNUSED213","UNUSED214","UNUSED215","UNUSED216","UNUSED217","UNUSED218","UNUSED219","UNUSED22","UNUSED220","UNUSED221","UNUSED222","UNUSED223","UNUSED224","UNUSED225","UNUSED226","UNUSED227","UNUSED228","UNUSED229","UNUSED23","UNUSED230","UNUSED231","UNUSED232","UNUSED233","UNUSED234","UNUSED235","UNUSED236","UNUSED237","UNUSED238","UNUSED239","UNUSED24","UNUSED240","UNUSED241","UNUSED242","UNUSED243","UNUSED244","UNUSED245","UNUSED246","UNUSED247","UNUSED248","UNUSED249","UNUSED25","UNUSED250","UNUSED251","UNUSED252","UNUSED253","UNUSED254","UNUSED255","UNUSED26","UNUSED27","UNUSED28","UNUSED29","UNUSED30","UNUSED31","UNUSED32","UNUSED33","UNUSED34","UNUSED35","UNUSED36","UNUSED37","UNUSED38","UNUSED39","UNUSED40","UNUSED41","UNUSED42","UNUSED43","UNUSED44","UNUSED45","UNUSED46","UNUSED47","UNUSED48","UNUSED49","UNUSED50","UNUSED51","UNUSED52","UNUSED53","UNUSED54","UNUSED55","UNUSED56","UNUSED57","UNUSED58","UNUSED59","UNUSED60","UNUSED61","UNUSED62","UNUSED63","UNUSED64","UNUSED65","UNUSED66","UNUSED67","UNUSED68","UNUSED69","UNUSED7","UNUSED70","UNUSED71","UNUSED72","UNUSED73","UNUSED74","UNUSED75","UNUSED76","UNUSED77","UNUSED78","UNUSED79","UNUSED8","UNUSED80","UNUSED81","UNUSED82","UNUSED83","UNUSED84","UNUSED85","UNUSED86","UNUSED87","UNUSED88","UNUSED89","UNUSED9","UNUSED90","UNUSED91","UNUSED92","UNUSED93","UNUSED94","UNUSED95","UNUSED96","UNUSED97","UNUSED98","UNUSED99","available_out_","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","buffer_index","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","cmd_alloc_size_","cmd_bits_","cmd_code_","cmd_code_numbits_","cmd_depths_","command_buf_","command_scratch_space","commands_","cur_size_","data_mo","dist_cache_","distance_scratch_space","eq","eq","eq","fmt","fmt","from","from","from","from","from","from","hasher_","input_pos_","into","into","into","into","into","into","is_first_mb","is_initialized_","is_last_block_emitted_","large_table_","last_bytes_","last_bytes_bits_","last_flush_pos_","last_insert_len_","last_processed_pos_","literal_buf_","literal_scratch_space","m8","mask_","num_commands_","num_literals_","params","pos_","prev_byte2_","prev_byte_","recoder_state","remaining_metadata_bytes_","ringbuffer_","saved_dist_cache_","set_parameter","size_","small_table_","storage_","storage_size_","stream_state_","tail_size_","tiny_buf_","to_owned","to_owned","to_owned","to_owned","total_out_","total_size_","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","BrotliConvertBitDepthsToSymbols","BrotliCreateHuffmanTree","BrotliOptimizeHuffmanCountsForRle","BrotliSetDepth","BrotliWriteHuffmanTree","Cmp","Cmp","DecideOverRleUse","HuffmanComparator","HuffmanTree","InitHuffmanTree","NewHuffmanTree","SortHuffmanTree","SortHuffmanTreeItems","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","default","from","from","index_left_","index_right_or_value_","into","into","to_owned","total_count_","try_from","try_from","try_into","try_into","type_id","type_id","BucketPopIndex","EntropyBucketPopulation","EntropyPyramid","EntropyTally","HuffmanCost","NUM_LEAF_NODES","bit_cost_of_literals","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","bucket_populations","byte_index_to_pyramid_index","cached_bit_entropy","clone","clone_into","disabled_placeholder","disabled_placeholder","floatY","free","free","free","from","from","from","from","get_previous_bytes","index","index_mut","into","into","into","into","is_free","last_level_range","new","new","new","peek","pick_best_stride","populate","populate_stride1","reset_scratch_to_deepest_level","six_bits","stride","stride_last_level_range","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","val","FixedQueue","MAX_THREADS","borrow","borrow_mut","can_push","default","from","how_much_free_space","into","new","pop","push","remove","size","try_from","try_into","type_id","Array264i","Array528i","Array712i","BlockSplitIterator","BrotliBuildHistogramsWithContext","CONTEXT_LSB6","CONTEXT_MSB6","CONTEXT_SIGNED","CONTEXT_UTF8","ClearHistograms","Context","ContextType","CostAccessors","EmptyIVec","HistogramAddHistogram","HistogramAddItem","HistogramAddVector","HistogramClear","HistogramCommand","HistogramCommandScratch","HistogramDistance","HistogramDistanceScratch","HistogramLiteral","HistogramLiteralScratch","HistogramSelfAddHistogram","bit_cost","bit_cost","bit_cost","bit_cost","bit_cost_","bit_cost_","bit_cost_","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","data_","data_","data_","default","default","default","default","default","default","default","default","from","from","from","from","from","from","from","from","from","i32vec","idx_","into","into","into","into","into","into","into","into","into","length_","make_nnz_storage","make_nnz_storage","make_nnz_storage","make_nnz_storage","set_bit_cost","set_bit_cost","set_bit_cost","set_bit_cost","set_total_count","set_total_count","set_total_count","set_total_count","slice","slice","slice","slice_mut","slice_mut","slice_mut","split_","to_owned","to_owned","to_owned","to_owned","total_count","total_count","total_count","total_count","total_count_","total_count_","total_count_","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","InputPair","InputReference","InputReferenceMut","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","data","data","default","default","eq","fmt","fmt","fmt","freeze","from","from","from","from","from","index","into","into","into","len","orig_offset","orig_offset","slice","slice","slice_mut","split_at","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","ADV_CONTEXT_MAP_OFFSET","BlockSwitch","BlockSwitchCommand","BlockSwitchCommand","BlockSwitchDistance","BlockSwitchDistance","BlockSwitchLiteral","BlockSwitchLiteral","Command","CommandProcessor","Copy","Copy","CopyCommand","DISTANCE_CONTEXT_MAP_OFFSET","Dict","Dict","DictCommand","FeatureFlagSliceType","Freezable","InputPair","InputReference","InputReferenceMut","LITERAL_PREDICTION_MODE_LSB6","LITERAL_PREDICTION_MODE_MSB6","LITERAL_PREDICTION_MODE_SIGN","LITERAL_PREDICTION_MODE_UTF8","Literal","Literal","LiteralBlockSwitch","LiteralCommand","LiteralPredictionModeNibble","MAX_ADV_LITERAL_CONTEXT_MAP_SIZE","MAX_LITERAL_CONTEXT_MAP_SIZE","MAX_PREDMODE_SPEED_AND_DISTANCE_CONTEXT_MAP_SIZE","MIXING_MATH_OFFSET","MIXING_OFFSET","NUM_MIXING_VALUES","NUM_PREDMODE_SETUP_VALUES","NUM_SPEED_VALUES","Nop","PREDMODE_OFFSET","PredictionMode","PredictionMode","PredictionModeContextMap","RESERVED_OFFSET","SPEED_OFFSET","SliceOffset","StaticCommand","Unfreezable","block_type","block_type","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","combined_stride_context_speed","combined_stride_context_speed_f8","combined_stride_context_speed_max_offset","combined_stride_context_speed_offset","context_map_speed","context_map_speed_f8","context_map_speed_max_offset","context_map_speed_offset","context_speeds_f8","context_speeds_standard_len","data","default","default","default","default","default","default","distance","distance_context_map","distance_context_map_mut","empty","eq","f8_to_u16","final_size","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","free_array","free_cmd","free_cmd_inline","freeze","freeze","from","from","from","from","from","from","from","from","from","from","from","from_mut","get_is_adv_context_map","get_mixing_math","get_mixing_values","get_mixing_values_mut","has_context_speeds","hash","high_entropy","into","into","into","into","into","into","into","into","into","into","len","len32","literal_context_map","literal_prediction_mode","lsb6","msb6","new","new","new","nop","nop","nop","nop","nop","num_bytes","offset","prediction_mode","predmode_speed_and_distance_context_map","prob","push","push_block_switch_literal","push_literals","push_rand_literals","set_adv_context_map","set_combined_stride_context_speed","set_context_map_speed","set_literal_prediction_mode","set_mixing_math","set_mixing_values","set_stride_context_speed","signed","size_of_combined_array","slice","slice","slice","slice_mut","speed_to_u8","stride","stride_context_speed","stride_context_speed_f8","stride_context_speed_max_offset","stride_context_speed_offset","thaw","thaw","thaw","thaw_mut","thaw_mut","thaw_pair","thaw_pair","thaw_pair","to_context_enum","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","transform","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","u16_to_f8","u8_to_speed","update_stride","utf8","word_id","word_size","Context","IRInterpreter","block_type","inc_local_byte_offset","literal_context_map","literal_data_at_offset","local_byte_offset","prediction_mode","push_base","update_block_type","update_cost","BrotliEstimateBitCostsForLiterals","BlockSplitter","BrotliBuildMetaBlock","BrotliBuildMetaBlockGreedy","BrotliBuildMetaBlockGreedyInternal","BrotliInitDistanceParams","BrotliOptimizeHistograms","ContextBlockSplitter","alphabet_size_","alphabet_size_","block_size_","block_size_","borrow","borrow","borrow_mut","borrow_mut","curr_histogram_ix_","curr_histogram_ix_","from","from","into","into","last_entropy_","last_entropy_","last_histogram_ix_","last_histogram_ix_","max_block_types_","merge_last_count_","merge_last_count_","min_block_size_","min_block_size_","num_blocks_","num_blocks_","num_contexts_","split_threshold_","split_threshold_","target_block_size_","target_block_size_","try_from","try_from","try_into","try_into","type_id","type_id","MultiThreadedJoinable","MultiThreadedOwnedRetriever","MultiThreadedSpawner","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","compress_multi","default","from","from","from","into","into","into","join","make_spawner","make_spawner","spawn","spawn","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","unwrap","view","PDF","borrow","borrow_mut","clone","clone_into","default","fmt","from","into","to_owned","try_from","try_into","type_id","ADV","ADV_PRIOR_SIZE","AdvPrior","CDF","CM","CMPrior","CONTEXT_MAP_PRIOR_SIZE","DEFAULT_SPEED","FAST_CM","FastCMPrior","NUM_PRIORS","Prior","PriorEval","SLOW_CM","STRIDE1","STRIDE2","STRIDE3","STRIDE4","STRIDE_PRIOR_SIZE","SlowCMPrior","Stride1Prior","Stride2Prior","Stride3Prior","Stride4Prior","WhichPrior","block_type","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","choose_bitmask","cost","free","from","from","from","from","from","from","from","from","from","from","from","inc_local_byte_offset","init_cdfs","into","into","into","into","into","into","into","into","into","into","into","literal_context_map","literal_data_at_offset","local_byte_offset","lookup","lookup_lin","lookup_lin","lookup_lin","lookup_lin","lookup_lin","lookup_lin","lookup_lin","lookup_lin","lookup_lin","lookup_mut","new","offset","offset","offset","offset","prediction_mode","push","score_index","take_prediction_mode","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","update","update_block_type","update_cost","which","which","which","which","which","which","which","which","which","AllocatedMemory","AllocatedStackMemory","Allocator","CompressorReader","CompressorReaderCustomAlloc","CompressorReaderCustomIo","IntoIoReader","IoReaderWrapper","IoWriterWrapper","SliceWrapper","SliceWrapperMut","StackAllocator","StandardAlloc","alloc_cell","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","copy_to_front","free_cell","free_list_overflow_count","free_list_start","from","from","from","get_ref","get_ref","get_ref","initialize","into","into","into","into_inner","into_inner","into_inner","len","mem","new","new","new","nop","read","read","read","slice","slice_mut","system_resources","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","with_params","SingleThreadedJoinable","SingleThreadedOwnedRetriever","SingleThreadedSpawner","WorkerPool","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","compress_multi","compress_worker_pool","default","from","from","from","from","into","into","into","into","join","make_spawner","make_spawner","new_work_pool","spawn","spawn","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","unwrap","view","BROTLI_UNALIGNED_LOAD32","BROTLI_UNALIGNED_LOAD64","BROTLI_UNALIGNED_STORE64","BrotliDictionary","BrotliFindAllStaticDictionaryMatches","BrotliGetDictionary","ComplexFindMatchLengthWithLimit","FindMatchLengthWithLimit","FindMatchLengthWithLimitMin4","Hash","IsMatch","SlowerFindMatchLengthWithLimit","borrow","borrow_mut","data","from","into","kBrotliEncDictionary","kNumDistanceCacheEntries","offsets_by_length","size_bits_by_length","slowFindMatchLengthWithLimit","try_from","try_into","type_id","DictWord","borrow","borrow_mut","clone","clone_into","from","i","idx","into","kDictHashMul32","kDictNumBits","kInvalidMatch","kStaticDictionaryBuckets","kStaticDictionaryWords","l","len","t","to_owned","transform","try_from","try_into","type_id","STRIDE_PRIOR_SIZE","StrideEval","alloc","block_type","borrow","borrow_mut","choose_stride","drop","from","inc_local_byte_offset","into","literal_context_map","literal_data_at_offset","local_byte_offset","local_init_cdfs","new","num_types","prediction_mode","push","try_from","try_into","type_id","update_block_type","update_cost","A","AnyBoxConstructor","BatchSpawnable","BatchSpawnableLite","Borrowed","BrotliEncoderThreadError","CompressMulti","CompressMultiSlice","CompressedFileChunk","CompressionThreadResult","ConcatenationDidNotProcessFullFile","ConcatenationError","ConcatenationFinalizationError","FinalJoinHandle","FinalJoinHandle","InsufficientOutputSpace","InternalOwned","InternalSendAlloc","Item","Join","JoinHandle","JoinHandle","Joinable","LowLevelThreadError","OtherThreadPanic","Owned","OwnedRetriever","PoisonedThreadError","SendAlloc","SpawningOrJoining","ThreadExecError","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","fmt","from","from","from","from","from","from","from","into","into","into","into","into","into","into","join","make_spawner","make_spawner","new","new","new","new","replace_with_default","spawn","spawn","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","unwrap","unwrap","unwrap","unwrap_or","unwrap_or","view","view","BrotliIsMostlyUTF8","FastLog2","FastLog2f64","FastLog2u16","FastLog2u32","FastLog2u64","FastPow2","Log2FloorNonZero","brotli_max_size_t","brotli_max_uint32_t","brotli_max_uint8_t","brotli_min_size_t","brotli_min_uint32_t","floatX","xFastLog2u16","Mem256f","Mem256i","cast_f32_to_i32","cast_i32_to_f32","log2i","sum8","sum8i","v256","v256i","GuardedQueue","WorkerJoinable","WorkerPool","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","compress_worker_pool","drop","from","from","from","into","into","into","join","make_spawner","new","new_work_pool","spawn","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","AllocatedMemory","AllocatedStackMemory","Allocator","CompressorWriter","CompressorWriterCustomAlloc","CompressorWriterCustomIo","IntoIoWriter","IoWriterWrapper","SliceWrapper","SliceWrapperMut","StackAllocator","StandardAlloc","alloc_cell","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","drop","flush","flush","flush","free_cell","free_list_overflow_count","free_list_start","from","from","from","get_mut","get_mut","get_mut","get_ref","get_ref","get_ref","initialize","into","into","into","into_inner","into_inner","into_inner","len","mem","new","new","new","nop","slice","slice_mut","system_resources","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","with_params","write","write","write","write_all","alloc_util","broccoli","compressor","decompressor","multicompress","BrotliSubclassableAllocator","SendableMemoryBlock","alloc_cell","borrow","borrow","borrow_mut","borrow_mut","default","free_cell","from","from","into","into","new","slice","slice_mut","try_from","try_from","try_into","try_into","type_id","type_id","BroCatliResult","BroccoliConcatFinish","BroccoliConcatFinished","BroccoliConcatStream","BroccoliConcatStreaming","BroccoliCreateInstance","BroccoliCreateInstanceWithWindowSize","BroccoliDestroyInstance","BroccoliNewBrotliFile","BroccoliResult","BroccoliState","BrotliFileNotCraftedForAppend","BrotliFileNotCraftedForConcatenation","InvalidWindowSize","NeedsMoreInput","NeedsMoreOutput","Success","WindowSizeLargerThanPreviousFile","_Nothing","borrow","borrow","borrow_mut","borrow_mut","c_void","clone","clone_into","default","from","from","from","into","into","into","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","BROTLI_MODE_FONT","BROTLI_MODE_FORCE_LSB_PRIOR","BROTLI_MODE_FORCE_MSB_PRIOR","BROTLI_MODE_FORCE_SIGNED_PRIOR","BROTLI_MODE_FORCE_UTF8_PRIOR","BROTLI_MODE_GENERIC","BROTLI_MODE_TEXT","BROTLI_OPERATION_EMIT_METADATA","BROTLI_OPERATION_FINISH","BROTLI_OPERATION_FLUSH","BROTLI_OPERATION_PROCESS","BrotliEncoderCompress","BrotliEncoderCompressStream","BrotliEncoderCompressStreaming","BrotliEncoderCreateInstance","BrotliEncoderDestroyInstance","BrotliEncoderFreeU8","BrotliEncoderFreeUsize","BrotliEncoderHasMoreOutput","BrotliEncoderIsFinished","BrotliEncoderMallocU8","BrotliEncoderMallocUsize","BrotliEncoderMaxCompressedSize","BrotliEncoderMode","BrotliEncoderOperation","BrotliEncoderSetCustomDictionary","BrotliEncoderSetParameter","BrotliEncoderState","BrotliEncoderTakeOutput","BrotliEncoderVersion","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","catch_panic","compressor","custom_allocator","from","from","from","into","into","into","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","BrotliDecoderReturnInfo","CBrotliDecoderCreateInstance","CBrotliDecoderDecompress","CBrotliDecoderDecompressPrealloc","CBrotliDecoderDecompressStream","CBrotliDecoderDecompressStreaming","CBrotliDecoderDecompressWithReturnInfo","CBrotliDecoderDestroyInstance","CBrotliDecoderErrorString","CBrotliDecoderFreeU8","CBrotliDecoderFreeUsize","CBrotliDecoderGetErrorCode","CBrotliDecoderGetErrorString","CBrotliDecoderHasMoreOutput","CBrotliDecoderIsFinished","CBrotliDecoderIsUsed","CBrotliDecoderMallocU8","CBrotliDecoderMallocUsize","CBrotliDecoderSetParameter","CBrotliDecoderTakeOutput","CBrotliDecoderVersion","HuffmanCode","None","None","Some","Some","_Nothing","bits","borrow","borrow_mut","brotli_alloc_func","brotli_free_func","c_void","decoded_size","error_code","error_string","ffi","from","into","result","try_from","try_into","type_id","value","BROTLI_DECODER_ERROR_ALLOC_BLOCK_TYPE_TREES","BROTLI_DECODER_ERROR_ALLOC_CONTEXT_MAP","BROTLI_DECODER_ERROR_ALLOC_CONTEXT_MODES","BROTLI_DECODER_ERROR_ALLOC_RING_BUFFER_1","BROTLI_DECODER_ERROR_ALLOC_RING_BUFFER_2","BROTLI_DECODER_ERROR_ALLOC_TREE_GROUPS","BROTLI_DECODER_ERROR_DICTIONARY_NOT_SET","BROTLI_DECODER_ERROR_FORMAT_BLOCK_LENGTH_1","BROTLI_DECODER_ERROR_FORMAT_BLOCK_LENGTH_2","BROTLI_DECODER_ERROR_FORMAT_CL_SPACE","BROTLI_DECODER_ERROR_FORMAT_CONTEXT_MAP_REPEAT","BROTLI_DECODER_ERROR_FORMAT_DICTIONARY","BROTLI_DECODER_ERROR_FORMAT_DISTANCE","BROTLI_DECODER_ERROR_FORMAT_EXUBERANT_META_NIBBLE","BROTLI_DECODER_ERROR_FORMAT_EXUBERANT_NIBBLE","BROTLI_DECODER_ERROR_FORMAT_HUFFMAN_SPACE","BROTLI_DECODER_ERROR_FORMAT_PADDING_1","BROTLI_DECODER_ERROR_FORMAT_PADDING_2","BROTLI_DECODER_ERROR_FORMAT_RESERVED","BROTLI_DECODER_ERROR_FORMAT_SIMPLE_HUFFMAN_ALPHABET","BROTLI_DECODER_ERROR_FORMAT_SIMPLE_HUFFMAN_SAME","BROTLI_DECODER_ERROR_FORMAT_TRANSFORM","BROTLI_DECODER_ERROR_FORMAT_WINDOW_BITS","BROTLI_DECODER_ERROR_INVALID_ARGUMENTS","BROTLI_DECODER_ERROR_UNREACHABLE","BROTLI_DECODER_NEEDS_MORE_INPUT","BROTLI_DECODER_NEEDS_MORE_OUTPUT","BROTLI_DECODER_NO_ERROR","BROTLI_DECODER_SUCCESS","BrotliDecoderCreateInstance","BrotliDecoderDecompress","BrotliDecoderDecompressPrealloc","BrotliDecoderDecompressStream","BrotliDecoderDecompressStreaming","BrotliDecoderDecompressWithReturnInfo","BrotliDecoderDestroyInstance","BrotliDecoderErrorCode","BrotliDecoderErrorString","BrotliDecoderFreeU8","BrotliDecoderFreeUsize","BrotliDecoderGetErrorCode","BrotliDecoderGetErrorString","BrotliDecoderHasMoreOutput","BrotliDecoderIsFinished","BrotliDecoderIsUsed","BrotliDecoderMallocU8","BrotliDecoderMallocUsize","BrotliDecoderSetParameter","BrotliDecoderState","BrotliDecoderTakeOutput","BrotliDecoderVersion","BrotliState","HuffmanCode","alloc_hc","alloc_u32","alloc_u8","alloc_util","bits","block_type_length_state","borrow","borrow","borrow_mut","borrow_mut","br","buffer","buffer_length","clone","clone_into","code","code_length_code_lengths","code_length_histo","context_index","context_lookup","context_map","context_map_slice_index","context_map_table","context_modes","copy_length","custom_allocator","custom_dict","custom_dict_size","decompressor","dist_context_map","dist_context_map_slice_index","dist_htree_index","dist_rb","dist_rb_idx","distance_code","distance_context","distance_hgroup","distance_postfix_bits","distance_postfix_mask","error_code","fmt","from","from","htree_command_index","htree_index","htree_next_offset","insert_copy_hgroup","interface","into","into","is_last_metablock","is_metadata","is_uncompressed","large_window","literal_hgroup","literal_htree_index","loop_counter","max_backward_distance","max_backward_distance_minus_custom_dict_size","max_distance","max_run_length_prefix","meta_block_remaining_len","mtf_or_error_string","mtf_upper_bound","next_symbol","num_direct_distance_codes","num_dist_htrees","num_literal_htrees","partial_pos_out","pos","prev_code_len","rb_roundtrips","repeat","repeat_code_len","ringbuffer","ringbuffer_mask","ringbuffer_size","should_wrap_ringbuffer","size_nibbles","slice_from_raw_parts_or_nil","slice_from_raw_parts_or_nil_mut","space","state","sub_loop_counter","substate_context_map","substate_decode_uint8","substate_huffman","substate_metablock_header","substate_tree_group","substate_uncompressed","symbol","symbol_lists_index","symbols_lists_array","table","to_owned","trivial_literal_context","trivial_literal_contexts","try_from","try_from","try_into","try_into","type_id","type_id","value","window_bits","Box","MemoryBlock","SubclassableAllocator","alloc_cell","alloc_stdlib","allocator","as_handle","as_mut","as_ref","as_socket","assume_init","assume_init","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","call","call_mut","call_once","cause","clone","clone","clone","clone","clone","clone","clone_from","clone_from","clone_into","cmp","consume","default","default","default","default","default","default","deref","deref_mut","description","downcast","downcast","downcast","downcast_unchecked","downcast_unchecked","downcast_unchecked","drop","drop","eq","fill_buf","finish","flush","fmt","fmt","fmt","free_cell","free_stdlib","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_iter","from_raw","from_raw_in","ge","gt","hash","index","index_mut","into","into","into","into_boxed_slice","into_future","into_inner","into_iter","into_pin","into_raw","into_raw_with_allocator","into_searcher","is_contained_in","is_empty","is_prefix_of","is_read_vectored","is_suffix_of","is_write_vectored","last","le","leak","len","lt","ne","new","new","new_in","new_uninit","new_uninit_in","new_uninit_slice","new_uninit_slice_in","new_zeroed","new_zeroed_in","new_zeroed_slice","new_zeroed_slice_in","next","next_back","nth","nth_back","partial_cmp","pin","pin_in","poll","poll_next","provide","read","read_buf","read_exact","read_line","read_to_end","read_to_string","read_until","read_vectored","resume","seek","size_hint","size_hint","slice","slice_mut","source","stream_position","strip_prefix_of","strip_suffix_of","to_owned","to_string","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_new","try_new_in","try_new_uninit","try_new_uninit_in","try_new_uninit_slice","try_new_zeroed","try_new_zeroed_in","try_new_zeroed_slice","type_id","type_id","type_id","write","write","write","write_all","write_fmt","write_i128","write_i16","write_i32","write_i64","write_i8","write_isize","write_length_prefix","write_str","write_u128","write_u16","write_u32","write_u64","write_u8","write_usize","write_vectored","BROTLI_DECODER_PARAM_DISABLE_RING_BUFFER_REALLOCATION","BROTLI_DECODER_PARAM_LARGE_WINDOW","BROTLI_DECODER_RESULT_ERROR","BROTLI_DECODER_RESULT_NEEDS_MORE_INPUT","BROTLI_DECODER_RESULT_NEEDS_MORE_OUTPUT","BROTLI_DECODER_RESULT_SUCCESS","BrotliDecoderParameter","BrotliDecoderResult","CAllocator","None","None","Some","Some","_Nothing","alloc_func","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","brotli_alloc_func","brotli_free_func","c_void","clone","clone_into","free_func","from","from","from","from","into","into","into","opaque","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","BrotliEncoderCompressMulti","BrotliEncoderCompressWorkPool","BrotliEncoderCreateWorkPool","BrotliEncoderDestroyWorkPool","BrotliEncoderMaxCompressedSizeMulti","BrotliEncoderWorkPool","MAX_THREADS","borrow","borrow_mut","from","into","try_from","try_into","type_id","AllocatedMemory","AllocatedStackMemory","Allocator","BrotliDecompressStream","BrotliResult","BrotliState","CustomRead","CustomWrite","Decompressor","DecompressorCustomAlloc","DecompressorCustomIo","HuffmanCode","HuffmanTreeGroup","IntoIoReader","IoReaderWrapper","IoWriterWrapper","NeedsMoreInput","NeedsMoreOutput","ResultFailure","ResultSuccess","SliceWrapper","SliceWrapperMut","StackAllocator","StandardAlloc","alloc_cell","alloc_hc","alloc_u32","alloc_u8","alphabet_size","bits","block_type_length_state","borrow","borrow_mut","br","buffer","buffer_length","code","code_length_code_lengths","code_length_histo","codes","context_index","context_lookup","context_map","context_map_slice_index","context_map_table","context_modes","copy_length","custom_dict","custom_dict_size","dist_context_map","dist_context_map_slice_index","dist_htree_index","dist_rb","dist_rb_idx","distance_code","distance_context","distance_hgroup","distance_postfix_bits","distance_postfix_mask","error_code","flush","free_cell","free_list_overflow_count","free_list_start","from","get_mut","get_ref","htree_command_index","htree_index","htree_next_offset","htrees","initialize","insert_copy_hgroup","into","into_inner","is_last_metablock","is_metadata","is_uncompressed","large_window","len","literal_hgroup","literal_htree_index","loop_counter","max_backward_distance","max_backward_distance_minus_custom_dict_size","max_distance","max_run_length_prefix","max_symbol","mem","meta_block_remaining_len","mtf_or_error_string","mtf_upper_bound","new","new_with_custom_dictionary","next_symbol","nop","num_direct_distance_codes","num_dist_htrees","num_htrees","num_literal_htrees","partial_pos_out","pos","prev_code_len","rb_roundtrips","read","read","repeat","repeat_code_len","ringbuffer","ringbuffer_mask","ringbuffer_size","should_wrap_ringbuffer","size_nibbles","slice","slice_mut","space","state","sub_loop_counter","substate_context_map","substate_decode_uint8","substate_huffman","substate_metablock_header","substate_tree_group","substate_uncompressed","symbol","symbol_lists_index","symbols_lists_array","system_resources","table","trivial_literal_context","trivial_literal_contexts","try_from","try_into","type_id","value","window_bits","write","Transform","TransformDictionaryWord","borrow","borrow_mut","from","into","kNumTransforms","kTransforms","prefix_id","suffix_id","transform","try_from","try_into","type_id","AllocatedMemory","AllocatedStackMemory","Allocator","BrotliDecompressStream","BrotliResult","BrotliState","CustomWrite","DecompressorWriter","DecompressorWriterCustomAlloc","DecompressorWriterCustomIo","HuffmanCode","HuffmanTreeGroup","IntoIoWriter","IoWriterWrapper","NeedsMoreInput","NeedsMoreOutput","ResultFailure","ResultSuccess","SliceWrapper","SliceWrapperMut","StackAllocator","StandardAlloc","alloc_cell","alloc_cell","alloc_cell","alloc_hc","alloc_u32","alloc_u8","alphabet_size","bits","block_type_length_state","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","br","buffer","buffer_length","build_hgroup_cache","clone","clone_into","close","code","code_length_code_lengths","code_length_histo","codes","context_index","context_lookup","context_map","context_map_slice_index","context_map_table","context_modes","copy_length","custom_dict","custom_dict_size","default","default","default","deref","deref_mut","dist_context_map","dist_context_map_slice_index","dist_htree_index","dist_rb","dist_rb_idx","distance_code","distance_context","distance_hgroup","distance_postfix_bits","distance_postfix_mask","error_code","flush","flush","flush","fmt","free_cell","free_cell","free_cell","free_list_overflow_count","free_list_start","from","from","from","from","from","from","get_mut","get_ref","get_tree","get_tree_mut","htree_command_index","htree_index","htree_next_offset","htrees","index","index","index_mut","index_mut","init","initialize","insert_copy_hgroup","into","into","into","into","into","into","into_inner","is_last_metablock","is_metadata","is_uncompressed","large_window","len","literal_hgroup","literal_htree_index","loop_counter","max_backward_distance","max_backward_distance_minus_custom_dict_size","max_distance","max_run_length_prefix","max_symbol","mem","meta_block_remaining_len","mtf_or_error_string","mtf_upper_bound","new","new_with_custom_dictionary","next_symbol","nop","num_direct_distance_codes","num_dist_htrees","num_htrees","num_literal_htrees","partial_pos_out","pos","prev_code_len","rb_roundtrips","repeat","repeat_code_len","reset","ringbuffer","ringbuffer_mask","ringbuffer_size","should_wrap_ringbuffer","size_nibbles","slice","slice","slice_mut","slice_mut","space","state","sub_loop_counter","substate_context_map","substate_decode_uint8","substate_huffman","substate_metablock_header","substate_tree_group","substate_uncompressed","symbol","symbol_lists_index","symbols_lists_array","system_resources","table","to_owned","trivial_literal_context","trivial_literal_contexts","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","value","window_bits","write","write","write","write_all"],"q":[[0,"brotli"],[283,"brotli::concat"],[319,"brotli::dictionary"],[324,"brotli::enc"],[420,"brotli::enc::backward_references"],[976,"brotli::enc::backward_references::hash_to_binary_tree"],[1094,"brotli::enc::backward_references::hq"],[1149,"brotli::enc::bit_cost"],[1152,"brotli::enc::block_split"],[1168,"brotli::enc::block_splitter"],[1169,"brotli::enc::brotli_bit_stream"],[1280,"brotli::enc::cluster"],[1301,"brotli::enc::combined_alloc"],[1351,"brotli::enc::command"],[1398,"brotli::enc::compress_fragment"],[1414,"brotli::enc::compress_fragment_two_pass"],[1418,"brotli::enc::constants"],[1445,"brotli::enc::context_map_entropy"],[1485,"brotli::enc::dictionary_hash"],[1486,"brotli::enc::encode"],[1898,"brotli::enc::entropy_encode"],[1933,"brotli::enc::find_stride"],[1997,"brotli::enc::fixed_queue"],[2014,"brotli::enc::histogram"],[2162,"brotli::enc::input_pair"],[2211,"brotli::enc::interface"],[2468,"brotli::enc::ir_interpret"],[2479,"brotli::enc::literal_cost"],[2480,"brotli::enc::metablock"],[2523,"brotli::enc::multithreading"],[2556,"brotli::enc::pdf"],[2569,"brotli::enc::prior_eval"],[2712,"brotli::enc::reader"],[2771,"brotli::enc::singlethreading"],[2814,"brotli::enc::static_dict"],[2839,"brotli::enc::static_dict_lut"],[2861,"brotli::enc::stride_eval"],[2885,"brotli::enc::threading"],[2983,"brotli::enc::utf8_util"],[2984,"brotli::enc::util"],[2998,"brotli::enc::vectorization"],[3007,"brotli::enc::worker_pool"],[3038,"brotli::enc::writer"],[3103,"brotli::ffi"],[3108,"brotli::ffi::alloc_util"],[3130,"brotli::ffi::broccoli"],[3170,"brotli::ffi::compressor"],[3224,"brotli::ffi::decompressor"],[3268,"brotli::ffi::decompressor::ffi"],[3426,"brotli::ffi::decompressor::ffi::alloc_util"],[3628,"brotli::ffi::decompressor::ffi::interface"],[3673,"brotli::ffi::multicompress"],[3687,"brotli::reader"],[3824,"brotli::transform"],[3838,"brotli::writer"],[4036,"std::io::error"],[4037,"core::result"],[4038,"std::io"],[4039,"std::io"],[4040,"alloc_stdlib::heap_alloc"],[4041,"core::clone"],[4042,"core::default"],[4043,"core::fmt"],[4044,"core::fmt"],[4045,"core::fmt"],[4046,"core::marker"],[4047,"core::marker"],[4048,"core::marker"],[4049,"core::ops::function"],[4050,"core::hash"],[4051,"core::marker"],[4052,"core::panic::unwind_safe"],[4053,"core::alloc"],[4054,"std::os::windows::io::handle"],[4055,"std::os::windows::io::handle"],[4056,"std::os::windows::io::socket"],[4057,"core::marker"],[4058,"core::ffi::c_str"],[4059,"std::ffi::os_str"],[4060,"std::path"],[4061,"core::cmp"],[4062,"core::cmp"],[4063,"alloc::borrow"],[4064,"std::path"],[4065,"alloc::ffi::c_str"],[4066,"core::iter::traits::collect"],[4067,"core::cmp"],[4068,"core::str::pattern"],[4069,"core::iter::traits::exact_size"],[4070,"core::iter::traits::iterator"],[4071,"core::iter::traits::double_ended"],[4072,"core::task::wake"],[4073,"core::task::poll"],[4074,"core::future::future"],[4075,"core::marker"],[4076,"core::error"],[4077,"std::io"],[4078,"core::ops::coroutine"]],"d":["","","","","","","","","","","","","","","","","","","","","","","","","","this trait does not allow for transient errors: they must …","this trait does not allow for transient errors: they must …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","This variant of read will return Ok(number of bytes read) …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</codeconstruct brotli in such a way that another concatable …","avoid search for the best ndirect vs npostfix parameters …","","","","","","","","","number of potential matches to hold per bucket (hash …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","number of the number of buckets to have in the hash table …","","","","","","","","","","","","","","","construct brotli in such a way that it may be concatenated …","if nonzero it will search for the temporal locality and …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","avoid serializing out priors for literal sections in the …","","","","","","","","","","","","","","","prefer to compute the map of previously seen strings just …","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","number of bytes of a potential match to hash","","","","","","","","","","","","","","if nonzero, will search for high entropy strings and log …","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","log of how often metablocks should be serialized","log of how big the ring buffer should be for copying prior …","for prior bitmask detection: stride_low, stride_speed, …","how much to weigh distance vs an extra byte of copy match …","","","","","","","produce an IR of the compression file","include a magic number and version number and size_hint at …","","","","if this brotli file is generic, font or specifically text","","","","","","","number of previous distance matches to check for future …","","whether to search for whether the previous byte or the …","","quality param between 0 and 11 (11 is smallest but takes …","","","","","","","how big the source file is (or 0 if no hint is provided)","","","","","","","","","","","","","attempt to detect how many bytes before the current byte …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","type of hasher to use (default: type 6, but others have …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","can use the dictionary (default yes unless catable is set)","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</codeeturns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","No value.","No value.","Some value of type <code>T</code>.","Some value of type <code>T</code>.","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Equivalent to BrotliDecoderDecompressStream but with no …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","A pointer type that uniquely owns a heap allocation of …","","","","","Returns a reference to the underlying allocator.","","","","","Converts to <code>Box&lt;[T], A&gt;</code>.","Converts to <code>Box&lt;T, A&gt;</code>.","","","","","","","","","","","","","","","","Returns a new box with a <code>clone()</code> of this box’s contents.","","","Copies <code>source</code>’s contents into <code>self</code> without creating a …","","","","","","","Creates a <code>Box&lt;T&gt;</code>, with the <code>Default</code> value for T.","","","","","","","Attempt to downcast the box to a concrete type.","Attempt to downcast the box to a concrete type.","Attempt to downcast the box to a concrete type.","Downcasts the box to a concrete type.","Downcasts the box to a concrete type.","Downcasts the box to a concrete type.","","","","","","","","","","","","Converts a <code>String</code> into a box of dyn <code>Error</code> + <code>Send</code> + <code>Sync</code>.","Converts the given <code>String</code> to a boxed <code>str</code> slice that is …","Converts a <code>&amp;[T]</code> into a <code>Box&lt;[T]&gt;</code>","Converts a <code>&amp;CStr</code> into a <code>Box&lt;CStr&gt;</code>, by copying the contents …","Converts a <code>Cow</code> into a box of dyn <code>Error</code> + <code>Send</code> + <code>Sync</code>.","Converts a type of <code>Error</code> + <code>Send</code> + <code>Sync</code> into a box of dyn …","Converts a <code>PathBuf</code> into a Box&lt;Path&gt;.","Converts a <code>Cow&lt;&#39;a, OsStr&gt;</code> into a Box&lt;OsStr&gt;, by copying …","Converts an <code>OsString</code> into a Box&lt;OsStr&gt; without copying or …","Converts a <code>Cow&lt;&#39;_, [T]&gt;</code> into a <code>Box&lt;[T]&gt;</code>","Converts a <code>str</code> into a box of dyn <code>Error</code>.","Converts a <code>Cow&lt;&#39;_, str&gt;</code> into a <code>Box&lt;str&gt;</code>","Converts a <code>T</code> into a <code>Box&lt;T&gt;</code>","Copies the string into a newly allocated Box&lt;OsStr&gt;.","Converts a <code>str</code> into a box of dyn <code>Error</code> + <code>Send</code> + <code>Sync</code>.","","Creates a boxed <code>Path</code> from a clone-on-write pointer.","Returns the argument unchanged.","Convert a vector into a boxed slice.","Converts a <code>&amp;str</code> into a <code>Box&lt;str&gt;</code>","Converts a type of <code>Error</code> into a box of dyn <code>Error</code>.","Creates a boxed <code>Path</code> from a reference.","Converts a <code>Cow&lt;&#39;a, CStr&gt;</code> into a <code>Box&lt;CStr&gt;</code>, by copying the …","Converts a <code>String</code> into a box of dyn <code>Error</code>.","Converts a <code>Cow</code> into a box of dyn <code>Error</code>.","Converts a <code>CString</code> into a Box&lt;CStr&gt; without copying or …","Converts a <code>[T; N]</code> into a <code>Box&lt;[T]&gt;</code>","Converts a <code>Box&lt;str&gt;</code> into a <code>Box&lt;[u8]&gt;</code>","Returns the argument unchanged.","Returns the argument unchanged.","","Constructs a box from a raw pointer.","Constructs a box from a raw pointer in the given allocator.","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Converts a <code>Box&lt;T&gt;</code> into a <code>Box&lt;[T]&gt;</code>","","Consumes the <code>Box</code>, returning the wrapped value.","","Converts a <code>Box&lt;T&gt;</code> into a <code>Pin&lt;Box&lt;T&gt;&gt;</code>. If <code>T</code> does not …","Consumes the <code>Box</code>, returning a wrapped raw pointer.","Consumes the <code>Box</code>, returning a wrapped raw pointer and the …","","","","","","","","","","Consumes and leaks the <code>Box</code>, returning a mutable reference, …","","","","Allocates memory on the heap and then places <code>x</code> into it.","","Allocates memory in the given allocator then places <code>x</code> into …","Constructs a new box with uninitialized contents.","Constructs a new box with uninitialized contents in the …","Constructs a new boxed slice with uninitialized contents.","Constructs a new boxed slice with uninitialized contents …","Constructs a new <code>Box</code> with uninitialized contents, with the …","Constructs a new <code>Box</code> with uninitialized contents, with the …","Constructs a new boxed slice with uninitialized contents, …","Constructs a new boxed slice with uninitialized contents …","","","","","","Constructs a new <code>Pin&lt;Box&lt;T&gt;&gt;</code>. If <code>T</code> does not implement <code>Unpin</code>…","Constructs a new <code>Pin&lt;Box&lt;T, A&gt;&gt;</code>. If <code>T</code> does not implement …","","","","","","","","","","","","","","","","","","","","","","","","Attempts to convert a <code>Vec&lt;T&gt;</code> into a <code>Box&lt;[T; N]&gt;</code>.","","Attempts to convert a <code>Box&lt;[T]&gt;</code> into a <code>Box&lt;[T; N]&gt;</code>.","","","","","","Allocates memory on the heap then places <code>x</code> into it, …","Allocates memory in the given allocator then places <code>x</code> into …","Constructs a new box with uninitialized contents on the …","Constructs a new box with uninitialized contents in the …","Constructs a new boxed slice with uninitialized contents. …","Constructs a new <code>Box</code> with uninitialized contents, with the …","Constructs a new <code>Box</code> with uninitialized contents, with the …","Constructs a new boxed slice with uninitialized contents, …","","","","Writes the value and converts to <code>Box&lt;T, A&gt;</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","No value.","No value.","Some value of type <code>T</code>.","Some value of type <code>T</code>.","","","","","","","","","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","this trait does not allow for transient errors: they must …","this trait does not allow for transient errors: they must …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","","","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","this trait does not allow for transient errors: they must …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[8,0,0,0,0,0,0,0,0,0,0,0,14,14,0,0,14,14,14,14,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,15,15,15,15,0,0,0,0,0,0,8,20,14,14,14,10,14,20,14,32,28,33,31,26,23,24,10,15,20,14,32,28,33,31,26,23,24,10,15,14,14,14,10,10,23,24,14,14,14,0,14,14,14,14,14,14,0,14,26,14,14,20,10,20,0,14,14,14,14,14,14,14,14,14,14,14,24,0,10,10,14,0,12,28,23,24,10,15,8,20,252,252,20,14,32,28,33,31,26,23,24,10,15,31,26,23,24,31,26,23,24,14,14,14,252,14,0,20,14,32,28,33,31,26,23,24,10,15,31,26,23,24,14,14,14,14,46,14,14,14,14,14,14,14,253,14,14,14,20,14,31,26,23,24,14,31,14,26,23,24,14,252,14,14,14,14,14,14,14,11,32,33,31,26,0,14,14,14,14,14,14,14,46,25,14,14,14,14,14,14,14,14,14,14,14,14,252,14,0,0,10,0,14,14,20,14,32,28,33,31,26,23,24,10,15,20,14,32,28,33,31,26,23,24,10,15,20,14,32,28,33,31,26,23,24,10,15,10,14,12,28,23,24,0,0,0,35,35,35,35,35,35,35,36,35,36,35,35,35,36,36,35,36,35,36,35,36,35,36,36,36,36,36,35,36,35,36,35,36,35,0,0,0,0,0,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,252,252,0,0,252,0,0,0,46,0,253,0,0,0,252,0,0,0,0,0,0,46,25,0,0,0,252,0,0,0,0,0,0,0,0,0,71,0,0,0,73,73,73,73,73,73,73,59,49,50,51,52,59,49,50,51,52,0,0,0,0,0,0,0,0,0,72,58,60,61,43,0,72,58,60,61,43,72,58,60,61,43,58,61,43,43,0,43,0,43,0,0,0,0,43,43,0,0,43,43,43,0,0,43,0,0,0,0,0,0,0,72,59,58,49,50,51,52,60,61,43,72,62,58,60,61,43,66,67,68,69,0,0,71,72,58,60,61,43,72,58,60,61,43,72,58,60,61,43,0,0,0,72,58,60,61,43,0,72,58,60,61,43,72,61,72,61,72,62,58,60,61,43,66,67,68,69,0,72,58,60,61,43,0,59,49,50,51,52,43,0,259,260,261,38,38,259,260,261,62,66,67,68,69,74,68,69,62,66,67,68,69,68,69,62,66,67,68,69,71,64,58,49,50,51,52,60,61,262,263,264,265,266,267,259,260,261,43,73,74,38,70,65,66,67,68,69,71,64,58,49,50,51,52,60,61,262,263,264,265,266,267,259,260,261,43,73,74,38,70,65,66,67,68,69,74,62,66,67,68,69,68,69,61,58,49,50,51,52,60,38,38,73,74,38,70,65,66,67,68,69,73,74,38,70,65,66,67,68,69,268,58,58,58,58,60,61,43,259,260,261,43,38,70,265,266,267,65,65,60,38,38,64,58,60,61,43,73,74,70,65,66,67,68,69,38,73,74,38,43,259,260,71,64,58,49,50,51,52,60,61,262,263,264,265,266,267,259,260,261,43,73,74,38,70,65,66,67,68,69,62,66,67,68,69,62,66,67,68,69,58,60,61,74,69,62,66,67,68,69,68,69,0,38,259,260,261,38,0,71,64,58,49,50,51,52,60,61,262,263,264,265,266,267,259,260,261,43,73,74,38,70,65,66,67,68,69,65,0,0,0,0,0,0,38,64,64,38,38,38,74,70,62,66,67,68,69,38,38,259,260,261,38,70,265,266,267,61,60,74,65,38,38,38,64,62,66,67,68,69,38,49,50,51,52,49,50,51,52,262,263,264,61,38,259,260,261,73,74,38,70,65,66,67,68,69,71,64,58,49,50,51,52,60,61,262,263,264,265,266,267,259,260,261,43,73,74,38,70,65,66,67,68,69,71,64,58,49,50,51,52,60,61,262,263,264,265,266,267,259,260,261,43,73,74,38,70,65,66,67,68,69,74,71,64,58,49,50,51,52,60,61,262,263,264,265,266,267,259,260,261,43,73,74,38,70,65,66,67,68,69,38,0,0,0,76,76,76,0,0,0,0,76,76,0,0,76,76,76,76,76,0,76,76,0,0,76,80,79,76,82,78,81,57,80,79,76,82,78,81,57,76,81,57,81,57,76,76,81,57,57,82,78,57,79,76,81,57,76,269,79,76,80,79,76,82,78,81,57,80,79,76,82,78,81,57,76,0,57,82,78,77,80,77,80,269,79,269,79,81,78,78,81,79,79,81,57,80,79,76,82,78,81,57,80,79,76,82,78,81,57,80,79,76,82,78,81,57,57,76,0,0,0,0,0,0,0,0,0,0,0,0,0,270,83,84,270,83,84,83,84,83,84,83,270,270,83,84,83,270,83,84,270,83,84,84,270,83,84,270,270,270,83,84,83,84,270,83,84,270,83,84,270,83,84,0,0,0,0,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,0,0,0,0,0,0,0,0,0,0,0,0,0,97,0,0,0,0,0,0,271,271,271,271,271,271,272,97,95,273,271,98,96,272,97,95,273,271,98,96,98,96,98,96,95,95,95,271,95,95,95,95,95,95,271,272,97,95,273,271,98,96,271,272,97,95,273,271,98,96,98,273,273,95,95,95,95,95,272,95,96,271,271,96,272,98,98,96,272,97,95,273,271,98,96,272,97,95,273,271,98,96,273,273,273,272,97,95,273,271,98,96,0,0,0,0,0,0,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,8,0,0,0,8,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,8,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,104,104,54,104,54,104,54,104,54,54,54,54,54,54,104,104,54,104,54,54,104,54,104,104,104,54,104,54,104,54,104,54,0,0,106,106,106,106,106,106,106,106,106,106,106,106,106,106,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,107,107,107,107,107,108,107,108,108,108,108,107,107,108,107,107,108,107,107,107,107,107,107,107,0,0,107,108,107,108,107,108,107,108,107,107,0,0,0,0,0,0,0,0,0,117,0,0,116,116,116,116,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,118,118,118,118,118,119,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,119,0,119,0,0,119,0,0,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,115,274,115,118,119,116,117,274,115,118,119,116,117,274,118,119,116,117,118,119,116,117,115,115,115,115,115,115,115,115,274,274,115,115,118,116,117,119,117,274,115,118,119,116,117,115,115,274,115,118,119,116,117,115,115,115,115,115,115,115,115,115,115,115,115,274,115,115,115,274,115,115,115,115,115,115,0,274,115,115,115,115,274,115,118,119,116,117,115,274,274,115,118,119,116,117,274,115,118,119,116,117,274,115,118,119,116,117,0,0,0,0,0,122,120,0,0,0,0,0,0,0,120,92,120,92,92,92,92,120,92,92,92,120,92,92,92,120,92,120,92,120,92,0,0,0,0,0,0,124,127,125,124,126,127,125,124,126,127,124,127,126,126,125,124,0,127,125,124,127,125,124,126,125,127,127,127,125,124,126,125,124,127,125,124,125,125,124,124,124,126,126,124,126,127,125,124,126,127,125,124,126,127,125,124,126,126,0,0,129,129,129,129,129,129,129,129,129,129,129,129,129,129,129,0,0,0,0,0,93,93,93,93,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,85,88,89,90,88,89,90,88,89,90,131,132,133,134,275,93,88,89,90,131,132,133,134,275,93,88,89,90,93,88,89,90,93,88,89,90,88,89,90,131,132,133,134,93,88,89,90,131,132,133,134,275,93,85,275,88,89,90,131,132,133,134,275,93,275,85,88,89,90,85,88,89,90,85,88,89,90,88,89,90,88,89,90,275,88,89,90,93,85,88,89,90,88,89,90,88,89,90,131,132,133,134,275,93,88,89,90,131,132,133,134,275,93,275,88,89,90,131,132,133,134,275,93,0,0,0,110,113,109,110,113,109,113,109,113,109,110,113,110,113,109,113,109,109,113,110,113,113,113,109,109,110,113,109,109,110,113,110,113,110,109,113,109,110,113,109,110,113,109,110,113,109,0,0,103,114,103,114,103,114,0,0,103,114,0,0,103,114,0,0,0,0,0,0,0,0,0,0,103,114,0,0,0,0,0,0,0,0,0,0,0,0,0,103,114,0,0,0,0,0,0,136,137,136,137,112,111,138,139,140,141,114,135,136,137,112,111,138,139,140,141,114,135,136,137,112,111,138,139,140,141,114,135,136,137,112,111,138,139,140,141,114,135,111,111,111,111,111,111,111,111,111,111,141,136,137,112,140,114,135,138,111,111,139,112,111,139,136,137,112,111,138,139,140,141,114,135,114,0,0,143,114,136,137,112,111,138,139,140,141,114,135,135,111,111,111,111,111,111,112,141,136,137,112,111,138,139,140,141,114,135,135,135,111,111,112,112,136,137,112,276,138,139,141,114,138,135,112,111,141,277,277,277,277,111,111,111,111,111,111,111,112,111,140,141,135,141,0,137,111,111,111,111,0,146,135,146,135,0,146,135,112,136,137,112,111,138,139,140,141,114,135,139,136,137,112,111,138,139,140,141,114,135,136,137,112,111,138,139,140,141,114,135,136,137,112,111,138,139,140,141,114,135,111,0,137,112,139,139,0,0,147,147,147,147,147,147,0,147,147,0,0,0,0,0,0,0,0,278,279,278,279,278,279,278,279,278,279,278,279,278,279,278,279,278,279,279,278,279,278,279,278,279,279,278,279,278,279,278,279,278,279,278,279,0,0,0,149,152,148,149,152,148,0,148,149,152,148,149,152,148,149,148,148,148,148,149,152,148,149,152,148,149,152,148,152,152,0,102,102,102,102,102,102,102,102,102,102,102,102,280,0,0,0,280,0,0,0,280,0,280,0,0,280,280,280,280,280,0,0,0,0,0,0,0,155,280,281,282,283,284,285,286,287,288,156,155,280,281,282,283,284,285,286,287,288,156,155,155,156,155,280,281,282,283,284,285,286,287,288,156,155,155,0,280,281,282,283,284,285,286,287,288,156,155,155,155,155,289,289,281,282,283,284,285,286,287,288,289,155,281,282,283,284,155,155,289,155,280,281,282,283,284,285,286,287,288,156,155,280,281,282,283,284,285,286,287,288,156,155,280,281,282,283,284,285,286,287,288,156,155,156,155,155,289,281,282,283,284,285,286,287,288,8,0,0,0,0,0,0,0,0,0,0,0,0,8,158,159,157,158,159,157,157,8,252,252,158,159,157,158,159,157,252,158,159,157,158,159,157,46,253,158,159,157,252,158,159,157,46,25,252,158,159,157,158,159,157,158,159,157,159,0,0,0,0,162,163,160,161,162,163,160,161,0,0,161,162,163,160,161,162,163,160,161,162,161,161,0,161,161,162,163,160,161,162,163,160,161,162,163,160,161,163,163,0,0,0,0,0,0,0,0,0,0,0,0,53,53,53,53,53,0,0,53,53,0,53,53,53,0,164,164,164,164,164,164,164,164,0,0,0,0,0,164,164,164,164,164,164,164,164,0,0,165,165,165,165,165,165,165,165,165,165,165,165,0,165,165,165,165,165,165,165,165,165,290,0,0,0,291,0,0,0,0,0,45,45,45,292,166,45,0,0,291,290,292,166,0,0,45,0,0,0,0,290,45,293,42,290,44,291,41,45,293,42,290,44,291,41,45,45,293,42,290,44,291,41,45,293,42,290,44,291,41,45,168,292,166,150,44,41,45,44,292,166,293,42,290,44,291,41,45,293,42,290,44,291,41,45,293,42,290,44,291,41,45,294,44,41,44,41,294,41,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,295,172,173,295,172,173,0,172,295,172,173,295,172,173,173,172,172,0,172,295,172,173,295,172,173,295,172,173,8,0,0,0,0,0,0,0,0,0,0,0,8,175,176,174,175,176,174,174,175,176,174,8,252,252,175,176,174,175,176,174,175,176,174,252,175,176,174,175,176,174,46,253,175,176,174,252,46,25,252,175,176,174,175,176,174,175,176,174,176,175,176,174,0,0,0,0,0,0,0,0,177,177,178,177,178,178,177,177,178,177,178,177,178,178,177,178,177,178,177,178,0,0,0,0,0,0,0,0,0,0,0,181,181,181,181,181,181,181,187,187,180,187,180,0,180,180,180,187,180,180,187,180,180,180,187,180,187,180,187,180,182,182,182,182,182,182,182,184,184,184,184,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,184,182,183,184,182,183,0,183,183,184,182,183,184,182,183,184,182,183,184,182,183,184,182,183,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,185,186,185,186,187,10,192,192,0,0,0,192,192,192,0,192,192,192,192,192,192,10,193,193,193,193,193,193,193,193,193,193,193,193,193,193,193,193,193,193,193,193,193,193,193,193,193,193,193,193,193,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,14,14,14,0,10,14,190,193,190,193,14,14,14,193,193,14,14,14,14,14,14,14,14,14,14,190,14,14,190,14,14,14,14,14,14,14,14,14,14,14,193,190,193,14,14,14,14,0,190,193,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,0,0,14,14,14,14,14,14,14,14,14,14,14,14,14,193,14,14,190,193,190,193,190,193,10,14,0,0,0,179,0,196,196,196,196,196,196,196,196,196,195,179,196,196,195,179,196,196,196,196,196,196,196,196,196,196,196,196,196,196,196,196,196,196,196,196,195,196,196,196,196,196,196,196,196,196,196,195,196,196,196,196,196,196,196,179,0,196,196,196,196,196,196,196,196,196,196,196,196,196,196,196,196,196,196,196,196,196,196,196,196,196,196,196,196,195,179,196,196,196,196,196,196,195,195,196,195,179,196,196,196,196,196,196,196,196,196,196,196,196,196,196,196,196,196,196,196,196,196,179,196,196,196,196,196,196,196,196,196,196,196,196,196,196,196,196,196,196,196,196,196,196,196,196,196,196,196,196,196,196,196,195,195,196,196,196,196,196,196,196,196,196,195,179,196,195,179,196,196,196,196,196,196,196,196,196,195,179,196,196,196,196,196,196,196,196,196,196,196,196,196,196,196,196,196,196,196,196,194,194,191,191,191,191,0,0,0,185,186,185,186,187,229,194,191,229,194,191,229,0,0,0,229,229,229,194,191,191,229,194,191,229,229,229,194,191,229,194,191,229,194,191,229,0,0,0,0,0,0,0,250,250,250,250,250,250,250,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,15,15,15,15,0,0,0,0,8,14,14,14,256,10,14,251,251,14,14,14,14,14,14,256,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,12,8,252,252,251,251,251,14,14,14,256,252,14,251,251,14,14,14,14,46,14,14,14,14,14,14,14,256,253,14,14,14,251,251,14,252,14,14,256,14,14,14,14,14,11,251,14,14,14,14,14,14,14,46,25,14,14,14,14,14,14,14,14,14,14,14,14,252,14,14,14,251,251,251,10,14,12,0,0,296,296,296,296,0,0,296,296,296,296,296,296,8,0,0,0,0,0,0,0,0,0,0,0,0,0,15,15,15,15,0,0,0,0,8,252,255,14,14,14,256,10,14,252,253,255,256,258,257,252,253,255,256,258,257,14,14,14,256,255,255,257,14,14,14,256,14,14,14,14,14,14,14,14,14,253,255,256,253,253,14,14,14,14,14,14,14,14,14,14,14,12,258,257,255,8,252,255,252,252,252,253,255,256,258,257,257,257,256,256,14,14,14,256,253,253,253,253,256,252,14,252,253,255,256,258,257,257,14,14,14,14,46,14,14,14,14,14,14,14,256,253,14,14,14,257,257,14,252,14,14,256,14,14,14,14,14,14,14,256,14,14,14,14,14,46,253,25,253,14,14,14,14,14,14,14,14,14,14,14,14,252,14,255,14,14,252,253,255,256,258,257,252,253,255,256,258,257,252,253,255,256,258,257,10,14,12,258,257,0],"f":[0,0,0,0,0,0,0,[[-1,-2],[[3,[1,2]]],4,5],[[-1,-2,[7,[6]],[7,[6]],-3,-4,-5],[[3,[1,2]]],4,5,[[8,[6]]],[[8,[9]]],[[8,[10]]]],[[-2,-3,[7,[6]],[7,[6]],-4,-5,-6,-1],[[3,[1,-1]]],[],[[11,[-1]]],[[12,[-1]]],[[8,[6]]],[[8,[9]]],[[8,[10]]]],[[-2,-3,[7,[6]],[7,[6]],-4,-5,-6,-1],[[3,[1,-1]]],[],[[11,[-1]]],[[12,[-1]]],[[8,[6]]],[[8,[9]]],[[8,[10]]]],[[13,13,[7,[6]],13,13,[7,[6]],13,[14,[-1,-2,-3]]],15,[[8,[6]]],[[8,[9]]],[[8,[10]]]],[[[14,[-1,-2,-3]],16,17,17,17],1,[[8,[6]]],[[8,[9]]],[[8,[10]]]],[[[14,[-1,-2,-3]],16],1,[[8,[6]]],[[8,[9]]],[[8,[10]]]],0,0,[[[14,[-1,-2,-3]]],1,[[8,[6]]],[[8,[9]]],[[8,[10]]]],[[[14,[-1,-2,-3]]],18,[[8,[6]]],[[8,[9]]],[[8,[10]]]],[[[14,[-1,-2,-3]]],18,[[8,[6]]],[[8,[9]]],[[8,[10]]]],[[[14,[-1,-2,-3]]],1,[[8,[6]]],[[8,[9]]],[[8,[10]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[[7,[6]],[7,[6]],19,19],19],0,[[-1,13],[],[]],[[[20,[-1]],13],[[21,[-1]]],22],0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,[10,10],[[-1,-2],1,[],[]],[[[23,[-1]]],[[3,[1,2]]],5],[[[24,[-1,-2,-3,-4,-5,-6]]],[[3,[1,-1]]],[],[[12,[-1]]],[[25,[6]]],[[8,[6]]],[[8,[9]]],[[8,[10]]]],0,0,0,0,0,0,0,0,0,0,[[-1,-2],[[3,[13,2]]],4,5],0,[[[26,[-1,-2,-3,-4,-5,-6]]],1,[],[[11,[-1]]],[[25,[6]]],[[8,[6]]],[[8,[9]]],[[8,[10]]]],0,0,[[],[[20,[-1]]],[22,27]],[[],10],0,0,0,0,0,0,0,0,0,0,0,0,[[[14,[-1,-2,-3]]],1,[[8,[6]]],[[8,[9]]],[[8,[10]]]],[[[24,[-1,-2,-3,-4,-5,-6]]],1,[],[[12,[-1]]],[[25,[6]]],[[8,[6]]],[[8,[9]]],[[8,[10]]]],0,[[10,10],18],[[10,10],18],0,0,[-1,[[3,[1,-2]]],[],[]],[[[28,[-1]]],[[3,[1,2]]],5],[[[23,[-1]]],[[3,[1,2]]],5],[[[24,[-1,-2,-3,-4,-5,-6]]],[[3,[1,-1]]],[],[[12,[-1]]],[[25,[6]]],[[8,[6]]],[[8,[9]]],[[8,[10]]]],[[10,29],[[3,[1,30]]]],[[15,29],[[3,[1,30]]]],[-1,1,[]],[[[20,[-1]],[21,[-1]]],1,22],0,0,[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[[31,[-1]]],-1,4],[[[26,[-1,-2,-3,-4,-5,-6]]],-2,[],[[11,[-1]]],[[25,[6]]],[[8,[6]]],[[8,[9]]],[[8,[10]]]],[[[23,[-1]]],-1,5],[[[24,[-1,-2,-3,-4,-5,-6]]],-2,[],[[12,[-1]]],[[25,[6]]],[[8,[6]]],[[8,[9]]],[[8,[10]]]],[[[31,[-1]]],-1,4],[[[26,[-1,-2,-3,-4,-5,-6]]],-2,[],[[11,[-1]]],[[25,[6]]],[[8,[6]]],[[8,[9]]],[[8,[10]]]],[[[23,[-1]]],-1,5],[[[24,[-1,-2,-3,-4,-5,-6]]],-2,[],[[12,[-1]]],[[25,[6]]],[[8,[6]]],[[8,[9]]],[[8,[10]]]],0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[31,[-1]]],-1,4],[[[26,[-1,-2,-3,-4,-5,-6]]],-2,[],[[11,[-1]]],[[25,[6]]],[[8,[6]]],[[8,[9]]],[[8,[10]]]],[[[23,[-1]]],[[3,[-1,-1]]],5],[[[24,[-1,-2,-3,-4,-5,-6]]],[[3,[-2,-2]]],[],[[12,[-1]]],[[25,[6]]],[[8,[6]]],[[8,[9]]],[[8,[10]]]],0,0,0,0,[-1,13,[]],0,0,0,0,0,0,0,0,0,0,0,[-1,[[20,[-1]]],22],[[-1,-2,-3],[[14,[-1,-2,-3]]],[[8,[6]]],[[8,[9]]],[[8,[10]]]],[[-1,13],[[31,[-1]]],4],[[-2,-3,-4,-5,-6,-1],[[26,[-1,-2,-3,-4,-5,-6]]],[],[[11,[-1]]],[[25,[6]]],[[8,[6]]],[[8,[9]]],[[8,[10]]]],[[-1,13],[[23,[-1]]],5],[[-2,-3,-4,-5,-6,-1],[[24,[-1,-2,-3,-4,-5,-6]]],[],[[12,[-1]]],[[25,[6]]],[[8,[6]]],[[8,[9]]],[[8,[10]]]],[[-1,-2,-3],[[14,[-1,-2,-3]]],[[8,[6]]],[[8,[9]]],[[8,[10]]]],[[-1,13],[[31,[-1]]],4],[[-1,-2,-3],[[14,[-1,-2,-3]]],[[8,[6]]],[[8,[9]]],[[8,[10]]]],[[-2,-3,-4,-5,-6,-1],[[26,[-1,-2,-3,-4,-5,-6]]],[],[[11,[-1]]],[[25,[6]]],[[8,[6]]],[[8,[9]]],[[8,[10]]]],[[-1,13],[[23,[-1]]],5],[[-2,-3,-4,-5,-6,-1],[[24,[-1,-2,-3,-4,-5,-6]]],[],[[12,[-1]]],[[25,[6]]],[[8,[6]]],[[8,[9]]],[[8,[10]]]],0,0,0,0,0,0,0,0,0,[[-1,[7,[6]]],[[3,[13,-2]]],[],[]],[[[32,[-1]],[7,[6]]],[[3,[13,2]]],4],[[[33,[-1]],[7,[6]]],[[3,[13,2]]],4],[[[31,[-1]],[7,[6]]],[[3,[13,2]]],4],[[[26,[-1,-2,-3,-4,-5,-6]],[7,[6]]],[[3,[13,-1]]],[],[[11,[-1]]],[[25,[6]]],[[8,[6]]],[[8,[9]]],[[8,[10]]]],0,0,0,0,0,0,0,0,[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],0,0,0,[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,34,[]],[-1,34,[]],[-1,34,[]],[-1,34,[]],[-1,34,[]],[-1,34,[]],[-1,34,[]],[-1,34,[]],[-1,34,[]],[-1,34,[]],[-1,34,[]],0,0,[[-1,[7,[6]]],[[3,[13,-2]]],[],[]],[[[28,[-1]],[7,[6]]],[[3,[13,2]]],5],[[[23,[-1]],[7,[6]]],[[3,[13,2]]],5],[[[24,[-1,-2,-3,-4,-5,-6]],[7,[6]]],[[3,[13,-1]]],[],[[12,[-1]]],[[25,[6]]],[[8,[6]]],[[8,[9]]],[[8,[10]]]],0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[35,35],[[-1,-2],1,[],[]],[[],36],[[[7,[6]]],[[3,[36,1]]]],[[35,35],18],[[36,[7,[6]],13],35],[[35,29],37],[-1,-1,[]],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[[],36],[36,1],[6,36],[[36,[7,[6]]],[[3,[1,1]]]],[[36,[7,[6]],13,[7,[6]],13],35],[-1,-2,[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,34,[]],[-1,34,[]],0,0,0,0,0,0,0,0,0,0,[[-1,-2,38],[[3,[13,2]]],4,5],[[-1,-2,[7,[6]],[7,[6]],38,-3],[[3,[13,2]]],4,5,39],[[-2,-3,[7,[6]],[7,[6]],38,-4,-5,-1],[[3,[13,-1]]],[],[[11,[-1]]],[[12,[-1]]],39,40],[[-2,-3,[7,[6]],[7,[6]],38,-4,-5,[7,[6]],-1],[[3,[13,-1]]],[],[[11,[-1]]],[[12,[-1]]],39,40],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[-1,13],[],[]],0,0,0,0,0,0,0,0,0,0,0,[[38,[41,[-1]],[7,[6]],[7,[[44,[[42,[-2]],[43,[-2]],-2]]]]],[[3,[13,45]]],[[46,[6]],47,48],[39,47]],0,0,0,0,0,0,0,0,0,0,0,[-1,1,[]],0,0,0,0,0,0,0,0,[-1,13,[]],0,0,0,0,0,0,0,0,0,0,0,0,[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,19,[]],[[[49,[-1]]],19,[[8,[9]]]],[[[50,[-1]]],19,[[8,[9]]]],[[[51,[-1]]],19,[[8,[9]]]],[[[52,[-1]]],19,[[8,[9]]]],[-1,19,[]],[[[49,[-1]]],19,[[8,[9]]]],[[[50,[-1]]],19,[[8,[9]]]],[[[51,[-1]]],19,[[8,[9]]]],[[[52,[-1]]],19,[[8,[9]]]],0,0,0,0,0,[[-1,53,13,13,[7,[6]],13,38,[43,[-1]],[7,[19]],13,[7,[54]],13,13],1,[[8,[17]],[8,[9]],[8,[55]],[8,[56]],[8,[57]]]],0,0,0,[[-1,[7,[6]],13,13,13],1,[]],[[[58,[-1]],[7,[6]],13,13,13],1,[[25,[9]],[46,[9]],59]],[[[60,[-1]],[7,[6]],13,13,13],1,[[8,[17]],[8,[9]]]],[[[61,[-1,-2]],[7,[6]],13,13,13],1,[62,22],[[8,[17]],[8,[9]]]],[[[43,[-1]],[7,[6]],13,13,13],1,[[8,[17]],[8,[9]]]],0,[[-1,[63,[53]],[7,[17]],[7,[6]],13,[7,[19]],13,13,13,13,13,64],18,[]],[[[58,[-1]],[63,[53]],[7,[17]],[7,[6]],13,[7,[19]],13,13,13,13,13,64],18,[[25,[9]],[46,[9]],59]],[[[60,[-1]],[63,[53]],[7,[17]],[7,[6]],13,[7,[19]],13,13,13,13,13,64],18,[[8,[17]],[8,[9]]]],[[[61,[-1,-2]],[63,[53]],[7,[17]],[7,[6]],13,[7,[19]],13,13,13,13,13,64],18,[62,22],[[8,[17]],[8,[9]]]],[[[43,[-1]],[63,[53]],[7,[17]],[7,[6]],13,[7,[19]],13,13,13,13,13,64],18,[[8,[17]],[8,[9]]]],[-1,65,[]],[[[58,[-1]]],65,[[25,[9]],[46,[9]],59]],[[[60,[-1]]],65,[[8,[17]],[8,[9]]]],[[[61,[-1,-2]]],65,[62,22],[[8,[17]],[8,[9]]]],[[[43,[-1]]],65,[[8,[17]],[8,[9]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[-1,[7,[6]]],13,[]],[[-1,[7,[6]]],9,[]],[[[58,[-1]],[7,[6]]],13,[[25,[9]],[46,[9]],59]],[[[49,[-1]],[7,[6]]],9,[[8,[9]]]],[[[50,[-1]],[7,[6]]],9,[[8,[9]]]],[[[51,[-1]],[7,[6]]],9,[[8,[9]]]],[[[52,[-1]],[7,[6]]],9,[[8,[9]]]],[[[60,[-1]],[7,[6]]],13,[[8,[17]],[8,[9]]]],[[[61,[-1,-2]],[7,[6]]],13,[62,22],[[8,[17]],[8,[9]]]],[[[43,[-1]],[7,[6]]],13,[[8,[17]],[8,[9]]]],[-1,13,[]],[-1,13,[]],[[[58,[-1]]],13,[[25,[9]],[46,[9]],59]],[[[60,[-1]]],13,[[8,[17]],[8,[9]]]],[[[61,[-1,-2]]],13,[62,22],[[8,[17]],[8,[9]]]],[[[43,[-1]]],13,[[8,[17]],[8,[9]]]],[66,13],[67,13],[68,13],[69,13],0,0,0,[-1,70,[]],[[[58,[-1]]],70,[[25,[9]],[46,[9]],59]],[[[60,[-1]]],70,[[8,[17]],[8,[9]]]],[[[61,[-1,-2]]],70,[62,22],[[8,[17]],[8,[9]]]],[[[43,[-1]]],70,[[8,[17]],[8,[9]]]],[[-1,18,13,[7,[6]]],71,[]],[[[58,[-1]],18,13,[7,[6]]],71,[[25,[9]],[46,[9]],59]],[[[60,[-1]],18,13,[7,[6]]],71,[[8,[17]],[8,[9]]]],[[[61,[-1,-2]],18,13,[7,[6]]],71,[62,22],[[8,[17]],[8,[9]]]],[[[43,[-1]],18,13,[7,[6]]],71,[[8,[17]],[8,[9]]]],[[-1,[7,[19]]],1,[]],[[[58,[-1]],[7,[19]]],1,[[25,[9]],[46,[9]],59]],[[[60,[-1]],[7,[19]]],1,[[8,[17]],[8,[9]]]],[[[61,[-1,-2]],[7,[19]]],1,[62,22],[[8,[17]],[8,[9]]]],[[[43,[-1]],[7,[19]]],1,[[8,[17]],[8,[9]]]],0,0,0,[[-1,13,13,[7,[6]],13],1,[]],[[[58,[-1]],13,13,[7,[6]],13],1,[[25,[9]],[46,[9]],59]],[[[60,[-1]],13,13,[7,[6]],13],1,[[8,[17]],[8,[9]]]],[[[61,[-1,-2]],13,13,[7,[6]],13],1,[62,22],[[8,[17]],[8,[9]]]],[[[43,[-1]],13,13,[7,[6]],13],1,[[8,[17]],[8,[9]]]],[[-1,13,13,[7,[6]],13],1,72],[[-1,[7,[6]],13,13],1,[]],[[[58,[-1]],[7,[6]],13,13],1,[[25,[9]],[46,[9]],59]],[[[60,[-1]],[7,[6]],13,13],1,[[8,[17]],[8,[9]]]],[[[61,[-1,-2]],[7,[6]],13,13],1,[62,22],[[8,[17]],[8,[9]]]],[[[43,[-1]],[7,[6]],13,13],1,[[8,[17]],[8,[9]]]],[[-1,[7,[6]],13,13],1,[]],[[[61,[-1,-2]],[7,[6]],13,13],1,[62,22],[[8,[17]],[8,[9]]]],[[-1,[7,[6]],13,13],1,[]],[[[61,[-1,-2]],[7,[6]],13,13],1,[62,22],[[8,[17]],[8,[9]]]],[-1,13,[]],[-1,13,[]],[[[58,[-1]]],13,[[25,[9]],[46,[9]],59]],[[[60,[-1]]],13,[[8,[17]],[8,[9]]]],[[[61,[-1,-2]]],13,[62,22],[[8,[17]],[8,[9]]]],[[[43,[-1]]],13,[[8,[17]],[8,[9]]]],[66,13],[67,13],[68,13],[69,13],[[-1,13,[7,[6]]],1,72],[[-1,[7,[6]],13,13,13],1,[]],[[[58,[-1]],[7,[6]],13,13,13],1,[[25,[9]],[46,[9]],59]],[[[60,[-1]],[7,[6]],13,13,13],1,[[8,[17]],[8,[9]]]],[[[61,[-1,-2]],[7,[6]],13,13,13],1,[62,22],[[8,[17]],[8,[9]]]],[[[43,[-1]],[7,[6]],13,13,13],1,[[8,[17]],[8,[9]]]],0,[-1,19,[]],[[[49,[-1]]],19,[[8,[9]]]],[[[50,[-1]]],19,[[8,[9]]]],[[[51,[-1]]],19,[[8,[9]]]],[[[52,[-1]]],19,[[8,[9]]]],0,0,0,0,0,0,0,0,0,0,[-1,19,[]],[66,19],[67,19],[68,19],[69,19],0,0,0,[-1,9,[]],[66,9],[67,9],[68,9],[69,9],0,0,[-1,9,[]],[66,9],[67,9],[68,9],[69,9],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[-1,9,[]],[66,9],[67,9],[68,9],[69,9],0,0,0,0,0,0,0,0,0,0,0,[73,73],[74,74],[38,38],[70,70],[65,65],[66,66],[67,67],[68,68],[69,69],[[-1,-2],1,[],[]],[[-1,-2],1,[],[]],[[-1,-2],1,[],[]],[[-1,-2],1,[],[]],[[-1,-2],1,[],[]],[[-1,-2],1,[],[]],[[-1,-2],1,[],[]],[[-1,-2],1,[],[]],[[-1,-2],1,[],[]],[[-1,-2],-1,[],[]],[[[58,[[51,[-1]]]],-1],[[58,[[51,[-1]]]]],[[8,[17]],[8,[9]]]],[[[58,[[50,[-1]]]],-1],[[58,[[50,[-1]]]]],[[8,[17]],[8,[9]]]],[[[58,[[49,[-1]]]],-1],[[58,[[49,[-1]]]]],[[8,[17]],[8,[9]]]],[[[58,[[52,[-1]]]],-1],[[58,[[52,[-1]]]]],[[8,[17]],[8,[9]]]],[[[60,[-1]],-1],[[60,[-1]]],[[8,[17]],[8,[9]]]],[[[61,[-1,-2]],-2],[[61,[-1,-2]]],[62,75,22],[[8,[17]],[8,[9]]]],[[[43,[-1]],-1],[[43,[-1]]],[[8,[17]],[8,[9]]]],0,0,0,[[],[[43,[-1]]],[[8,[17]],[8,[9]]]],[[],38],[[],70],0,0,0,0,0,0,0,0,0,[[[58,[-1]],[58,[-1]]],18,[[25,[9]],[46,[9]],59]],[[[60,[-1]],[60,[-1]]],18,[[8,[17]],[8,[9]]]],[[[61,[-1,-2]],[61,[-1,-2]]],18,[62,75,22],[[8,[17]],[8,[9]]]],[[[43,[-1]],[43,[-1]]],18,[[8,[17]],[8,[9]]]],[[73,73],18],[[74,74],18],[[70,70],18],[[65,65],18],[[66,66],18],[[67,67],18],[[68,68],18],[[69,69],18],0,[[73,29],37],[[74,29],37],[[38,29],37],[[[43,[-1]],-1],1,[[8,[17]],[8,[9]]]],0,0,[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,55,[]],[66,55],[67,55],[68,55],[69,55],[-1,55,[]],[66,55],[67,55],[68,55],[69,55],0,0,0,0,0,[-1,19,[]],[66,19],[67,19],[68,19],[69,19],0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[-1,[7,[6]]],55,[]],[[66,[7,[6]]],55],[[67,[7,[6]]],55],[[68,[7,[6]]],55],[[69,[7,[6]]],55],0,0,0,0,0,0,[74,70],0,0,0,0,0,0,0,0,0,0,0,[[-1,19],1,[]],[[66,19],1],[[67,19],1],[[68,19],1],[[69,19],1],0,[[[49,[-1]]],[[7,[9]]],[[8,[9]]]],[[[50,[-1]]],[[7,[9]]],[[8,[9]]]],[[[51,[-1]]],[[7,[9]]],[[8,[9]]]],[[[52,[-1]]],[[7,[9]]],[[8,[9]]]],[[[49,[-1]]],[[7,[9]]],[[8,[9]]]],[[[50,[-1]]],[[7,[9]]],[[8,[9]]]],[[[51,[-1]]],[[7,[9]]],[[8,[9]]]],[[[52,[-1]]],[[7,[9]]],[[8,[9]]]],0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],0,[-1,34,[]],[-1,34,[]],[-1,34,[]],[-1,34,[]],[-1,34,[]],[-1,34,[]],[-1,34,[]],[-1,34,[]],[-1,34,[]],[-1,34,[]],[-1,34,[]],[-1,34,[]],[-1,34,[]],[-1,34,[]],[-1,34,[]],[-1,34,[]],[-1,34,[]],[-1,34,[]],[-1,34,[]],[-1,34,[]],[-1,34,[]],[-1,34,[]],[-1,34,[]],[-1,34,[]],[-1,34,[]],[-1,34,[]],[-1,34,[]],[-1,34,[]],0,0,0,0,[[[76,[-1,-2,-3]],[7,[6]],13,13,13],1,[[8,[9]]],[],77],[[[76,[-1,-2,-3]],[63,[53]],[7,[17]],[7,[6]],13,[7,[19]],13,13,13,13,13,64],18,[[8,[9]]],[],77],[[[76,[-1,-2,-3]]],65,[[8,[9]]],[],77],0,0,0,0,[[[76,[-1,-2,-3]],[7,[6]]],13,[[8,[9]]],[],77],[[[76,[-1,-2,-3]]],13,[[8,[9]]],[],77],[[78,13,13],1],[[-1,18,38,13],[[76,[-1,[79,[-1]],80]]],[[8,[9]]]],[[[76,[-1,-2,-3]]],70,[[8,[9]]],[],77],[[[76,[-1,-2,-3]],18,13,[7,[6]]],71,[[8,[9]]],[],77],[[[76,[-1,-2,-3]],[7,[19]]],1,[[8,[9]]],[],77],[[[76,[-1,-2,-3]],13,13,[7,[6]],13],1,[[8,[9]]],[],77],[[[76,[-1,-2,-3]],[7,[6]],13,13],1,[[8,[9]]],[],77],[[[76,[-1,-2,-3]],[7,[6]],13,13,13,13,13,[7,[55]]],13,[[8,[9]]],[],77],[[[76,[-1,-2,-3]]],13,[[8,[9]]],[],77],[[[76,[-1,-2,-3]],[7,[6]],13,13,13],1,[[8,[9]]],[],77],0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[81,81],[57,57],[[-1,-2],1,[],[]],[[-1,-2],1,[],[]],[[[76,[-1,-2,-3]],-1],[[76,[-1,-2,-3]]],[[8,[17]],[8,[9]]],[],77],0,0,0,[[],57],[82,9],[78,9],0,[[[79,[-1]],[79,[-1]]],18,[[8,[9]]]],[[[76,[-1,-2,-3]],[76,[-1,-2,-3]]],18,[[8,[9]]],[],77],[[81,29],37],[[57,29],37],0,[[-1,-2],1,[],[]],[[[79,[-1]],-1],1,[[8,[9]]]],[[[76,[-1,-2,-3]],-1],1,[[8,[9]]],[],77],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,[82,9],[78,9],[[],9],[[],9],[[],9],[[],9],[[-1,-2],-3,[],[],[]],[[-1,9],[[79,[-1]]],[[8,[9]]]],[-1,-2,[],[]],[-1,[[79,[-1]]],[[8,[9]]]],0,[[78,9],1],[[78,9],1],0,[[[79,[-1]]],[[7,[9]]],[[8,[9]]]],[[[79,[-1]]],[[7,[9]]],[[8,[9]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,34,[]],[-1,34,[]],[-1,34,[]],[-1,34,[]],[-1,34,[]],[-1,34,[]],[-1,34,[]],0,0,0,0,0,0,[[-1,[63,[53]],13,13,[7,[6]],13,38,[76,[-1,-2,-3]],[7,[19]],13,[7,[54]],13,13],1,[[8,[9]],[8,[55]],[8,[56]],[8,[57]]],[],77],[[-1,[63,[53]],13,13,[7,[6]],13,38,[76,[-1,-2,-3]],[7,[19]],13,[7,[54]],13,13],1,[[8,[9]],[8,[56]],[8,[57]]],[],77],[[[7,[57]],13],1],[[-1,[63,[53]],13,13,[7,[6]],13,38,13,[7,[19]],[76,[-2,-3,-4]],[7,[57]]],13,[[8,[56]]],[[8,[9]]],[],77],[[13,13,13,[7,[57]],[7,[19]],13,38,[7,[54]],13],1],0,0,[[[76,[-1,-2,-3]],13,13,[7,[6]],13],1,[[8,[9]]],[],77],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[83,83],[84,84],[[-1,-2],1,[],[]],[[-1,-2],1,[],[]],0,0,0,0,[[],84],0,0,[[83,29],37],[[84,29],37],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,34,[]],[-1,34,[]],[-1,34,[]],[[[7,[9]],13],56],[-1,56,[[46,[9]],85]],[[[7,[9]],13,13],56],0,[-1,-2,[],[]],[-1,-2,[],[]],[[[86,[-1]],-1],1,[[8,[6]],[8,[9]]]],[-1,-1,[]],[-1,-2,[],[]],0,[[[86,[-1]]],13,[[8,[6]],[8,[9]]]],[[],[[86,[-1]]],[[8,[6]],[8,[9]]]],0,0,[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,34,[]],0,[[[86,[-1]]],13,[[8,[6]],[8,[9]]]],[[-1,[7,[54]],13,[7,[6]],13,13,38,[86,[-1]],[86,[-1]],[86,[-1]]],1,[[8,[6]],[8,[17]],[8,[9]],[8,[56]],[8,[87]],[8,[88]],[8,[89]],[8,[90]],[8,[91]]]],0,0,0,[[-1,[7,[9]],13,13,[7,[6]],[7,[17]],13,[7,[6]]],1,[[8,[92]]]],[[[7,[6]],13,[7,[92]],13,[7,[6]]],1],[[-1,[7,[6]],13,13,13,6,6,19,38,93,[94,[19]],[7,[54]],13,[95,[-1]],96,13,[7,[6]],-2],1,39,40],[[-1,[7,[6]],13,13,13,19,38,[94,[19]],[7,[54]],13,96,13,[7,[6]],-2],1,39,40],[[-1,[7,[6]],13,13,13,19,38,[94,[19]],[7,[54]],13,96,13,[7,[6]],-2],1,39,40],[[13,[7,[6]]],1],[[-1,19,[7,[6]],13,13,38,13,96,13,[7,[6]],18,-2],1,39,40],[[13,[7,[6]]],1],[[38,13,[7,[6]]],1],[[97,92,92],18],[[13,[7,[6]]],1],0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[98,98],[96,96],[[-1,-2],1,[],[]],[[-1,-2],1,[],[]],0,0,0,0,[[[95,[-1]],-1],1,[[8,[6]],[8,[9]],[8,[88]],[8,[89]],[8,[90]]]],0,0,0,0,0,0,[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,[[],[[95,[-1]]],[[8,[6]],[8,[9]],[8,[88]],[8,[89]],[8,[90]]]],[[],96],0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],0,0,0,[-1,34,[]],[-1,34,[]],[-1,34,[]],[-1,34,[]],[-1,34,[]],[-1,34,[]],[-1,34,[]],[[-2,[7,[-1]],13,13,[7,[-1]],13,[7,[9]]],1,[[25,[9]],[46,[9]],85,22],[[8,[9]],[8,[91]],[8,[-1]]]],[[-1,-1],56,[[25,[9]],[46,[9]],85,22]],[[[7,[-1]],[7,[9]],[7,[9]],[7,[9]],[7,[91]],13,13,13,13],13,[[25,[9]],[46,[9]],85,22]],[[-2,[7,[-1]],[7,[9]],13],13,[[25,[9]],[46,[9]],85,22],[[8,[9]],[8,[-1]]]],[[[7,[-1]],13,[7,[9]],13,[7,[-1]],[7,[9]]],1,[[25,[9]],[46,[9]],85,22]],0,[-1,-2,[],[]],[-1,-2,[],[]],[91,91],[[-1,-2],1,[],[]],0,0,[[],91],[-1,-1,[]],0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,34,[]],0,0,0,0,[[-1,13],[],[]],[[[99,[-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18]],13],[],[[8,[6]]],[[8,[17]]],[[8,[19]]],[[8,[9]]],[[8,[55]]],[[8,[54]]],[[8,[56]]],[[8,[100]]],[[8,[101]]],[[8,[102]]],[[8,[103]]],[[8,[88]]],[[8,[89]]],[[8,[90]]],[[8,[91]]],[[8,[93]]],[[8,[92]]],[[8,[57]]]],[[[99,[-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18]],13],[],[[8,[6]]],[[8,[17]]],[[8,[19]]],[[8,[9]]],[[8,[55]]],[[8,[54]]],[[8,[56]]],[[8,[100]]],[[8,[101]]],[[8,[102]]],[[8,[103]]],[[8,[88]]],[[8,[89]]],[[8,[90]]],[[8,[91]]],[[8,[93]]],[[8,[92]]],[[8,[57]]]],[[[99,[-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18]],13],[],[[8,[6]]],[[8,[17]]],[[8,[19]]],[[8,[9]]],[[8,[55]]],[[8,[54]]],[[8,[56]]],[[8,[100]]],[[8,[101]]],[[8,[102]]],[[8,[103]]],[[8,[88]]],[[8,[89]]],[[8,[90]]],[[8,[91]]],[[8,[93]]],[[8,[92]]],[[8,[57]]]],[[[99,[-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18]],13],[],[[8,[6]]],[[8,[17]]],[[8,[19]]],[[8,[9]]],[[8,[55]]],[[8,[54]]],[[8,[56]]],[[8,[100]]],[[8,[101]]],[[8,[102]]],[[8,[103]]],[[8,[88]]],[[8,[89]]],[[8,[90]]],[[8,[91]]],[[8,[93]]],[[8,[92]]],[[8,[57]]]],[[[99,[-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18]],13],[],[[8,[6]]],[[8,[17]]],[[8,[19]]],[[8,[9]]],[[8,[55]]],[[8,[54]]],[[8,[56]]],[[8,[100]]],[[8,[101]]],[[8,[102]]],[[8,[103]]],[[8,[88]]],[[8,[89]]],[[8,[90]]],[[8,[91]]],[[8,[93]]],[[8,[92]]],[[8,[57]]]],[[[99,[-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18]],13],[],[[8,[6]]],[[8,[17]]],[[8,[19]]],[[8,[9]]],[[8,[55]]],[[8,[54]]],[[8,[56]]],[[8,[100]]],[[8,[101]]],[[8,[102]]],[[8,[103]]],[[8,[88]]],[[8,[89]]],[[8,[90]]],[[8,[91]]],[[8,[93]]],[[8,[92]]],[[8,[57]]]],[[[99,[-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18]],13],[],[[8,[6]]],[[8,[17]]],[[8,[19]]],[[8,[9]]],[[8,[55]]],[[8,[54]]],[[8,[56]]],[[8,[100]]],[[8,[101]]],[[8,[102]]],[[8,[103]]],[[8,[88]]],[[8,[89]]],[[8,[90]]],[[8,[91]]],[[8,[93]]],[[8,[92]]],[[8,[57]]]],[[[99,[-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18]],13],[],[[8,[6]]],[[8,[17]]],[[8,[19]]],[[8,[9]]],[[8,[55]]],[[8,[54]]],[[8,[56]]],[[8,[100]]],[[8,[101]]],[[8,[102]]],[[8,[103]]],[[8,[88]]],[[8,[89]]],[[8,[90]]],[[8,[91]]],[[8,[93]]],[[8,[92]]],[[8,[57]]]],[[[99,[-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18]],13],[],[[8,[6]]],[[8,[17]]],[[8,[19]]],[[8,[9]]],[[8,[55]]],[[8,[54]]],[[8,[56]]],[[8,[100]]],[[8,[101]]],[[8,[102]]],[[8,[103]]],[[8,[88]]],[[8,[89]]],[[8,[90]]],[[8,[91]]],[[8,[93]]],[[8,[92]]],[[8,[57]]]],[[[99,[-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18]],13],[],[[8,[6]]],[[8,[17]]],[[8,[19]]],[[8,[9]]],[[8,[55]]],[[8,[54]]],[[8,[56]]],[[8,[100]]],[[8,[101]]],[[8,[102]]],[[8,[103]]],[[8,[88]]],[[8,[89]]],[[8,[90]]],[[8,[91]]],[[8,[93]]],[[8,[92]]],[[8,[57]]]],[[[99,[-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18]],13],[],[[8,[6]]],[[8,[17]]],[[8,[19]]],[[8,[9]]],[[8,[55]]],[[8,[54]]],[[8,[56]]],[[8,[100]]],[[8,[101]]],[[8,[102]]],[[8,[103]]],[[8,[88]]],[[8,[89]]],[[8,[90]]],[[8,[91]]],[[8,[93]]],[[8,[92]]],[[8,[57]]]],[[[99,[-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18]],13],[],[[8,[6]]],[[8,[17]]],[[8,[19]]],[[8,[9]]],[[8,[55]]],[[8,[54]]],[[8,[56]]],[[8,[100]]],[[8,[101]]],[[8,[102]]],[[8,[103]]],[[8,[88]]],[[8,[89]]],[[8,[90]]],[[8,[91]]],[[8,[93]]],[[8,[92]]],[[8,[57]]]],[[[99,[-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18]],13],[],[[8,[6]]],[[8,[17]]],[[8,[19]]],[[8,[9]]],[[8,[55]]],[[8,[54]]],[[8,[56]]],[[8,[100]]],[[8,[101]]],[[8,[102]]],[[8,[103]]],[[8,[88]]],[[8,[89]]],[[8,[90]]],[[8,[91]]],[[8,[93]]],[[8,[92]]],[[8,[57]]]],[[[99,[-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18]],13],[],[[8,[6]]],[[8,[17]]],[[8,[19]]],[[8,[9]]],[[8,[55]]],[[8,[54]]],[[8,[56]]],[[8,[100]]],[[8,[101]]],[[8,[102]]],[[8,[103]]],[[8,[88]]],[[8,[89]]],[[8,[90]]],[[8,[91]]],[[8,[93]]],[[8,[92]]],[[8,[57]]]],[[[99,[-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18]],13],[],[[8,[6]]],[[8,[17]]],[[8,[19]]],[[8,[9]]],[[8,[55]]],[[8,[54]]],[[8,[56]]],[[8,[100]]],[[8,[101]]],[[8,[102]]],[[8,[103]]],[[8,[88]]],[[8,[89]]],[[8,[90]]],[[8,[91]]],[[8,[93]]],[[8,[92]]],[[8,[57]]]],[[[99,[-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18]],13],[],[[8,[6]]],[[8,[17]]],[[8,[19]]],[[8,[9]]],[[8,[55]]],[[8,[54]]],[[8,[56]]],[[8,[100]]],[[8,[101]]],[[8,[102]]],[[8,[103]]],[[8,[88]]],[[8,[89]]],[[8,[90]]],[[8,[91]]],[[8,[93]]],[[8,[92]]],[[8,[57]]]],[-1,-2,[],[]],[-1,-2,[],[]],[[[99,[-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18]]],[[99,[-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18]]],[[8,[6]],22],[[8,[17]],22],[[8,[19]],22],[[8,[9]],22],[[8,[55]],22],[[8,[54]],22],[[8,[56]],22],[[8,[100]],22],[[8,[101]],22],[[8,[102]],22],[[8,[103]],22],[[8,[88]],22],[[8,[89]],22],[[8,[90]],22],[[8,[91]],22],[[8,[93]],22],[[8,[92]],22],[[8,[57]],22]],[[-1,-2],1,[],[]],[[],[[99,[-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18]]],[[8,[6]],27],[[8,[17]],27],[[8,[19]],27],[[8,[9]],27],[[8,[55]],27],[[8,[54]],27],[[8,[56]],27],[[8,[100]],27],[[8,[101]],27],[[8,[102]],27],[[8,[103]],27],[[8,[88]],27],[[8,[89]],27],[[8,[90]],27],[[8,[91]],27],[[8,[93]],27],[[8,[92]],27],[[8,[57]],27]],[-1,1,[]],[[[99,[-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18]]],1,[[8,[6]]],[[8,[17]]],[[8,[19]]],[[8,[9]]],[[8,[55]]],[[8,[54]]],[[8,[56]]],[[8,[100]]],[[8,[101]]],[[8,[102]]],[[8,[103]]],[[8,[88]]],[[8,[89]]],[[8,[90]]],[[8,[91]]],[[8,[93]]],[[8,[92]]],[[8,[57]]]],[[[99,[-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18]]],1,[[8,[6]]],[[8,[17]]],[[8,[19]]],[[8,[9]]],[[8,[55]]],[[8,[54]]],[[8,[56]]],[[8,[100]]],[[8,[101]]],[[8,[102]]],[[8,[103]]],[[8,[88]]],[[8,[89]]],[[8,[90]]],[[8,[91]]],[[8,[93]]],[[8,[92]]],[[8,[57]]]],[[[99,[-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18]]],1,[[8,[6]]],[[8,[17]]],[[8,[19]]],[[8,[9]]],[[8,[55]]],[[8,[54]]],[[8,[56]]],[[8,[100]]],[[8,[101]]],[[8,[102]]],[[8,[103]]],[[8,[88]]],[[8,[89]]],[[8,[90]]],[[8,[91]]],[[8,[93]]],[[8,[92]]],[[8,[57]]]],[[[99,[-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18]]],1,[[8,[6]]],[[8,[17]]],[[8,[19]]],[[8,[9]]],[[8,[55]]],[[8,[54]]],[[8,[56]]],[[8,[100]]],[[8,[101]]],[[8,[102]]],[[8,[103]]],[[8,[88]]],[[8,[89]]],[[8,[90]]],[[8,[91]]],[[8,[93]]],[[8,[92]]],[[8,[57]]]],[[[99,[-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18]]],1,[[8,[6]]],[[8,[17]]],[[8,[19]]],[[8,[9]]],[[8,[55]]],[[8,[54]]],[[8,[56]]],[[8,[100]]],[[8,[101]]],[[8,[102]]],[[8,[103]]],[[8,[88]]],[[8,[89]]],[[8,[90]]],[[8,[91]]],[[8,[93]]],[[8,[92]]],[[8,[57]]]],[[[99,[-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18]]],1,[[8,[6]]],[[8,[17]]],[[8,[19]]],[[8,[9]]],[[8,[55]]],[[8,[54]]],[[8,[56]]],[[8,[100]]],[[8,[101]]],[[8,[102]]],[[8,[103]]],[[8,[88]]],[[8,[89]]],[[8,[90]]],[[8,[91]]],[[8,[93]]],[[8,[92]]],[[8,[57]]]],[[[99,[-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18]]],1,[[8,[6]]],[[8,[17]]],[[8,[19]]],[[8,[9]]],[[8,[55]]],[[8,[54]]],[[8,[56]]],[[8,[100]]],[[8,[101]]],[[8,[102]]],[[8,[103]]],[[8,[88]]],[[8,[89]]],[[8,[90]]],[[8,[91]]],[[8,[93]]],[[8,[92]]],[[8,[57]]]],[[[99,[-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18]]],1,[[8,[6]]],[[8,[17]]],[[8,[19]]],[[8,[9]]],[[8,[55]]],[[8,[54]]],[[8,[56]]],[[8,[100]]],[[8,[101]]],[[8,[102]]],[[8,[103]]],[[8,[88]]],[[8,[89]]],[[8,[90]]],[[8,[91]]],[[8,[93]]],[[8,[92]]],[[8,[57]]]],[[[99,[-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18]]],1,[[8,[6]]],[[8,[17]]],[[8,[19]]],[[8,[9]]],[[8,[55]]],[[8,[54]]],[[8,[56]]],[[8,[100]]],[[8,[101]]],[[8,[102]]],[[8,[103]]],[[8,[88]]],[[8,[89]]],[[8,[90]]],[[8,[91]]],[[8,[93]]],[[8,[92]]],[[8,[57]]]],[[[99,[-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18]]],1,[[8,[6]]],[[8,[17]]],[[8,[19]]],[[8,[9]]],[[8,[55]]],[[8,[54]]],[[8,[56]]],[[8,[100]]],[[8,[101]]],[[8,[102]]],[[8,[103]]],[[8,[88]]],[[8,[89]]],[[8,[90]]],[[8,[91]]],[[8,[93]]],[[8,[92]]],[[8,[57]]]],[[[99,[-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18]]],1,[[8,[6]]],[[8,[17]]],[[8,[19]]],[[8,[9]]],[[8,[55]]],[[8,[54]]],[[8,[56]]],[[8,[100]]],[[8,[101]]],[[8,[102]]],[[8,[103]]],[[8,[88]]],[[8,[89]]],[[8,[90]]],[[8,[91]]],[[8,[93]]],[[8,[92]]],[[8,[57]]]],[[[99,[-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18]]],1,[[8,[6]]],[[8,[17]]],[[8,[19]]],[[8,[9]]],[[8,[55]]],[[8,[54]]],[[8,[56]]],[[8,[100]]],[[8,[101]]],[[8,[102]]],[[8,[103]]],[[8,[88]]],[[8,[89]]],[[8,[90]]],[[8,[91]]],[[8,[93]]],[[8,[92]]],[[8,[57]]]],[[[99,[-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18]]],1,[[8,[6]]],[[8,[17]]],[[8,[19]]],[[8,[9]]],[[8,[55]]],[[8,[54]]],[[8,[56]]],[[8,[100]]],[[8,[101]]],[[8,[102]]],[[8,[103]]],[[8,[88]]],[[8,[89]]],[[8,[90]]],[[8,[91]]],[[8,[93]]],[[8,[92]]],[[8,[57]]]],[[[99,[-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18]]],1,[[8,[6]]],[[8,[17]]],[[8,[19]]],[[8,[9]]],[[8,[55]]],[[8,[54]]],[[8,[56]]],[[8,[100]]],[[8,[101]]],[[8,[102]]],[[8,[103]]],[[8,[88]]],[[8,[89]]],[[8,[90]]],[[8,[91]]],[[8,[93]]],[[8,[92]]],[[8,[57]]]],[[[99,[-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18]]],1,[[8,[6]]],[[8,[17]]],[[8,[19]]],[[8,[9]]],[[8,[55]]],[[8,[54]]],[[8,[56]]],[[8,[100]]],[[8,[101]]],[[8,[102]]],[[8,[103]]],[[8,[88]]],[[8,[89]]],[[8,[90]]],[[8,[91]]],[[8,[93]]],[[8,[92]]],[[8,[57]]]],[[[99,[-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18]]],1,[[8,[6]]],[[8,[17]]],[[8,[19]]],[[8,[9]]],[[8,[55]]],[[8,[54]]],[[8,[56]]],[[8,[100]]],[[8,[101]]],[[8,[102]]],[[8,[103]]],[[8,[88]]],[[8,[89]]],[[8,[90]]],[[8,[91]]],[[8,[93]]],[[8,[92]]],[[8,[57]]]],[-1,-1,[]],[-1,-2,[],[]],[[-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18],[[99,[-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18]]],[[8,[6]]],[[8,[17]]],[[8,[19]]],[[8,[9]]],[[8,[55]]],[[8,[54]]],[[8,[56]]],[[8,[100]]],[[8,[101]]],[[8,[102]]],[[8,[103]]],[[8,[88]]],[[8,[89]]],[[8,[90]]],[[8,[91]]],[[8,[93]]],[[8,[92]]],[[8,[57]]]],[-1,-2,[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,34,[]],0,[[17,17,19],17],0,[54,9],[54,9],[[54,104],[[1,[13,105]]]],[[54,104],9],[[13,13,[7,[19]]],13],[13,17],[13,17],[[13,13,19,17],1],[[54,104,13,13,13,13],1],[[104,13,13,13,13],54],[[13,13,55,17,9],1],[[[7,[54]],13,9,9,104],1],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[104,104],[54,54],[[-1,-2],1,[],[]],[[-1,-2],1,[],[]],0,0,[[],54],0,0,0,[[104,29],37],[[54,29],37],[-1,-1,[]],[-1,-1,[]],0,[-1,-2,[],[]],[-1,-2,[],[]],0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,34,[]],[-1,34,[]],[[-1,[7,[6]],13,19,[7,[19]],13,[7,[6]],[7,[17]],13,[7,[6]],13,[7,[6]]],1,[[8,[92]]]],0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[106,106],[[-1,-2],1,[],[]],[[106,106],18],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,34,[]],[[-1,[7,[6]],13,19,[7,[9]],[7,[6]],[7,[19]],13,13,[7,[6]]],1,[[8,[92]]]],[[13,19,13,[7,[6]]],1],[[13,55,13,[7,[6]]],1],[[[7,[-1]],13,[7,[-1]],13,13],1,[75,22]],[[6,6,[7,[6]]],6],[93,[[7,[6]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[[107,[-1]],18,18],[[1,[[94,[108]],[94,[56]]]]],[[8,[17]],[8,[9]],[8,[56]]]],[[[107,[-1]],18,18],[[94,[108]]],[[8,[17]],[8,[9]],[8,[56]]]],[[[107,[-1]],18,18],[[94,[56]]],[[8,[17]],[8,[9]],[8,[56]]]],[[[107,[-1]]],6,[[8,[17]],[8,[9]],[8,[56]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[108,108],[[-1,-2],1,[],[]],[[108,29],37],[[[107,[-1]],-1],1,[[8,[17]],[8,[9]],[8,[56]]]],[-1,-1,[]],[-1,-1,[]],[[[107,[-1]],13],1,[[8,[17]],[8,[9]],[8,[56]]]],[-1,-2,[],[]],[-1,-2,[],[]],[[[107,[-1]]],[[7,[6]]],[[8,[17]],[8,[9]],[8,[56]]]],[[[107,[-1]],13],6,[[8,[17]],[8,[9]],[8,[56]]]],[[[107,[-1]]],13,[[8,[17]],[8,[9]],[8,[56]]]],[[-1,109,[94,[6]],[111,[110]],6],[[107,[-1]]],[[8,[17]],[8,[9]],[8,[56]]]],[[[107,[-1]]],112,[[8,[17]],[8,[9]],[8,[56]]]],[[[107,[-1]]],[[111,[110]]],[[8,[17]],[8,[9]],[8,[56]]]],[[[107,[-1]],[114,[113]]],1,[[8,[17]],[8,[9]],[8,[56]]]],0,[[[94,[108]]],[[94,[[1,[17,17]]]]]],[[[107,[-1]]],[[111,[110]]],[[8,[17]],[8,[9]],[8,[56]]]],[-1,-2,[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,34,[]],[-1,34,[]],[[[107,[-1]],6,6],1,[[8,[17]],[8,[9]],[8,[56]]]],[[[107,[-1]],[94,[6]],13,6,13,6],1,[[8,[17]],[8,[9]],[8,[56]]]],0,[[9,9,9],9],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[-1,-1,19,19,73,13,[7,[6]],13,[7,[6]],-2],19,39,40],[[[115,[-1]],116,13,[7,[6]],13,13,[7,[6]],13,[63,[13]],-2],19,39,40],[[[115,[-1]],13,[7,[6]]],1,39],[-1,[[115,[-1]]],39],[[[115,[-1]]],1,39],[[[115,[-1]]],19,39],[[],38],[[[115,[-1]]],13,39],[[[115,[-1]]],19,39],[13,13],[[13,13],13],0,0,[[[115,[-1]],13,[7,[6]]],1,39],[[[115,[-1]],13,[7,[6]],[43,[-1]]],1,39],[[[115,[-1]],117,9],19,39],0,0,[[[115,[-1]],13],[[7,[6]]],39],[[],9],[[[115,[-1]],19,19,13,[7,[6]],-2],19,39,40],0,[[-1,[43,[-1]],38,[7,[6]],13,13,19],1,[[8,[17]],[8,[9]]]],0,[[54,13],1],0,0,0,[38,1],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[118,118],[119,119],[116,116],[117,117],[[-1,-2],1,[],[]],[[-1,-2],1,[],[]],[[-1,-2],1,[],[]],[[-1,-2],1,[],[]],0,0,0,0,0,0,0,0,0,0,0,0,[[118,118],18],[[116,116],18],[[117,117],18],[[119,29],37],[[117,29],37],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[38,117,9],19],0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,34,[]],[-1,34,[]],[-1,34,[]],[-1,34,[]],[-1,34,[]],[-1,34,[]],[[[7,[6]],13,[7,[17]]],1],[[[7,[9]],13,19,[7,[92]],[7,[6]]],1],[[13,[7,[9]],[7,[6]]],1],[[19,[7,[92]],[7,[6]],19],18],[[[7,[6]],13,13,[7,[6]],[7,[6]]],1],[[-1,92,92],18,[]],[[120,92,92],18],[[[7,[6]],13,19,19],1],0,0,[[92,9,121,121],1],[[9,121,121],92],0,[[[7,[92]],13,-1],1,122],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[92,92],[[-1,-2],1,[],[]],[[],92],[-1,-1,[]],[-1,-1,[]],0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,34,[]],[-1,34,[]],0,0,0,0,[[[7,[9]]],123],0,[[[124,[-1]],[7,[6]],9,13,6,[94,[6]],[125,[-1]]],123,[[8,[9]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[[[124,[-1]],13,13],13,[[8,[9]]]],0,[126,126],[[-1,-2],1,[],[]],[-1,[[125,[-1]]],[[8,[9]]]],[-1,[[124,[-1]]],[[8,[9]]]],0,[[[127,[-1]],-1],1,[[8,[9]]]],[[[125,[-1]],-1],1,[[8,[9]]]],[[[124,[-1]],-1],1,[[8,[9]]]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[[125,[-1]],[7,[6]],[7,[6]],13],[[94,[6]]],[[8,[9]]]],[[[127,[-1]],126],9,[[8,[9]]]],[[[127,[-1]],126],9,[[8,[9]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[125,[-1]]],18,[[8,[9]]]],[[[124,[-1]]],[[128,[13]]],[[8,[9]]]],[-1,[[127,[-1]]],[[8,[9]]]],[[-1,[63,[6]]],[[125,[-1]]],[[8,[9]]]],[-1,[[124,[-1]]],[[8,[9]]]],[[[125,[-1]]],[[127,[-1]]],[[8,[9]]]],[[[125,[-1]],[7,[[114,[-2]]]],[7,[6]],[7,[6]],13,[124,[-1]],6],6,[[8,[9]]],[[46,[6]]]],[[[124,[-1]],[7,[6]],[7,[6]],[125,[-1]]],1,[[8,[9]]]],[[[124,[-1]],[7,[6]],[7,[6]]],1,[[8,[9]]]],[[[124,[-1]],[125,[-1]]],1,[[8,[9]]]],0,0,[[[124,[-1]]],[[94,[6]]],[[8,[9]]]],[-1,-2,[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,34,[]],[-1,34,[]],[-1,34,[]],[-1,34,[]],0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[[[129,[-1]]],18,75],[[],[[129,[-1]]],75],[-1,-1,[]],[[[129,[-1]]],13,75],[-1,-2,[],[]],[[],[[129,[-1]]],75],[[[129,[-1]]],[[63,[-1]]],75],[[[129,[-1]],-1],[[3,[1,1]]],75],[[[129,[-1]],-2],[[63,[-1]]],75,130],[[[129,[-1]]],13,75],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,34,[]],0,0,0,0,[[[7,[54]],13,[86,[-1]],[86,[-1]],[86,[-1]],[7,[6]],13,13,6,6,[7,[93]],[7,[88]],[7,[89]],[7,[90]]],1,[[8,[6]],[8,[9]]]],0,0,0,0,[[[7,[-1]],13],1,[[25,[9]],85]],[[6,6,93],6],0,0,0,[[-1,-1],1,[[25,[9]],[46,[9]],85]],[[-1,13],1,[[46,[9]],[25,[9]],85]],[[-1,[7,[-2]],13],1,[[46,[9]],[25,[9]],85],[75,22]],[-1,1,[[25,[9]],85]],0,0,0,0,0,0,[[[7,[-1]],13,13],1,[[25,[9]],[46,[9]],85]],[-1,56,[]],[88,56],[89,56],[90,56],0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[88,88],[89,89],[90,90],[93,93],[[-1,-2],1,[],[]],[[-1,-2],1,[],[]],[[-1,-2],1,[],[]],[[-1,-2],1,[],[]],0,0,0,[[],88],[[],89],[[],90],[[],131],[[],132],[[],133],[[],134],[[],93],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[[]],[[]],[[]],[[]],[[-1,56],1,[]],[[88,56],1],[[89,56],1],[[90,56],1],[[-1,13],1,[]],[[88,13],1],[[89,13],1],[[90,13],1],[88,[[7,[9]]]],[89,[[7,[9]]]],[90,[[7,[9]]]],[88,[[7,[9]]]],[89,[[7,[9]]]],[90,[[7,[9]]]],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,13,[]],[88,13],[89,13],[90,13],0,0,0,[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],0,[-1,34,[]],[-1,34,[]],[-1,34,[]],[-1,34,[]],[-1,34,[]],[-1,34,[]],[-1,34,[]],[-1,34,[]],[-1,34,[]],0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[113,113],[109,109],[[-1,-2],1,[],[]],[[-1,-2],1,[],[]],0,0,[[],110],[[],113],[[109,109],18],[[113,29],37],[[109,29],37],[[109,29],[[3,[1,30]]]],[113,135],[-1,-1,[]],[-1,-1,[]],[110,113],[110,113],[-1,-1,[]],[[109,13],6],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[109,13],0,0,[110,[[7,[6]]]],[113,[[7,[6]]]],[110,[[7,[6]]]],[[109,13],[[1,[109,109]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,34,[]],[-1,34,[]],[-1,34,[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[136,6],[137,6],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[136,136],[137,137],[112,112],[[[111,[-1]]],[[111,[-1]]],[[46,[6]],22]],[138,138],[139,139],[[[140,[-1]]],[[140,[-1]]],[[46,[6]],22]],[[[141,[-1]]],[[141,[-1]]],[[46,[6]],22]],[[[114,[-1]]],[[114,[-1]]],[[46,[6]],22]],[135,135],[[-1,-2],1,[],[]],[[-1,-2],1,[],[]],[[-1,-2],1,[],[]],[[-1,-2],1,[],[]],[[-1,-2],1,[],[]],[[-1,-2],1,[],[]],[[-1,-2],1,[],[]],[[-1,-2],1,[],[]],[[-1,-2],1,[],[]],[[-1,-2],1,[],[]],[[[111,[-1]]],[[94,[[1,[17,17]]]]],[[46,[6]]]],[[[111,[-1]]],[[94,[[1,[6,6]]]]],[[46,[6]]]],[[],13],[[],13],[[[111,[-1]]],[[94,[[1,[17,17]]]]],[[46,[6]]]],[[[111,[-1]]],[[94,[[1,[6,6]]]]],[[46,[6]]]],[[],13],[[],13],[[[111,[-1]]],[[7,[6]]],[[46,[6]]]],[[[111,[-1]]],13,[[46,[6]]]],0,[[],136],[[],137],[[],112],[[],[[140,[-1]]],[[46,[6]],27]],[[],[[114,[-1]]],[[46,[6]]]],[[],135],0,[[[111,[-1]]],[[7,[6]]],[[46,[6]]]],[[[111,[-1]]],[[7,[6]]],[[46,[6]],[25,[6]]]],0,[[112,112],18],[6,17],0,[[136,29],37],[[137,29],37],[[112,29],37],[[[111,[-1]],29],37,[142,[46,[6]]]],[[138,29],37],[[139,29],37],[[[140,[-1]],29],37,[142,[46,[6]]]],[[[141,[-1]],29],37,[142,[46,[6]]]],[[[114,[-1]],29],37,[142,[46,[6]]]],[[135,29],37],[[[114,[-1]],-2],1,[[46,[6]],27],40],[[114,-1],1,[[8,[6]]]],[[114,-1],1,[[8,[6]]]],[-1,135,[]],[[[114,[-1]]],[[114,[135]]],[[46,[6]],143]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[113,135],[[[111,[-1]]],[[111,[-2]]],[[46,[6]]],[[144,[-1]],[46,[6]]]],[[[111,[-1]]],6,[[46,[6]]]],[[[111,[-1]]],6,[[46,[6]]]],[[[111,[-1]]],[[7,[6]]],[[46,[6]]]],[[[111,[-1]]],[[7,[6]]],[[46,[6]],[25,[6]]]],[[[111,[-1]]],18,[[46,[6]]]],[[112,-1],1,145],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[135,13],[135,9],0,[[[111,[-1]]],112,[[46,[6]]]],[[],112],[[],112],[6,136],[[6,6],137],[6,[[3,[112,1]]]],[[],-1,[]],[[],138],[[],139],[[],[[141,[-1]]],[[46,[6]],27]],[[],[[114,[-1]]],[[46,[6]]]],0,[135,13],[112,6],0,0,[[-1,[114,[113]]],1,[]],[[-1,6],1,[]],[[-1,109],1,[]],[[-1,109],1,[]],[[[111,[-1]],6],1,[[46,[6]],[25,[6]]]],[[[111,[-1]],[94,[[1,[17,17]]]]],1,[[46,[6]],[25,[6]]]],[[[111,[-1]],[94,[[1,[17,17]]]]],1,[[46,[6]],[25,[6]]]],[[[111,[-1]],112],1,[[46,[6]],[25,[6]]]],[[[111,[-1]],6],1,[[46,[6]],[25,[6]]]],[[[111,[-1]],[94,[6]]],1,[[46,[6]],[25,[6]]]],[[[111,[-1]],[94,[[1,[17,17]]]]],1,[[46,[6]],[25,[6]]]],[[],112],[13,13],[[[140,[-1]]],[[7,[6]]],[[46,[6]]]],[[[141,[-1]]],[[7,[6]]],[[46,[6]]]],[135,[[7,[6]]]],[[[141,[-1]]],[[7,[6]]],[[46,[6]],[25,[6]]]],[17,6],[137,6],[[[111,[-1]]],[[94,[[1,[17,17]]]]],[[46,[6]]]],[[[111,[-1]]],[[94,[[1,[6,6]]]]],[[46,[6]]]],[[],13],[[],13],[[[114,[-1]],[7,[6]]],[[114,[113]]],[146,[46,[6]]]],[[-1,[7,[6]]],113,[]],[[135,[7,[6]]],113],[[-1,[7,[6]]],110,[]],[[135,[7,[6]]],110],[[[114,[-1]],109],[[114,[113]]],[146,[46,[6]]]],[[-1,109],[[3,[113,1]]],[]],[[135,109],[[3,[113,1]]]],[112,[[3,[93,1]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,34,[]],[-1,34,[]],[-1,34,[]],[-1,34,[]],[-1,34,[]],[-1,34,[]],[-1,34,[]],[-1,34,[]],[-1,34,[]],[-1,34,[]],[17,6],[6,17],[[137,6],1],[[],112],0,0,[[6,6,93],6],0,[-1,6,[]],[[-1,13],1,[]],[-1,[[7,[6]]],[]],[[-1,13],6,[]],[-1,13,[]],[-1,112,[]],[[-1,[114,[113]]],1,147],[[-1,6,6],1,[]],[[-1,[94,[6]],13,6,13,6],1,[]],[[13,13,13,[7,[6]],[7,[56]]],1],0,[[-1,[7,[6]],13,13,38,6,6,[7,[54]],13,93,[95,[-1]]],1,39],[[-1,[7,[6]],13,13,6,6,93,[7,[6]],13,[7,[9]],[7,[54]],13,[95,[-1]]],1,[[8,[6]],[8,[9]],[8,[88]],[8,[89]],[8,[90]]]],[[-1,[7,[6]],13,13,6,6,93,13,[7,[9]],[7,[54]],13,[95,[-1]]],1,[[8,[6]],[8,[9]],[8,[88]],[8,[89]],[8,[90]]]],[[38,9,9],1],[[13,[95,[-1]]],1,[[8,[6]],[8,[9]],[8,[88]],[8,[89]],[8,[90]]]],0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,[-1,-1,[]],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,34,[]],[-1,34,[]],0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[38,[41,[-1]],[7,[6]],[7,[[44,[[42,[-2]],[43,[-2]],-2]]]]],[[3,[13,45]]],[[46,[6]],47,48],[39,47]],[[],148],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[149,[-1,-2]]],[[3,[-1,-2]]],47,[47,150]],[[148,[41,[-1]]],[],[47,48]],[[148,[41,[-1]]],[],[47,48]],[[148,[44,[-1,-2,-3]],13,13],1,47,47,[39,47]],[[148,[44,[-1,-2,-3]],13,13,-4],1,47,47,[39,47],[130,47,151]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,34,[]],[-1,34,[]],[-1,34,[]],[[[152,[-1]]],[[3,[-1,153]]],47],[[[152,[-1]],-2],[[3,[-3,153]]],47,154,[]],0,[-1,-2,[],[]],[-1,-2,[],[]],[102,102],[[-1,-2],1,[],[]],[[],102],[[102,29],37],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,34,[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[[155,[-1]]],6,[[8,[101]],[8,[9]],[8,[100]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[155,[-1]]],1,[[8,[101]],[8,[9]],[8,[100]]]],[[156,6],56],[[[155,[-1]],-1],1,[[8,[101]],[8,[9]],[8,[100]]]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[[155,[-1]],13],1,[[8,[101]],[8,[9]],[8,[100]]]],[[[7,[101]]],1],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[155,[-1]]],[[7,[6]]],[[8,[101]],[8,[9]],[8,[100]]]],[[[155,[-1]],13],6,[[8,[101]],[8,[9]],[8,[100]]]],[[[155,[-1]]],13,[[8,[101]],[8,[9]],[8,[100]]]],[[[7,[101]],6,6,13,[63,[6]]],101],[[6,6,13,[63,[6]]],13],[[6,6,13,[63,[6]]],13],[[6,6,13,[63,[6]]],13],[[6,6,13,[63,[6]]],13],[[6,6,13,[63,[6]]],13],[[6,6,13,[63,[6]]],13],[[6,6,13,[63,[6]]],13],[[6,6,13,[63,[6]]],13],[[6,6,13,[63,[6]]],13],[[[7,[101]],6,6,13,[63,[6]]],156],[[-1,109,[94,[6]],[111,[110]],38],[[155,[-1]]],[[8,[101]],[8,[9]],[8,[100]]]],[[],13],[[],13],[[],13],[[],13],[[[155,[-1]]],112,[[8,[101]],[8,[9]],[8,[100]]]],[[[155,[-1]],[114,[113]]],1,[[8,[101]],[8,[9]],[8,[100]]]],[[6,6,13,[63,[6]]],13],[[[155,[-1]]],[[111,[110]]],[[8,[101]],[8,[9]],[8,[100]]]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,34,[]],[-1,34,[]],[-1,34,[]],[-1,34,[]],[-1,34,[]],[-1,34,[]],[-1,34,[]],[-1,34,[]],[-1,34,[]],[-1,34,[]],[-1,34,[]],[[156,6,[1,[17,17]]],1],[[[155,[-1]],6,6],1,[[8,[101]],[8,[9]],[8,[100]]]],[[[155,[-1]],[94,[6]],13,6,13,6],1,[[8,[101]],[8,[9]],[8,[100]]]],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],0,0,0,0,0,0,0,0,0,0,0,0,0,[[-1,13],[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[157,[-1,-2,-3,-4]]],1,[],[[11,[-1]]],[[25,[6]]],39],[-1,1,[]],0,0,[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[[158,[-1,-2,-3]]],-1,4,[[25,[6]]],39],[[[159,[-1]]],-1,4],[[[157,[-1,-2,-3,-4]]],-2,[],[[11,[-1]]],[[25,[6]]],39],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[158,[-1,-2,-3]]],-1,4,[[25,[6]]],39],[[[159,[-1]]],-1,4],[[[157,[-1,-2,-3,-4]]],-2,[],[[11,[-1]]],[[25,[6]]],39],[-1,13,[]],0,[[-1,-2,-3,9,9],[[158,[-1,-2,-3]]],4,[[25,[6]]],39],[[-1,13,9,9],[[159,[-1]]],4],[[-2,-3,-4,-1,9,9],[[157,[-1,-2,-3,-4]]],[],[[11,[-1]]],[[25,[6]]],39],0,[[[158,[-1,-2,-3]],[7,[6]]],[[3,[13,2]]],4,[[25,[6]]],39],[[[159,[-1]],[7,[6]]],[[3,[13,2]]],4],[[[157,[-1,-2,-3,-4]],[7,[6]]],[[3,[13,-1]]],[],[[11,[-1]]],[[25,[6]]],39],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],0,[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,34,[]],[-1,34,[]],[-1,34,[]],[[-1,13,38],[[159,[-1]]],4],0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[38,[41,[-1]],[7,[6]],[7,[[44,[[42,[-2]],[43,[-2]],-2]]]]],[[3,[13,45]]],[[46,[6]],47,48],[39,47]],[[38,[41,[-1]],[7,[6]],[7,[[44,[[42,[-2]],[43,[-2]],-2]]]],[160,[[42,[-2]],[43,[-2]],-2,[1,[-1,38]]]]],[[3,[13,45]]],[[46,[6]],47,48],[39,47]],[[],161],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[162,[-1,-2]]],[[3,[-1,-2]]],47,47],[[161,[41,[-1]]],[],[47,48]],[[161,[41,[-1]]],[],[47,48]],[13,[[160,[-1,-2,-3,-4]]],[],[],[],[]],[[161,[44,[-1,-2,-3]],13,13],1,47,47,[39,47]],[[161,[44,[-1,-2,-3]],13,13,-4],1,47,47,[39,47],[130,47,151]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,34,[]],[-1,34,[]],[-1,34,[]],[-1,34,[]],[[[163,[-1]]],[[3,[-1,153]]],47],[[[163,[-1]],-2],[[3,[-3,153]]],47,154,[]],[[[7,[6]]],9],[[[7,[6]]],55],[[[7,[6]],55],1],0,[[53,[7,[6]],13,13,[7,[9]]],19],[[],53],[[[7,[6]],[7,[6]],13],13],[[[7,[6]],[7,[6]],13],13],[[[7,[6]],[7,[6]],13],13],[[[7,[6]]],9],[[53,164,[7,[6]],13],19],[[[7,[6]],[7,[6]],13],13],[-1,-2,[],[]],[-1,-2,[],[]],0,[-1,-1,[]],[-1,-2,[],[]],0,0,0,0,[[[7,[6]],[7,[6]],13],13],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,34,[]],0,[-1,-2,[],[]],[-1,-2,[],[]],[164,164],[[-1,-2],1,[],[]],[-1,-1,[]],0,[164,17],[-1,-2,[],[]],0,0,0,0,0,0,[164,6],0,[-1,-2,[],[]],[164,6],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,34,[]],0,0,[[[165,[-1]]],-1,[[8,[17]],[8,[9]],[8,[56]]]],[[[165,[-1]]],6,[[8,[17]],[8,[9]],[8,[56]]]],[-1,-2,[],[]],[-1,-2,[],[]],[[[165,[-1]],[7,[6]]],1,[[8,[17]],[8,[9]],[8,[56]]]],[[[165,[-1]]],1,[[8,[17]],[8,[9]],[8,[56]]]],[-1,-1,[]],[[[165,[-1]],13],1,[[8,[17]],[8,[9]],[8,[56]]]],[-1,-2,[],[]],[[[165,[-1]]],[[7,[6]]],[[8,[17]],[8,[9]],[8,[56]]]],[[[165,[-1]],13],6,[[8,[17]],[8,[9]],[8,[56]]]],[[[165,[-1]]],13,[[8,[17]],[8,[9]],[8,[56]]]],[[[7,[17]]],1],[[-1,109,[111,[110]],38],[[165,[-1]]],[[8,[17]],[8,[9]],[8,[56]]]],[[[165,[-1]]],13,[[8,[17]],[8,[9]],[8,[56]]]],[[[165,[-1]]],112,[[8,[17]],[8,[9]],[8,[56]]]],[[[165,[-1]],[114,[113]]],1,[[8,[17]],[8,[9]],[8,[56]]]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,34,[]],[[[165,[-1]],6,6],1,[[8,[17]],[8,[9]],[8,[56]]]],[[[165,[-1]],[94,[6]],13,6,13,6],1,[[8,[17]],[8,[9]],[8,[56]]]],0,0,0,0,0,0,[[38,[41,[-1]],[7,[6]],[7,[[44,[[42,[-2]],[43,[-2]],-2]]]],-3],[[3,[13,45]]],[[46,[6]],47,48],[39,47],[[166,[[42,[-2]],[43,[-2]],-2,[1,[-1,38]]]]]],[[38,[7,[6]],[7,[6]],[7,[[44,[[42,[-1]],[43,[-1]],-1]]]],-2],[[3,[13,45]]],[39,47],[[166,[[42,[-1]],[43,[-1]],-1,[1,[38]]]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[45,29],37],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[3,[-2,-3]]],[],[],[]],[[-1,[41,[-2]]],[],[],[]],[[-1,[41,[-2]]],[],[],[]],[167,-1,[]],[[-1,-2],[[44,[-3,-2,-1,-4]]],[39,47],47,47,[[168,[-3,45]]]],[-1,[[41,[-1]]],[]],[167,45],[[[44,[-1,-2,-3,-4]]],[[1,[-3,-2]]],47,47,[39,47],[[168,[-1,45]]]],[[-1,[44,[-2,-3,-4]],13,13,-5],1,[],[],[],[],[130,47,151]],[[-1,[44,[-2,-3,-4]],13,13],1,[],[],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,34,[]],[-1,34,[]],[-1,34,[]],[-1,34,[]],[-1,34,[]],[-1,34,[]],[-1,34,[]],[-1,[[3,[-2,153]]],[],[]],[[[44,[-1,-2,-3,-4]]],[[1,[-3,-2]]],47,47,[39,47],[[168,[-1,45]]]],[[[41,[-1]]],-1,[]],[[[44,[-1,-2,-3,-4]],-3,-2],[[1,[-3,-2]]],47,47,[39,47],[[168,[-1,45]]]],[[[41,[-1]],-1],-1,[]],[[-1,-2],[[3,[-3,153]]],[],154,[]],[[[41,[-1]]],-1,[]],[[[7,[6]],13,13,13,56],19],[55,56],[55,56],[17,56],[19,56],[55,56],[56,56],[55,9],[[13,13],13],[[9,9],9],[[6,6],6],[[13,13],13],[[9,9],9],0,[17,56],0,0,[169,170],[170,169],[170,169],[169,171],[170,19],0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[38,[41,[-1]],[7,[6]],[7,[[44,[[42,[-2]],[43,[-2]],-2]]]],[172,[[42,[-2]],[43,[-2]],-2,[1,[-1,38]]]]],[[3,[13,45]]],[[46,[6]],47,48],[39,47]],[[[172,[-1,-2,-3,-4]]],1,47,47,[39,47],[47,48]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[173,[-1,-2,-3,-4]]],[[3,[-1,45]]],47,47,[39,47],[47,48]],[[[172,[-1,-2,-3,-4]],[41,[-4]]],[],47,47,[39,47],[47,48]],[13,[[172,[-1,-2,-3,-4]]],47,47,[39,47],[47,48]],[13,[[172,[[42,[-1]],[43,[-1]],-1,[1,[-2,38]]]]],[39,47],[[46,[6]],47,48]],[[[172,[-1,-2,-3,-4]],[44,[-1,-2,-3]],13,13],1,47,47,[39,47],[47,48]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,34,[]],[-1,34,[]],[-1,34,[]],0,0,0,0,0,0,0,0,0,0,0,0,[[-1,13],[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[174,[-1,-2,-3,-4]]],1,[],[[12,[-1]]],[[25,[6]]],39],[[[175,[-1,-2,-3]]],[[3,[1,2]]],5,[[25,[6]]],39],[[[176,[-1]]],[[3,[1,2]]],5],[[[174,[-1,-2,-3,-4]]],[[3,[1,-1]]],[],[[12,[-1]]],[[25,[6]]],39],[-1,1,[]],0,0,[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[[175,[-1,-2,-3]]],-1,5,[[25,[6]]],39],[[[176,[-1]]],-1,5],[[[174,[-1,-2,-3,-4]]],-2,[],[[12,[-1]]],[[25,[6]]],39],[[[175,[-1,-2,-3]]],-1,5,[[25,[6]]],39],[[[176,[-1]]],-1,5],[[[174,[-1,-2,-3,-4]]],-2,[],[[12,[-1]]],[[25,[6]]],39],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[175,[-1,-2,-3]]],-1,5,[[25,[6]]],39],[[[176,[-1]]],-1,5],[[[174,[-1,-2,-3,-4]]],-2,[],[[12,[-1]]],[[25,[6]]],39],[-1,13,[]],0,[[-1,-2,-3,9,9],[[175,[-1,-2,-3]]],5,[[25,[6]]],39],[[-1,13,9,9],[[176,[-1]]],5],[[-2,-3,-4,-1,9,9],[[174,[-1,-2,-3,-4]]],[],[[12,[-1]]],[[25,[6]]],39],0,[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],0,[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,34,[]],[-1,34,[]],[-1,34,[]],[[-1,13,38],[[176,[-1]]],5],[[[175,[-1,-2,-3]],[7,[6]]],[[3,[13,2]]],5,[[25,[6]]],39],[[[176,[-1]],[7,[6]]],[[3,[13,2]]],5],[[[174,[-1,-2,-3,-4]],[7,[6]]],[[3,[13,-1]]],[],[[12,[-1]]],[[25,[6]]],39],[[-2,[7,[6]]],[[3,[1,-1]]],[],[[12,[-1]]]],0,0,0,0,0,0,0,[[177,13]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[],[[178,[-1]]],[27,22,27]],[177,1],[-1,-1,[]],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[179,177],[[[178,[-1]]],[[7,[-1]]],[22,27]],[[[178,[-1]]],[[7,[-1]]],[22,27]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,34,[]],[-1,34,[]],0,[[180,13,6],35],[[180,13,6],35],[[180,13,6,13,6],181],[[180,13,6,13,6],181],[[],180],[6,180],[180,1],[180,1],0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[180,180],[[-1,-2],1,[],[]],[[],180],[-1,-1,[]],[36,180],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[180,36],[-1,-2,[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,34,[]],[-1,34,[]],0,0,0,0,0,0,0,0,0,0,0,[[19,19,182,13,6,13,6],19],[[183,184,13,6,13,6,13],19],[[183,184,13,6,13,6],19],[[185,186,187],183],[183,1],[[183,6,13],1],[[183,13,13],1],[183,19],[183,19],[[183,13],6],[[183,13],13],[13,13],0,0,[[183,13,6],1],[[183,117,9],19],0,[[183,13],6],[[],9],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[188,[19]]],[154,189]],0,0,[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,34,[]],[-1,34,[]],[-1,34,[]],0,[[185,186,187],190],[[13,6,13,6],191],[[13,6,13,6,13,6,13,9,13,10],192],[[190,13,6,13,6,13],191],[[190,13,6,13,6],191],[[13,6,13,6],192],[190,1],[193,6],[[190,6,13],1],[[190,13,13],1],[190,193],[190,6],[190,19],[190,19],[190,19],[[190,13],6],[[190,13],13],[[190,194,9],1],[[190,13],6],[[],9],0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,0,[-1,-1,[]],[-1,-2,[],[]],0,[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,34,[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[63,63,187],190],[[13,6,13,6],191],[[13,6,13,6,13,6,13,9,13,10],192],[[190,13,6,13,6,13],191],[[190,13,6,13,6],191],[[13,6,13,6],192],[190,1],0,[193,6],[[190,6,13],1],[[190,13,13],1],[190,193],[190,6],[190,19],[190,19],[190,19],[[190,13],6],[[190,13],13],[[190,194,9],1],0,[[190,13],6],[[],9],0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,[193,193],[[-1,-2],1,[],[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[193,29],[[3,[1,30]]]],[-1,-1,[]],[-1,-1,[]],0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[13,[[7,[-1]]],[]],[13,[[7,[-1]]],[]],0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],0,0,[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,34,[]],[-1,34,[]],0,0,0,0,0,[[179,13],[[195,[-1]]],[27,22]],[13],[[[196,[-1,-2]]],-2,75,197],[[[196,[-1]]],198,199],[[[196,[-1,-2]]],-1,75,197],[[[196,[-1,-2]]],-1,75,197],[[[196,[-1]]],200,201],[[[196,[[7,[[202,[-1]]]],-2]]],[[196,[[7,[-1]],-2]]],[],197],[[[196,[[202,[-1]],-2]]],[[196,[-1,-2]]],[],197],[[[196,[-1,-2]]],-1,75,197],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[196,[-1,-2]]],-1,75,197],[-1,-2,[],[]],[-1,-2,[],[]],[[[196,[-2,-3]],-1],[],203,[[130,[-1]],75],197],[[[196,[-2,-3]],-1],[],203,[[40,[-1]],75],197],[[[196,[-2,-3]],-1],[],203,[[154,[-1]],75],197],[[[196,[-1]]],[[63,[204]]],204],[[[196,[205]]],[[196,[205]]]],[[[196,[206]]],[[196,[206]]]],[[[196,[207]]],[[196,[207]]]],[[[196,[-1,-2]]],[[196,[-1,-2]]],22,[197,22]],[[[196,[208]]],[[196,[208]]]],[[[196,[[7,[-1]],-2]]],[[196,[[7,[-1]],-2]]],22,[197,22]],[[[196,[-1,-2]],[196,[-1,-2]]],1,22,[197,22]],[[[196,[[7,[-1]],-2]],[196,[[7,[-1]],-2]]],1,22,[197,22]],[[-1,-2],1,[],[]],[[[196,[-1,-2]],[196,[-1,-2]]],209,[210,75],197],[[[196,[-1]],13],1,[211,75]],[[],[[196,[206]]]],[[],[[196,[205]]]],[[],[[196,[-1]]],27],[[],[[196,[208]]]],[[],[[196,[[7,[-1]]]]],[]],[[],[[195,[-1]]],27],[[[196,[-1,-2]]],-1,75,197],[[[196,[-1,-2]]],-1,75,197],[[[196,[-1]]],208,204],[[[196,[212,-1]]],[[3,[[196,[-2,-1]],[196,[212,-1]]]]],197,212],[[[196,[212,-1]]],[[3,[[196,[-2,-1]],[196,[212,-1]]]]],197,212],[[[196,[212,-1]]],[[3,[[196,[-2,-1]],[196,[212,-1]]]]],197,212],[[[196,[212,-1]]],[[196,[-2,-1]]],197,212],[[[196,[212,-1]]],[[196,[-2,-1]]],197,212],[[[196,[212,-1]]],[[196,[-2,-1]]],197,212],[[[196,[-1,-2]]],1,75,197],[[[195,[-1]]],1,27],[[[196,[-1,-2]],[196,[-1,-2]]],18,[213,75],197],[[[196,[-1]]],[[3,[[7,[6]],2]]],[211,75]],[[[196,[-1,-2]]],55,[145,75],197],[[[196,[-1]]],[[3,[1,2]]],[5,75]],[[[196,[-1,-2]],29],[[3,[1,30]]],[214,75],197],[[[196,[-1,-2]],29],[[3,[1,30]]],75,197],[[[196,[-1,-2]],29],[[3,[1,30]]],[142,75],197],[[179,[195,[-1]]],1,[27,22]],[13,1],[215,[[196,[204]]]],[215,[[196,[208]]]],[[[7,[-1]]],[[196,[[7,[-1]]]]],22],[205,[[196,[205]]]],[[[216,[208]]],[[196,[204]]]],[-1,[[196,[204]]],[204,47,48]],[217,[[196,[207]]]],[[[216,[206]]],[[196,[206]]]],[218,[[196,[206]]]],[[[216,[[7,[-1]]]]],[[196,[[7,[-1]]]]],22],[208,[[196,[204]]]],[[[216,[208]]],[[196,[208]]]],[-1,[[196,[-1]]],[]],[206,[[196,[206]]]],[208,[[196,[204]]]],[219,-1,[]],[[[216,[207]]],[[196,[207]]]],[-1,-1,[]],[[[220,[-1,-2]]],[[196,[[7,[-1]],-2]]],[],197],[208,[[196,[208]]]],[-1,[[196,[204]]],204],[207,[[196,[207]]]],[[[216,[205]]],[[196,[205]]]],[215,[[196,[204]]]],[[[216,[208]]],[[196,[204]]]],[221,[[196,[205]]]],[[[94,[-1]]],[[196,[[7,[-1]]]]],[]],[[[196,[208,-1]]],[[196,[[7,[6]],-1]]],197],[-1,-1,[]],[-1,-1,[]],[-1,[[196,[[7,[-2]]]]],222,[]],[[],[[196,[-1]]],75],[-1,[[196,[-2,-1]]],197,75],[[[196,[-1,-2]],[196,[-1,-2]]],18,[223,75],197],[[[196,[-1,-2]],[196,[-1,-2]]],18,[223,75],197],[[[196,[-1,-2]],-3],1,[224,75],197,145],[[[195,[-1]],13],-1,27],[[[195,[-1]],13],-1,27],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[196,[-1,-2]]],[[196,[[7,[-1]],-2]]],[],197],[-1,[],[]],[[[196,[-1,-2]]],-1,[],197],[-1,-2,[],[]],[[[196,[-1,-2]]],[[225,[[196,[-1,-2]]]]],75,197],[[[196,[-1,-2]]],[],75,197],[[[196,[-1,-2]]],[[1,[-2]]],75,197],[[-1,208],[[226,[-2]]],[],[]],[[-1,208],18,[]],[[[196,[-1,-2]]],18,[227,75],197],[[-1,208],18,[]],[[[196,[-1]]],18,[4,75]],[[-1,208],18,[]],[[[196,[-1]]],18,[5,75]],[[[196,[-1,-2]]],63,[228,75],197],[[[196,[-1,-2]],[196,[-1,-2]]],18,[223,75],197],[[[196,[-1,-2]]],-1,75,197],[[[196,[-1,-2]]],13,[227,75],197],[[[196,[-1,-2]],[196,[-1,-2]]],18,[223,75],197],[[[196,[-1,-2]],[196,[-1,-2]]],18,[213,75],197],[-1,[[196,[-1]]],[]],[229,179],[[-1,-2],[[196,[-1,-2]]],[],[197,197]],[[],[[196,[[202,[-1]]]]],[]],[-1,[[196,[[202,[-2]],-1]]],[197,197],[]],[13,[[196,[[7,[[202,[-1]]]]]]],[]],[[13,-1],[[196,[[7,[[202,[-2]]]],-1]]],197,[]],[[],[[196,[[202,[-1]]]]],[]],[-1,[[196,[[202,[-2]],-1]]],[197,197],[]],[13,[[196,[[7,[[202,[-1]]]]]]],[]],[[13,-1],[[196,[[7,[[202,[-2]]]],-1]]],197,[]],[[[196,[-1,-2]]],63,[228,75],197],[[[196,[-1,-2]]],63,[230,75],197],[[[196,[-1,-2]],13],63,[228,75],197],[[[196,[-1,-2]],13],63,[230,75],197],[[[196,[-1,-2]],[196,[-1,-2]]],[[63,[209]]],[223,75],197],[-1,[[225,[[196,[-1]]]]],[]],[[-1,-2],[[225,[[196,[-1,-2]]]]],[],[197,197]],[[[225,[[196,[-1,-2]]]],231],232,[233,234,75],197],[[[225,[[196,[-1]]]],231],[[232,[63]]],[235,234,75]],[[[196,[-1]],236],1,204],[[[196,[-1]],[7,[6]]],[[3,[13,2]]],[4,75]],[[[196,[-1]],237],[[3,[1,2]]],[4,75]],[[[196,[-1]],[7,[6]]],[[3,[1,2]]],[4,75]],[[[196,[-1]],215],[[3,[13,2]]],[211,75]],[[[196,[-1]],[220,[6]]],[[3,[13,2]]],[4,75]],[[[196,[-1]],215],[[3,[13,2]]],[4,75]],[[[196,[-1]],6,[220,[6]]],[[3,[13,2]]],[211,75]],[[[196,[-1]],[7,[238]]],[[3,[13,2]]],[4,75]],[[[225,[[196,[-2,-3]]]],-1],239,[],[[240,[-1]],234,75],197],[[[196,[-1]],241],[[3,[55,2]]],[242,75]],[[[196,[-1]]],[[1,[13,[63,[13]]]]],[235,234,75]],[[[196,[-1,-2]]],[[1,[13,[63,[13]]]]],[228,75],197],[[[195,[-1]]],[[7,[-1]]],27],[[[195,[-1]]],[[7,[-1]]],27],[[[196,[-1]]],[[63,[204]]],204],[[[196,[-1]]],[[3,[55,2]]],[242,75]],[[-1,208],[[63,[208]]],[]],[[-1,208],[[63,[208]]],[]],[-1,-2,[],[]],[-1,215,[]],[[[220,[-1]]],[[3,[[196,[[94,[-1]]]]]]],[]],[-1,[[3,[-2]]],[],[]],[[[196,[[7,[-1]]]]],[[3,[[196,[[94,[-1]]]]]]],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[[196,[-1]],243]]],[]],[[-1,-2],[[3,[[196,[-1,-2]],243]]],[],[197,197]],[[],[[3,[[196,[[202,[-1]]]],243]]],[]],[-1,[[3,[[196,[[202,[-2]],-1]],243]]],[197,197],[]],[13,[[3,[[196,[[7,[[202,[-1]]]]]],243]]],[]],[[],[[3,[[196,[[202,[-1]]]],243]]],[]],[-1,[[3,[[196,[[202,[-2]],-1]],243]]],[197,197],[]],[13,[[3,[[196,[[7,[[202,[-1]]]]]],243]]],[]],[-1,34,[]],[-1,34,[]],[-1,34,[]],[[[196,[[202,[-1]],-2]],-1],[[196,[-1,-2]]],[],197],[[[196,[-1]],[7,[6]]],[[3,[13,2]]],[5,75]],[[[196,[-1,-2]],[7,[6]]],1,[145,75],197],[[[196,[-1]],[7,[6]]],[[3,[1,2]]],[5,75]],[[[196,[-1]],244],[[3,[1,2]]],[5,75]],[[[196,[-1,-2]],245],1,[145,75],197],[[[196,[-1,-2]],121],1,[145,75],197],[[[196,[-1,-2]],19],1,[145,75],197],[[[196,[-1,-2]],246],1,[145,75],197],[[[196,[-1,-2]],247],1,[145,75],197],[[[196,[-1,-2]],105],1,[145,75],197],[[[196,[-1,-2]],13],1,[145,75],197],[[[196,[-1,-2]],208],1,[145,75],197],[[[196,[-1,-2]],248],1,[145,75],197],[[[196,[-1,-2]],17],1,[145,75],197],[[[196,[-1,-2]],9],1,[145,75],197],[[[196,[-1,-2]],55],1,[145,75],197],[[[196,[-1,-2]],6],1,[145,75],197],[[[196,[-1,-2]],13],1,[145,75],197],[[[196,[-1]],[7,[249]]],[[3,[13,2]]],[5,75]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,[229,229],[[-1,-2],1,[],[]],0,[-1,-1,[]],[15,191],[-1,-1,[]],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[-1,-2,[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,34,[]],[-1,34,[]],[-1,34,[]],[[13,117,9,13,6,13,6,13,185,186,187],19],[[250,13,117,9,13,6,13,6,13,185,186,187],19],[[13,185,186,187],250],[250,1],[[13,13],13],0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-1,[]],[-1,-2,[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,34,[]],0,0,0,[[13,13,[7,[6]],13,13,[7,[6]],13,[14,[-1,-2,-3]]],15,[[8,[6]]],[[8,[9]]],[[8,[10]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[-1,13],[],[]],0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,[[3,[1,-2]]],[],[]],[-1,1,[]],0,0,[-1,-1,[]],[[[251,[-1,-2,-3,-4,-5]]],-1,4,[[25,[6]]],[[8,[6]]],[[8,[9]]],[[8,[10]]]],[[[251,[-1,-2,-3,-4,-5]]],-1,4,[[25,[6]]],[[8,[6]]],[[8,[9]]],[[8,[10]]]],0,0,0,0,0,0,[-1,-2,[],[]],[[[251,[-1,-2,-3,-4,-5]]],-1,4,[[25,[6]]],[[8,[6]]],[[8,[9]]],[[8,[10]]]],0,0,0,0,[-1,13,[]],0,0,0,0,0,0,0,0,0,0,0,0,[[-1,-2,-3,-4,-5],[[251,[-1,-2,-3,-4,-5]]],4,[[25,[6]]],[[8,[6]]],[[8,[9]]],[[8,[10]]]],[[-1,-2,-3,-4,-5],[[251,[-1,-2,-3,-4,-5]]],4,[[25,[6]]],[[8,[6]]],[[8,[9]]],[[8,[10]]]],0,0,0,0,0,0,0,0,0,0,[[-1,[7,[6]]],[[3,[13,-2]]],[],[]],[[[251,[-1,-2,-3,-4,-5]],[7,[6]]],[[3,[13,2]]],4,[[25,[6]]],[[8,[6]]],[[8,[9]]],[[8,[10]]]],0,0,0,0,0,0,0,[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,34,[]],0,0,[[-1,[7,[6]]],[[3,[13,-2]]],[],[]],0,[[[7,[6]],[7,[6]],19,19],19],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-1,[]],[-1,-2,[],[]],0,0,0,0,0,[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,34,[]],0,0,0,[[13,13,[7,[6]],13,13,[7,[6]],13,[14,[-1,-2,-3]]],15,[[8,[6]]],[[8,[9]]],[[8,[10]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[-1,13],[],[]],[[[252,[-1,-2]],13],[[253,[-1]]],[],[[254,[[7,[-1]]]]]],[[255,13],[[21,[-1]]],[22,27]],0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,[[[256,[-1,-2]]],[[94,[[7,[10]]]]],[[8,[9]]],[[8,[10]]]],[255,255],[[-1,-2],1,[],[]],[[[257,[-1,-2,-3,-4,-5]]],[[3,[1,2]]],5,[[25,[6]]],[[8,[6]]],[[8,[9]]],[[8,[10]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,[[],[[253,[-1]]],[]],[[],255],[[],[[256,[-1,-2]]],[[8,[9]]],[[8,[10]]]],[[[253,[-1]]],[[7,[-1]]],[]],[[[253,[-1]]],[[7,[-1]]],[]],0,0,0,0,0,0,0,0,0,0,0,[-1,[[3,[1,-2]]],[],[]],[[[258,[-1]]],[[3,[1,2]]],5],[[[257,[-1,-2,-3,-4,-5]]],[[3,[1,2]]],5,[[25,[6]]],[[8,[6]]],[[8,[9]]],[[8,[10]]]],[[255,29],[[3,[1,30]]]],[-1,1,[]],[[[252,[-1,-2]],[253,[-1]]],1,[],[[254,[[7,[-1]]]]]],[[255,[21,[-1]]],1,[22,27]],0,0,[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[[257,[-1,-2,-3,-4,-5]]],-1,5,[[25,[6]]],[[8,[6]]],[[8,[9]]],[[8,[10]]]],[[[257,[-1,-2,-3,-4,-5]]],-1,5,[[25,[6]]],[[8,[6]]],[[8,[9]]],[[8,[10]]]],[[[256,[-1,-2]],9],[[7,[10]]],[[8,[9]]],[[8,[10]]]],[[[256,[-1,-2]],9],[[7,[10]]],[[8,[9]]],[[8,[10]]]],0,0,0,0,[[[253,[-1]],13],[],[]],[[[253,[-1]],[128,[13]]],[],[]],[[[253,[-1]],[128,[13]]],[],[]],[[[253,[-1]],13],[],[]],[[[256,[-1,-2]],-1,-2,17,17,17],1,[[8,[9]]],[[8,[10]]]],0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[257,[-1,-2,-3,-4,-5]]],[[3,[-1,-1]]],5,[[25,[6]]],[[8,[6]]],[[8,[9]]],[[8,[10]]]],0,0,0,0,[-1,13,[]],0,0,0,0,0,0,0,0,0,0,0,0,[[-1,-2,-3,-4,-5],[[257,[-1,-2,-3,-4,-5]]],5,[[25,[6]]],[[8,[6]]],[[8,[9]]],[[8,[10]]]],[[-1,-2,-3,-4,-5],[[257,[-1,-2,-3,-4,-5]]],5,[[25,[6]]],[[8,[6]]],[[8,[9]]],[[8,[10]]]],0,0,0,0,0,0,0,0,0,0,0,0,[[[256,[-1,-2]],-1,-2],1,[[8,[9]]],[[8,[10]]]],0,0,0,0,0,[-1,[[7,[-2]]],[],[]],[[[253,[-1]]],[[7,[-1]]],[]],[-1,[[7,[-2]]],[],[]],[[[253,[-1]]],[[7,[-1]]],[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],0,0,[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,[[3,[-2]]],[],[]],[-1,34,[]],[-1,34,[]],[-1,34,[]],[-1,34,[]],[-1,34,[]],[-1,34,[]],0,0,[[-1,[7,[6]]],[[3,[13,-2]]],[],[]],[[[258,[-1]],[7,[6]]],[[3,[13,2]]],5],[[[257,[-1,-2,-3,-4,-5]],[7,[6]]],[[3,[13,2]]],5,[[25,[6]]],[[8,[6]]],[[8,[9]]],[[8,[10]]]],[[-2,[7,[6]]],[[3,[1,-1]]],[],[[12,[-1]]]]],"c":[],"p":[[15,"tuple"],[3,"Error",4036],[4,"Result",4037],[8,"Read",4038],[8,"Write",4038],[15,"u8"],[15,"slice"],[8,"Allocator",3838],[15,"u32"],[3,"HuffmanCode",0],[8,"CustomRead",0],[8,"CustomWrite",0],[15,"usize"],[3,"BrotliState",0],[4,"BrotliResult",0],[4,"WhichTreeGroup",4039],[15,"u16"],[15,"bool"],[15,"i32"],[3,"HeapAlloc",0],[3,"WrapBox",4040],[8,"Clone",4041],[3,"DecompressorWriter",0],[3,"DecompressorWriterCustomIo",0],[8,"SliceWrapperMut",3838],[3,"DecompressorCustomIo",0],[8,"Default",4042],[3,"IoWriterWrapper",0],[3,"Formatter",4043],[3,"Error",4043],[3,"Decompressor",0],[3,"IntoIoReader",0],[3,"IoReaderWrapper",0],[3,"TypeId",4044],[4,"BroCatliResult",283],[3,"BroCatli",283],[6,"Result",4043],[3,"BrotliEncoderParams",420],[8,"BrotliAlloc",1301],[8,"FnMut",4045],[3,"Owned",2885],[3,"CompressionThreadResult",2885],[4,"UnionHasher",420],[3,"SendAlloc",2885],[4,"BrotliEncoderThreadError",2885],[8,"SliceWrapper",3838],[8,"Send",4046],[8,"Sync",4046],[3,"H2Sub",420],[3,"H3Sub",420],[3,"H4Sub",420],[3,"H54Sub",420],[3,"BrotliDictionary",2814],[3,"Command",1351],[15,"u64"],[6,"floatX",2984],[3,"ZopfliNode",976],[3,"BasicHasher",420],[8,"BasicHashComputer",420],[3,"H9",420],[3,"AdvHasher",420],[8,"AdvHashSpecialization",420],[4,"Option",4047],[3,"HasherSearchResult",420],[3,"Struct1",420],[3,"HQ5Sub",420],[3,"HQ7Sub",420],[3,"H5Sub",420],[3,"H6Sub",420],[3,"H9Opts",420],[4,"HowPrepared",420],[8,"AnyHasher",420],[4,"BrotliEncoderMode",420],[3,"BrotliHasherParams",420],[8,"Sized",4046],[3,"H10",976],[8,"H10Params",976],[3,"BackwardMatchMut",976],[3,"H10Buckets",976],[3,"H10DefaultParams",976],[4,"Union1",976],[3,"BackwardMatch",976],[3,"PosData",1094],[3,"StartPosQueue",1094],[8,"CostAccessors",2014],[3,"BlockSplit",1152],[6,"Mem256f",2998],[3,"HistogramLiteral",2014],[3,"HistogramCommand",2014],[3,"HistogramDistance",2014],[3,"HistogramPair",1280],[3,"HuffmanTree",1898],[4,"ContextType",2014],[15,"array"],[3,"MetaBlockSplit",1169],[3,"RecoderState",1169],[3,"SimpleSortHuffmanTree",1169],[3,"BlockTypeCodeCalculator",1169],[3,"CombiningAllocator",1301],[6,"v8",324],[6,"s16",324],[3,"PDF",2556],[6,"StaticCommand",2211],[3,"BrotliDistanceParams",1351],[15,"isize"],[4,"CodeBlockState",1398],[3,"ContextMapEntropy",1445],[3,"SpeedAndMax",1445],[3,"InputPair",2162],[3,"InputReferenceMut",2162],[3,"PredictionModeContextMap",2211],[3,"LiteralPredictionModeNibble",2211],[3,"InputReference",2162],[4,"Command",2211],[3,"BrotliEncoderStateStruct",1486],[4,"BrotliEncoderOperation",1486],[4,"BrotliEncoderParameter",1486],[4,"BrotliEncoderStreamState",1486],[4,"IsFirst",1486],[3,"SortHuffmanTree",1898],[15,"i16"],[8,"HuffmanComparator",1898],[6,"floatY",1933],[3,"EntropyPyramid",1933],[3,"EntropyTally",1933],[3,"BucketPopIndex",1933],[3,"EntropyBucketPopulation",1933],[3,"Range",4048],[3,"FixedQueue",1997],[8,"Fn",4045],[3,"Array264i",2014],[3,"Array528i",2014],[3,"Array712i",2014],[3,"EmptyIVec",2014],[3,"SliceOffset",2211],[3,"BlockSwitch",2211],[3,"LiteralBlockSwitch",2211],[3,"CopyCommand",2211],[3,"DictCommand",2211],[3,"FeatureFlagSliceType",2211],[3,"LiteralCommand",2211],[8,"Debug",4043],[8,"Freezable",2211],[8,"From",4049],[8,"Hasher",4050],[8,"Unfreezable",2211],[8,"IRInterpreter",2468],[3,"MultiThreadedSpawner",2523],[3,"MultiThreadedJoinable",2523],[8,"AnyBoxConstructor",2885],[8,"Copy",4046],[3,"MultiThreadedOwnedRetriever",2523],[6,"PoisonedThreadError",2885],[8,"FnOnce",4045],[3,"PriorEval",2569],[3,"CDF",2569],[3,"CompressorReaderCustomIo",2712],[3,"CompressorReaderCustomAlloc",2712],[3,"CompressorReader",2712],[3,"WorkerPool",2771],[3,"SingleThreadedSpawner",2771],[3,"SingleThreadedJoinable",2771],[3,"SingleThreadedOwnedRetriever",2771],[3,"DictWord",2839],[3,"StrideEval",2861],[8,"BatchSpawnableLite",2885],[6,"LowLevelThreadError",2885],[8,"Joinable",2885],[6,"v256",2998],[6,"v256i",2998],[15,"f32"],[3,"WorkerPool",3007],[3,"WorkerJoinable",3007],[3,"CompressorWriterCustomIo",3038],[3,"CompressorWriterCustomAlloc",3038],[3,"CompressorWriter",3038],[3,"BrotliSubclassableAllocator",3108],[3,"SendableMemoryBlock",3108],[3,"SubclassableAllocator",3426],[3,"BroccoliState",3130],[6,"BroccoliResult",3130],[4,"BrotliEncoderMode",3170],[3,"BrotliEncoderState",3170],[4,"BrotliEncoderOperation",3170],[6,"brotli_alloc_func",3224],[6,"brotli_free_func",3224],[4,"c_void",3130],[6,"Result",4051],[8,"UnwindSafe",4052],[3,"BrotliDecoderState",3268],[4,"BrotliDecoderResult",3628],[3,"BrotliDecoderReturnInfo",3224],[4,"BrotliDecoderErrorCode",3268],[4,"BrotliDecoderParameter",3628],[3,"MemoryBlock",3426],[3,"Box",3426],[8,"Allocator",4053],[3,"BorrowedHandle",4054],[8,"AsHandle",4054],[3,"BorrowedSocket",4055],[8,"AsSocket",4055],[19,"MaybeUninit",4056],[8,"Tuple",4046],[8,"Error",4057],[3,"CStr",4058],[3,"OsStr",4059],[3,"Path",4060],[15,"str"],[4,"Ordering",4061],[8,"Ord",4061],[8,"BufRead",4038],[8,"Any",4044],[8,"PartialEq",4061],[8,"Display",4043],[3,"String",4062],[4,"Cow",4063],[3,"PathBuf",4060],[3,"OsString",4059],[15,"never"],[3,"Vec",4064],[3,"CString",4065],[8,"IntoIterator",4066],[8,"PartialOrd",4061],[8,"Hash",4050],[3,"Pin",4067],[3,"CharPredicateSearcher",4068],[8,"ExactSizeIterator",4069],[8,"Iterator",4070],[3,"CAllocator",3628],[8,"DoubleEndedIterator",4071],[3,"Context",4072],[4,"Poll",4073],[8,"Future",4074],[8,"Unpin",4046],[8,"AsyncIterator",4075],[3,"Request",4057],[3,"BorrowedCursor",4076],[3,"IoSliceMut",4038],[4,"CoroutineState",4077],[8,"Coroutine",4077],[4,"SeekFrom",4038],[8,"Seek",4038],[3,"AllocError",4053],[3,"Arguments",4043],[15,"i128"],[15,"i64"],[15,"i8"],[15,"u128"],[3,"IoSlice",4038],[3,"BrotliEncoderWorkPool",3673],[3,"DecompressorCustomAlloc",3687],[3,"StackAllocator",3838],[3,"AllocatedStackMemory",3838],[8,"AllocatedSlice",4078],[3,"StandardAlloc",3838],[3,"HuffmanTreeGroup",3838],[3,"DecompressorWriterCustomAlloc",3838],[3,"IntoIoWriter",3838],[3,"H40",420],[3,"H41",420],[3,"H42",420],[3,"BankH40",420],[3,"BankH41",420],[3,"BankH42",420],[3,"SlotH40",420],[3,"SlotH41",420],[3,"SlotH42",420],[8,"CloneWithAlloc",420],[8,"Allocable",976],[3,"ZopfliCostModel",1094],[3,"BlockEncoder",1169],[3,"PrefixCodeRange",1169],[3,"BlockSplitCode",1169],[3,"RingBuffer",1486],[3,"BlockSplitIterator",2014],[8,"Nop",2211],[8,"CommandProcessor",2211],[3,"BlockSplitter",2480],[3,"ContextBlockSplitter",2480],[4,"WhichPrior",2569],[3,"Stride1Prior",2569],[3,"Stride2Prior",2569],[3,"Stride3Prior",2569],[3,"Stride4Prior",2569],[3,"CMPrior",2569],[3,"FastCMPrior",2569],[3,"SlowCMPrior",2569],[3,"AdvPrior",2569],[8,"Prior",2569],[4,"InternalSendAlloc",2885],[4,"InternalOwned",2885],[8,"BatchSpawnable",2885],[3,"CompressedFileChunk",2885],[8,"OwnedRetriever",2885],[3,"GuardedQueue",3007],[3,"Transform",3824]],"b":[[117,"impl-HuffmanCode"],[118,"impl-PartialEq-for-HuffmanCode"],[695,"impl-CloneWithAlloc%3CAlloc%3E-for-BasicHasher%3CH4Sub%3CAlloc%3E%3E"],[696,"impl-CloneWithAlloc%3CAlloc%3E-for-BasicHasher%3CH3Sub%3CAlloc%3E%3E"],[697,"impl-CloneWithAlloc%3CAlloc%3E-for-BasicHasher%3CH2Sub%3CAlloc%3E%3E"],[698,"impl-CloneWithAlloc%3CAlloc%3E-for-BasicHasher%3CH54Sub%3CAlloc%3E%3E"],[1306,"impl-Allocator%3CHuffmanTree%3E-for-CombiningAllocator%3CAllocU8,+AllocU16,+AllocI32,+AllocU32,+AllocU64,+AllocCommand,+AllocFloatX,+AllocV8,+AllocS16,+AllocPDF,+AllocStaticCommand,+AllocHistogramLiteral,+AllocHistogramCommand,+AllocHistogramDistance,+AllocHistogramPair,+AllocContextType,+AllocHuffmanTree,+AllocZopfliNode%3E"],[1307,"impl-Allocator%3Cu16%3E-for-CombiningAllocator%3CAllocU8,+AllocU16,+AllocI32,+AllocU32,+AllocU64,+AllocCommand,+AllocFloatX,+AllocV8,+AllocS16,+AllocPDF,+AllocStaticCommand,+AllocHistogramLiteral,+AllocHistogramCommand,+AllocHistogramDistance,+AllocHistogramPair,+AllocContextType,+AllocHuffmanTree,+AllocZopfliNode%3E"],[1308,"impl-Allocator%3CZopfliNode%3E-for-CombiningAllocator%3CAllocU8,+AllocU16,+AllocI32,+AllocU32,+AllocU64,+AllocCommand,+AllocFloatX,+AllocV8,+AllocS16,+AllocPDF,+AllocStaticCommand,+AllocHistogramLiteral,+AllocHistogramCommand,+AllocHistogramDistance,+AllocHistogramPair,+AllocContextType,+AllocHuffmanTree,+AllocZopfliNode%3E"],[1309,"impl-Allocator%3CPDF%3E-for-CombiningAllocator%3CAllocU8,+AllocU16,+AllocI32,+AllocU32,+AllocU64,+AllocCommand,+AllocFloatX,+AllocV8,+AllocS16,+AllocPDF,+AllocStaticCommand,+AllocHistogramLiteral,+AllocHistogramCommand,+AllocHistogramDistance,+AllocHistogramPair,+AllocContextType,+AllocHuffmanTree,+AllocZopfliNode%3E"],[1310,"impl-Allocator%3Cf32%3E-for-CombiningAllocator%3CAllocU8,+AllocU16,+AllocI32,+AllocU32,+AllocU64,+AllocCommand,+AllocFloatX,+AllocV8,+AllocS16,+AllocPDF,+AllocStaticCommand,+AllocHistogramLiteral,+AllocHistogramCommand,+AllocHistogramDistance,+AllocHistogramPair,+AllocContextType,+AllocHuffmanTree,+AllocZopfliNode%3E"],[1311,"impl-Allocator%3CContextType%3E-for-CombiningAllocator%3CAllocU8,+AllocU16,+AllocI32,+AllocU32,+AllocU64,+AllocCommand,+AllocFloatX,+AllocV8,+AllocS16,+AllocPDF,+AllocStaticCommand,+AllocHistogramLiteral,+AllocHistogramCommand,+AllocHistogramDistance,+AllocHistogramPair,+AllocContextType,+AllocHuffmanTree,+AllocZopfliNode%3E"],[1312,"impl-Allocator%3CCommand%3E-for-CombiningAllocator%3CAllocU8,+AllocU16,+AllocI32,+AllocU32,+AllocU64,+AllocCommand,+AllocFloatX,+AllocV8,+AllocS16,+AllocPDF,+AllocStaticCommand,+AllocHistogramLiteral,+AllocHistogramCommand,+AllocHistogramDistance,+AllocHistogramPair,+AllocContextType,+AllocHuffmanTree,+AllocZopfliNode%3E"],[1313,"impl-Allocator%3CCommand%3CSliceOffset%3E%3E-for-CombiningAllocator%3CAllocU8,+AllocU16,+AllocI32,+AllocU32,+AllocU64,+AllocCommand,+AllocFloatX,+AllocV8,+AllocS16,+AllocPDF,+AllocStaticCommand,+AllocHistogramLiteral,+AllocHistogramCommand,+AllocHistogramDistance,+AllocHistogramPair,+AllocContextType,+AllocHuffmanTree,+AllocZopfliNode%3E"],[1314,"impl-Allocator%3CHistogramLiteral%3E-for-CombiningAllocator%3CAllocU8,+AllocU16,+AllocI32,+AllocU32,+AllocU64,+AllocCommand,+AllocFloatX,+AllocV8,+AllocS16,+AllocPDF,+AllocStaticCommand,+AllocHistogramLiteral,+AllocHistogramCommand,+AllocHistogramDistance,+AllocHistogramPair,+AllocContextType,+AllocHuffmanTree,+AllocZopfliNode%3E"],[1315,"impl-Allocator%3Cu64%3E-for-CombiningAllocator%3CAllocU8,+AllocU16,+AllocI32,+AllocU32,+AllocU64,+AllocCommand,+AllocFloatX,+AllocV8,+AllocS16,+AllocPDF,+AllocStaticCommand,+AllocHistogramLiteral,+AllocHistogramCommand,+AllocHistogramDistance,+AllocHistogramPair,+AllocContextType,+AllocHuffmanTree,+AllocZopfliNode%3E"],[1316,"impl-Allocator%3Cu8%3E-for-CombiningAllocator%3CAllocU8,+AllocU16,+AllocI32,+AllocU32,+AllocU64,+AllocCommand,+AllocFloatX,+AllocV8,+AllocS16,+AllocPDF,+AllocStaticCommand,+AllocHistogramLiteral,+AllocHistogramCommand,+AllocHistogramDistance,+AllocHistogramPair,+AllocContextType,+AllocHuffmanTree,+AllocZopfliNode%3E"],[1317,"impl-Allocator%3CHistogramPair%3E-for-CombiningAllocator%3CAllocU8,+AllocU16,+AllocI32,+AllocU32,+AllocU64,+AllocCommand,+AllocFloatX,+AllocV8,+AllocS16,+AllocPDF,+AllocStaticCommand,+AllocHistogramLiteral,+AllocHistogramCommand,+AllocHistogramDistance,+AllocHistogramPair,+AllocContextType,+AllocHuffmanTree,+AllocZopfliNode%3E"],[1318,"impl-Allocator%3CHistogramDistance%3E-for-CombiningAllocator%3CAllocU8,+AllocU16,+AllocI32,+AllocU32,+AllocU64,+AllocCommand,+AllocFloatX,+AllocV8,+AllocS16,+AllocPDF,+AllocStaticCommand,+AllocHistogramLiteral,+AllocHistogramCommand,+AllocHistogramDistance,+AllocHistogramPair,+AllocContextType,+AllocHuffmanTree,+AllocZopfliNode%3E"],[1319,"impl-Allocator%3Cu32%3E-for-CombiningAllocator%3CAllocU8,+AllocU16,+AllocI32,+AllocU32,+AllocU64,+AllocCommand,+AllocFloatX,+AllocV8,+AllocS16,+AllocPDF,+AllocStaticCommand,+AllocHistogramLiteral,+AllocHistogramCommand,+AllocHistogramDistance,+AllocHistogramPair,+AllocContextType,+AllocHuffmanTree,+AllocZopfliNode%3E"],[1320,"impl-Allocator%3CHistogramCommand%3E-for-CombiningAllocator%3CAllocU8,+AllocU16,+AllocI32,+AllocU32,+AllocU64,+AllocCommand,+AllocFloatX,+AllocV8,+AllocS16,+AllocPDF,+AllocStaticCommand,+AllocHistogramLiteral,+AllocHistogramCommand,+AllocHistogramDistance,+AllocHistogramPair,+AllocContextType,+AllocHuffmanTree,+AllocZopfliNode%3E"],[1321,"impl-Allocator%3Ci32%3E-for-CombiningAllocator%3CAllocU8,+AllocU16,+AllocI32,+AllocU32,+AllocU64,+AllocCommand,+AllocFloatX,+AllocV8,+AllocS16,+AllocPDF,+AllocStaticCommand,+AllocHistogramLiteral,+AllocHistogramCommand,+AllocHistogramDistance,+AllocHistogramPair,+AllocContextType,+AllocHuffmanTree,+AllocZopfliNode%3E"],[1328,"impl-Allocator%3Cf32%3E-for-CombiningAllocator%3CAllocU8,+AllocU16,+AllocI32,+AllocU32,+AllocU64,+AllocCommand,+AllocFloatX,+AllocV8,+AllocS16,+AllocPDF,+AllocStaticCommand,+AllocHistogramLiteral,+AllocHistogramCommand,+AllocHistogramDistance,+AllocHistogramPair,+AllocContextType,+AllocHuffmanTree,+AllocZopfliNode%3E"],[1329,"impl-Allocator%3CHistogramCommand%3E-for-CombiningAllocator%3CAllocU8,+AllocU16,+AllocI32,+AllocU32,+AllocU64,+AllocCommand,+AllocFloatX,+AllocV8,+AllocS16,+AllocPDF,+AllocStaticCommand,+AllocHistogramLiteral,+AllocHistogramCommand,+AllocHistogramDistance,+AllocHistogramPair,+AllocContextType,+AllocHuffmanTree,+AllocZopfliNode%3E"],[1330,"impl-Allocator%3CHistogramPair%3E-for-CombiningAllocator%3CAllocU8,+AllocU16,+AllocI32,+AllocU32,+AllocU64,+AllocCommand,+AllocFloatX,+AllocV8,+AllocS16,+AllocPDF,+AllocStaticCommand,+AllocHistogramLiteral,+AllocHistogramCommand,+AllocHistogramDistance,+AllocHistogramPair,+AllocContextType,+AllocHuffmanTree,+AllocZopfliNode%3E"],[1331,"impl-Allocator%3CPDF%3E-for-CombiningAllocator%3CAllocU8,+AllocU16,+AllocI32,+AllocU32,+AllocU64,+AllocCommand,+AllocFloatX,+AllocV8,+AllocS16,+AllocPDF,+AllocStaticCommand,+AllocHistogramLiteral,+AllocHistogramCommand,+AllocHistogramDistance,+AllocHistogramPair,+AllocContextType,+AllocHuffmanTree,+AllocZopfliNode%3E"],[1332,"impl-Allocator%3CHuffmanTree%3E-for-CombiningAllocator%3CAllocU8,+AllocU16,+AllocI32,+AllocU32,+AllocU64,+AllocCommand,+AllocFloatX,+AllocV8,+AllocS16,+AllocPDF,+AllocStaticCommand,+AllocHistogramLiteral,+AllocHistogramCommand,+AllocHistogramDistance,+AllocHistogramPair,+AllocContextType,+AllocHuffmanTree,+AllocZopfliNode%3E"],[1333,"impl-Allocator%3CContextType%3E-for-CombiningAllocator%3CAllocU8,+AllocU16,+AllocI32,+AllocU32,+AllocU64,+AllocCommand,+AllocFloatX,+AllocV8,+AllocS16,+AllocPDF,+AllocStaticCommand,+AllocHistogramLiteral,+AllocHistogramCommand,+AllocHistogramDistance,+AllocHistogramPair,+AllocContextType,+AllocHuffmanTree,+AllocZopfliNode%3E"],[1334,"impl-Allocator%3CHistogramDistance%3E-for-CombiningAllocator%3CAllocU8,+AllocU16,+AllocI32,+AllocU32,+AllocU64,+AllocCommand,+AllocFloatX,+AllocV8,+AllocS16,+AllocPDF,+AllocStaticCommand,+AllocHistogramLiteral,+AllocHistogramCommand,+AllocHistogramDistance,+AllocHistogramPair,+AllocContextType,+AllocHuffmanTree,+AllocZopfliNode%3E"],[1335,"impl-Allocator%3Cu16%3E-for-CombiningAllocator%3CAllocU8,+AllocU16,+AllocI32,+AllocU32,+AllocU64,+AllocCommand,+AllocFloatX,+AllocV8,+AllocS16,+AllocPDF,+AllocStaticCommand,+AllocHistogramLiteral,+AllocHistogramCommand,+AllocHistogramDistance,+AllocHistogramPair,+AllocContextType,+AllocHuffmanTree,+AllocZopfliNode%3E"],[1336,"impl-Allocator%3CCommand%3CSliceOffset%3E%3E-for-CombiningAllocator%3CAllocU8,+AllocU16,+AllocI32,+AllocU32,+AllocU64,+AllocCommand,+AllocFloatX,+AllocV8,+AllocS16,+AllocPDF,+AllocStaticCommand,+AllocHistogramLiteral,+AllocHistogramCommand,+AllocHistogramDistance,+AllocHistogramPair,+AllocContextType,+AllocHuffmanTree,+AllocZopfliNode%3E"],[1337,"impl-Allocator%3Cu8%3E-for-CombiningAllocator%3CAllocU8,+AllocU16,+AllocI32,+AllocU32,+AllocU64,+AllocCommand,+AllocFloatX,+AllocV8,+AllocS16,+AllocPDF,+AllocStaticCommand,+AllocHistogramLiteral,+AllocHistogramCommand,+AllocHistogramDistance,+AllocHistogramPair,+AllocContextType,+AllocHuffmanTree,+AllocZopfliNode%3E"],[1338,"impl-Allocator%3CHistogramLiteral%3E-for-CombiningAllocator%3CAllocU8,+AllocU16,+AllocI32,+AllocU32,+AllocU64,+AllocCommand,+AllocFloatX,+AllocV8,+AllocS16,+AllocPDF,+AllocStaticCommand,+AllocHistogramLiteral,+AllocHistogramCommand,+AllocHistogramDistance,+AllocHistogramPair,+AllocContextType,+AllocHuffmanTree,+AllocZopfliNode%3E"],[1339,"impl-Allocator%3Ci32%3E-for-CombiningAllocator%3CAllocU8,+AllocU16,+AllocI32,+AllocU32,+AllocU64,+AllocCommand,+AllocFloatX,+AllocV8,+AllocS16,+AllocPDF,+AllocStaticCommand,+AllocHistogramLiteral,+AllocHistogramCommand,+AllocHistogramDistance,+AllocHistogramPair,+AllocContextType,+AllocHuffmanTree,+AllocZopfliNode%3E"],[1340,"impl-Allocator%3CZopfliNode%3E-for-CombiningAllocator%3CAllocU8,+AllocU16,+AllocI32,+AllocU32,+AllocU64,+AllocCommand,+AllocFloatX,+AllocV8,+AllocS16,+AllocPDF,+AllocStaticCommand,+AllocHistogramLiteral,+AllocHistogramCommand,+AllocHistogramDistance,+AllocHistogramPair,+AllocContextType,+AllocHuffmanTree,+AllocZopfliNode%3E"],[1341,"impl-Allocator%3Cu64%3E-for-CombiningAllocator%3CAllocU8,+AllocU16,+AllocI32,+AllocU32,+AllocU64,+AllocCommand,+AllocFloatX,+AllocV8,+AllocS16,+AllocPDF,+AllocStaticCommand,+AllocHistogramLiteral,+AllocHistogramCommand,+AllocHistogramDistance,+AllocHistogramPair,+AllocContextType,+AllocHuffmanTree,+AllocZopfliNode%3E"],[1342,"impl-Allocator%3Cu32%3E-for-CombiningAllocator%3CAllocU8,+AllocU16,+AllocI32,+AllocU32,+AllocU64,+AllocCommand,+AllocFloatX,+AllocV8,+AllocS16,+AllocPDF,+AllocStaticCommand,+AllocHistogramLiteral,+AllocHistogramCommand,+AllocHistogramDistance,+AllocHistogramPair,+AllocContextType,+AllocHuffmanTree,+AllocZopfliNode%3E"],[1343,"impl-Allocator%3CCommand%3E-for-CombiningAllocator%3CAllocU8,+AllocU16,+AllocI32,+AllocU32,+AllocU64,+AllocCommand,+AllocFloatX,+AllocV8,+AllocS16,+AllocPDF,+AllocStaticCommand,+AllocHistogramLiteral,+AllocHistogramCommand,+AllocHistogramDistance,+AllocHistogramPair,+AllocContextType,+AllocHuffmanTree,+AllocZopfliNode%3E"],[2181,"impl-Debug-for-InputPair%3C\'a%3E"],[2182,"impl-LowerHex-for-InputPair%3C\'a%3E"],[2186,"impl-From%3C%26InputReferenceMut%3C\'a%3E%3E-for-InputReference%3C\'a%3E"],[2187,"impl-From%3CInputReferenceMut%3C\'a%3E%3E-for-InputReference%3C\'a%3E"],[2541,"impl-BatchSpawnableLite%3CReturnValue,+ExtraInput,+Alloc,+U%3E-for-MultiThreadedSpawner"],[2542,"impl-BatchSpawnable%3CReturnValue,+ExtraInput,+Alloc,+U%3E-for-MultiThreadedSpawner"],[2543,"impl-BatchSpawnableLite%3CReturnValue,+ExtraInput,+Alloc,+U%3E-for-MultiThreadedSpawner"],[2544,"impl-BatchSpawnable%3CReturnValue,+ExtraInput,+Alloc,+U%3E-for-MultiThreadedSpawner"],[2795,"impl-BatchSpawnableLite%3CReturnValue,+ExtraInput,+Alloc,+U%3E-for-SingleThreadedSpawner"],[2796,"impl-BatchSpawnable%3CReturnValue,+ExtraInput,+Alloc,+U%3E-for-SingleThreadedSpawner"],[2798,"impl-BatchSpawnableLite%3CReturnValue,+ExtraInput,+Alloc,+U%3E-for-SingleThreadedSpawner"],[2799,"impl-BatchSpawnable%3CReturnValue,+ExtraInput,+Alloc,+U%3E-for-SingleThreadedSpawner"],[3436,"impl-Box%3C%5BMaybeUninit%3CT%3E%5D,+A%3E"],[3437,"impl-Box%3CMaybeUninit%3CT%3E,+A%3E"],[3450,"impl-Clone-for-Box%3CCStr%3E"],[3451,"impl-Clone-for-Box%3COsStr%3E"],[3452,"impl-Clone-for-Box%3CPath%3E"],[3453,"impl-Clone-for-Box%3CT,+A%3E"],[3454,"impl-Clone-for-Box%3Cstr%3E"],[3455,"impl-Clone-for-Box%3C%5BT%5D,+A%3E"],[3456,"impl-Clone-for-Box%3CT,+A%3E"],[3457,"impl-Clone-for-Box%3C%5BT%5D,+A%3E"],[3461,"impl-Default-for-Box%3COsStr%3E"],[3462,"impl-Default-for-Box%3CCStr%3E"],[3463,"impl-Default-for-Box%3CT%3E"],[3464,"impl-Default-for-Box%3Cstr%3E"],[3465,"impl-Default-for-Box%3C%5BT%5D%3E"],[3470,"impl-Box%3Cdyn+Any+%2B+Send,+A%3E"],[3471,"impl-Box%3Cdyn+Any+%2B+Send+%2B+Sync,+A%3E"],[3472,"impl-Box%3Cdyn+Any,+A%3E"],[3473,"impl-Box%3Cdyn+Any+%2B+Send+%2B+Sync,+A%3E"],[3474,"impl-Box%3Cdyn+Any+%2B+Send,+A%3E"],[3475,"impl-Box%3Cdyn+Any,+A%3E"],[3482,"impl-Display-for-Box%3CT,+A%3E"],[3483,"impl-Pointer-for-Box%3CT,+A%3E"],[3484,"impl-Debug-for-Box%3CT,+A%3E"],[3487,"impl-From%3CString%3E-for-Box%3Cdyn+Error+%2B+Send+%2B+Sync%3E"],[3488,"impl-From%3CString%3E-for-Box%3Cstr%3E"],[3489,"impl-From%3C%26%5BT%5D%3E-for-Box%3C%5BT%5D%3E"],[3490,"impl-From%3C%26CStr%3E-for-Box%3CCStr%3E"],[3491,"impl-From%3CCow%3C\'b,+str%3E%3E-for-Box%3Cdyn+Error+%2B+Send+%2B+Sync%3E"],[3492,"impl-From%3CE%3E-for-Box%3Cdyn+Error+%2B+Send+%2B+Sync%3E"],[3493,"impl-From%3CPathBuf%3E-for-Box%3CPath%3E"],[3494,"impl-From%3CCow%3C\'_,+OsStr%3E%3E-for-Box%3COsStr%3E"],[3495,"impl-From%3COsString%3E-for-Box%3COsStr%3E"],[3496,"impl-From%3CCow%3C\'_,+%5BT%5D%3E%3E-for-Box%3C%5BT%5D%3E"],[3497,"impl-From%3C%26str%3E-for-Box%3Cdyn+Error%3E"],[3498,"impl-From%3CCow%3C\'_,+str%3E%3E-for-Box%3Cstr%3E"],[3499,"impl-From%3CT%3E-for-Box%3CT%3E"],[3500,"impl-From%3C%26OsStr%3E-for-Box%3COsStr%3E"],[3501,"impl-From%3C%26str%3E-for-Box%3Cdyn+Error+%2B+Send+%2B+Sync%3E"],[3503,"impl-From%3CCow%3C\'_,+Path%3E%3E-for-Box%3CPath%3E"],[3505,"impl-From%3CVec%3CT,+A%3E%3E-for-Box%3C%5BT%5D,+A%3E"],[3506,"impl-From%3C%26str%3E-for-Box%3Cstr%3E"],[3507,"impl-From%3CE%3E-for-Box%3Cdyn+Error%3E"],[3508,"impl-From%3C%26Path%3E-for-Box%3CPath%3E"],[3509,"impl-From%3CCow%3C\'_,+CStr%3E%3E-for-Box%3CCStr%3E"],[3510,"impl-From%3CString%3E-for-Box%3Cdyn+Error%3E"],[3511,"impl-From%3CCow%3C\'a,+str%3E%3E-for-Box%3Cdyn+Error%3E"],[3512,"impl-From%3CCString%3E-for-Box%3CCStr%3E"],[3513,"impl-From%3C%5BT;+N%5D%3E-for-Box%3C%5BT%5D%3E"],[3514,"impl-From%3CBox%3Cstr,+A%3E%3E-for-Box%3C%5Bu8%5D,+A%3E"],[3579,"impl-AsyncIterator-for-Box%3CS%3E"],[3580,"impl-Iterator-for-Box%3CI,+A%3E"],[3589,"impl-TryFrom%3CVec%3CT%3E%3E-for-Box%3C%5BT;+N%5D%3E"],[3591,"impl-TryFrom%3CBox%3C%5BT%5D%3E%3E-for-Box%3C%5BT;+N%5D%3E"],[3608,"impl-Box%3CMaybeUninit%3CT%3E,+A%3E"],[3609,"impl-Write-for-Box%3CW%3E"],[3610,"impl-Hasher-for-Box%3CT,+A%3E"],[3940,"impl-Index%3Cusize%3E-for-AllocatedStackMemory%3C\'a,+T%3E"],[3941,"impl-Index%3CRange%3Cusize%3E%3E-for-AllocatedStackMemory%3C\'a,+T%3E"],[3942,"impl-IndexMut%3CRange%3Cusize%3E%3E-for-AllocatedStackMemory%3C\'a,+T%3E"],[3943,"impl-IndexMut%3Cusize%3E-for-AllocatedStackMemory%3C\'a,+T%3E"]]},\
"brotli_decompressor":{"doc":"","t":"QDIFFDFFFFFFFEDCCCCCCDDCCCCNNNNIIDDKLLMMMMMMLLLLLLLLMFFMMFLLMMMMMMMMMMFMMMMLLLLAMMMMMMMMMMMMMALKLLMMLLLLMMMMLLLLMMLLLLAMMMMLLMMMMMMMMMMMMMMMMMMMMMMAMMMMMMMMKLKLMMMMMMMMMMMMMMLAMMLLLLLLLLLLLLMMAHRRRRNNNNNNNNNNNNNNNNNNNNNNNNNNNNNFFFFFFFEFFFFFFFFFFFDFFDCMMMAMLLLLMMMLLMMMMMMMMMMMMMMMMMMMMMMMMMLLLMMMMALLMMMMMMMMMMMMMMMMMMMMMMMMMMMMMFFMMMMMMMMMMMMMLMMLLLLLLMDDDLFLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLNNNNNNEEDNNNNNMLLLLLLLLGGELLMLLLLLLLLLMLLLLLLLLLLLLLIIDDDDLLLLLLLLKLLLLLLLLLLKLLLLLLLLLLLLLLKLLFQDIFLLEDLLLLCCDDDDDCCCNNNNIIDDKMMMMMMLLLLLLLLLLLLLLMMMLLLMMMMMMMMMMMLMMLLMMMMMMMMMMLLLMLLKMMLLLLLLLLLLLLLLLMMMMLMMLLLLLLLLLLMMMMLMMMMMMMMMMMMLLLLLLLLLMMMMMMMMMMLLLMMLMMMMMKKMMMMMMMMMMMMMMLMMLLLLLLLLLLLLLLLLLLLLLMMDFLLLLRRMMMLLLQDIFEDCDDDDDCCNNNNIIDDKMMMMMMLLLLLLMMMLLLMMMMMMMMMMMMMMMMMMMMMMMLMLLLKMMLLLLLLLLLMMMMMMLLLLLLMMMMLMMMMMMMMMMMMLLLLLLMMMMMMMMMMMMMMMMMKKMMMMMMMMMMMMMMMMLLLLLLLLLMMLLLF","n":["AllocatedMemory","AllocatedStackMemory","Allocator","BrotliDecoderHasMoreOutput","BrotliDecoderIsFinished","BrotliDecoderReturnInfo","BrotliDecoderTakeOutput","BrotliDecompress","BrotliDecompressCustomAlloc","BrotliDecompressCustomDict","BrotliDecompressCustomIo","BrotliDecompressCustomIoCustomDict","BrotliDecompressStream","BrotliResult","BrotliState","CustomRead","CustomWrite","Decompressor","DecompressorCustomIo","DecompressorWriter","DecompressorWriterCustomIo","HuffmanCode","HuffmanTreeGroup","IntoIoReader","IntoIoWriter","IoReaderWrapper","IoWriterWrapper","NeedsMoreInput","NeedsMoreOutput","ResultFailure","ResultSuccess","SliceWrapper","SliceWrapperMut","StackAllocator","StandardAlloc","alloc_cell","alloc_cell","alloc_cell","alloc_hc","alloc_u32","alloc_u8","alphabet_size","bits","block_type_length_state","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","br","brotli_decode","brotli_decode_prealloc","buffer","buffer_length","bzero","clone","clone_into","code","code_length_code_lengths","code_length_histo","codes","context_index","context_lookup","context_map","context_map_slice_index","context_map_table","context_modes","copy_from_to","copy_length","custom_dict","custom_dict_size","decoded_size","default","default","deref","deref_mut","dictionary","dist_context_map","dist_context_map_slice_index","dist_htree_index","dist_rb","dist_rb_idx","distance_code","distance_context","distance_hgroup","distance_postfix_bits","distance_postfix_mask","error_code","error_code","error_string","ffi","fmt","free_cell","free_cell","free_cell","free_list_overflow_count","free_list_start","from","from","from","from","htree_command_index","htree_index","htree_next_offset","htrees","index","index","index_mut","index_mut","initialize","insert_copy_hgroup","into","into","into","into","io_wrappers","is_last_metablock","is_metadata","is_uncompressed","large_window","len","len","literal_hgroup","literal_htree_index","loop_counter","max_backward_distance","max_backward_distance_minus_custom_dict_size","max_distance","max_run_length_prefix","max_symbol","mem","meta_block_remaining_len","mtf_or_error_string","mtf_upper_bound","next_symbol","nop","num_direct_distance_codes","num_dist_htrees","num_htrees","num_literal_htrees","partial_pos_out","pos","prev_code_len","rb_roundtrips","reader","repeat","repeat_code_len","result","ringbuffer","ringbuffer_mask","ringbuffer_size","should_wrap_ringbuffer","size_nibbles","slice","slice","slice_mut","slice_mut","space","state","sub_loop_counter","substate_context_map","substate_decode_uint8","substate_huffman","substate_metablock_header","substate_tree_group","substate_uncompressed","symbol","symbol_lists_index","symbols_lists_array","system_resources","table","to_owned","transform","trivial_literal_context","trivial_literal_contexts","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","value","window_bits","writer","kBrotliDictionary","kBrotliDictionaryOffsetsByLength","kBrotliDictionarySizeBitsByLength","kBrotliMaxDictionaryWordLength","kBrotliMinDictionaryWordLength","BROTLI_DECODER_ERROR_ALLOC_BLOCK_TYPE_TREES","BROTLI_DECODER_ERROR_ALLOC_CONTEXT_MAP","BROTLI_DECODER_ERROR_ALLOC_CONTEXT_MODES","BROTLI_DECODER_ERROR_ALLOC_RING_BUFFER_1","BROTLI_DECODER_ERROR_ALLOC_RING_BUFFER_2","BROTLI_DECODER_ERROR_ALLOC_TREE_GROUPS","BROTLI_DECODER_ERROR_DICTIONARY_NOT_SET","BROTLI_DECODER_ERROR_FORMAT_BLOCK_LENGTH_1","BROTLI_DECODER_ERROR_FORMAT_BLOCK_LENGTH_2","BROTLI_DECODER_ERROR_FORMAT_CL_SPACE","BROTLI_DECODER_ERROR_FORMAT_CONTEXT_MAP_REPEAT","BROTLI_DECODER_ERROR_FORMAT_DICTIONARY","BROTLI_DECODER_ERROR_FORMAT_DISTANCE","BROTLI_DECODER_ERROR_FORMAT_EXUBERANT_META_NIBBLE","BROTLI_DECODER_ERROR_FORMAT_EXUBERANT_NIBBLE","BROTLI_DECODER_ERROR_FORMAT_HUFFMAN_SPACE","BROTLI_DECODER_ERROR_FORMAT_PADDING_1","BROTLI_DECODER_ERROR_FORMAT_PADDING_2","BROTLI_DECODER_ERROR_FORMAT_RESERVED","BROTLI_DECODER_ERROR_FORMAT_SIMPLE_HUFFMAN_ALPHABET","BROTLI_DECODER_ERROR_FORMAT_SIMPLE_HUFFMAN_SAME","BROTLI_DECODER_ERROR_FORMAT_TRANSFORM","BROTLI_DECODER_ERROR_FORMAT_WINDOW_BITS","BROTLI_DECODER_ERROR_INVALID_ARGUMENTS","BROTLI_DECODER_ERROR_UNREACHABLE","BROTLI_DECODER_NEEDS_MORE_INPUT","BROTLI_DECODER_NEEDS_MORE_OUTPUT","BROTLI_DECODER_NO_ERROR","BROTLI_DECODER_SUCCESS","BrotliDecoderCreateInstance","BrotliDecoderDecompress","BrotliDecoderDecompressPrealloc","BrotliDecoderDecompressStream","BrotliDecoderDecompressStreaming","BrotliDecoderDecompressWithReturnInfo","BrotliDecoderDestroyInstance","BrotliDecoderErrorCode","BrotliDecoderErrorString","BrotliDecoderFreeU8","BrotliDecoderFreeUsize","BrotliDecoderGetErrorCode","BrotliDecoderGetErrorString","BrotliDecoderHasMoreOutput","BrotliDecoderIsFinished","BrotliDecoderIsUsed","BrotliDecoderMallocU8","BrotliDecoderMallocUsize","BrotliDecoderSetParameter","BrotliDecoderState","BrotliDecoderTakeOutput","BrotliDecoderVersion","BrotliState","HuffmanCode","alloc_hc","alloc_u32","alloc_u8","alloc_util","block_type_length_state","borrow","borrow","borrow_mut","borrow_mut","br","buffer","buffer_length","clone","clone_into","code","code_length_code_lengths","code_length_histo","context_index","context_lookup","context_map","context_map_slice_index","context_map_table","context_modes","copy_length","custom_allocator","custom_dict","custom_dict_size","decompressor","dist_context_map","dist_context_map_slice_index","dist_htree_index","dist_rb","dist_rb_idx","distance_code","distance_context","distance_hgroup","distance_postfix_bits","distance_postfix_mask","error_code","fmt","from","from","htree_command_index","htree_index","htree_next_offset","insert_copy_hgroup","interface","into","into","is_last_metablock","is_metadata","is_uncompressed","large_window","literal_hgroup","literal_htree_index","loop_counter","max_backward_distance","max_backward_distance_minus_custom_dict_size","max_distance","max_run_length_prefix","meta_block_remaining_len","mtf_or_error_string","mtf_upper_bound","next_symbol","num_direct_distance_codes","num_dist_htrees","num_literal_htrees","partial_pos_out","pos","prev_code_len","rb_roundtrips","repeat","repeat_code_len","ringbuffer","ringbuffer_mask","ringbuffer_size","should_wrap_ringbuffer","size_nibbles","slice_from_raw_parts_or_nil","slice_from_raw_parts_or_nil_mut","space","state","sub_loop_counter","substate_context_map","substate_decode_uint8","substate_huffman","substate_metablock_header","substate_tree_group","substate_uncompressed","symbol","symbol_lists_index","symbols_lists_array","table","to_owned","trivial_literal_context","trivial_literal_contexts","try_from","try_from","try_into","try_into","type_id","type_id","window_bits","Box","MemoryBlock","SubclassableAllocator","alloc_cell","alloc_stdlib","allocator","as_handle","as_mut","as_ref","as_socket","assume_init","assume_init","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","call","call_mut","call_once","cause","clone","clone","clone","clone","clone","clone","clone_from","clone_from","clone_into","cmp","consume","default","default","default","default","default","default","deref","deref_mut","description","downcast","downcast","downcast","downcast_unchecked","downcast_unchecked","downcast_unchecked","drop","drop","eq","fill_buf","finish","flush","fmt","fmt","fmt","free_cell","free_stdlib","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_iter","from_raw","from_raw_in","ge","gt","hash","index","index_mut","into","into","into","into_boxed_slice","into_future","into_inner","into_iter","into_pin","into_raw","into_raw_with_allocator","into_searcher","is_contained_in","is_empty","is_prefix_of","is_read_vectored","is_suffix_of","is_write_vectored","last","le","leak","len","lt","ne","new","new","new_in","new_uninit","new_uninit_in","new_uninit_slice","new_uninit_slice_in","new_zeroed","new_zeroed_in","new_zeroed_slice","new_zeroed_slice_in","next","next_back","nth","nth_back","partial_cmp","pin","pin_in","poll","poll_next","provide","read","read_buf","read_exact","read_line","read_to_end","read_to_string","read_until","read_vectored","resume","seek","size_hint","size_hint","slice","slice_mut","source","stream_position","strip_prefix_of","strip_suffix_of","to_owned","to_string","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_new","try_new_in","try_new_uninit","try_new_uninit_in","try_new_uninit_slice","try_new_zeroed","try_new_zeroed_in","try_new_zeroed_slice","type_id","type_id","type_id","write","write","write","write_all","write_fmt","write_i128","write_i16","write_i32","write_i64","write_i8","write_isize","write_length_prefix","write_str","write_u128","write_u16","write_u32","write_u64","write_u8","write_usize","write_vectored","BROTLI_DECODER_PARAM_DISABLE_RING_BUFFER_REALLOCATION","BROTLI_DECODER_PARAM_LARGE_WINDOW","BROTLI_DECODER_RESULT_ERROR","BROTLI_DECODER_RESULT_NEEDS_MORE_INPUT","BROTLI_DECODER_RESULT_NEEDS_MORE_OUTPUT","BROTLI_DECODER_RESULT_SUCCESS","BrotliDecoderParameter","BrotliDecoderResult","CAllocator","None","None","Some","Some","_Nothing","alloc_func","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","brotli_alloc_func","brotli_free_func","c_void","clone","clone_into","free_func","from","from","from","from","from","into","into","into","into","opaque","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","CustomRead","CustomWrite","IntoIoReader","IntoIoWriter","IoReaderWrapper","IoWriterWrapper","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","flush","flush","flush","from","from","from","from","into","into","into","into","read","read","read","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","write","write","write","write_all","AllocatedMemory","AllocatedStackMemory","Allocator","BrotliDecompressStream","BrotliHuffmanTreeGroupInit","BrotliHuffmanTreeGroupRelease","BrotliResult","BrotliState","BrotliStateCleanupAfterMetablock","BrotliStateIsStreamEnd","BrotliStateIsStreamStart","BrotliStateMetablockBegin","CustomRead","CustomWrite","Decompressor","DecompressorCustomAlloc","DecompressorCustomIo","HuffmanCode","HuffmanTreeGroup","IntoIoReader","IoReaderWrapper","IoWriterWrapper","NeedsMoreInput","NeedsMoreOutput","ResultFailure","ResultSuccess","SliceWrapper","SliceWrapperMut","StackAllocator","StandardAlloc","alloc_cell","alloc_hc","alloc_u32","alloc_u8","alphabet_size","bits","block_type_length_state","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","br","buffer","buffer_length","build_hgroup_cache","clone","clone_into","code","code_length_code_lengths","code_length_histo","codes","context_index","context_lookup","context_map","context_map_slice_index","context_map_table","context_modes","copy_length","copy_to_front","custom_dict","custom_dict_size","default","default","dist_context_map","dist_context_map_slice_index","dist_htree_index","dist_rb","dist_rb_idx","distance_code","distance_context","distance_hgroup","distance_postfix_bits","distance_postfix_mask","drop","eq","eq","error_code","fmt","fmt","free_cell","free_list_overflow_count","free_list_start","from","from","from","from","from","from","from","get_mut","get_mut","get_mut","get_ref","get_ref","get_ref","get_tree","get_tree_mut","htree_command_index","htree_index","htree_next_offset","htrees","init","initialize","insert_copy_hgroup","into","into","into","into","into","into","into","into_inner","into_inner","into_inner","is_last_metablock","is_metadata","is_uncompressed","large_window","len","literal_hgroup","literal_htree_index","loop_counter","max_backward_distance","max_backward_distance_minus_custom_dict_size","max_distance","max_run_length_prefix","max_symbol","mem","meta_block_remaining_len","mtf_or_error_string","mtf_upper_bound","new","new","new","new","new_strict","new_with_custom_dict","new_with_custom_dictionary","new_with_custom_dictionary","new_with_custom_dictionary","next_symbol","nop","num_direct_distance_codes","num_dist_htrees","num_htrees","num_literal_htrees","partial_pos_out","pos","prev_code_len","rb_roundtrips","read","read","read","repeat","repeat_code_len","reset","ringbuffer","ringbuffer_mask","ringbuffer_size","should_wrap_ringbuffer","size_nibbles","slice","slice_mut","space","state","sub_loop_counter","substate_context_map","substate_decode_uint8","substate_huffman","substate_metablock_header","substate_tree_group","substate_uncompressed","symbol","symbol_lists_index","symbols_lists_array","system_resources","table","to_owned","trivial_literal_context","trivial_literal_contexts","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","value","window_bits","Transform","TransformDictionaryWord","borrow","borrow_mut","from","into","kNumTransforms","kTransforms","prefix_id","suffix_id","transform","try_from","try_into","type_id","AllocatedMemory","AllocatedStackMemory","Allocator","BrotliDecompressStream","BrotliResult","BrotliState","CustomWrite","DecompressorWriter","DecompressorWriterCustomAlloc","DecompressorWriterCustomIo","HuffmanCode","HuffmanTreeGroup","IntoIoWriter","IoWriterWrapper","NeedsMoreInput","NeedsMoreOutput","ResultFailure","ResultSuccess","SliceWrapper","SliceWrapperMut","StackAllocator","StandardAlloc","alloc_cell","alloc_hc","alloc_u32","alloc_u8","alphabet_size","bits","block_type_length_state","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","br","buffer","buffer_length","close","close","close","code","code_length_code_lengths","code_length_histo","codes","context_index","context_lookup","context_map","context_map_slice_index","context_map_table","context_modes","copy_length","custom_dict","custom_dict_size","dist_context_map","dist_context_map_slice_index","dist_htree_index","dist_rb","dist_rb_idx","distance_code","distance_context","distance_hgroup","distance_postfix_bits","distance_postfix_mask","drop","error_code","flush","flush","flush","free_cell","free_list_overflow_count","free_list_start","from","from","from","get_mut","get_mut","get_mut","get_ref","get_ref","get_ref","htree_command_index","htree_index","htree_next_offset","htrees","initialize","insert_copy_hgroup","into","into","into","into_inner","into_inner","into_inner","is_last_metablock","is_metadata","is_uncompressed","large_window","len","literal_hgroup","literal_htree_index","loop_counter","max_backward_distance","max_backward_distance_minus_custom_dict_size","max_distance","max_run_length_prefix","max_symbol","mem","meta_block_remaining_len","mtf_or_error_string","mtf_upper_bound","new","new","new","new_with_custom_dictionary","new_with_custom_dictionary","new_with_custom_dictionary","next_symbol","nop","num_direct_distance_codes","num_dist_htrees","num_htrees","num_literal_htrees","partial_pos_out","pos","prev_code_len","rb_roundtrips","repeat","repeat_code_len","ringbuffer","ringbuffer_mask","ringbuffer_size","should_wrap_ringbuffer","size_nibbles","slice","slice_mut","space","state","sub_loop_counter","substate_context_map","substate_decode_uint8","substate_huffman","substate_metablock_header","substate_tree_group","substate_uncompressed","symbol","symbol_lists_index","symbols_lists_array","system_resources","table","trivial_literal_context","trivial_literal_contexts","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","value","window_bits","write","write","write","write_all"],"q":[[0,"brotli_decompressor"],[193,"brotli_decompressor::dictionary"],[198,"brotli_decompressor::ffi"],[354,"brotli_decompressor::ffi::alloc_util"],[556,"brotli_decompressor::ffi::interface"],[608,"brotli_decompressor::io_wrappers"],[652,"brotli_decompressor::reader"],[865,"brotli_decompressor::transform"],[879,"brotli_decompressor::writer"],[1045,"std::io::error"],[1046,"core::result"],[1047,"std::io"],[1048,"std::io"],[1049,"alloc_no_stdlib::allocated_memory"],[1050,"alloc_stdlib::heap_alloc"],[1051,"core::clone"],[1052,"core::default"],[1053,"std::io::error"],[1054,"core::fmt"],[1055,"core::any"],[1056,"core::fmt"],[1057,"core::alloc"],[1058,"std::os::windows::io::handle"],[1059,"std::os::windows::io::handle"],[1060,"std::os::windows::io::socket"],[1061,"core::marker"],[1062,"core::ops::function"],[1063,"core::option"],[1064,"std::path"],[1065,"std::ffi::os_str"],[1066,"core::ffi::c_str"],[1067,"core::cmp"],[1068,"core::cmp"],[1069,"core::fmt"],[1070,"alloc::borrow"],[1071,"alloc::ffi::c_str"],[1072,"std::ffi::os_str"],[1073,"core::cmp"],[1074,"core::str::pattern"],[1075,"core::iter::traits::exact_size"],[1076,"core::iter::traits::iterator"],[1077,"core::iter::traits::double_ended"],[1078,"core::task::wake"],[1079,"core::task::poll"],[1080,"core::future::future"],[1081,"core::marker"],[1082,"core::error"],[1083,"std::io"],[1084,"core::ops::coroutine"]],"d":["","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Equivalent to BrotliDecoderDecompressStream but with no …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","A pointer type that uniquely owns a heap allocation of …","","","","","Returns a reference to the underlying allocator.","","","","","Converts to <code>Box&lt;[T], A&gt;</code>.","Converts to <code>Box&lt;T, A&gt;</code>.","","","","","","","","","","","","","","","","","Returns a new box with a <code>clone()</code> of this box’s contents.","","Copies <code>source</code>’s contents into <code>self</code> without creating a …","","","","","","","Creates a <code>Box&lt;T&gt;</code>, with the <code>Default</code> value for T.","","","","","","","Attempt to downcast the box to a concrete type.","Attempt to downcast the box to a concrete type.","Attempt to downcast the box to a concrete type.","Downcasts the box to a concrete type.","Downcasts the box to a concrete type.","Downcasts the box to a concrete type.","","","","","","","","","","","","Converts the given <code>String</code> to a boxed <code>str</code> slice that is …","Converts a <code>Cow&lt;&#39;a, OsStr&gt;</code> into a Box&lt;OsStr&gt;, by copying …","Returns the argument unchanged.","Converts a <code>String</code> into a box of dyn <code>Error</code> + <code>Send</code> + <code>Sync</code>.","Converts a <code>T</code> into a <code>Box&lt;T&gt;</code>","Converts a <code>str</code> into a box of dyn <code>Error</code>.","Converts a <code>Cow&lt;&#39;_, [T]&gt;</code> into a <code>Box&lt;[T]&gt;</code>","Converts a type of <code>Error</code> into a box of dyn <code>Error</code>.","Converts a <code>CString</code> into a Box&lt;CStr&gt; without copying or …","Convert a vector into a boxed slice.","Converts a <code>&amp;CStr</code> into a <code>Box&lt;CStr&gt;</code>, by copying the contents …","Converts a <code>str</code> into a box of dyn <code>Error</code> + <code>Send</code> + <code>Sync</code>.","Converts a <code>Cow</code> into a box of dyn <code>Error</code>.","Converts a <code>Cow</code> into a box of dyn <code>Error</code> + <code>Send</code> + <code>Sync</code>.","Converts a <code>Cow&lt;&#39;_, str&gt;</code> into a <code>Box&lt;str&gt;</code>","Converts a <code>&amp;str</code> into a <code>Box&lt;str&gt;</code>","Converts a <code>&amp;[T]</code> into a <code>Box&lt;[T]&gt;</code>","Converts a <code>[T; N]</code> into a <code>Box&lt;[T]&gt;</code>","Creates a boxed <code>Path</code> from a reference.","Creates a boxed <code>Path</code> from a clone-on-write pointer.","Copies the string into a newly allocated Box&lt;OsStr&gt;.","Converts an <code>OsString</code> into a Box&lt;OsStr&gt; without copying or …","Converts a <code>String</code> into a box of dyn <code>Error</code>.","Converts a <code>PathBuf</code> into a Box&lt;Path&gt;.","Converts a type of <code>Error</code> + <code>Send</code> + <code>Sync</code> into a box of dyn …","Converts a <code>Cow&lt;&#39;a, CStr&gt;</code> into a <code>Box&lt;CStr&gt;</code>, by copying the …","","Converts a <code>Box&lt;str&gt;</code> into a <code>Box&lt;[u8]&gt;</code>","Returns the argument unchanged.","Returns the argument unchanged.","","Constructs a box from a raw pointer.","Constructs a box from a raw pointer in the given allocator.","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Converts a <code>Box&lt;T&gt;</code> into a <code>Box&lt;[T]&gt;</code>","","Consumes the <code>Box</code>, returning the wrapped value.","","Converts a <code>Box&lt;T&gt;</code> into a <code>Pin&lt;Box&lt;T&gt;&gt;</code>. If <code>T</code> does not …","Consumes the <code>Box</code>, returning a wrapped raw pointer.","Consumes the <code>Box</code>, returning a wrapped raw pointer and the …","","","","","","","","","","Consumes and leaks the <code>Box</code>, returning a mutable reference, …","","","","Allocates memory on the heap and then places <code>x</code> into it.","","Allocates memory in the given allocator then places <code>x</code> into …","Constructs a new box with uninitialized contents.","Constructs a new box with uninitialized contents in the …","Constructs a new boxed slice with uninitialized contents.","Constructs a new boxed slice with uninitialized contents …","Constructs a new <code>Box</code> with uninitialized contents, with the …","Constructs a new <code>Box</code> with uninitialized contents, with the …","Constructs a new boxed slice with uninitialized contents, …","Constructs a new boxed slice with uninitialized contents …","","","","","","Constructs a new <code>Pin&lt;Box&lt;T&gt;&gt;</code>. If <code>T</code> does not implement <code>Unpin</code>…","Constructs a new <code>Pin&lt;Box&lt;T, A&gt;&gt;</code>. If <code>T</code> does not implement …","","","","","","","","","","","","","","","","","","","","","","","","Attempts to convert a <code>Vec&lt;T&gt;</code> into a <code>Box&lt;[T; N]&gt;</code>.","Attempts to convert a <code>Box&lt;[T]&gt;</code> into a <code>Box&lt;[T; N]&gt;</code>.","","","","","","","Allocates memory on the heap then places <code>x</code> into it, …","Allocates memory in the given allocator then places <code>x</code> into …","Constructs a new box with uninitialized contents on the …","Constructs a new box with uninitialized contents in the …","Constructs a new boxed slice with uninitialized contents. …","Constructs a new <code>Box</code> with uninitialized contents, with the …","Constructs a new <code>Box</code> with uninitialized contents, with the …","Constructs a new boxed slice with uninitialized contents, …","","","","","Writes the value and converts to <code>Box&lt;T, A&gt;</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","No value.","No value.","Some value of type <code>T</code>.","Some value of type <code>T</code>.","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","this trait does not allow for transient errors: they must …","this trait does not allow for transient errors: they must …","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","This variant of read will return Ok(number of bytes read) …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,17,17,17,17,0,0,0,0,4,18,21,1,1,1,113,6,1,18,19,21,25,18,19,21,25,1,0,0,1,1,0,21,21,1,1,1,113,1,1,1,1,1,1,0,1,1,1,25,19,21,19,19,0,1,1,1,1,1,1,1,1,1,1,1,25,25,0,21,4,18,21,18,18,18,19,21,25,1,1,1,113,19,19,19,19,18,1,18,19,21,25,0,1,1,1,1,121,121,1,1,1,1,1,1,1,113,19,1,1,1,1,18,1,1,113,1,1,1,1,1,0,1,1,25,1,1,1,1,1,121,19,115,19,1,1,1,1,1,1,1,1,1,1,1,1,18,1,21,0,1,1,18,19,21,25,18,19,21,25,18,19,21,25,6,1,0,0,0,0,0,0,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,1,34,36,34,36,1,1,1,36,36,1,1,1,1,1,1,1,1,1,1,34,1,1,34,1,1,1,1,1,1,1,1,1,1,1,36,34,36,1,1,1,1,0,34,36,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,36,1,1,34,36,34,36,34,36,1,0,0,0,40,0,43,43,43,43,43,43,43,43,43,41,40,43,43,41,40,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,41,43,43,43,43,43,43,43,43,43,43,41,43,43,43,43,43,43,43,40,0,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,41,40,43,43,43,43,43,43,41,41,43,41,40,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,40,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,41,41,43,43,43,43,43,43,43,43,43,41,40,43,41,40,43,43,43,43,43,43,43,43,43,41,40,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,38,38,35,35,35,35,0,0,0,31,32,31,32,33,85,33,38,35,85,33,38,35,85,0,0,0,85,85,85,33,38,35,35,85,33,38,35,85,85,85,33,38,35,85,33,38,35,85,33,38,35,85,0,0,0,0,0,0,111,109,110,112,111,109,110,112,16,109,110,111,109,110,112,111,109,110,112,15,111,112,111,109,110,112,111,109,110,112,111,109,110,112,16,109,110,0,4,0,0,0,1,1,0,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,17,17,17,17,0,0,0,0,4,1,1,1,113,6,1,113,1,116,117,114,6,17,113,1,116,117,114,6,17,1,1,1,113,6,6,1,1,1,113,1,1,1,1,1,1,1,114,1,1,113,6,1,1,1,1,1,1,1,1,1,1,1,6,6,1,6,17,4,18,18,113,1,116,117,114,6,17,116,117,114,116,117,114,113,113,1,1,1,113,113,18,1,113,1,116,117,114,6,17,116,117,114,1,1,1,1,121,1,1,1,1,1,1,1,113,19,1,1,1,1,116,117,114,1,117,1,116,114,1,18,1,1,113,1,1,1,1,1,116,117,114,1,1,113,1,1,1,1,1,121,115,1,1,1,1,1,1,1,1,1,1,1,1,18,1,6,1,1,113,1,116,117,114,6,17,113,1,116,117,114,6,17,113,1,116,117,114,6,17,6,1,0,0,122,122,122,122,0,0,122,122,122,122,122,122,4,0,0,0,0,0,0,0,0,0,0,0,0,0,17,17,17,17,0,0,0,0,4,1,1,1,113,6,1,118,119,120,118,119,120,1,1,1,118,119,120,1,1,1,113,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,120,1,118,119,120,4,18,18,118,119,120,118,119,120,118,119,120,1,1,1,113,18,1,118,119,120,118,119,120,1,1,1,1,121,1,1,1,1,1,1,1,113,19,1,1,1,118,119,120,118,119,120,1,18,1,1,113,1,1,1,1,1,1,1,1,1,1,1,1,121,115,1,1,1,1,1,1,1,1,1,1,1,1,18,1,1,1,118,119,120,118,119,120,118,119,120,6,1,118,119,120,0],"f":[0,0,0,[[[1,[-1,-2,-3]]],2,[[4,[3]]],[[4,[5]]],[[4,[6]]]],[[[1,[-1,-2,-3]]],2,[[4,[3]]],[[4,[5]]],[[4,[6]]]],0,[[[1,[-1,-2,-3]],7],[[8,[3]]],[[4,[3]]],[[4,[5]]],[[4,[6]]]],[[-1,-2],[[11,[9,10]]],12,13],[[-1,-2,[8,[3]],[8,[3]],-3,-4,-5],[[11,[9,10]]],12,13,[[4,[3]]],[[4,[5]]],[[4,[6]]]],[[-1,-2,[8,[3]],[8,[3]],[14,[3]]],[[11,[9,10]]],12,13],[[-2,-3,[8,[3]],[8,[3]],-4,-5,-6,-1],[[11,[9,-1]]],[],[[15,[-1]]],[[16,[-1]]],[[4,[3]]],[[4,[5]]],[[4,[6]]]],[[-2,-3,[8,[3]],[8,[3]],-4,-5,-6,-1],[[11,[9,-1]]],[],[[15,[-1]]],[[16,[-1]]],[[4,[3]]],[[4,[5]]],[[4,[6]]]],[[7,7,[8,[3]],7,7,[8,[3]],7,[1,[-1,-2,-3]]],17,[[4,[3]]],[[4,[5]]],[[4,[6]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[-1,7],[],[]],[[[18,[-1,-2]],7],[[19,[-1]]],[],[[20,[[8,[-1]]]]]],[[21,7],[[22,[-1]]],[23,24]],0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[[[8,[3]],[8,[3]]],25],[[[8,[3]],[8,[3]],[8,[3]],[8,[5]],[8,[6]]],25],0,0,[[[8,[-1]]],9,24],[21,21],[[-1,-2],9,[],[]],0,0,0,0,0,0,0,0,0,0,[[-1,-2],[[26,[7]]],12,13],0,0,0,0,[[],[[19,[-1]]],[]],[[],21],[[[19,[-1]]],[[8,[-1]]],[]],[[[19,[-1]]],[[8,[-1]]],[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[21,27],[[11,[9,28]]]],[-1,9,[]],[[[18,[-1,-2]],[19,[-1]]],9,[],[[20,[[8,[-1]]]]]],[[21,[22,[-1]]],9,[23,24]],0,0,[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],0,0,0,0,[[[19,[-1]],[29,[7]]],[],[]],[[[19,[-1]],7],[],[]],[[[19,[-1]],7],[],[]],[[[19,[-1]],[29,[7]]],[],[]],0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,[-1,7,[]],[-1,7,[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,[[8,[-2]]],[],[]],[[[19,[-1]]],[[8,[-1]]],[]],[-1,[[8,[-2]]],[],[]],[[[19,[-1]]],[[8,[-1]]],[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],0,0,0,[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[31,32,33],34],[[7,3,7,3],35],[[7,3,7,3,7,3,7,5,7,6],25],[[34,7,3,7,3,7],35],[[34,7,3,7,3],35],[[7,3,7,3],25],[34,9],0,[36,3],[[34,3,7],9],[[34,7,7],9],[34,36],[34,3],[34,37],[34,37],[34,37],[[34,7],3],[[34,7],7],[[34,38,5],9],0,[[34,7],3],[[],5],0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,[36,36],[[-1,-2],9,[],[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[36,27],39],[-1,-1,[]],[-1,-1,[]],0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[7,[[8,[-1]]],[]],[7,[[8,[-1]]],[]],0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],0,0,[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,30,[]],[-1,30,[]],0,0,0,0,[[40,7],[[41,[-1]]],[42,24,23]],[7],[[[43,[-1,-2]]],-2,42,44],[[[43,[-1]]],45,46],[[[43,[-1,-2]]],-1,42,44],[[[43,[-1,-2]]],-1,42,44],[[[43,[-1]]],47,48],[[[43,[[8,[[49,[-1]]]],-2]]],[[43,[[8,[-1]],-2]]],[],44],[[[43,[[49,[-1]],-2]]],[[43,[-1,-2]]],[],44],[-1,-2,[],[]],[[[43,[-1,-2]]],-1,42,44],[-1,-2,[],[]],[-1,-2,[],[]],[[[43,[-1,-2]]],-1,42,44],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[43,[-2,-3]],-1],[],50,[[51,[-1]],42],44],[[[43,[-2,-3]],-1],[],50,[[52,[-1]],42],44],[[[43,[-2,-3]],-1],[],50,[[53,[-1]],42],44],[[[43,[-1]]],[[55,[54]]],54],[[[43,[[8,[-1]],-2]]],[[43,[[8,[-1]],-2]]],23,[44,23]],[[[43,[56]]],[[43,[56]]]],[[[43,[57]]],[[43,[57]]]],[[[43,[58]]],[[43,[58]]]],[[[43,[-1,-2]]],[[43,[-1,-2]]],23,[44,23]],[[[43,[59]]],[[43,[59]]]],[[[43,[-1,-2]],[43,[-1,-2]]],9,23,[44,23]],[[[43,[[8,[-1]],-2]],[43,[[8,[-1]],-2]]],9,23,[44,23]],[[-1,-2],9,[],[]],[[[43,[-1,-2]],[43,[-1,-2]]],60,[61,42],44],[[[43,[-1]],7],9,[62,42]],[[],[[43,[[8,[-1]]]]],[]],[[],[[43,[59]]]],[[],[[43,[-1]]],24],[[],[[43,[56]]]],[[],[[43,[58]]]],[[],[[41,[-1]]],[42,24]],[[[43,[-1,-2]]],-1,42,44],[[[43,[-1,-2]]],-1,42,44],[[[43,[-1]]],56,54],[[[43,[63,-1]]],[[11,[[43,[-2,-1]],[43,[63,-1]]]]],44,63],[[[43,[63,-1]]],[[11,[[43,[-2,-1]],[43,[63,-1]]]]],44,63],[[[43,[63,-1]]],[[11,[[43,[-2,-1]],[43,[63,-1]]]]],44,63],[[[43,[63,-1]]],[[43,[-2,-1]]],44,63],[[[43,[63,-1]]],[[43,[-2,-1]]],44,63],[[[43,[63,-1]]],[[43,[-2,-1]]],44,63],[[[43,[-1,-2]]],9,42,44],[[[41,[-1]]],9,[42,24]],[[[43,[-1,-2]],[43,[-1,-2]]],2,[64,42],44],[[[43,[-1]]],[[11,[[8,[3]],10]]],[62,42]],[[[43,[-1,-2]]],65,[66,42],44],[[[43,[-1]]],[[11,[9,10]]],[13,42]],[[[43,[-1,-2]],27],[[11,[9,28]]],42,44],[[[43,[-1,-2]],27],[[11,[9,28]]],[67,42],44],[[[43,[-1,-2]],27],[[11,[9,28]]],[68,42],44],[[40,[41,[-1]]],9,[42,24,23]],[7,9],[69,[[43,[56]]]],[[[70,[58]]],[[43,[58]]]],[-1,-1,[]],[69,[[43,[54]]]],[-1,[[43,[-1]]],[]],[56,[[43,[54]]]],[[[70,[[8,[-1]]]]],[[43,[[8,[-1]]]]],23],[-1,[[43,[54]]],54],[71,[[43,[59]]]],[[[14,[-1,-2]]],[[43,[[8,[-1]],-2]]],[],44],[59,[[43,[59]]]],[56,[[43,[54]]]],[[[70,[56]]],[[43,[54]]]],[[[70,[56]]],[[43,[54]]]],[[[70,[56]]],[[43,[56]]]],[56,[[43,[56]]]],[[[8,[-1]]],[[43,[[8,[-1]]]]],23],[[[72,[-1]]],[[43,[[8,[-1]]]]],[]],[57,[[43,[57]]]],[[[70,[57]]],[[43,[57]]]],[58,[[43,[58]]]],[73,[[43,[58]]]],[69,[[43,[54]]]],[74,[[43,[57]]]],[-1,[[43,[54]]],[54,75,76]],[[[70,[59]]],[[43,[59]]]],[77,-1,[]],[[[43,[56,-1]]],[[43,[[8,[3]],-1]]],44],[-1,-1,[]],[-1,-1,[]],[-1,[[43,[[8,[-2]]]]],78,[]],[[],[[43,[-1]]],42],[-1,[[43,[-2,-1]]],44,42],[[[43,[-1,-2]],[43,[-1,-2]]],2,[79,42],44],[[[43,[-1,-2]],[43,[-1,-2]]],2,[79,42],44],[[[43,[-1,-2]],-3],9,[80,42],44,66],[[[41,[-1]],7],-1,[42,24]],[[[41,[-1]],7],-1,[42,24]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[43,[-1,-2]]],[[43,[[8,[-1]],-2]]],[],44],[-1,[],[]],[[[43,[-1,-2]]],-1,[],44],[-1,-2,[],[]],[[[43,[-1,-2]]],[[81,[[43,[-1,-2]]]]],42,44],[[[43,[-1,-2]]],[],42,44],[[[43,[-1,-2]]],[[9,[-2]]],42,44],[[-1,56],[[82,[-2]]],[],[]],[[-1,56],2,[]],[[[43,[-1,-2]]],2,[83,42],44],[[-1,56],2,[]],[[[43,[-1]]],2,[12,42]],[[-1,56],2,[]],[[[43,[-1]]],2,[13,42]],[[[43,[-1,-2]]],55,[84,42],44],[[[43,[-1,-2]],[43,[-1,-2]]],2,[79,42],44],[[[43,[-1,-2]]],-1,42,44],[[[43,[-1,-2]]],7,[83,42],44],[[[43,[-1,-2]],[43,[-1,-2]]],2,[79,42],44],[[[43,[-1,-2]],[43,[-1,-2]]],2,[64,42],44],[-1,[[43,[-1]]],[]],[85,40],[[-1,-2],[[43,[-1,-2]]],[],[44,44]],[[],[[43,[[49,[-1]]]]],[]],[-1,[[43,[[49,[-2]],-1]]],[44,44],[]],[7,[[43,[[8,[[49,[-1]]]]]]],[]],[[7,-1],[[43,[[8,[[49,[-2]]]],-1]]],44,[]],[[],[[43,[[49,[-1]]]]],[]],[-1,[[43,[[49,[-2]],-1]]],[44,44],[]],[7,[[43,[[8,[[49,[-1]]]]]]],[]],[[7,-1],[[43,[[8,[[49,[-2]]]],-1]]],44,[]],[[[43,[-1,-2]]],55,[84,42],44],[[[43,[-1,-2]]],55,[86,42],44],[[[43,[-1,-2]],7],55,[84,42],44],[[[43,[-1,-2]],7],55,[86,42],44],[[[43,[-1,-2]],[43,[-1,-2]]],[[55,[60]]],[79,42],44],[-1,[[81,[[43,[-1]]]]],[]],[[-1,-2],[[81,[[43,[-1,-2]]]]],[],[44,44]],[[[81,[[43,[-1,-2]]]],87],88,[89,90,42],44],[[[81,[[43,[-1]]]],87],[[88,[55]]],[91,90,42]],[[[43,[-1]],92],9,54],[[[43,[-1]],[8,[3]]],[[11,[7,10]]],[12,42]],[[[43,[-1]],93],[[11,[9,10]]],[12,42]],[[[43,[-1]],[8,[3]]],[[11,[9,10]]],[12,42]],[[[43,[-1]],69],[[11,[7,10]]],[62,42]],[[[43,[-1]],[14,[3]]],[[11,[7,10]]],[12,42]],[[[43,[-1]],69],[[11,[7,10]]],[12,42]],[[[43,[-1]],3,[14,[3]]],[[11,[7,10]]],[62,42]],[[[43,[-1]],[8,[94]]],[[11,[7,10]]],[12,42]],[[[81,[[43,[-2,-3]]]],-1],95,[],[[96,[-1]],90,42],44],[[[43,[-1]],97],[[11,[65,10]]],[98,42]],[[[43,[-1]]],[[9,[7,[55,[7]]]]],[91,90,42]],[[[43,[-1,-2]]],[[9,[7,[55,[7]]]]],[84,42],44],[[[41,[-1]]],[[8,[-1]]],[42,24]],[[[41,[-1]]],[[8,[-1]]],[42,24]],[[[43,[-1]]],[[55,[54]]],54],[[[43,[-1]]],[[11,[65,10]]],[98,42]],[[-1,56],[[55,[56]]],[]],[[-1,56],[[55,[56]]],[]],[-1,-2,[],[]],[-1,69,[]],[[[14,[-1]]],[[11,[[43,[[72,[-1]]]]]]],[]],[[[43,[[8,[-1]]]]],[[11,[[43,[[72,[-1]]]]]]],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[[43,[-1]],99]]],[]],[[-1,-2],[[11,[[43,[-1,-2]],99]]],[],[44,44]],[[],[[11,[[43,[[49,[-1]]]],99]]],[]],[-1,[[11,[[43,[[49,[-2]],-1]],99]]],[44,44],[]],[7,[[11,[[43,[[8,[[49,[-1]]]]]],99]]],[]],[[],[[11,[[43,[[49,[-1]]]],99]]],[]],[-1,[[11,[[43,[[49,[-2]],-1]],99]]],[44,44],[]],[7,[[11,[[43,[[8,[[49,[-1]]]]]],99]]],[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[[[43,[-1,-2]],[8,[3]]],9,[66,42],44],[[[43,[[49,[-1]],-2]],-1],[[43,[-1,-2]]],[],44],[[[43,[-1]],[8,[3]]],[[11,[7,10]]],[13,42]],[[[43,[-1]],[8,[3]]],[[11,[9,10]]],[13,42]],[[[43,[-1]],100],[[11,[9,10]]],[13,42]],[[[43,[-1,-2]],101],9,[66,42],44],[[[43,[-1,-2]],102],9,[66,42],44],[[[43,[-1,-2]],37],9,[66,42],44],[[[43,[-1,-2]],103],9,[66,42],44],[[[43,[-1,-2]],104],9,[66,42],44],[[[43,[-1,-2]],105],9,[66,42],44],[[[43,[-1,-2]],7],9,[66,42],44],[[[43,[-1,-2]],56],9,[66,42],44],[[[43,[-1,-2]],106],9,[66,42],44],[[[43,[-1,-2]],107],9,[66,42],44],[[[43,[-1,-2]],5],9,[66,42],44],[[[43,[-1,-2]],65],9,[66,42],44],[[[43,[-1,-2]],3],9,[66,42],44],[[[43,[-1,-2]],7],9,[66,42],44],[[[43,[-1]],[8,[108]]],[[11,[7,10]]],[13,42]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,[85,85],[[-1,-2],9,[],[]],0,[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[17,35],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[-1,-2,[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[11,[9,-2]]],[],[]],[[[109,[-1]]],[[11,[9,10]]],13],[[[110,[-1]]],[[11,[9,10]]],13],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[-1,[8,[3]]],[[11,[7,-2]]],[],[]],[[[111,[-1]],[8,[3]]],[[11,[7,10]]],12],[[[112,[-1]],[8,[3]]],[[11,[7,10]]],12],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[[-1,[8,[3]]],[[11,[7,-2]]],[],[]],[[[109,[-1]],[8,[3]]],[[11,[7,10]]],13],[[[110,[-1]],[8,[3]]],[[11,[7,10]]],13],[[-2,[8,[3]]],[[11,[9,-1]]],[],[[16,[-1]]]],0,0,0,[[7,7,[8,[3]],7,7,[8,[3]],7,[1,[-1,-2,-3]]],17,[[4,[3]]],[[4,[5]]],[[4,[6]]]],0,0,0,0,[[[1,[-1,-2,-3]]],9,[[4,[3]]],[[4,[5]]],[[4,[6]]]],[[[1,[-1,-2,-3]]],2,[[4,[3]]],[[4,[5]]],[[4,[6]]]],[[[1,[-1,-2,-3]]],2,[[4,[3]]],[[4,[5]]],[[4,[6]]]],[[[1,[-1,-2,-3]]],9,[[4,[3]]],[[4,[5]]],[[4,[6]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[-1,7],[],[]],0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,[[[113,[-1,-2]]],[[72,[[8,[6]]]]],[[4,[5]]],[[4,[6]]]],[6,6],[[-1,-2],9,[],[]],0,0,0,0,0,0,0,0,0,0,0,[[[114,[-1,-2,-3,-4,-5,-6]]],9,[],[[15,[-1]]],[[115,[3]]],[[4,[3]]],[[4,[5]]],[[4,[6]]]],0,0,[[],[[113,[-1,-2]]],[[4,[5]]],[[4,[6]]]],[[],6],0,0,0,0,0,0,0,0,0,0,[[[1,[-1,-2,-3]]],9,[[4,[3]]],[[4,[5]]],[[4,[6]]]],[[6,6],2],[[6,6],2],0,[[6,27],39],[[17,27],39],[-1,9,[]],0,0,[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[[116,[-1,-2,-3,-4,-5]]],-1,12,[[115,[3]]],[[4,[3]]],[[4,[5]]],[[4,[6]]]],[[[117,[-1]]],-1,12],[[[114,[-1,-2,-3,-4,-5,-6]]],-2,[],[[15,[-1]]],[[115,[3]]],[[4,[3]]],[[4,[5]]],[[4,[6]]]],[[[116,[-1,-2,-3,-4,-5]]],-1,12,[[115,[3]]],[[4,[3]]],[[4,[5]]],[[4,[6]]]],[[[117,[-1]]],-1,12],[[[114,[-1,-2,-3,-4,-5,-6]]],-2,[],[[15,[-1]]],[[115,[3]]],[[4,[3]]],[[4,[5]]],[[4,[6]]]],[[[113,[-1,-2]],5],[[8,[6]]],[[4,[5]]],[[4,[6]]]],[[[113,[-1,-2]],5],[[8,[6]]],[[4,[5]]],[[4,[6]]]],0,0,0,0,[[[113,[-1,-2]],-1,-2,107,107,107],9,[[4,[5]]],[[4,[6]]]],0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[116,[-1,-2,-3,-4,-5]]],-1,12,[[115,[3]]],[[4,[3]]],[[4,[5]]],[[4,[6]]]],[[[117,[-1]]],-1,12],[[[114,[-1,-2,-3,-4,-5,-6]]],-2,[],[[15,[-1]]],[[115,[3]]],[[4,[3]]],[[4,[5]]],[[4,[6]]]],0,0,0,0,[-1,7,[]],0,0,0,0,0,0,0,0,0,0,0,0,[[-1,-2,-3],[[1,[-1,-2,-3]]],[[4,[3]]],[[4,[5]]],[[4,[6]]]],[[-1,-2,-3,-4,-5],[[116,[-1,-2,-3,-4,-5]]],12,[[115,[3]]],[[4,[3]]],[[4,[5]]],[[4,[6]]]],[[-1,7],[[117,[-1]]],12],[[-2,-3,-4,-5,-6,-1],[[114,[-1,-2,-3,-4,-5,-6]]],[],[[15,[-1]]],[[115,[3]]],[[4,[3]]],[[4,[5]]],[[4,[6]]]],[[-1,-2,-3],[[1,[-1,-2,-3]]],[[4,[3]]],[[4,[5]]],[[4,[6]]]],[[-1,7],[[117,[-1]]],12],[[-1,-2,-3],[[1,[-1,-2,-3]]],[[4,[3]]],[[4,[5]]],[[4,[6]]]],[[-1,-2,-3,-4,-5],[[116,[-1,-2,-3,-4,-5]]],12,[[115,[3]]],[[4,[3]]],[[4,[5]]],[[4,[6]]]],[[-2,-3,-4,-5,-6,-1],[[114,[-1,-2,-3,-4,-5,-6]]],[],[[15,[-1]]],[[115,[3]]],[[4,[3]]],[[4,[5]]],[[4,[6]]]],0,0,0,0,0,0,0,0,0,0,[[[116,[-1,-2,-3,-4,-5]],[8,[3]]],[[11,[7,10]]],12,[[115,[3]]],[[4,[3]]],[[4,[5]]],[[4,[6]]]],[[[117,[-1]],[8,[3]]],[[11,[7,10]]],12],[[[114,[-1,-2,-3,-4,-5,-6]],[8,[3]]],[[11,[7,-1]]],[],[[15,[-1]]],[[115,[3]]],[[4,[3]]],[[4,[5]]],[[4,[6]]]],0,0,[[[113,[-1,-2]],-1,-2],9,[[4,[5]]],[[4,[6]]]],0,0,0,0,0,[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],0,0,[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],0,0,0,[[[8,[3]],[8,[3]],37,37],37],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-1,[]],[-1,-2,[],[]],0,0,0,0,0,[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,30,[]],0,0,0,[[7,7,[8,[3]],7,7,[8,[3]],7,[1,[-1,-2,-3]]],17,[[4,[3]]],[[4,[5]]],[[4,[6]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[-1,7],[],[]],0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,[[[118,[-1,-2,-3,-4,-5]]],[[11,[9,10]]],13,[[115,[3]]],[[4,[3]]],[[4,[5]]],[[4,[6]]]],[[[119,[-1]]],[[11,[9,10]]],13],[[[120,[-1,-2,-3,-4,-5,-6]]],[[11,[9,-1]]],[],[[16,[-1]]],[[115,[3]]],[[4,[3]]],[[4,[5]]],[[4,[6]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[[120,[-1,-2,-3,-4,-5,-6]]],9,[],[[16,[-1]]],[[115,[3]]],[[4,[3]]],[[4,[5]]],[[4,[6]]]],0,[[[118,[-1,-2,-3,-4,-5]]],[[11,[9,10]]],13,[[115,[3]]],[[4,[3]]],[[4,[5]]],[[4,[6]]]],[[[119,[-1]]],[[11,[9,10]]],13],[[[120,[-1,-2,-3,-4,-5,-6]]],[[11,[9,-1]]],[],[[16,[-1]]],[[115,[3]]],[[4,[3]]],[[4,[5]]],[[4,[6]]]],[-1,9,[]],0,0,[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[[118,[-1,-2,-3,-4,-5]]],-1,13,[[115,[3]]],[[4,[3]]],[[4,[5]]],[[4,[6]]]],[[[119,[-1]]],-1,13],[[[120,[-1,-2,-3,-4,-5,-6]]],-2,[],[[16,[-1]]],[[115,[3]]],[[4,[3]]],[[4,[5]]],[[4,[6]]]],[[[118,[-1,-2,-3,-4,-5]]],-1,13,[[115,[3]]],[[4,[3]]],[[4,[5]]],[[4,[6]]]],[[[119,[-1]]],-1,13],[[[120,[-1,-2,-3,-4,-5,-6]]],-2,[],[[16,[-1]]],[[115,[3]]],[[4,[3]]],[[4,[5]]],[[4,[6]]]],0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[118,[-1,-2,-3,-4,-5]]],[[11,[-1,-1]]],13,[[115,[3]]],[[4,[3]]],[[4,[5]]],[[4,[6]]]],[[[119,[-1]]],[[11,[-1,-1]]],13],[[[120,[-1,-2,-3,-4,-5,-6]]],[[11,[-2,-2]]],[],[[16,[-1]]],[[115,[3]]],[[4,[3]]],[[4,[5]]],[[4,[6]]]],0,0,0,0,[-1,7,[]],0,0,0,0,0,0,0,0,0,0,0,0,[[-1,-2,-3,-4,-5],[[118,[-1,-2,-3,-4,-5]]],13,[[115,[3]]],[[4,[3]]],[[4,[5]]],[[4,[6]]]],[[-1,7],[[119,[-1]]],13],[[-2,-3,-4,-5,-6,-1],[[120,[-1,-2,-3,-4,-5,-6]]],[],[[16,[-1]]],[[115,[3]]],[[4,[3]]],[[4,[5]]],[[4,[6]]]],[[-1,-2,-3,-4,-5],[[118,[-1,-2,-3,-4,-5]]],13,[[115,[3]]],[[4,[3]]],[[4,[5]]],[[4,[6]]]],[[-1,7],[[119,[-1]]],13],[[-2,-3,-4,-5,-6,-1],[[120,[-1,-2,-3,-4,-5,-6]]],[],[[16,[-1]]],[[115,[3]]],[[4,[3]]],[[4,[5]]],[[4,[6]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],0,0,[[[118,[-1,-2,-3,-4,-5]],[8,[3]]],[[11,[7,10]]],13,[[115,[3]]],[[4,[3]]],[[4,[5]]],[[4,[6]]]],[[[119,[-1]],[8,[3]]],[[11,[7,10]]],13],[[[120,[-1,-2,-3,-4,-5,-6]],[8,[3]]],[[11,[7,-1]]],[],[[16,[-1]]],[[115,[3]]],[[4,[3]]],[[4,[5]]],[[4,[6]]]],[[-2,[8,[3]]],[[11,[9,-1]]],[],[[16,[-1]]]]],"c":[],"p":[[3,"BrotliState",652],[15,"bool"],[15,"u8"],[8,"Allocator",0],[15,"u32"],[3,"HuffmanCode",652],[15,"usize"],[15,"slice"],[15,"tuple"],[3,"Error",1045],[4,"Result",1046],[8,"Read",1047],[8,"Write",1047],[3,"Vec",1048],[8,"CustomRead",608],[8,"CustomWrite",608],[4,"BrotliResult",652],[3,"StackAllocator",0],[3,"AllocatedStackMemory",0],[8,"AllocatedSlice",1049],[3,"StandardAlloc",0],[3,"WrapBox",1050],[8,"Clone",1051],[8,"Default",1052],[3,"BrotliDecoderReturnInfo",0],[6,"Result",1045],[3,"Formatter",1053],[3,"Error",1053],[3,"Range",1054],[3,"TypeId",1055],[6,"brotli_alloc_func",556],[6,"brotli_free_func",556],[4,"c_void",556],[3,"BrotliDecoderState",198],[4,"BrotliDecoderResult",556],[4,"BrotliDecoderErrorCode",198],[15,"i32"],[4,"BrotliDecoderParameter",556],[6,"Result",1053],[3,"SubclassableAllocator",354],[3,"MemoryBlock",354],[8,"Sized",1056],[3,"Box",354],[8,"Allocator",1057],[3,"BorrowedHandle",1058],[8,"AsHandle",1058],[3,"BorrowedSocket",1059],[8,"AsSocket",1059],[19,"MaybeUninit",1060],[8,"Tuple",1056],[8,"Fn",1061],[8,"FnMut",1061],[8,"FnOnce",1061],[8,"Error",1062],[4,"Option",1063],[15,"str"],[3,"Path",1064],[3,"OsStr",1065],[3,"CStr",1066],[4,"Ordering",1067],[8,"Ord",1067],[8,"BufRead",1047],[8,"Any",1055],[8,"PartialEq",1067],[15,"u64"],[8,"Hasher",1068],[8,"Display",1053],[8,"Debug",1053],[3,"String",1069],[4,"Cow",1070],[3,"CString",1071],[15,"array"],[3,"OsString",1065],[3,"PathBuf",1064],[8,"Send",1056],[8,"Sync",1056],[15,"never"],[8,"IntoIterator",1072],[8,"PartialOrd",1067],[8,"Hash",1068],[3,"Pin",1073],[3,"CharPredicateSearcher",1074],[8,"ExactSizeIterator",1075],[8,"Iterator",1076],[3,"CAllocator",556],[8,"DoubleEndedIterator",1077],[3,"Context",1078],[4,"Poll",1079],[8,"Future",1080],[8,"Unpin",1056],[8,"AsyncIterator",1081],[3,"Request",1062],[3,"BorrowedCursor",1082],[3,"IoSliceMut",1047],[4,"CoroutineState",1083],[8,"Coroutine",1083],[4,"SeekFrom",1047],[8,"Seek",1047],[3,"AllocError",1057],[3,"Arguments",1053],[15,"i128"],[15,"i16"],[15,"i64"],[15,"i8"],[15,"isize"],[15,"u128"],[15,"u16"],[3,"IoSlice",1047],[3,"IntoIoWriter",608],[3,"IoWriterWrapper",608],[3,"IntoIoReader",608],[3,"IoReaderWrapper",608],[3,"HuffmanTreeGroup",652],[3,"DecompressorCustomIo",652],[8,"SliceWrapperMut",0],[3,"DecompressorCustomAlloc",652],[3,"Decompressor",652],[3,"DecompressorWriterCustomAlloc",879],[3,"DecompressorWriter",879],[3,"DecompressorWriterCustomIo",879],[8,"SliceWrapper",0],[3,"Transform",865]],"b":[[108,"impl-Index%3CRange%3Cusize%3E%3E-for-AllocatedStackMemory%3C\'a,+T%3E"],[109,"impl-Index%3Cusize%3E-for-AllocatedStackMemory%3C\'a,+T%3E"],[110,"impl-IndexMut%3Cusize%3E-for-AllocatedStackMemory%3C\'a,+T%3E"],[111,"impl-IndexMut%3CRange%3Cusize%3E%3E-for-AllocatedStackMemory%3C\'a,+T%3E"],[364,"impl-Box%3C%5BMaybeUninit%3CT%3E%5D,+A%3E"],[365,"impl-Box%3CMaybeUninit%3CT%3E,+A%3E"],[378,"impl-Clone-for-Box%3C%5BT%5D,+A%3E"],[379,"impl-Clone-for-Box%3Cstr%3E"],[380,"impl-Clone-for-Box%3CPath%3E"],[381,"impl-Clone-for-Box%3COsStr%3E"],[382,"impl-Clone-for-Box%3CT,+A%3E"],[383,"impl-Clone-for-Box%3CCStr%3E"],[384,"impl-Clone-for-Box%3CT,+A%3E"],[385,"impl-Clone-for-Box%3C%5BT%5D,+A%3E"],[389,"impl-Default-for-Box%3C%5BT%5D%3E"],[390,"impl-Default-for-Box%3CCStr%3E"],[391,"impl-Default-for-Box%3CT%3E"],[392,"impl-Default-for-Box%3Cstr%3E"],[393,"impl-Default-for-Box%3COsStr%3E"],[398,"impl-Box%3Cdyn+Any+%2B+Send+%2B+Sync,+A%3E"],[399,"impl-Box%3Cdyn+Any+%2B+Send,+A%3E"],[400,"impl-Box%3Cdyn+Any,+A%3E"],[401,"impl-Box%3Cdyn+Any+%2B+Send,+A%3E"],[402,"impl-Box%3Cdyn+Any+%2B+Send+%2B+Sync,+A%3E"],[403,"impl-Box%3Cdyn+Any,+A%3E"],[410,"impl-Pointer-for-Box%3CT,+A%3E"],[411,"impl-Display-for-Box%3CT,+A%3E"],[412,"impl-Debug-for-Box%3CT,+A%3E"],[415,"impl-From%3CString%3E-for-Box%3Cstr%3E"],[416,"impl-From%3CCow%3C\'_,+OsStr%3E%3E-for-Box%3COsStr%3E"],[418,"impl-From%3CString%3E-for-Box%3Cdyn+Error+%2B+Send+%2B+Sync%3E"],[419,"impl-From%3CT%3E-for-Box%3CT%3E"],[420,"impl-From%3C%26str%3E-for-Box%3Cdyn+Error%3E"],[421,"impl-From%3CCow%3C\'_,+%5BT%5D%3E%3E-for-Box%3C%5BT%5D%3E"],[422,"impl-From%3CE%3E-for-Box%3Cdyn+Error%3E"],[423,"impl-From%3CCString%3E-for-Box%3CCStr%3E"],[424,"impl-From%3CVec%3CT,+A%3E%3E-for-Box%3C%5BT%5D,+A%3E"],[425,"impl-From%3C%26CStr%3E-for-Box%3CCStr%3E"],[426,"impl-From%3C%26str%3E-for-Box%3Cdyn+Error+%2B+Send+%2B+Sync%3E"],[427,"impl-From%3CCow%3C\'a,+str%3E%3E-for-Box%3Cdyn+Error%3E"],[428,"impl-From%3CCow%3C\'b,+str%3E%3E-for-Box%3Cdyn+Error+%2B+Send+%2B+Sync%3E"],[429,"impl-From%3CCow%3C\'_,+str%3E%3E-for-Box%3Cstr%3E"],[430,"impl-From%3C%26str%3E-for-Box%3Cstr%3E"],[431,"impl-From%3C%26%5BT%5D%3E-for-Box%3C%5BT%5D%3E"],[432,"impl-From%3C%5BT;+N%5D%3E-for-Box%3C%5BT%5D%3E"],[433,"impl-From%3C%26Path%3E-for-Box%3CPath%3E"],[434,"impl-From%3CCow%3C\'_,+Path%3E%3E-for-Box%3CPath%3E"],[435,"impl-From%3C%26OsStr%3E-for-Box%3COsStr%3E"],[436,"impl-From%3COsString%3E-for-Box%3COsStr%3E"],[437,"impl-From%3CString%3E-for-Box%3Cdyn+Error%3E"],[438,"impl-From%3CPathBuf%3E-for-Box%3CPath%3E"],[439,"impl-From%3CE%3E-for-Box%3Cdyn+Error+%2B+Send+%2B+Sync%3E"],[440,"impl-From%3CCow%3C\'_,+CStr%3E%3E-for-Box%3CCStr%3E"],[442,"impl-From%3CBox%3Cstr,+A%3E%3E-for-Box%3C%5Bu8%5D,+A%3E"],[507,"impl-AsyncIterator-for-Box%3CS%3E"],[508,"impl-Iterator-for-Box%3CI,+A%3E"],[517,"impl-TryFrom%3CVec%3CT%3E%3E-for-Box%3C%5BT;+N%5D%3E"],[518,"impl-TryFrom%3CBox%3C%5BT%5D%3E%3E-for-Box%3C%5BT;+N%5D%3E"],[536,"impl-Hasher-for-Box%3CT,+A%3E"],[537,"impl-Box%3CMaybeUninit%3CT%3E,+A%3E"],[538,"impl-Write-for-Box%3CW%3E"],[736,"impl-PartialEq-for-HuffmanCode"],[737,"impl-HuffmanCode"]]},\
"brotlic":{"doc":"Brotlic","t":"DCCCCDECCDCCNNNDNNNNNNDDENDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFFFAFLLLLLLLALLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLNNNNNNDDNEDEDDNNNNNNNNNNNNNNNNNNNNNNNDLLLLLLLLLLLLLLLLLMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDDEDDDDNNNDLLLLLLLLLLLLLLLLLLMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL","n":["BlockSize","BrotliDecoder","BrotliDecoderOptions","BrotliEncoder","BrotliEncoderOptions","CompressError","CompressionMode","CompressorReader","CompressorWriter","DecompressError","DecompressorReader","DecompressorWriter","Font","Generic","Generic","IntoInnerError","InvalidBlockSize","InvalidDirectDistanceCodes","InvalidPostfix","InvalidQuality","InvalidStreamOffset","InvalidWindowSize","LargeWindowSize","Quality","SetParameterError","Text","WindowSize","best","best","best","best","bits","bits","bits","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmp","cmp","cmp","compress","compress_bound","compress_estimate_max_mem_usage","decode","decompress","default","default","default","default","default","default","default","encode","eq","eq","eq","eq","eq","eq","eq","eq","error","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","into","into","into","into","into","into","into","into","into","into_error","into_inner","into_parts","level","new","new","new","new","new_unchecked","new_unchecked","new_unchecked","new_unchecked","partial_cmp","partial_cmp","partial_cmp","partial_cmp","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","worst","worst","worst","worst","AllocBlockTypeTrees","AllocContextMap","AllocContextModes","AllocRingBuffer1","AllocRingBuffer2","AllocTreeGroups","BrotliDecoder","BrotliDecoderOptions","CompoundDictionary","DecodeError","DecodeResult","DecoderInfo","DecompressorReader","DecompressorWriter","DictionaryNotSet","Finished","FormatBlockLength1","FormatBlockLength2","FormatClSpace","FormatContextMapRepeat","FormatDictionary","FormatDistance","FormatExuberantMetaNibble","FormatExuberantNibble","FormatHuffmanSpace","FormatPadding1","FormatPadding2","FormatReserved","FormatSimpleHuffmanAlphabet","FormatSimpleHuffmanSame","FormatTransform","FormatWindowBits","InvalidArguments","NeedsMoreInput","NeedsMoreOutput","UnknownError","Unreachable","WriterPanicked","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","build","bytes_read","bytes_written","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","decompress","default","default","disable_ring_buffer_reallocation","drop","eq","eq","eq","flush","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","get_mut","get_mut","get_ref","get_ref","give_input","has_output","info","into","into","into","into","into","into","into","into","into_inner","into_inner","into_inner","into_parts","into_parts","is_finished","large_window_size","new","new","new","new","read","take_output","to_owned","to_owned","to_owned","to_owned","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","version","with_decoder","with_decoder","write","BrotliEncoder","BrotliEncoderOptions","BrotliOperation","CompressorReader","CompressorWriter","EncodeError","EncodeResult","Finish","Flush","Process","WriterPanicked","block_size","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","build","bytes_read","bytes_written","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","compress","default","default","direct_distance_codes","disable_context_modeling","drop","drop","eq","eq","eq","finish","flush","flush","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","get_mut","get_mut","get_ref","get_ref","give_input","has_output","into","into","into","into","into","into","into","into","into_inner","into_inner","into_inner","into_parts","into_parts","is_finished","large_window_size","mode","new","new","new","new","postfix_bits","quality","read","size_hint","stream_offset","take_output","to_owned","to_owned","to_owned","to_owned","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","version","window_size","with_encoder","with_encoder","write"],"q":[[0,"brotlic"],[186,"brotlic::decode"],[340,"brotlic::encode"],[477,"core::cmp"],[478,"core::result"],[479,"core::option"],[480,"core::convert"],[481,"std::io::error"],[482,"core::fmt"],[483,"core::fmt"],[484,"core::any"],[485,"std::io::error"],[486,"std::io"]],"d":["The recommended input block size (in bits) to use for …","","","","","An error returned by <code>compress</code>.","Allows to tune a brotli compressor for a specific type of …","","","An error returned by <code>decompress</code>.","","","Tune compression for WOFF 2.0 fonts","No known attributes about the input data.","The encoder or decoder returned an error.","An error returned by <code>into_inner</code>.","Block size bits were out of range.","Direct distance codes were out of range or were given in …","Postfix bits were out of range.","The quality was out of range.","The stream offset was beyond its maximum offset.","sliding window size bits were out of range.","The large sliding window size (in bits) to use for …","Quality level of the brotli compression","An error returned by <code>BrotliEncoderOptions::build</code> and …","Tune compression for UTF-8 formatted text input.","The sliding window size (in bits) to use for compression.","The highest quality for brotli compression.","Constructs the best sliding window size to use for brotli …","Constructs the best large sliding window size to use for …","Constructs the best block size (in bits) to use for brotli …","Returns an integer representing the window size in bits.","Returns an integer representing the large window size in …","Returns an integer representing the block size in bits.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Read all bytes from <code>input</code> and compress them into <code>output</code>, …","Returns an upper bound for compression.","Returns peak memory usage for a given quality and window …","Module that contains the brotli decoder instances","Read all bytes from <code>input</code> and decompress them into <code>output</code>, …","Creates a new <code>Quality</code> using <code>default</code>. See its documentation …","The default quality to use for brotli compression.","Constructs the default sliding window size to use for …","Creates a new <code>WindowSize</code> using <code>default</code>. See its …","Creates a new <code>LargeWindowSize</code> using <code>default</code>. See its …","Constructs the default large sliding window size to use …","Creates a <code>CompressionMode</code> using <code>Generic</code>. See its …","Module that contains the brotli encoder instances","","","","","","","","","Returns the error which caused the call to <code>into_inner()</code> to …","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Constructs a <code>LargeWindowSize</code> from a <code>WindowSize</code>.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns the error which caused the <code>into_inner</code> call to …","Returns the instance which generated the error","Returns both the error and the instance that generated it. …","Returns an integer representing the quality level.","Attempts to create a new brotli compression quality.","Constructs a new sliding window size to use for brotli …","Constructs a new large sliding window size (in bits) to …","Constructs a new block size (in bits) to use for brotli …","Creates a new brotli compression quality without checking …","Constructs a new sliding window size (in bits) to use for …","Constructs a new large sliding window size (in bits) to …","Constructs a new block size (in bits) to use for brotli …","","","","","","","","","","","","","","","","","","Attempts to construct a <code>WindowSize</code> from a <code>LargeWindowSize</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","The worst quality to use for brotli compression.","Constructs the worst sliding window size to use for brotli …","Constructs the worst large sliding window size to use for …","Constructs the worst block size (in bits) to use for …","","","","","","","A reference to a brotli decoder.","Decompression options to be used for a <code>BrotliDecoder</code>.","","An error returned by <code>BrotliDecoder::decompress</code>.","A struct used by <code>BrotliDecoder::decompress</code>.","Additional information provided by the decoder on how …","Wraps a reader and decompresses its output.","Wraps a writer and decompresses its output.","","The decoder has finished decompressing all input data.","","","","","","","","","","","","","","","","","","The decoder needs more input to proceed decompression.","The decoder needs more output to proceed decompression.","","","Error returned from <code>DecompressorWriter::into_inner</code>, when …","","","","","","","","","","","","","","","","","Creates a brotli decoder using the specified settings.","The number of bytes read from <code>input</code>.","The number of bytes written to <code>output</code>.","","","","","","","","","Decompresses the input stream to the output stream.","","","Disable “canny” ring buffer allocation strategy.","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Gets a mutable reference to the underlying reader.","Gets a mutable reference to the underlying writer.","Gets a reference to the underlying reader","Gets a reference to the underlying writer","Convenience function to call method <code>Self::decompress</code> with …","Checks if the decoder has more output.","Information the decoder gave on whether its finished or …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Unwraps this <code>DecompressorReader&lt;R&gt;</code>, returning the …","Unwraps this <code>DecompressorWriter&lt;W&gt;</code>, returning the …","Returns the decoder that was used for decompression. It is …","Disassembles this <code>DecompressorReader&lt;R&gt;</code>, returning the …","Disassembles this <code>DecompressorWriter&lt;W&gt;</code>, returning the …","Checks if the decoder instance reached its final state.","Flag that determines if this decoder supports non standard …","Constructs a new brotli decoder instance.","Creates a new blank set decoder options.","Creates a new <code>DecompressorReader&lt;R&gt;</code> with a newly created …","Creates a new <code>DecompressorWriter&lt;W&gt;</code> with a newly created …","","Checks if the decoder has more output and if so, returns a …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the version of the C brotli decoder library.","Creates a new <code>DecompressorReader&lt;R&gt;</code> with a specified …","Creates a new <code>DecompressorWriter&lt;W&gt;</code> with a specified …","","A reference to a brotli encoder.","Compression options to be used for a <code>BrotliEncoder</code>.","The operation for the encoder to process.","Wraps a reader and compresses its output.","Wraps a writer and compresses its output.","An error returned by <code>BrotliEncoder::compress</code>.","A struct used by <code>BrotliEncoder::compress</code>.","Instructs the encoder to commit a finish operation. Care …","Instructs the encoder to commit a flushing operation. Care …","Instructs the encoder to keep processing input data.","Error returned from <code>CompressorWriter::into_inner</code>, when the …","The recommended input block size to use.","","","","","","","","","","","","","","","","","Creates a brotli encoder with the specified settings using …","the number of bytes read from <code>input</code>.","the number of bytes written to <code>output</code>.","","","","","","","","","Compresses input stream to output stream.","","","Recommended number of direct distance codes.","Disable “literal context modeling” format feature.","","","","","","Finalizes the encoding stream.","Attempts the flush the encoding stream.","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Gets a mutable reference to the underlying reader.","Gets a mutable reference to the underlying writer.","Gets a reference to the underlying reader","Gets a reference to the underlying writer","Convenience function to call method <code>Self::compress</code> with …","Checks if the encoder has more output.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Unwraps this <code>CompressorReader&lt;R&gt;</code>, returning the underlying …","Unwraps this <code>CompressorWriter&lt;W&gt;</code>, returning the underlying …","Returns the encoder that was used for compression. It is …","Disassembles this <code>CompressorReader&lt;R&gt;</code>, returning the …","Disassembles this <code>CompressorWriter&lt;W&gt;</code>, returning the …","Checks if the encoder instance reached its final state.","The non-standard large window size to use. For more …","Allows to tune a brotli compressor for a specific type of …","Constructs a new brotli encoder instance.","Creates a new blank set encoder options.","Creates a new <code>CompressorReader&lt;R&gt;</code> with a newly created …","Creates a new <code>CompressorWriter&lt;W&gt;</code> with a newly created …","The number of postfix bits to use","The main compression speed-desnity lever. Higher quality …","","Estimated total input size.","Number of bytes already processed by a different instance.","Checks if the encoder has more output and if so, returns a …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the version of the C brotli encoder library.","Recommended sliding LZ77 window size according to RFC7932 …","Creates a new <code>CompressorReader&lt;R&gt;</code> with a specified encoder.","Creates a new <code>CompressorWriter&lt;W&gt;</code> with a specified encoder.",""],"i":[0,0,0,0,0,0,0,0,0,0,0,0,6,6,9,0,9,9,9,9,9,9,0,0,0,6,0,1,2,3,4,2,3,4,1,2,3,4,6,7,8,9,18,1,2,3,4,6,7,8,9,18,1,2,3,4,6,7,8,9,1,2,3,4,6,7,8,9,1,2,3,4,0,0,0,0,0,1,1,2,2,3,3,6,0,1,2,3,4,6,7,8,9,18,1,2,3,4,6,7,7,8,8,9,9,18,18,1,2,3,3,4,6,7,8,9,18,1,2,3,4,6,7,8,9,18,18,18,18,1,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,6,7,8,9,7,8,9,18,1,2,2,3,4,6,7,8,9,18,1,2,3,4,6,7,8,9,18,1,2,3,4,6,7,8,9,18,1,2,3,4,29,29,29,29,29,29,0,0,29,0,0,0,0,0,29,28,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,28,28,29,29,0,26,25,27,28,29,33,30,35,26,25,27,28,29,33,30,35,25,27,27,25,27,28,29,25,27,28,29,26,26,25,25,26,27,28,29,30,26,25,27,28,29,29,33,30,35,35,26,25,27,28,29,33,30,35,33,30,33,30,26,26,27,26,25,27,28,29,33,30,35,33,30,35,33,30,26,25,26,25,33,30,33,26,25,27,28,29,29,35,26,25,27,28,29,33,30,35,26,25,27,28,29,33,30,35,26,25,27,28,29,33,30,35,26,33,30,30,0,0,0,0,0,0,0,39,39,39,0,37,38,39,37,40,41,43,42,44,38,39,37,40,41,43,42,44,37,40,40,39,37,40,41,39,37,40,41,38,38,37,37,37,38,42,39,40,41,38,38,42,38,39,37,40,41,41,43,42,44,44,38,39,37,40,41,43,42,44,43,42,43,42,38,38,38,39,37,40,41,43,42,44,43,42,44,43,42,38,37,37,38,37,43,42,37,37,43,37,37,38,39,37,40,41,41,44,38,39,37,40,41,43,42,44,38,39,37,40,41,43,42,44,38,39,37,40,41,43,42,44,38,37,43,42,42],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[],1],[[],2],[[],3],[[],4],[2,5],[3,5],[4,5],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[1,1],[2,2],[3,3],[4,4],[6,6],[7,7],[8,8],[9,9],[[-1,-2],10,[],[]],[[-1,-2],10,[],[]],[[-1,-2],10,[],[]],[[-1,-2],10,[],[]],[[-1,-2],10,[],[]],[[-1,-2],10,[],[]],[[-1,-2],10,[],[]],[[-1,-2],10,[],[]],[[1,1],11],[[2,2],11],[[3,3],11],[[4,4],11],[[[12,[5]],[12,[5]],1,2,6],[[14,[13,7]]]],[[13,1],[[15,[13]]]],[[13,1,-1],13,[[16,[3]]]],0,[[[12,[5]],[12,[5]]],[[14,[13,8]]]],[[],1],[[],1],[[],2],[[],2],[[],3],[[],3],[[],6],0,[[1,1],17],[[2,2],17],[[3,3],17],[[4,4],17],[[6,6],17],[[7,7],17],[[8,8],17],[[9,9],17],[[[18,[-1]]],19,[]],[[1,20],21],[[2,20],21],[[3,20],21],[[4,20],21],[[6,20],21],[[7,20],21],[[7,20],21],[[8,20],21],[[8,20],21],[[9,20],21],[[9,20],21],[[[18,[-1]],20],21,[]],[[[18,[-1]],20],21,22],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[2,3],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[18,[-1]]],19,[]],[[[18,[-1]]],-1,[]],[[[18,[-1]]],[[10,[19,-1]]],[]],[1,5],[5,[[14,[1,9]]]],[5,[[14,[2,9]]]],[5,[[14,[3,9]]]],[5,[[14,[4,9]]]],[5,1],[5,2],[5,3],[5,4],[[1,1],[[15,[11]]]],[[2,2],[[15,[11]]]],[[3,3],[[15,[11]]]],[[4,4],[[15,[11]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,23,[]],[-1,23,[]],[-1,23,[]],[-1,23,[]],[-1,[[14,[-2]]],[],[]],[3,[[14,[2]]]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,24,[]],[-1,24,[]],[-1,24,[]],[-1,24,[]],[-1,24,[]],[-1,24,[]],[-1,24,[]],[-1,24,[]],[-1,24,[]],[[],1],[[],2],[[],3],[[],4],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[25,[[14,[26,9]]]],0,0,[25,25],[27,27],[28,28],[29,29],[[-1,-2],10,[],[]],[[-1,-2],10,[],[]],[[-1,-2],10,[],[]],[[-1,-2],10,[],[]],[[26,[12,[5]],[12,[5]]],[[14,[27,29]]]],[[],26],[[],25],[[25,17],25],[26,10],[[27,27],17],[[28,28],17],[[29,29],17],[[[30,[-1]]],[[31,[10]]],32],[[26,20],21],[[25,20],21],[[27,20],21],[[28,20],21],[[29,20],21],[[29,20],21],[[[33,[-1]],20],21,[22,34]],[[[30,[-1]],20],21,[22,32]],[[35,20],21],[[35,20],21],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[[33,[-1]]],-1,34],[[[30,[-1]]],-1,32],[[[33,[-1]]],-1,34],[[[30,[-1]]],-1,32],[[26,[12,[5]]],[[14,[[10,[13,28]],29]]]],[26,17],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[33,[-1]]],[[14,[-1,[18,[[33,[-1]]]]]]],34],[[[30,[-1]]],[[14,[-1,[18,[[30,[-1]]]]]]],32],[35,26],[[[33,[-1]]],[[10,[-1,26]]],34],[[[30,[-1]]],[[10,[-1,[14,[26,35]]]]],32],[26,17],[[25,17],25],[[],26],[[],25],[-1,[[33,[-1]]],34],[-1,[[30,[-1]]],32],[[[33,[-1]],[12,[5]]],[[31,[13]]],34],[26,[[15,[[12,[5]]]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,23,[]],[-1,23,[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,24,[]],[-1,24,[]],[-1,24,[]],[-1,24,[]],[-1,24,[]],[-1,24,[]],[-1,24,[]],[-1,24,[]],[[],36],[[26,-1],[[33,[-1]]],34],[[26,-1],[[30,[-1]]],32],[[[30,[-1]],[12,[5]]],[[31,[13]]],32],0,0,0,0,0,0,0,0,0,0,0,[[37,4],37],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[37,[[14,[38,9]]]],0,0,[39,39],[37,37],[40,40],[41,41],[[-1,-2],10,[],[]],[[-1,-2],10,[],[]],[[-1,-2],10,[],[]],[[-1,-2],10,[],[]],[[38,[12,[5]],[12,[5]],39],[[14,[40,41]]]],[[],38],[[],37],[[37,36],37],[[37,17],37],[38,10],[[[42,[-1]]],10,32],[[39,39],17],[[40,40],17],[[41,41],17],[38,[[14,[10,41]]]],[38,[[14,[10,41]]]],[[[42,[-1]]],[[31,[10]]],32],[[38,20],21],[[39,20],21],[[37,20],21],[[40,20],21],[[41,20],21],[[41,20],21],[[[43,[-1]],20],21,[22,34]],[[[42,[-1]],20],21,[22,32]],[[44,20],21],[[44,20],21],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[[43,[-1]]],-1,34],[[[42,[-1]]],-1,32],[[[43,[-1]]],-1,34],[[[42,[-1]]],-1,32],[[38,[12,[5]],39],[[14,[13,41]]]],[38,17],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[43,[-1]]],[[14,[-1,[18,[[43,[-1]]]]]]],34],[[[42,[-1]]],[[14,[-1,[18,[[42,[-1]]]]]]],32],[44,38],[[[43,[-1]]],[[10,[-1,38]]],34],[[[42,[-1]]],[[10,[-1,[14,[38,44]]]]],32],[38,17],[[37,3],37],[[37,6],37],[[],38],[[],37],[-1,[[43,[-1]]],34],[-1,[[42,[-1]]],32],[[37,36],37],[[37,1],37],[[[43,[-1]],[12,[5]]],[[31,[13]]],34],[[37,36],37],[[37,36],37],[38,[[15,[[12,[5]]]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,23,[]],[-1,23,[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,24,[]],[-1,24,[]],[-1,24,[]],[-1,24,[]],[-1,24,[]],[-1,24,[]],[-1,24,[]],[-1,24,[]],[[],36],[[37,2],37],[[38,-1],[[43,[-1]]],34],[[38,-1],[[42,[-1]]],32],[[[42,[-1]],[12,[5]]],[[31,[13]]],32]],"c":[],"p":[[3,"Quality",0],[3,"WindowSize",0],[3,"LargeWindowSize",0],[3,"BlockSize",0],[15,"u8"],[4,"CompressionMode",0],[3,"CompressError",0],[3,"DecompressError",0],[4,"SetParameterError",0],[15,"tuple"],[4,"Ordering",477],[15,"slice"],[15,"usize"],[4,"Result",478],[4,"Option",479],[8,"Into",480],[15,"bool"],[3,"IntoInnerError",0],[3,"Error",481],[3,"Formatter",482],[6,"Result",482],[8,"Debug",482],[3,"String",483],[3,"TypeId",484],[3,"BrotliDecoderOptions",186],[3,"BrotliDecoder",186],[3,"DecodeResult",186],[4,"DecoderInfo",186],[4,"DecodeError",186],[3,"DecompressorWriter",186],[6,"Result",481],[8,"Write",485],[3,"DecompressorReader",186],[8,"BufRead",485],[3,"WriterPanicked",186],[15,"u32"],[3,"BrotliEncoderOptions",340],[3,"BrotliEncoder",340],[4,"BrotliOperation",340],[3,"EncodeResult",340],[3,"EncodeError",340],[3,"CompressorWriter",340],[3,"CompressorReader",340],[3,"WriterPanicked",340]],"b":[[77,"impl-Default-for-Quality"],[78,"impl-Quality"],[79,"impl-WindowSize"],[80,"impl-Default-for-WindowSize"],[81,"impl-Default-for-LargeWindowSize"],[82,"impl-LargeWindowSize"],[99,"impl-Display-for-CompressError"],[100,"impl-Debug-for-CompressError"],[101,"impl-Debug-for-DecompressError"],[102,"impl-Display-for-DecompressError"],[103,"impl-Display-for-SetParameterError"],[104,"impl-Debug-for-SetParameterError"],[105,"impl-Display-for-IntoInnerError%3CI%3E"],[106,"impl-Debug-for-IntoInnerError%3CI%3E"],[264,"impl-Debug-for-DecodeError"],[265,"impl-Display-for-DecodeError"],[268,"impl-Debug-for-WriterPanicked"],[269,"impl-Display-for-WriterPanicked"],[396,"impl-Display-for-EncodeError"],[397,"impl-Debug-for-EncodeError"],[400,"impl-Display-for-WriterPanicked"],[401,"impl-Debug-for-WriterPanicked"]],"a":{"brotlidecodercreateinstance":[300],"brotlidecoderdecompress":[76],"brotlidecoderdecompressstream":[251],"brotlidecoderhasmoreoutput":[283],"brotlidecoderisfinished":[298],"brotlidecodersetparameter":[240],"brotlidecodertakeoutput":[305],"brotlidecoderversion":[336],"brotliencodercompress":[72],"brotliencodercompressstream":[379],"brotliencodercreateinstance":[432],"brotliencoderdestroyinstance":[384],"brotliencoderestimatepeakmemoryusage":[74],"brotliencoderhasmoreoutput":[415],"brotliencoderisfinished":[429],"brotliencodermaxcompressedsize":[73],"brotliencodersetparameter":[368],"brotliencodertakeoutput":[441],"brotliencoderversion":[472]}},\
"brotlic_sys":{"doc":"","t":"GRRRRRRRRRRRFFFFFGRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRFFFFFGRRGRRRRFDFFFFFFFFFFFFFGRRRGRRRRGRRRRRRRRRRFDFDFFDFFFGRRNNNNLLLLLLLLGGLLLLLLLLLLLLLLLLLLLL","n":["BROTLI_BOOL","BROTLI_DEFAULT_QUALITY","BROTLI_DEFAULT_WINDOW","BROTLI_FALSE","BROTLI_LARGE_MAX_WINDOW_BITS","BROTLI_MAX_INPUT_BLOCK_BITS","BROTLI_MAX_QUALITY","BROTLI_MAX_WINDOW_BITS","BROTLI_MIN_INPUT_BLOCK_BITS","BROTLI_MIN_QUALITY","BROTLI_MIN_WINDOW_BITS","BROTLI_TRUE","BrotliDecoderAttachDictionary","BrotliDecoderCreateInstance","BrotliDecoderDecompress","BrotliDecoderDecompressStream","BrotliDecoderDestroyInstance","BrotliDecoderErrorCode","BrotliDecoderErrorCode_BROTLI_DECODER_ERROR_ALLOC_BLOCK_TYPE_TREES","BrotliDecoderErrorCode_BROTLI_DECODER_ERROR_ALLOC_CONTEXT_MAP","BrotliDecoderErrorCode_BROTLI_DECODER_ERROR_ALLOC_CONTEXT_MODES","BrotliDecoderErrorCode_BROTLI_DECODER_ERROR_ALLOC_RING_BUFFER_1","BrotliDecoderErrorCode_BROTLI_DECODER_ERROR_ALLOC_RING_BUFFER_2","BrotliDecoderErrorCode_BROTLI_DECODER_ERROR_ALLOC_TREE_GROUPS","BrotliDecoderErrorCode_BROTLI_DECODER_ERROR_COMPOUND_DICTIONARY","BrotliDecoderErrorCode_BROTLI_DECODER_ERROR_DICTIONARY_NOT_SET","BrotliDecoderErrorCode_BROTLI_DECODER_ERROR_FORMAT_BLOCK_LENGTH_1","BrotliDecoderErrorCode_BROTLI_DECODER_ERROR_FORMAT_BLOCK_LENGTH_2","BrotliDecoderErrorCode_BROTLI_DECODER_ERROR_FORMAT_CL_SPACE","BrotliDecoderErrorCode_BROTLI_DECODER_ERROR_FORMAT_CONTEXT_MAP_REPEAT","BrotliDecoderErrorCode_BROTLI_DECODER_ERROR_FORMAT_DICTIONARY","BrotliDecoderErrorCode_BROTLI_DECODER_ERROR_FORMAT_DISTANCE","BrotliDecoderErrorCode_BROTLI_DECODER_ERROR_FORMAT_EXUBERANT_META_NIBBLE","BrotliDecoderErrorCode_BROTLI_DECODER_ERROR_FORMAT_EXUBERANT_NIBBLE","BrotliDecoderErrorCode_BROTLI_DECODER_ERROR_FORMAT_HUFFMAN_SPACE","BrotliDecoderErrorCode_BROTLI_DECODER_ERROR_FORMAT_PADDING_1","BrotliDecoderErrorCode_BROTLI_DECODER_ERROR_FORMAT_PADDING_2","BrotliDecoderErrorCode_BROTLI_DECODER_ERROR_FORMAT_RESERVED","BrotliDecoderErrorCode_BROTLI_DECODER_ERROR_FORMAT_SIMPLE_HUFFMAN_ALPHABET","BrotliDecoderErrorCode_BROTLI_DECODER_ERROR_FORMAT_SIMPLE_HUFFMAN_SAME","BrotliDecoderErrorCode_BROTLI_DECODER_ERROR_FORMAT_TRANSFORM","BrotliDecoderErrorCode_BROTLI_DECODER_ERROR_FORMAT_WINDOW_BITS","BrotliDecoderErrorCode_BROTLI_DECODER_ERROR_INVALID_ARGUMENTS","BrotliDecoderErrorCode_BROTLI_DECODER_ERROR_UNREACHABLE","BrotliDecoderErrorCode_BROTLI_DECODER_NEEDS_MORE_INPUT","BrotliDecoderErrorCode_BROTLI_DECODER_NEEDS_MORE_OUTPUT","BrotliDecoderErrorCode_BROTLI_DECODER_NO_ERROR","BrotliDecoderErrorCode_BROTLI_DECODER_SUCCESS","BrotliDecoderErrorString","BrotliDecoderGetErrorCode","BrotliDecoderHasMoreOutput","BrotliDecoderIsFinished","BrotliDecoderIsUsed","BrotliDecoderParameter","BrotliDecoderParameter_BROTLI_DECODER_PARAM_DISABLE_RING_BUFFER_REALLOCATION","BrotliDecoderParameter_BROTLI_DECODER_PARAM_LARGE_WINDOW","BrotliDecoderResult","BrotliDecoderResult_BROTLI_DECODER_RESULT_ERROR","BrotliDecoderResult_BROTLI_DECODER_RESULT_NEEDS_MORE_INPUT","BrotliDecoderResult_BROTLI_DECODER_RESULT_NEEDS_MORE_OUTPUT","BrotliDecoderResult_BROTLI_DECODER_RESULT_SUCCESS","BrotliDecoderSetParameter","BrotliDecoderState","BrotliDecoderTakeOutput","BrotliDecoderVersion","BrotliEncoderAttachPreparedDictionary","BrotliEncoderCompress","BrotliEncoderCompressStream","BrotliEncoderCreateInstance","BrotliEncoderDestroyInstance","BrotliEncoderDestroyPreparedDictionary","BrotliEncoderEstimatePeakMemoryUsage","BrotliEncoderGetPreparedDictionarySize","BrotliEncoderHasMoreOutput","BrotliEncoderIsFinished","BrotliEncoderMaxCompressedSize","BrotliEncoderMode","BrotliEncoderMode_BROTLI_MODE_FONT","BrotliEncoderMode_BROTLI_MODE_GENERIC","BrotliEncoderMode_BROTLI_MODE_TEXT","BrotliEncoderOperation","BrotliEncoderOperation_BROTLI_OPERATION_EMIT_METADATA","BrotliEncoderOperation_BROTLI_OPERATION_FINISH","BrotliEncoderOperation_BROTLI_OPERATION_FLUSH","BrotliEncoderOperation_BROTLI_OPERATION_PROCESS","BrotliEncoderParameter","BrotliEncoderParameter_BROTLI_PARAM_DISABLE_LITERAL_CONTEXT_MODELING","BrotliEncoderParameter_BROTLI_PARAM_LARGE_WINDOW","BrotliEncoderParameter_BROTLI_PARAM_LGBLOCK","BrotliEncoderParameter_BROTLI_PARAM_LGWIN","BrotliEncoderParameter_BROTLI_PARAM_MODE","BrotliEncoderParameter_BROTLI_PARAM_NDIRECT","BrotliEncoderParameter_BROTLI_PARAM_NPOSTFIX","BrotliEncoderParameter_BROTLI_PARAM_QUALITY","BrotliEncoderParameter_BROTLI_PARAM_SIZE_HINT","BrotliEncoderParameter_BROTLI_PARAM_STREAM_OFFSET","BrotliEncoderPrepareDictionary","BrotliEncoderPreparedDictionary","BrotliEncoderSetParameter","BrotliEncoderState","BrotliEncoderTakeOutput","BrotliEncoderVersion","BrotliSharedDictionary","BrotliSharedDictionaryAttach","BrotliSharedDictionaryCreateInstance","BrotliSharedDictionaryDestroyInstance","BrotliSharedDictionaryType","BrotliSharedDictionaryType_BROTLI_SHARED_DICTIONARY_RAW","BrotliSharedDictionaryType_BROTLI_SHARED_DICTIONARY_SERIALIZED","None","None","Some","Some","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","brotli_alloc_func","brotli_free_func","from","from","from","from","into","into","into","into","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id"],"q":[[0,"brotlic_sys"],[143,"core::result"],[144,"core::any"]],"d":["","","","","","","","","","","","","Adds LZ77 prefix dictionary, adds or replaces built-in …","Creates an instance of ::BrotliDecoderState and …","Performs one-shot memory-to-memory decompression.","Decompresses the input stream to the output stream.","Deinitializes and frees ::BrotliDecoderState instance.","Error code for detailed logging / production debugging.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Converts error code to a c-string.","Acquires a detailed error code.","Checks if decoder has more output.","Checks if decoder instance reached the final state.","Checks if instance has already consumed input.","Options to be used with ::BrotliDecoderSetParameter.","Disable “canny” ring buffer allocation strategy.","Flag that determines if “Large Window Brotli” is used.","Result type for ::BrotliDecoderDecompress and …","Decoding error, e.g. corrupted input or memory allocation …","Partially done; should be called again with more input.","Partially done; should be called again with more output.","Decoding successfully completed.","Sets the specified parameter to the given decoder instance.","Opaque structure that holds decoder state.","Acquires pointer to internal output buffer.","Gets a decoder library version.","Attaches a prepared dictionary of any type to the encoder. …","Performs one-shot memory-to-memory compression.","Compresses input stream to output stream.","Creates an instance of ::BrotliEncoderState and …","Deinitializes and frees ::BrotliEncoderState instance.","","","","Checks if encoder has more output.","Checks if encoder instance reached the final state.","Calculates the output size bound for the given @p …","Options for ::BROTLI_PARAM_MODE parameter.","Compression mode used in WOFF 2.0.","Default compression mode.","Compression mode for UTF-8 formatted text input.","Operations that can be performed by streaming encoder.","Emit metadata block to stream.","Finalize the stream.","Produce output for all processed input.","Process input.","Options to be used with ::BrotliEncoderSetParameter.","Flag that affects usage of “literal context modeling” …","Flag that determines if “Large Window Brotli” is used.","Recommended input block size.","Recommended sliding LZ77 window size.","Tune encoder for specific input.","Recommended number of direct distance codes (NDIRECT).","Recommended number of postfix bits (NPOSTFIX).","The main compression speed-density lever.","Estimated total input size for all …","Number of bytes of input stream already processed by a …","Prepares a shared dictionary from the given file format …","Opaque type for pointer to different possible internal …","Sets the specified parameter to the given encoder instance.","Opaque structure that holds encoder state.","Acquires pointer to internal output buffer.","Gets an encoder library version.","Opaque structure that holds shared dictionary data.","Attaches dictionary to a given instance of …","Creates an instance of ::BrotliSharedDictionary.","Deinitializes and frees ::BrotliSharedDictionary instance.","Input data type for ::BrotliSharedDictionaryAttach.","Raw LZ77 prefix dictionary.","Serialized shared dictionary.","No value.","No value.","Some value of type <code>T</code>.","Some value of type <code>T</code>.","","","","","","","","","Allocating function pointer type.","Deallocating function pointer type.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,4,3,4,5,6,7,8,5,6,7,8,0,0,5,6,7,8,5,6,7,8,5,6,7,8,5,6,7,8,5,6,7,8],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,2,[]],[-1,2,[]],[-1,2,[]],[-1,2,[]]],"c":[],"p":[[4,"Result",143],[3,"TypeId",144],[6,"brotli_alloc_func",0],[6,"brotli_free_func",0],[3,"BrotliSharedDictionary",0],[3,"BrotliEncoderPreparedDictionary",0],[3,"BrotliEncoderState",0],[3,"BrotliDecoderState",0]],"b":[]},\
"brson":{"doc":"","t":"FF","n":["compress","decompress"],"q":[[0,"brson"],[2,"alloc::string"],[3,"alloc::vec"]],"d":["",""],"i":[0,0],"f":[[1,[[3,[2]]]],[[[3,[2]]],1]],"c":[],"p":[[3,"String",2],[15,"u8"],[3,"Vec",3]],"b":[]},\
"bson":{"doc":"BSON, short for Binary JSON, is a binary-encoded …","t":"GNNNDNNNNNNENDNNNDNNNDNNNDDDNNNNNNNNNNNNNNNNDNNNNNNNNNNNNNNNNDDDEEDDDDDDDNNNDDNNNNNNNDNNNNNNDELLLLLLLLLLLLLLLLLLLALLLLLLLLLLLLLLLLLLLLLLOMMLLLLLLLLLLLLLLLLLLLLLLLLLMMMLLLAAALLLLLLLLLLLLLOALLLLLLLLLLLLLLLLLLLLLLLLLALLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFFFFLLFFFFLLLLMMMLLLLLLLLLLLLLLLAMMLLLMMAOOMMMAALLLLLLLLLLAMMMFFFFLLLLLLLLLLLFLLLLLLLLLFLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLALLLLLLLLLLLDNNENGLLLMLLLLLLLLLMLLLLLLLLMNDDNENSSNGLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMNDDNNENNNGNLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFFFFFFFFMLLLLLLLLLLLLLLLLLLLLLLMMMDNNNNNENLLLLLLLLLLLLLLDENDDDDNNDNNNDEGDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLANNENNGLLLLLLLLLLLLLLLLLMNENNDNGLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMMNNNNNNNNNNNNNNNNNNDENNNNNDNNNNNNNNNNNNNNNNDDDDEEDDDDDDNNGNNNNNNNNNNDEGLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMLLLLMMLMMLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMNENNNNGNDDNLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFFFFLLFLFLLLLLLLLLLLLMAFFFFFFFFAAAFFFFFFFFFFFFFAAAAFFFFFFFFFFFFFFFFNNNENNNNNNENNNNNNNNNNNNNNNNNNNNNNLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLNNENNNNNNGNDELLLLLLLLLLLLLLLLLLMMMMM","n":["Array","Array","Array","Array","Binary","Binary","Binary","Binary","Boolean","Boolean","Boolean","Bson","CSharpLegacy","DateTime","DateTime","DateTime","DateTime","DbPointer","DbPointer","DbPointer","DbPointer","Decimal128","Decimal128","Decimal128","Decimal128","Deserializer","DeserializerOptions","Document","Document","Document","Document","Double","Double","Double","Int32","Int32","Int32","Int64","Int64","Int64","JavaLegacy","JavaScriptCode","JavaScriptCode","JavaScriptCode","JavaScriptCodeWithScope","JavaScriptCodeWithScope","JavaScriptCodeWithScope","JavaScriptCodeWithScope","MaxKey","MaxKey","MaxKey","MinKey","MinKey","MinKey","Null","Null","Null","ObjectId","ObjectId","ObjectId","PythonLegacy","RawArray","RawArrayBuf","RawBinaryRef","RawBson","RawBsonRef","RawDbPointerRef","RawDocument","RawDocumentBuf","RawJavaScriptCodeWithScope","RawJavaScriptCodeWithScopeRef","RawRegexRef","Regex","RegularExpression","RegularExpression","RegularExpression","Serializer","SerializerOptions","Standard","String","String","String","Symbol","Symbol","Symbol","Timestamp","Timestamp","Timestamp","Timestamp","Undefined","Undefined","Undefined","Uuid","UuidRepresentation","as_array","as_array_mut","as_bool","as_datetime","as_datetime_mut","as_db_pointer","as_document","as_document_mut","as_f64","as_i32","as_i64","as_null","as_object_id","as_object_id_mut","as_str","as_str_mut","as_symbol","as_symbol_mut","as_timestamp","binary","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","bson","bytes","bytes","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmp","cmp","code","code","code","compare","compare","compare","datetime","de","decimal128","default","default","default","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","doc","document","element_type","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","extend","extjson","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_bson","from_bson_with_options","from_document","from_document_with_options","from_iter","from_iter","from_reader","from_reader_utf8_lossy","from_slice","from_slice_utf8_lossy","from_str","hash","hash","hash","human_readable","human_readable","increment","into","into","into","into","into","into","into","into","into","into","into","into_canonical_extjson","into_iter","into_iter","into_relaxed_extjson","oid","options","options","partial_cmp","partial_cmp","partial_cmp","pattern","pattern","raw","rawbson","rawdoc","scope","scope","scope","ser","serde_helpers","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","spec","subtype","subtype","time","to_bson","to_bson_with_options","to_document","to_document_with_options","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_raw_document_buf","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_vec","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","uuid","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","Binary","DecodingError","Err","Error","Ok","Result","as_raw_binary","borrow","borrow_mut","bytes","clone","clone_into","fmt","fmt","from","from_base64","from_uuid","from_uuid_with_representation","into","subtype","to_owned","to_string","to_uuid","to_uuid_with_representation","try_from","try_into","type_id","vzip","message","CannotFormat","DateTime","DateTimeBuilder","Err","Error","InvalidTimestamp","MAX","MIN","Ok","Result","borrow","borrow","borrow_mut","borrow_mut","build","builder","checked_duration_since","clone","clone_into","day","default","fmt","fmt","from","from","from_millis","from_system_time","hour","into","into","millisecond","minute","month","now","parse_rfc3339_str","saturating_duration_since","second","timestamp_millis","to_owned","to_rfc3339_string","to_string","to_system_time","try_from","try_from","try_into","try_into","try_to_rfc3339_string","type_id","type_id","vzip","vzip","year","message","message","DeserializationError","Deserializer","DeserializerOptions","EndOfStream","Err","Error","InvalidUtf8String","Io","Ok","Result","UnrecognizedDocumentElementType","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","builder","clone","clone","clone_into","clone_into","custom","default","deserialize_any","deserialize_bool","deserialize_byte_buf","deserialize_bytes","deserialize_char","deserialize_enum","deserialize_f32","deserialize_f64","deserialize_i16","deserialize_i32","deserialize_i64","deserialize_i8","deserialize_identifier","deserialize_ignored_any","deserialize_map","deserialize_newtype_struct","deserialize_option","deserialize_seq","deserialize_str","deserialize_string","deserialize_struct","deserialize_tuple","deserialize_tuple_struct","deserialize_u16","deserialize_u32","deserialize_u64","deserialize_u8","deserialize_unit","deserialize_unit_struct","fmt","fmt","fmt","from","from","from","from","from","from_bson","from_bson_with_options","from_document","from_document_with_options","from_reader","from_reader_utf8_lossy","from_slice","from_slice_utf8_lossy","human_readable","into","into","into","is_human_readable","new","new_with_options","source","to_owned","to_owned","to_string","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","vzip","vzip","vzip","element_type","key","message","Decimal128","EmptyExponent","InexactRounding","InvalidCoefficient","InvalidExponent","Overflow","ParseError","Underflow","borrow","borrow_mut","bytes","fmt","fmt","from","from_bytes","into","source","to_string","try_from","try_into","type_id","vzip","Document","Entry","Err","IntoIter","Iter","IterMut","Keys","NotPresent","Occupied","OccupiedEntry","Ok","UnexpectedType","Vacant","VacantEntry","ValueAccessError","ValueAccessResult","Values","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clear","clone","clone_into","contains_key","entry","eq","fmt","fmt","from","from","from","from","from","from","from","from","from","from_reader","from_reader_utf8_lossy","get","get_array","get_array_mut","get_binary_generic","get_binary_generic_mut","get_bool","get_bool_mut","get_datetime","get_datetime_mut","get_decimal128","get_decimal128_mut","get_document","get_document_mut","get_f64","get_f64_mut","get_i32","get_i32_mut","get_i64","get_i64_mut","get_mut","get_object_id","get_object_id_mut","get_str","get_str_mut","get_timestamp","get_timestamp_mut","insert","into","into","into","into","into","into","into","into","into","into_iter","into_iter","into_iter","into_iter","into_iter","is_empty","is_null","iter","iter_mut","key","key","keys","len","new","next","next","next","next","next","or_insert","or_insert_with","remove","to_owned","to_string","to_writer","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","values","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","de","DeserializationError","Err","Error","InvalidObjectId","Ok","Result","borrow","borrow_mut","clone","clone_into","custom","fmt","fmt","from","from","from","into","to_owned","to_string","try_from","try_into","type_id","vzip","message","Err","Error","InvalidHexStringCharacter","InvalidHexStringLength","ObjectId","Ok","Result","borrow","borrow","borrow_mut","borrow_mut","bytes","clone","clone","clone_into","clone_into","cmp","compare","default","deserialize","eq","equivalent","equivalent","equivalent","equivalent","fmt","fmt","fmt","fmt","from","from","from","from_bytes","from_str","hash","into","into","new","parse_str","partial_cmp","serialize","timestamp","to_hex","to_owned","to_owned","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","c","hex","hex","index","length","Array","Array","Binary","Binary","Boolean","Boolean","DateTime","DateTime","DbPointer","DbPointer","Decimal128","Decimal128","Document","Document","Double","Double","Err","Err","Error","ErrorKind","Int32","Int32","Int64","Int64","InvalidBson","Iter","JavaScriptCode","JavaScriptCode","JavaScriptCodeWithScope","JavaScriptCodeWithScope","MalformedValue","MaxKey","MaxKey","MinKey","MinKey","NotPresent","Null","Null","ObjectId","ObjectId","Ok","Ok","RawArray","RawArrayBuf","RawArrayIter","RawBinaryRef","RawBson","RawBsonRef","RawDbPointerRef","RawDocument","RawDocumentBuf","RawJavaScriptCodeWithScope","RawJavaScriptCodeWithScopeRef","RawRegexRef","RegularExpression","RegularExpression","Result","String","String","Symbol","Symbol","Timestamp","Timestamp","Undefined","Undefined","UnexpectedType","Utf8EncodingError","ValueAccessError","ValueAccessErrorKind","ValueAccessResult","append","as_array","as_array","as_array_mut","as_binary","as_binary","as_bool","as_bool","as_bytes","as_bytes","as_datetime","as_datetime","as_db_pointer","as_db_pointer","as_document","as_document","as_document_mut","as_f64","as_f64","as_i32","as_i32","as_i64","as_i64","as_javascript","as_javascript","as_javascript_with_scope","as_javascript_with_scope","as_null","as_null","as_object_id","as_object_id","as_raw_bson_ref","as_ref","as_ref","as_ref","as_regex","as_regex","as_str","as_str","as_symbol","as_symbol","as_timestamp","as_timestamp","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","bytes","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","code","code","default","default","deref","deref","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","element_type","element_type","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_bytes","from_bytes","from_document","from_iter","from_iter","get","get","get_array","get_array","get_binary","get_binary","get_bool","get_bool","get_datetime","get_datetime","get_document","get_document","get_f64","get_f64","get_i32","get_i32","get_i64","get_i64","get_object_id","get_object_id","get_regex","get_regex","get_str","get_str","get_timestamp","get_timestamp","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_bytes","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","is_empty","is_empty","iter","key","key","kind","kind","new","new","next","next","options","pattern","push","scope","scope","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","subtype","to_binary","to_document","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_raw_array_buf","to_raw_bson","to_raw_document_buf","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","message","actual","expected","Err","Error","InvalidCString","InvalidDocumentKey","Io","Ok","Result","SerializationError","Serializer","SerializerOptions","UnsignedIntegerExceededRange","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","builder","cause","clone","clone","clone_into","clone_into","custom","default","fmt","fmt","fmt","from","from","from","from","human_readable","into","into","into","is_human_readable","new","new_with_options","serialize_bool","serialize_bytes","serialize_char","serialize_f32","serialize_f64","serialize_i16","serialize_i32","serialize_i64","serialize_i8","serialize_map","serialize_newtype_struct","serialize_newtype_variant","serialize_none","serialize_seq","serialize_some","serialize_str","serialize_struct","serialize_struct_variant","serialize_tuple","serialize_tuple_struct","serialize_tuple_variant","serialize_u16","serialize_u32","serialize_u64","serialize_u8","serialize_unit","serialize_unit_struct","serialize_unit_variant","to_bson","to_bson_with_options","to_document","to_document_with_options","to_owned","to_owned","to_raw_document_buf","to_string","to_vec","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","vzip","vzip","vzip","message","bson_datetime_as_rfc3339_string","deserialize_bson_datetime_from_rfc3339_string","deserialize_hex_string_from_object_id","deserialize_i64_from_bson_datetime","deserialize_rfc3339_string_from_bson_datetime","deserialize_timestamp_from_u32","deserialize_u32_from_f64","deserialize_u32_from_timestamp","deserialize_u64_from_f64","hex_string_as_object_id","i64_as_bson_datetime","rfc3339_string_as_bson_datetime","serialize_bson_datetime_as_rfc3339_string","serialize_hex_string_as_object_id","serialize_i64_as_bson_datetime","serialize_object_id_as_hex_string","serialize_rfc3339_string_as_bson_datetime","serialize_timestamp_as_u32","serialize_u32_as_f64","serialize_u32_as_i32","serialize_u32_as_i64","serialize_u32_as_timestamp","serialize_u64_as_f64","serialize_u64_as_i32","serialize_u64_as_i64","timestamp_as_u32","u32_as_f64","u32_as_timestamp","u64_as_f64","deserialize","serialize","deserialize","serialize","deserialize","serialize","deserialize","serialize","deserialize","serialize","deserialize","serialize","deserialize","serialize","deserialize","serialize","Array","Binary","BinaryOld","BinarySubtype","Boolean","Column","DateTime","DbPointer","Decimal128","Double","ElementType","EmbeddedDocument","Encrypted","Function","Generic","Int32","Int64","JavaScriptCode","JavaScriptCodeWithScope","MaxKey","Md5","MinKey","Null","ObjectId","RegularExpression","Reserved","String","Symbol","Timestamp","Undefined","UserDefined","Uuid","UuidOld","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","fmt","fmt","from","from","from","from","hash","into","into","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","CSharpLegacy","Err","Error","InvalidLength","InvalidUuidString","JavaLegacy","Ok","PythonLegacy","RepresentationMismatch","Result","Standard","Uuid","UuidRepresentation","borrow","borrow_mut","bytes","clone","clone_into","fmt","fmt","from","from_bytes","into","new","parse_str","to_owned","to_string","try_from","try_into","type_id","vzip","actual_binary_subtype","expected_binary_subtype","length","message","requested_representation"],"q":[[0,"bson"],[410,"bson::binary"],[438,"bson::binary::Error"],[439,"bson::datetime"],[491,"bson::datetime::Error"],[493,"bson::de"],[585,"bson::de::Error"],[588,"bson::decimal128"],[610,"bson::document"],[762,"bson::extjson"],[763,"bson::extjson::de"],[786,"bson::extjson::de::Error"],[787,"bson::oid"],[842,"bson::oid::Error"],[847,"bson::raw"],[1289,"bson::raw::ErrorKind"],[1290,"bson::raw::ValueAccessErrorKind"],[1292,"bson::ser"],[1380,"bson::ser::Error"],[1381,"bson::serde_helpers"],[1410,"bson::serde_helpers::bson_datetime_as_rfc3339_string"],[1412,"bson::serde_helpers::hex_string_as_object_id"],[1414,"bson::serde_helpers::i64_as_bson_datetime"],[1416,"bson::serde_helpers::rfc3339_string_as_bson_datetime"],[1418,"bson::serde_helpers::timestamp_as_u32"],[1420,"bson::serde_helpers::u32_as_f64"],[1422,"bson::serde_helpers::u32_as_timestamp"],[1424,"bson::serde_helpers::u64_as_f64"],[1426,"bson::spec"],[1496,"bson::uuid"],[1527,"bson::uuid::Error"],[1532,"core::option"],[1533,"core::cmp"],[1534,"core::result"],[1535,"serde::de"],[1536,"core::iter::traits::collect"],[1537,"core::fmt"],[1538,"core::fmt"],[1539,"core::clone"],[1540,"alloc::string"],[1541,"alloc::vec"],[1542,"std::time"],[1543,"serde::de"],[1544,"serde::de"],[1545,"serde_json::value"],[1546,"serde::ser"],[1547,"serde::ser"],[1548,"serde_json::map"],[1549,"core::any"],[1550,"core::convert"],[1551,"core::fmt"],[1552,"alloc::string"],[1553,"core::ops::function"],[1554,"std::io"]],"d":["Alias for <code>Vec&lt;Bson&gt;</code>.","Array","Array","Array","Represents a BSON binary value.","Binary data","Binary data","Binary data","Boolean value","Boolean value","Boolean value","Possible BSON value types.","The legacy representation of UUIDs in BSON used by the C# …","Struct representing a BSON datetime. Note: BSON datetimes …","UTC datetime","UTC datetime","UTC datetime","Represents a DBPointer. (Deprecated)","DBPointer (Deprecated)","DBPointer (Deprecated)","DBPointer (Deprecated)","Struct representing a BSON Decimal128 type.","128-bit decimal floating point","128-bit decimal floating point","128-bit decimal floating point","Serde Deserializer","Options used to configure a <code>Deserializer</code>. These can also …","A BSON document represented as an associative HashMap with …","Embedded document","Embedded document","Embedded document","64-bit binary floating point","64-bit binary floating point","64-bit binary floating point","32-bit signed integer","32-bit signed integer","32-bit signed integer","64-bit signed integer","64-bit signed integer","64-bit signed integer","The legacy representation of UUIDs in BSON used by the …","JavaScript code","JavaScript code","JavaScript code","Represents a BSON code with scope value.","JavaScript code w/ scope","JavaScript code w/ scope","JavaScript code w/ scope","Max key","Max key","Max key","Min key","Min key","Min key","Null value","Null value","Null value","ObjectId","ObjectId","ObjectId","The legacy representation of UUIDs in BSON used by the …","A slice of a BSON document containing a BSON array value …","An owned BSON array value (akin to <code>std::path::PathBuf</code>), …","A BSON binary value referencing raw bytes stored elsewhere.","A BSON value backed by owned raw BSON bytes.","A BSON value referencing raw bytes stored elsewhere.","A BSON DB pointer value referencing raw bytes stored …","A slice of a BSON document (akin to <code>std::str</code>). This can be …","An owned BSON document (akin to <code>std::path::PathBuf</code>), …","A BSON “code with scope” value backed by owned raw …","A BSON “code with scope” value referencing raw bytes …","A BSON regex referencing raw bytes stored elsewhere.","Represents a BSON regular expression value.","Regular expression","Regular expression","Regular expression","Serde Serializer","Options used to configure a <code>Serializer</code>.","The canonical representation of UUIDs in BSON (binary with …","UTF-8 string","UTF-8 string","UTF-8 string","Symbol (Deprecated)","Symbol (Deprecated)","Symbol (Deprecated)","Represents a BSON timestamp value.","Timestamp","Timestamp","Timestamp","Undefined value (Deprecated)","Undefined value (Deprecated)","Undefined value (Deprecated)","A struct modeling a BSON UUID value (i.e. a Binary value …","Enum of the possible representations to use when …","If <code>self</code> is <code>Array</code>, return its value. Returns <code>None</code> otherwise.","If <code>self</code> is <code>Array</code>, return a mutable reference to its value. …","If <code>self</code> is <code>Boolean</code>, return its value. Returns <code>None</code> …","If <code>self</code> is <code>DateTime</code>, return its value. Returns <code>None</code> …","If <code>self</code> is <code>DateTime</code>, return a mutable reference to its …","If <code>self</code> is <code>DbPointer</code>, return its value.  Returns <code>None</code> …","If <code>self</code> is <code>Document</code>, return its value. Returns <code>None</code> …","If <code>self</code> is <code>Document</code>, return a mutable reference to its …","If <code>self</code> is <code>Double</code>, return its value as an <code>f64</code>. Returns <code>None</code>","If <code>self</code> is <code>Int32</code>, return its value. Returns <code>None</code> otherwise.","If <code>self</code> is <code>Int64</code>, return its value. Returns <code>None</code> otherwise.","If <code>self</code> is <code>Null</code>, return <code>()</code>. Returns <code>None</code> otherwise.","If <code>self</code> is <code>ObjectId</code>, return its value. Returns <code>None</code> …","If <code>self</code> is <code>ObjectId</code>, return a mutable reference to its …","If <code>self</code> is <code>String</code>, return its value as a <code>&amp;str</code>. Returns <code>None</code>","If <code>self</code> is <code>String</code>, return a mutable reference to its value …","If <code>self</code> is <code>Symbol</code>, return its value. Returns <code>None</code> …","If <code>self</code> is <code>Symbol</code>, return a mutable reference to its …","If <code>self</code> is <code>Timestamp</code>, return its value. Returns <code>None</code> …","","","","","","","","","","","","","","","","","","","","","","","","Construct a bson::BSON value from a literal.","The binary bytes.","The binary bytes.","","","","","","","","","","","","","","","","","","","","","","","","","","The JavaScript code.","The code value.","The JavaScript code.","","","","Module containing functionality related to BSON DateTimes. …","Deserializer","BSON Decimal128 data type representation","","","","","","","","","","","","Deserialize this value given this <code>Deserializer</code>.","","Construct a bson::Document value.","A BSON document represented as an associative HashMap with …","Get the <code>ElementType</code> of this value.","","","","","","","","","","","","","","","","","","","","","","","","","Deserialization and serialization of MongoDB Extended JSON …","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","Returns the argument unchanged.","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Deserialize a <code>T</code> from the provided <code>Bson</code> value.","Deserialize a <code>T</code> from the provided <code>Bson</code> value, configuring …","Deserialize a <code>T</code> from the provided <code>Document</code>.","Deserialize a <code>T</code> from the provided <code>Document</code>, configuring …","Examples","","Deserialize an instance of type <code>T</code> from an I/O stream of …","Deserialize an instance of type <code>T</code> from an I/O stream of …","Deserialize an instance of type <code>T</code> from a slice of BSON …","Deserialize an instance of type <code>T</code> from a slice of BSON …","","","","","Whether the <code>Deserializer</code> should present itself as human …","Whether the <code>Serializer</code> should present itself as human …","An incrementing value to order timestamps with the same …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Converts the Bson value into its canonical extended JSON …","","","Converts the Bson value into its relaxed extended JSON …","Module containing functionality related to BSON ObjectIds. …","The options for the regex.","The options for the regex.","","","","The regex pattern to match.","The regex pattern to match.","An API for interacting with raw BSON bytes.","Construct a <code>crate::RawBson</code> value from a literal.","Construct a <code>crate::RawDocumentBuf</code> value.","The scope document containing variable bindings.","The scope document.","The scope document containing variable bindings.","Serializer","Collection of helper functions for serializing to and …","","","","","","","","","","","Constants derived from the BSON Specification Version 1.1.","The subtype of the bytes.","The subtype of the binary value.","The number of seconds since the Unix epoch.","Encode a <code>T</code> Serializable into a <code>Bson</code> value.","Encode a <code>T</code> into a <code>Bson</code> value, configuring the underlying …","Encode a <code>T</code> Serializable into a BSON <code>Document</code>.","Encode a <code>T</code> into a <code>Document</code>, configuring the underlying …","","","","","","","","","","","","Serialize the given <code>T</code> as a <code>RawDocumentBuf</code>.","","","","","","","","","","Serialize the given <code>T</code> as a BSON byte vector.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","UUID support for BSON.","","","","","","","","","","","","Represents a BSON binary value.","While trying to decode from base64, an error was returned.","Contains the error value","Possible errors that can arise during <code>Binary</code> construction.","Contains the success value","","Borrow the contents as a <code>RawBinaryRef</code>.","","","The binary bytes.","","","","","Returns the argument unchanged.","Creates a <code>Binary</code> from a base64 string and optional …","Serializes a <code>Uuid</code> into BSON <code>Binary</code> type","Serializes a <code>Uuid</code> into BSON binary type and takes the …","Calls <code>U::from(self)</code>.","The subtype of the bytes.","","","Deserializes a BSON <code>Binary</code> type into a <code>Uuid</code> using the …","Deserializes a BSON <code>Binary</code> type into a <code>Uuid</code> according to …","","","","","","Error returned when a <code>DateTime</code> cannot be represented in a …","Struct representing a BSON datetime. Note: BSON datetimes …","Builder for constructing a BSON <code>DateTime</code>","Contains the error value","Errors that can occur during <code>DateTime</code> construction and …","Error returned when an invalid datetime format is provided …","The latest possible date that can be represented in BSON.","The earliest possible date that can be represented in BSON.","Contains the success value","Alias for <code>Result&lt;T, DateTime::Error&gt;</code>","","","","","Convert a builder with a specified year, month, day, and …","Returns a builder used to construct a <code>DateTime</code> from a …","Returns the time elapsed since <code>earlier</code>, or <code>None</code> if the …","","","Sets the day for the builder instance. Values in the range …","","","","Returns the argument unchanged.","Returns the argument unchanged.","Makes a new <code>DateTime</code> from the number of non-leap …","Convert the given <code>std::time::SystemTime</code> to a <code>DateTime</code>.","Sets the hour (24-hour format) for the builder instance. …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Sets the millisecond for the builder instance. Values must …","Sets the minute for the builder instance. Values must be …","Sets the month for the builder instance. Maps months as …","Returns a <code>DateTime</code> which corresponds to the current date …","Convert the given RFC 3339 formatted string to a <code>DateTime</code>, …","Returns the time elapsed since <code>earlier</code>, or a <code>Duration</code> of …","Sets the second for the builder instance. Values must be …","Returns the number of non-leap-milliseconds since January …","","Convert this <code>DateTime</code> to an RFC 3339 formatted string.  …","","Convert this <code>DateTime</code> to a <code>std::time::SystemTime</code>.","","","","","Convert this <code>DateTime</code> to an RFC 3339 formatted string.","","","","","Sets the year for the builder instance. Years between …","","","A general error encountered during deserialization. See: …","Serde Deserializer","Options used to configure a <code>Deserializer</code>. These can also …","The end of the BSON input was reached too soon.","Contains the error value","Possible errors that can arise during decoding.","A <code>std::string::FromUtf8Error</code> encountered while decoding a …","A <code>std::io::Error</code> encountered while deserializing.","Contains the success value","Alias for <code>Result&lt;T, Error&gt;</code>.","While decoding a <code>Document</code> from bytes, an unexpected or …","","","","","","","Create a builder struct used to construct a …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","Deserialize a <code>T</code> from the provided <code>Bson</code> value.","Deserialize a <code>T</code> from the provided <code>Bson</code> value, configuring …","Deserialize a <code>T</code> from the provided <code>Document</code>.","Deserialize a <code>T</code> from the provided <code>Document</code>, configuring …","Deserialize an instance of type <code>T</code> from an I/O stream of …","Deserialize an instance of type <code>T</code> from an I/O stream of …","Deserialize an instance of type <code>T</code> from a slice of BSON …","Deserialize an instance of type <code>T</code> from a slice of BSON …","Whether the <code>Deserializer</code> should present itself as human …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Construct a new <code>Deserializer</code> using the default options.","Create a new <code>Deserializer</code> using the provided options.","","","","","","","","","","","","","","","","","The encountered element type.","The key at which an unexpected/unsupported element type …","A message describing the error.","Struct representing a BSON Decimal128 type.","","","","","","","","","","Returns the raw byte representation of this <code>Decimal128</code>.","","","Returns the argument unchanged.","Constructs a new <code>Decimal128</code> from the provided raw byte …","Calls <code>U::from(self)</code>.","","","","","","","A BSON document represented as an associative HashMap with …","A view into a single entry in a map, which may either be …","Contains the error value","An iterator over Document entries.","An owning iterator over Document entries.","An iterator over a <code>Document</code>’s keys and mutable values.","An iterator over an Document’s keys.","Cannot find the expected field with the specified key","An occupied entry.","A view into an occupied entry in a Document. It is part of …","Contains the success value","Found a Bson value with the specified key, but not with …","A vacant entry.","A view into a vacant entry in a Document. It is part of …","Error to indicate that either a value was empty or it …","Result of accessing Bson value","An iterator over an Document’s values.","","","","","","","","","","","","","","","","","","","Clears the document, removing all values.","","","Returns true if the map contains a value for the specified …","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Attempts to deserialize a <code>Document</code> from a byte stream.","Attempt to deserialize a <code>Document</code> that may contain invalid …","Returns a reference to the Bson corresponding to the key.","Get a reference to an array for this key if it exists and …","Get a mutable reference to an array for this key if it …","Get a reference to a generic binary value for this key if …","Get a mutable reference generic binary value for this key …","Get a bool value for this key if it exists and has the …","Get a mutable reference to a bool value for this key if it …","Get a reference to a UTC datetime value for this key if it …","Get a mutable reference to a UTC datetime value for this …","Get a reference to a Decimal128 value for key, if it …","Get a mutable reference to a Decimal128 value for key, if …","Get a reference to a document for this key if it exists …","Get a mutable reference to a document for this key if it …","Get a floating point value for this key if it exists and …","Get a mutable reference to a floating point value for this …","Get an i32 value for this key if it exists and has the …","Get a mutable reference to an i32 value for this key if it …","Get an i64 value for this key if it exists and has the …","Get a mutable reference to an i64 value for this key if it …","Gets a mutable reference to the Bson corresponding to the …","Get an object id value for this key if it exists and has …","Get a mutable reference to an object id value for this key …","Get a string slice this key if it exists and has the …","Get a mutable string slice this key if it exists and has …","Get a time stamp value for this key if it exists and has …","Get a mutable reference to a time stamp value for this key …","Sets the value of the entry with the OccupiedEntry’s key,","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","Returns true if the document contains no elements","Returns wether this key has a null value","Gets an iterator over the entries of the map.","Gets an iterator over pairs of keys and mutable values.","Returns a reference to this entry’s key.","Gets a reference to the key in the entry.","Gets a collection of all keys in the document.","Returns the number of elements in the document.","Creates a new empty Document.","","","","","","Inserts the given default value in the entry if it is …","Inserts the result of the <code>default</code> function in the entry if …","Takes the value of the entry out of the document, and …","","","Attempts to serialize the <code>Document</code> into a byte stream.","","","","","","","","","","","","","","","","","","","","","","","","","","","","Gets a collection of all values in the document.","","","","","","","","","","Deserializing MongoDB Extended JSON v2","A general error encountered during deserialization. See: …","Contains the error value","Error cases that can occur during deserialization from …","Errors that can occur during OID construction and …","Contains the success value","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","Contains the error value","Errors that can occur during <code>ObjectId</code> construction and …","An invalid character was found in the provided hex string. …","An <code>ObjectId</code>’s hex string representation must be an …","A wrapper around a raw 12-byte ObjectId.","Contains the success value","Alias for Result&lt;T, oid::Error&gt;.","","","","","Returns the raw byte representation of an ObjectId.","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Constructs a new ObjectId wrapper around the raw byte …","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Generates a new <code>ObjectId</code>, represented in bytes. See the …","Creates an ObjectID using a 12-byte (24-char) hexadecimal …","","","Retrieves the timestamp from an <code>ObjectId</code>.","Convert this <code>ObjectId</code> to its hex string representation.","","","","","","","","","","","","","","","","","","Array","Array","Binary data","Binary data","Boolean value","Boolean value","UTC datetime","UTC datetime","DBPointer (Deprecated)","DBPointer (Deprecated)","128-bit decimal floating point","128-bit decimal floating point","Embedded document","Embedded document","64-bit binary floating point","64-bit binary floating point","Contains the error value","Contains the error value","An error that occurs when attempting to parse raw BSON …","The different categories of errors that can be returned …","32-bit signed integer","32-bit signed integer","64-bit signed integer","64-bit signed integer","An error was encountered attempting to decode the document.","An iterator over the document’s entries.","JavaScript code","JavaScript code","JavaScript code w/ scope","JavaScript code w/ scope","A BSON value did not fit the proper format.","Max key","Max key","Min key","Min key","Cannot find the expected field with the specified key","Null value","Null value","ObjectId","ObjectId","Contains the success value","Contains the success value","A slice of a BSON document containing a BSON array value …","An owned BSON array value (akin to <code>std::path::PathBuf</code>), …","An iterator over borrowed raw BSON array values.","A BSON binary value referencing raw bytes stored elsewhere.","A BSON value backed by owned raw BSON bytes.","A BSON value referencing raw bytes stored elsewhere.","A BSON DB pointer value referencing raw bytes stored …","A slice of a BSON document (akin to <code>std::str</code>). This can be …","An owned BSON document (akin to <code>std::path::PathBuf</code>), …","A BSON “code with scope” value backed by owned raw …","A BSON “code with scope” value referencing raw bytes …","A BSON regex referencing raw bytes stored elsewhere.","Regular expression","Regular expression","","UTF-8 string","UTF-8 string","Symbol (Deprecated)","Symbol (Deprecated)","Timestamp","Timestamp","Undefined value (Deprecated)","Undefined value (Deprecated)","Found a Bson value with the specified key, but not with …","Improper UTF-8 bytes were found when proper UTF-8 was …","Error to indicate that either a value was empty or it …","The type of error encountered when using a direct getter …","","Append a key value pair to the end of the document without …","Gets a reference to the <code>RawArrayBuf</code> that’s wrapped or …","Gets the <code>RawArray</code> that’s referenced or returns <code>None</code> if …","Gets a mutable reference to the <code>RawArrayBuf</code> that’s …","Gets a reference to the <code>Binary</code> that’s wrapped or returns …","Gets the <code>RawBinaryRef</code> that’s referenced or returns <code>None</code> …","Gets the wrapped <code>bool</code> value or returns <code>None</code> if the wrapped …","Gets the <code>bool</code> that’s referenced or returns <code>None</code> if the …","Gets a reference to the raw bytes of the <code>RawArray</code>.","Return a reference to the contained data as a <code>&amp;[u8]</code>","Gets the wrapped <code>crate::DateTime</code> value or returns <code>None</code> if …","Gets the <code>crate::DateTime</code> that’s referenced or returns …","Gets a reference to the <code>crate::DbPointer</code> that’s wrapped …","Gets the <code>RawDbPointerRef</code> that’s referenced or returns …","Gets a reference to the <code>RawDocumentBuf</code> that’s wrapped or …","Gets the <code>RawDocument</code> that’s referenced or returns <code>None</code> …","Gets a mutable reference to the <code>RawDocumentBuf</code> that’s …","Gets the wrapped <code>f64</code> value or returns <code>None</code> if the value isn…","Gets the <code>f64</code> that’s referenced or returns <code>None</code> if the …","Gets the wrapped <code>i32</code> value or returns <code>None</code> if the wrapped …","Gets the <code>i32</code> that’s referenced or returns <code>None</code> if the …","Gets the wrapped <code>i64</code> value or returns <code>None</code> if the wrapped …","Gets the <code>i64</code> that’s referenced or returns <code>None</code> if the …","Gets a reference to the code that’s wrapped or returns …","Gets the code that’s referenced or returns <code>None</code> if the …","Gets a reference to the <code>RawJavaScriptCodeWithScope</code> that’…","Gets the <code>RawJavaScriptCodeWithScope</code> that’s referenced or …","Returns <code>Some(())</code> if this value is null, otherwise returns …","Gets the null value that’s referenced or returns <code>None</code> if …","Gets the wrapped <code>crate::oid::ObjectId</code> value or returns <code>None</code>…","Gets the <code>crate::oid::ObjectId</code> that’s referenced or …","Gets a <code>RawBsonRef</code> value referencing this owned raw BSON …","","","","Gets a reference to the <code>Regex</code> that’s wrapped or returns …","Gets the <code>RawRegexRef</code> that’s referenced or returns <code>None</code> …","Gets a reference to the <code>String</code> that’s wrapped or returns …","Gets the <code>&amp;str</code> that’s referenced or returns <code>None</code> if the …","Gets a reference to the symbol that’s wrapped or returns …","Gets the symbol that’s referenced or returns <code>None</code> if the …","Gets the wrapped <code>crate::Timestamp</code> value or returns <code>None</code> if …","Gets the <code>crate::Timestamp</code> that’s referenced or returns …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The binary bytes.","","","","","","","","","","","","","","","","","","","","","","","","","","","The code value.","The JavaScript code.","","","","","","","","","","","","","","","","Get the <code>ElementType</code> of this value.","Get the <code>ElementType</code> of this value.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","Returns the argument unchanged.","","","","","","","","","","","","Returns the argument unchanged.","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Constructs a new <code>RawDocument</code>, validating <em>only</em> the …","Constructs a new <code>RawDocumentBuf</code>, validating <em>only</em> the …","Create a <code>RawDocumentBuf</code> from a <code>Document</code>.","","","Gets a reference to the value at the given index.","Gets a reference to the value corresponding to the given …","Gets a reference to the array at the given index or …","Gets a reference to the array value corresponding to a …","Gets a reference to the BSON binary value at the given …","Gets a reference to the BSON binary value corresponding to …","Gets the boolean at the given index or returns an error if …","Gets a reference to the boolean value corresponding to a …","Gets the DateTime at the given index or returns an error …","Gets a reference to the BSON DateTime value corresponding …","Gets a reference to the document at the given index or …","Gets a reference to the document value corresponding to a …","Gets the BSON double at the given index or returns an …","Gets a reference to the BSON double value corresponding to …","Gets the BSON int32 at the given index or returns an error …","Gets a reference to the BSON int32 value corresponding to …","Gets BSON int64 at the given index or returns an error if …","Gets a reference to the BSON int64 value corresponding to …","Gets the ObjectId at the given index or returns an error …","Gets a reference to the ObjectId value corresponding to a …","Gets a reference to the BSON regex at the given index or …","Gets a reference to the BSON regex value corresponding to …","Gets a reference to the string at the given index or …","Gets a reference to the string value corresponding to a …","Gets a reference to the BSON timestamp at the given index …","Gets a reference to the BSON timestamp value corresponding …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Return the contained data as a <code>Vec&lt;u8&gt;</code>","","","","","","","Whether this array contains any elements or not.","Returns whether this document contains any elements or not.","Gets an iterator over the elements in the <code>RawDocumentBuf</code>, …","The key at which the error was encountered, if any.","The key at which the error was encountered.","The type of error that was encountered.","The type of error that was encountered.","Construct a new, empty <code>RawArrayBuf</code>.","Creates a new, empty <code>RawDocumentBuf</code>.","","","The options for the regex.","The regex pattern to match.","Append a value to the end of the array.","The scope document.","The scope document containing variable bindings.","","","","","","","","","","","","The subtype of the binary value.","Copy the contents into a <code>Binary</code>.","Convert this <code>RawDocumentBuf</code> to a <code>Document</code>, returning an …","","","","","","","","","","","","","","","","Convert this borrowed <code>RawArray</code> into an owned <code>RawArrayBuf</code>.","Convert this <code>RawBsonRef</code> to the equivalent <code>RawBson</code>.","Creates a new <code>RawDocumentBuf</code> with an owned copy of the …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The actual type that was encountered.","The type that was expected.","Contains the error value","Possible errors that can arise during encoding.","An invalid string was specified.","A key could not be serialized to a BSON string.","A <code>std::io::Error</code> encountered while serializing.","Contains the success value","Alias for <code>Result&lt;T, Error&gt;</code>.","A general error that occurred during serialization. See: …","Serde Serializer","Options used to configure a <code>Serializer</code>.","An unsigned integer type could not fit into a signed …","","","","","","","Create a builder used to construct a new <code>SerializerOptions</code>.","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Whether the <code>Serializer</code> should present itself as human …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Construct a new <code>Serializer</code>.","Construct a new <code>Serializer</code> configured with the provided …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Encode a <code>T</code> Serializable into a <code>Bson</code> value.","Encode a <code>T</code> into a <code>Bson</code> value, configuring the underlying …","Encode a <code>T</code> Serializable into a BSON <code>Document</code>.","Encode a <code>T</code> into a <code>Document</code>, configuring the underlying …","","","Serialize the given <code>T</code> as a <code>RawDocumentBuf</code>.","","Serialize the given <code>T</code> as a BSON byte vector.","","","","","","","","","","","","","A message describing the error.","Contains functions to serialize a <code>crate::DateTime</code> as an …","Deserializes a <code>crate::DateTime</code> from an RFC 3339 formatted …","Deserializes a hex string from an ObjectId.","Deserializes a i64 integer from a DateTime.","Deserializes an ISO string from a DateTime.","Deserializes a bson::Timestamp from a u32.","Deserializes a u32 from an f64 (BSON double). Errors if an …","Deserializes a u32 from a bson::Timestamp.","Deserializes a u64 from an f64 (BSON double). Errors if an …","Contains functions to serialize a hex string as an …","Contains functions to <code>serialize</code> a <code>i64</code> integer as <code>DateTime</code> …","Contains functions to serialize an RFC 3339 (ISO 8601) …","Serializes a <code>crate::DateTime</code> as an RFC 3339 (ISO 8601) …","Serializes a hex string as an ObjectId.","Serializes a i64 integer as a DateTime.","Serializes an <code>ObjectId</code> as a hex string.","Serializes an ISO string as a DateTime.","Serializes a bson::Timestamp as a u32. Returns an error if …","Serializes a u32 as an f64 (BSON double).","Attempts to serialize a u32 as an i32. Errors if an exact …","Serializes a u32 as an i64.","Serializes a u32 as a bson::Timestamp.","Serializes a u64 as an f64 (BSON double). Errors if an …","Attempts to serialize a u64 as an i32. Errors if an exact …","Attempts to serialize a u64 as an i64. Errors if an exact …","Contains functions to serialize a bson::Timestamp as a u32 …","Contains functions to serialize a u32 as an f64 (BSON …","Contains functions to serialize a u32 as a bson::Timestamp …","Contains functions to serialize a u64 as an f64 (BSON …","Deserializes a <code>crate::DateTime</code> from an RFC 3339 formatted …","Serializes a <code>crate::DateTime</code> as an RFC 3339 (ISO 8601) …","Deserializes a hex string from an ObjectId.","Serializes a hex string as an ObjectId.","Deserializes a i64 integer from a DateTime.","Serializes a i64 integer as a DateTime.","Deserializes an ISO string from a DateTime.","Serializes an ISO string as a DateTime.","Deserializes a bson::Timestamp from a u32.","Serializes a bson::Timestamp as a u32. Returns an error if …","Deserializes a u32 from an f64 (BSON double). Errors if an …","Serializes a u32 as an f64 (BSON double).","Deserializes a u32 from a bson::Timestamp.","Serializes a u32 as a bson::Timestamp.","Deserializes a u64 from an f64 (BSON double). Errors if an …","Serializes a u64 as an f64 (BSON double). Errors if an …","Array","Binary data","","The available binary subtypes, plus a user-defined slot.","Bool value","","UTC datetime","Deprecated.","128-bit decimal floating point","64-bit binary floating point","All available BSON element types.","Embedded document","","","","32-bit integer","64-bit integer","JavaScript code","JavaScript code w/ scope","","","","Null value","ObjectId","Regular expression - The first cstring is the regex …","","UTF-8 string","Deprecated.","Timestamp","Deprecated. Undefined (value)","","","","","","","","","","","","","","","","","","","","","","","","Attempt to convert from a <code>u8</code>.","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","The legacy representation of UUIDs in BSON used by the C# …","Contains the error value","Errors that can occur during <code>Uuid</code> construction and …","Error returned from <code>crate::Binary::to_uuid</code> if the …","Error returned when an invalid string is provided to …","The legacy representation of UUIDs in BSON used by the …","Contains the success value","The legacy representation of UUIDs in BSON used by the …","Error returned when the representation specified does not …","Alias for <code>Result&lt;T, bson::uuid::Error&gt;</code>.","The canonical representation of UUIDs in BSON (binary with …","A struct modeling a BSON UUID value (i.e. a Binary value …","Enum of the possible representations to use when …","","","Returns an array of 16 bytes containing the <code>Uuid</code>’s data.","","","","","Returns the argument unchanged.","Creates a <code>Uuid</code> using the supplied big-endian bytes.","Calls <code>U::from(self)</code>.","Creates a random UUID.","Creates a <code>Uuid</code> from the provided hex string.","","","","","","","The actual subtype of the binary value.","The subtype that was expected given the requested …","The actual length of the data.","","The requested representation."],"i":[0,1,51,55,0,1,51,55,1,51,55,0,20,0,1,51,55,0,1,51,55,0,1,51,55,0,0,0,1,51,55,1,51,55,1,51,55,1,51,55,20,1,51,55,0,1,51,55,1,51,55,1,51,55,1,51,55,1,51,55,20,0,0,0,0,0,0,0,0,0,0,0,0,1,51,55,0,0,20,1,51,55,1,51,55,0,1,51,55,1,51,55,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,15,1,14,16,17,6,5,18,7,19,20,15,1,14,16,17,6,5,18,7,19,20,0,15,58,15,1,14,16,17,6,5,18,7,19,20,15,1,14,16,17,6,5,18,7,19,20,14,5,19,17,98,96,14,5,19,0,0,0,1,7,19,15,1,14,16,17,6,5,18,7,19,0,0,1,15,1,14,16,17,6,5,18,7,19,20,14,14,14,14,5,5,5,5,19,19,19,19,7,0,15,15,1,1,14,14,16,16,17,17,6,5,5,18,18,7,7,19,19,20,15,15,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,14,16,17,6,5,5,18,7,19,20,0,0,0,0,1,7,0,0,0,0,18,14,5,19,40,49,14,15,1,14,16,17,6,5,18,7,19,20,1,7,7,1,0,16,97,14,5,19,16,97,0,0,0,17,98,96,0,0,15,1,14,16,17,6,5,18,7,19,0,15,58,14,0,0,0,0,15,1,14,16,17,6,5,18,7,19,20,0,15,1,14,16,17,5,18,7,19,0,15,1,1,1,1,1,14,16,17,6,5,18,7,7,7,7,19,20,15,1,14,16,17,6,5,18,7,19,20,15,1,14,16,17,6,5,18,7,19,20,0,15,1,14,16,17,6,5,18,7,19,20,0,59,60,0,60,0,15,59,59,15,59,59,59,59,59,15,15,15,59,15,59,59,15,15,59,59,59,59,113,67,0,0,65,0,67,5,5,65,0,64,67,64,67,64,5,5,67,67,64,64,67,67,64,67,5,5,64,64,67,64,64,64,5,5,5,64,5,67,5,67,5,64,67,64,67,5,64,67,64,67,64,114,115,69,0,0,69,38,0,69,69,38,0,69,71,69,40,71,69,40,40,69,40,69,40,69,40,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,69,69,40,71,69,69,69,40,0,0,0,0,0,0,0,0,40,71,69,40,71,71,71,69,69,40,69,71,69,40,71,69,40,71,69,40,71,69,40,116,116,117,0,77,77,77,77,77,0,77,77,77,18,77,77,77,18,77,77,77,77,77,77,77,0,0,80,0,0,0,0,78,79,0,80,78,79,0,0,0,0,85,81,84,86,82,79,118,83,78,85,81,84,86,82,79,118,83,78,7,78,78,7,7,78,78,78,85,81,84,86,82,79,118,83,78,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,85,81,84,86,82,79,118,83,78,85,81,84,86,82,7,7,7,7,79,83,7,7,7,85,81,84,86,82,79,79,7,78,78,7,85,81,84,86,82,79,118,83,78,85,81,84,86,82,79,118,83,78,85,81,84,86,82,79,118,83,78,7,85,81,84,86,82,79,118,83,78,0,89,53,0,89,53,0,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,119,92,0,90,90,0,92,0,90,12,90,12,12,90,12,90,12,12,12,12,12,12,12,12,12,12,90,90,12,12,90,12,12,12,12,12,90,12,12,12,12,12,12,12,90,12,90,12,90,12,90,12,90,12,90,12,120,120,121,120,121,51,55,51,55,51,55,51,55,51,55,51,55,51,55,51,55,52,103,0,0,51,55,51,55,102,0,51,55,51,55,100,51,55,51,55,102,51,55,51,55,52,103,0,0,0,0,0,0,0,0,0,0,0,0,51,55,0,51,55,51,55,51,55,51,55,102,100,0,0,0,50,51,55,51,51,55,51,55,93,56,51,55,51,55,51,55,51,51,55,51,55,51,55,51,55,51,55,51,55,51,55,51,94,56,50,51,55,51,55,51,55,51,55,104,105,93,94,94,51,98,55,58,97,96,95,56,50,50,99,100,101,102,104,105,93,94,51,98,55,58,97,96,95,56,50,99,100,101,102,58,94,51,98,55,58,97,96,95,50,99,100,101,102,94,51,98,55,58,97,96,95,50,99,100,101,102,98,96,94,50,94,50,93,94,51,98,55,58,97,96,95,56,50,51,55,93,94,51,98,55,58,97,96,95,56,50,99,100,101,102,93,94,51,98,55,58,97,96,95,56,50,99,99,100,101,101,102,104,105,94,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,98,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,58,97,96,95,50,99,100,101,102,56,50,50,94,50,93,56,93,56,93,56,93,56,93,56,93,56,93,56,93,56,93,56,93,56,93,56,93,56,93,56,104,105,94,51,98,55,58,97,96,95,50,99,100,101,102,50,104,105,93,94,56,50,93,56,50,99,101,99,101,94,50,104,105,97,97,94,98,96,93,94,51,98,55,58,97,96,95,56,50,58,58,50,93,94,51,98,55,58,97,96,95,56,50,99,100,101,102,93,55,56,99,101,104,105,94,51,51,98,55,58,97,96,95,50,50,99,100,101,102,104,105,94,51,98,55,58,97,96,95,50,99,100,101,102,104,105,93,94,51,98,55,58,97,96,95,56,50,99,100,101,102,104,105,94,51,98,55,58,97,96,95,50,99,100,101,102,122,123,123,46,0,106,106,106,46,0,106,0,0,106,107,106,49,107,106,49,49,106,106,49,106,49,106,49,106,106,49,107,106,106,49,49,107,106,49,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,0,0,0,0,106,49,0,106,0,107,106,49,107,106,49,107,106,49,107,106,49,124,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,24,24,62,0,24,62,24,24,24,24,0,24,62,62,62,24,24,24,24,24,62,24,24,24,24,62,24,24,24,24,62,62,62,24,62,24,62,24,62,24,62,24,62,24,24,24,24,62,62,62,62,24,62,24,24,62,62,62,24,62,24,62,24,62,24,62,24,62,24,62,20,63,0,112,112,20,63,20,112,0,20,0,0,112,112,19,112,112,112,112,112,19,112,19,19,112,112,112,112,112,112,125,125,126,127,125],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[1,[[3,[2]]]],[1,[[3,[2]]]],[1,[[3,[4]]]],[1,[[3,[5]]]],[1,[[3,[5]]]],[1,[[3,[6]]]],[1,[[3,[7]]]],[1,[[3,[7]]]],[1,[[3,[8]]]],[1,[[3,[9]]]],[1,[[3,[10]]]],[1,[[3,[11]]]],[1,[[3,[12]]]],[1,[[3,[12]]]],[1,[[3,[13]]]],[1,[[3,[13]]]],[1,[[3,[13]]]],[1,[[3,[13]]]],[1,[[3,[14]]]],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,[15,15],[1,1],[14,14],[16,16],[17,17],[6,6],[5,5],[18,18],[7,7],[19,19],[20,20],[[-1,-2],11,[],[]],[[-1,-2],11,[],[]],[[-1,-2],11,[],[]],[[-1,-2],11,[],[]],[[-1,-2],11,[],[]],[[-1,-2],11,[],[]],[[-1,-2],11,[],[]],[[-1,-2],11,[],[]],[[-1,-2],11,[],[]],[[-1,-2],11,[],[]],[[-1,-2],11,[],[]],[[14,14],21],[[5,5],21],[[19,19],21],0,0,0,[[-1,-2],21,[],[]],[[-1,-2],21,[],[]],[[-1,-2],21,[],[]],0,0,0,[[],1],[[],7],[[],19],[-1,[[22,[15]]],23],[-1,[[22,[1]]],23],[-1,[[22,[14]]],23],[-1,[[22,[16]]],23],[-1,[[22,[17]]],23],[-1,[[22,[6]]],23],[-1,[[22,[5]]],23],[-1,[[22,[18]]],23],[-1,[[22,[7]]],23],[-1,[[22,[19]]],23],0,0,[1,24],[[15,15],4],[[1,1],4],[[14,14],4],[[16,16],4],[[17,17],4],[[6,6],4],[[5,5],4],[[18,18],4],[[7,7],4],[[19,19],4],[[20,20],4],[[-1,-2],4,[],[]],[[-1,-2],4,[],[]],[[-1,-2],4,[],[]],[[-1,-2],4,[],[]],[[-1,-2],4,[],[]],[[-1,-2],4,[],[]],[[-1,-2],4,[],[]],[[-1,-2],4,[],[]],[[-1,-2],4,[],[]],[[-1,-2],4,[],[]],[[-1,-2],4,[],[]],[[-1,-2],4,[],[]],[[7,-1],11,25],0,[[15,26],27],[[15,26],27],[[1,26],27],[[1,26],27],[[14,26],27],[[14,26],27],[[16,26],27],[[16,26],27],[[17,26],27],[[17,26],27],[[6,26],27],[[5,26],27],[[5,26],27],[[18,26],27],[[18,26],27],[[7,26],27],[[7,26],27],[[19,26],27],[[19,26],27],[[20,26],27],[-1,-1,[]],[19,15],[[[3,[-1]]],1,[[28,[1]]]],[15,1],[-1,-1,[]],[-1,1,[29,[28,[1]]]],[14,1],[6,1],[30,1],[7,1],[[[31,[-1]]],1,[29,[28,[1]]]],[17,1],[16,1],[8,1],[19,1],[[[33,[32]]],1],[34,1],[[[35,[-1]]],1,[[28,[1]]]],[36,1],[13,1],[10,1],[12,1],[5,1],[4,1],[9,1],[18,1],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[37,5],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[1,[[38,[-1]]],39],[[1,40],[[38,[-1]]],39],[7,[[38,[-1]]],39],[[7,40],[[38,[-1]]],39],[-1,1,25],[-1,7,25],[-1,[[38,[-2]]],41,39],[-1,[[38,[-2]]],41,39],[[[31,[32]]],[[38,[-1]]],42],[[[31,[32]]],[[38,[-1]]],42],[13,[[22,[18]]]],[[14,-1],11,43],[[5,-1],11,43],[[19,-1],11,43],0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[1,44],[7],[7],[1,44],0,0,0,[[14,14],[[3,[21]]]],[[5,5],[[3,[21]]]],[[19,19],[[3,[21]]]],0,0,0,0,0,0,0,0,0,0,[[15,-1],22,45],[[1,-1],22,45],[[14,-1],22,45],[[16,-1],22,45],[[17,-1],22,45],[[6,-1],22,45],[[5,-1],22,45],[[18,-1],22,45],[[7,-1],22,45],[[19,-1],22,45],0,0,0,0,[-1,[[46,[1]]],[47,48]],[[-1,49],[[46,[1]]],[47,48]],[-1,[[46,[7]]],[47,48]],[[-1,49],[[46,[7]]],[47,48]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[46,[50]]],47],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,[[46,[[35,[32]]]]],47],[-1,[[22,[-2]]],[],[]],[-1,[[22,[-2]]],[],[]],[51,[[52,[1]]]],[44,[[53,[1]]]],[[[54,[30,44]]],[[53,[1]]]],[55,[[52,[1]]]],[-1,[[22,[-2]]],[],[]],[-1,[[22,[-2]]],[],[]],[-1,[[22,[-2]]],[],[]],[-1,[[22,[-2]]],[],[]],[-1,[[22,[-2]]],[],[]],[-1,[[22,[-2]]],[],[]],[56,[[52,[7]]]],[50,[[52,[7]]]],[-1,[[22,[-2]]],[],[]],[[[54,[30,44]]],[[53,[7]]]],[-1,[[22,[-2]]],[],[]],[-1,[[22,[-2]]],[],[]],[-1,[[22,[-2]]],[],[]],[-1,[[22,[-2]]],[],[]],[-1,[[22,[-2]]],[],[]],[-1,[[22,[-2]]],[],[]],[-1,[[22,[-2]]],[],[]],[-1,[[22,[-2]]],[],[]],[-1,[[22,[-2]]],[],[]],[-1,[[22,[-2]]],[],[]],[-1,[[22,[-2]]],[],[]],[-1,[[22,[-2]]],[],[]],[-1,[[22,[-2]]],[],[]],[-1,57,[]],[-1,57,[]],[-1,57,[]],[-1,57,[]],[-1,57,[]],[-1,57,[]],[-1,57,[]],[-1,57,[]],[-1,57,[]],[-1,57,[]],[-1,57,[]],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,[15,58],[-1,-2,[],[]],[-1,-2,[],[]],0,[59,59],[[-1,-2],11,[],[]],[[59,26],27],[[59,26],27],[-1,-1,[]],[[-1,-2],[[60,[15]]],[[61,[13]]],[[28,[[3,[62]]]]]],[19,15],[[19,20],15],[-1,-2,[],[]],0,[-1,-2,[],[]],[-1,30,[]],[15,[[63,[19]]]],[[15,20],[[63,[19]]]],[-1,[[22,[-2]]],[],[]],[-1,[[22,[-2]]],[],[]],[-1,57,[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[64,[0,0,0]]],[[65,[5]]]],[[],64],[[5,5],[[3,[66]]]],[67,67],[[-1,-2],11,[],[]],[[[64,[-1,-2,0]],32],[[64,[-1,-2,0]]],[],[]],[[],64],[[67,26],27],[[67,26],27],[-1,-1,[]],[-1,-1,[]],[10,5],[37,5],[[[64,[-1,-2,-3]],32],[[64,[-1,-2,-3]]],[],[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[64,[-1,-2,-3]],68],[[64,[-1,-2,-3]]],[],[],[]],[[[64,[-1,-2,-3]],32],[[64,[-1,-2,-3]]],[],[],[]],[[[64,[-1,0,-2]],32],[[64,[-1,0,-2]]],[],[]],[[],5],[-1,[[65,[5]]],[[61,[13]]]],[[5,5],66],[[[64,[-1,-2,-3]],32],[[64,[-1,-2,-3]]],[],[],[]],[5,10],[-1,-2,[],[]],[5,30],[-1,30,[]],[5,37],[-1,[[22,[-2]]],[],[]],[-1,[[22,[-2]]],[],[]],[-1,[[22,[-2]]],[],[]],[-1,[[22,[-2]]],[],[]],[5,[[65,[30]]]],[-1,57,[]],[-1,57,[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[64,[0,-1,-2]],9],[[64,[0,-1,-2]]],[],[]],0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[69,69],[40,40],[[-1,-2],11,[],[]],[[-1,-2],11,[],[]],[-1,69,70],[[],40],[[71,-1],38,72],[[71,-1],22,72],[[71,-1],22,72],[[71,-1],22,72],[[71,-1],22,72],[[71,13,[31,[13]],-1],38,72],[[71,-1],22,72],[[71,-1],22,72],[[71,-1],22,72],[[71,-1],22,72],[[71,-1],22,72],[[71,-1],22,72],[[71,-1],22,72],[[71,-1],22,72],[[71,-1],22,72],[[71,13,-1],38,72],[[71,-1],38,72],[[71,-1],22,72],[[71,-1],22,72],[[71,-1],22,72],[[71,13,[31,[13]],-1],22,72],[[71,73,-1],22,72],[[71,13,73,-1],22,72],[[71,-1],22,72],[[71,-1],22,72],[[71,-1],22,72],[[71,-1],22,72],[[71,-1],22,72],[[71,13,-1],22,72],[[69,26],27],[[69,26],27],[[40,26],27],[-1,-1,[]],[-1,-1,[]],[74,69],[75,69],[-1,-1,[]],[1,[[38,[-1]]],39],[[1,40],[[38,[-1]]],39],[7,[[38,[-1]]],39],[[7,40],[[38,[-1]]],39],[-1,[[38,[-2]]],41,39],[-1,[[38,[-2]]],41,39],[[[31,[32]]],[[38,[-1]]],42],[[[31,[32]]],[[38,[-1]]],42],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[71,4],[1,71],[[1,40],71],[69,[[3,[76]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,30,[]],[-1,[[22,[-2]]],[],[]],[-1,[[22,[-2]]],[],[]],[-1,[[22,[-2]]],[],[]],[-1,[[22,[-2]]],[],[]],[-1,[[22,[-2]]],[],[]],[-1,[[22,[-2]]],[],[]],[-1,57,[]],[-1,57,[]],[-1,57,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[18,[[33,[32]]]],[[77,26],27],[[77,26],27],[-1,-1,[]],[[[33,[32]]],18],[-1,-2,[],[]],[77,[[3,[76]]]],[-1,30,[]],[-1,[[22,[-2]]],[],[]],[-1,[[22,[-2]]],[],[]],[-1,57,[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[7,11],[78,78],[[-1,-2],11,[],[]],[[7,-1],4,[[61,[13]]]],[[7,30],79],[[78,78],4],[[78,26],27],[[78,26],27],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,[[38,[7]]],41],[-1,[[38,[7]]],41],[[7,-1],[[3,[1]]],[[61,[13]]]],[[7,-1],[[80,[2]]],[[61,[13]]]],[[7,-1],[[80,[2]]],[[61,[13]]]],[[7,-1],[[80,[[35,[32]]]]],[[61,[13]]]],[[7,-1],[[80,[[35,[32]]]]],[[61,[13]]]],[[7,-1],[[80,[4]]],[[61,[13]]]],[[7,-1],[[80,[4]]],[[61,[13]]]],[[7,-1],[[80,[5]]],[[61,[13]]]],[[7,-1],[[80,[5]]],[[61,[13]]]],[[7,-1],[[80,[18]]],[[61,[13]]]],[[7,-1],[[80,[18]]],[[61,[13]]]],[[7,-1],[[80,[7]]],[[61,[13]]]],[[7,-1],[[80,[7]]],[[61,[13]]]],[[7,-1],[[80,[8]]],[[61,[13]]]],[[7,-1],[[80,[8]]],[[61,[13]]]],[[7,-1],[[80,[9]]],[[61,[13]]]],[[7,-1],[[80,[9]]],[[61,[13]]]],[[7,-1],[[80,[10]]],[[61,[13]]]],[[7,-1],[[80,[10]]],[[61,[13]]]],[[7,-1],[[3,[1]]],[[61,[13]]]],[[7,-1],[[80,[12]]],[[61,[13]]]],[[7,-1],[[80,[12]]],[[61,[13]]]],[[7,-1],[[80,[13]]],[[61,[13]]]],[[7,-1],[[80,[13]]],[[61,[13]]]],[[7,-1],[[80,[14]]],[[61,[13]]]],[[7,-1],[[80,[14]]],[[61,[13]]]],[[7,-1,-2],[[3,[1]]],[[28,[30]]],[[28,[1]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[7,4],[[7,-1],4,[[61,[13]]]],[7,81],[7,82],[79,13],[83,13],[7,84],[7,73],[[],7],[85,[[3,[[11,[30,1]]]]]],[81,[[3,[[11,[30,1]]]]]],[84,[[3,[30]]]],[86,[[3,[1]]]],[82,[[3,[[11,[30,1]]]]]],[[79,1],1],[[79,-1],1,87],[[7,-1],[[3,[1]]],[[61,[13]]]],[-1,-2,[],[]],[-1,30,[]],[[7,-1],[[46,[11]]],88],[-1,[[22,[-2]]],[],[]],[-1,[[22,[-2]]],[],[]],[-1,[[22,[-2]]],[],[]],[-1,[[22,[-2]]],[],[]],[-1,[[22,[-2]]],[],[]],[-1,[[22,[-2]]],[],[]],[-1,[[22,[-2]]],[],[]],[-1,[[22,[-2]]],[],[]],[-1,[[22,[-2]]],[],[]],[-1,[[22,[-2]]],[],[]],[-1,[[22,[-2]]],[],[]],[-1,[[22,[-2]]],[],[]],[-1,[[22,[-2]]],[],[]],[-1,[[22,[-2]]],[],[]],[-1,[[22,[-2]]],[],[]],[-1,[[22,[-2]]],[],[]],[-1,[[22,[-2]]],[],[]],[-1,[[22,[-2]]],[],[]],[-1,57,[]],[-1,57,[]],[-1,57,[]],[-1,57,[]],[-1,57,[]],[-1,57,[]],[-1,57,[]],[-1,57,[]],[-1,57,[]],[7,86],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[89,89],[[-1,-2],11,[],[]],[-1,89,70],[[89,26],27],[[89,26],27],[90,89],[91,89],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,30,[]],[-1,[[22,[-2]]],[],[]],[-1,[[22,[-2]]],[],[]],[-1,57,[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[12,[[33,[32]]]],[90,90],[12,12],[[-1,-2],11,[],[]],[[-1,-2],11,[],[]],[[12,12],21],[[-1,-2],21,[],[]],[[],12],[-1,[[22,[12]]],23],[[12,12],4],[[-1,-2],4,[],[]],[[-1,-2],4,[],[]],[[-1,-2],4,[],[]],[[-1,-2],4,[],[]],[[90,26],27],[[90,26],27],[[12,26],27],[[12,26],27],[-1,-1,[]],[-1,-1,[]],[[[33,[32]]],12],[[[33,[32]]],12],[13,[[22,[12]]]],[[12,-1],11,43],[-1,-2,[],[]],[-1,-2,[],[]],[[],12],[-1,[[92,[12]]],[[61,[13]]]],[[12,12],[[3,[21]]]],[[12,-1],22,45],[12,5],[12,30],[-1,-2,[],[]],[-1,-2,[],[]],[-1,30,[]],[-1,30,[]],[-1,[[22,[-2]]],[],[]],[-1,[[22,[-2]]],[],[]],[-1,[[22,[-2]]],[],[]],[-1,[[22,[-2]]],[],[]],[-1,57,[]],[-1,57,[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[50,-1,-2],11,[[61,[13]]],[[28,[51]]]],[51,[[3,[93]]]],[55,[[3,[93]]]],[51,[[3,[94]]]],[51,[[3,[58]]]],[55,[[3,[58]]]],[51,[[3,[4]]]],[55,[[3,[4]]]],[93,[[31,[32]]]],[56,[[31,[32]]]],[51,[[3,[5]]]],[55,[[3,[5]]]],[51,[[3,[95]]]],[55,[[3,[95]]]],[51,[[3,[56]]]],[55,[[3,[56]]]],[51,[[3,[50]]]],[51,[[3,[8]]]],[55,[[3,[8]]]],[51,[[3,[9]]]],[55,[[3,[9]]]],[51,[[3,[10]]]],[55,[[3,[10]]]],[51,[[3,[13]]]],[55,[[3,[13]]]],[51,[[3,[96]]]],[55,[[3,[96]]]],[51,[[3,[11]]]],[55,[[3,[11]]]],[51,[[3,[12]]]],[55,[[3,[12]]]],[51,55],[94,93],[56,56],[50,56],[51,[[3,[97]]]],[55,[[3,[97]]]],[51,[[3,[13]]]],[55,[[3,[13]]]],[51,[[3,[13]]]],[55,[[3,[13]]]],[51,[[3,[14]]]],[55,[[3,[14]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[94,93],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[50,56],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[94,94],[51,51],[98,98],[55,55],[58,58],[97,97],[96,96],[95,95],[50,50],[99,99],[100,100],[101,101],[102,102],[[-1,-2],11,[],[]],[[-1,-2],11,[],[]],[[-1,-2],11,[],[]],[[-1,-2],11,[],[]],[[-1,-2],11,[],[]],[[-1,-2],11,[],[]],[[-1,-2],11,[],[]],[[-1,-2],11,[],[]],[[-1,-2],11,[],[]],[[-1,-2],11,[],[]],[[-1,-2],11,[],[]],[[-1,-2],11,[],[]],[[-1,-2],11,[],[]],0,0,[[],94],[[],50],[94],[50],[-1,[[22,[93]]],23],[-1,[[22,[94]]],23],[-1,[[22,[51]]],23],[-1,[[22,[98]]],23],[-1,[[22,[55]]],23],[-1,[[22,[58]]],23],[-1,[[22,[97]]],23],[-1,[[22,[96]]],23],[-1,[[22,[95]]],23],[-1,[[22,[56]]],23],[-1,[[22,[50]]],23],[51,24],[55,24],[[93,93],4],[[94,94],4],[[51,51],4],[[98,98],4],[[55,55],4],[[58,58],4],[[97,97],4],[[96,96],4],[[95,95],4],[[56,56],4],[[50,50],4],[[99,99],4],[[100,100],4],[[101,101],4],[[102,102],4],[[93,26],27],[[94,26],27],[[51,26],27],[[98,26],27],[[55,26],27],[[58,26],27],[[97,26],27],[[96,26],27],[[95,26],27],[[56,26],27],[[50,26],27],[[99,26],27],[[99,26],27],[[100,26],27],[[101,26],27],[[101,26],27],[[102,26],27],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[50,51],[16,51],[13,51],[30,51],[18,51],[-1,-1,[]],[14,51],[8,51],[12,51],[10,51],[94,51],[9,51],[4,51],[15,51],[6,51],[5,51],[98,51],[-1,-1,[]],[93,55],[12,55],[14,55],[58,55],[96,55],[50,55],[97,55],[10,55],[94,55],[9,55],[18,55],[56,55],[4,55],[13,55],[15,55],[8,55],[-1,-1,[]],[5,55],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,[[52,[56]]],[[61,[[31,[32]]]],48]],[[[35,[32]]],[[52,[50]]]],[7,[[52,[50]]]],[-1,94,25],[-1,50,25],[[93,73],[[52,[[3,[55]]]]]],[[56,-1],[[52,[[3,[55]]]]],[[61,[13]]]],[[93,73],[[103,[93]]]],[[56,-1],[[103,[93]]],[[61,[13]]]],[[93,73],[[103,[58]]]],[[56,-1],[[103,[58]]],[[61,[13]]]],[[93,73],[[103,[4]]]],[[56,-1],[[103,[4]]],[[61,[13]]]],[[93,73],[[103,[5]]]],[[56,-1],[[103,[5]]],[[61,[13]]]],[[93,73],[[103,[56]]]],[[56,-1],[[103,[56]]],[[61,[13]]]],[[93,73],[[103,[8]]]],[[56,-1],[[103,[8]]],[[61,[13]]]],[[93,73],[[103,[9]]]],[[56,-1],[[103,[9]]],[[61,[13]]]],[[93,73],[[103,[10]]]],[[56,-1],[[103,[10]]],[[61,[13]]]],[[93,73],[[103,[12]]]],[[56,-1],[[103,[12]]],[[61,[13]]]],[[93,73],[[103,[97]]]],[[56,-1],[[103,[97]]],[[61,[13]]]],[[93,73],[[103,[13]]]],[[56,-1],[[103,[13]]],[[61,[13]]]],[[93,73],[[103,[14]]]],[[56,-1],[[103,[14]]],[[61,[13]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[50,[[35,[32]]]],[-1,-2,[],[]],[-1,-2,[],[]],[93,104],[94,104],[56,105],[50,105],[93,4],[56,4],[50,105],[99,[[3,[13]]]],[101,13],0,0,[[],94],[[],50],[104,[[3,[[52,[55]]]]]],[105,[[3,[[52,[[11,[13,55]]]]]]]],0,0,[[94,-1],11,[[28,[51]]]],0,0,[[93,-1],22,45],[[94,-1],22,45],[[51,-1],22,45],[[98,-1],22,45],[[55,-1],22,45],[[58,-1],22,45],[[97,-1],22,45],[[96,-1],22,45],[[95,-1],22,45],[[56,-1],22,45],[[50,-1],22,45],0,[58,15],[50,[[52,[7]]]],[93],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[56],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[93,94],[55,51],[56,50],[-1,30,[]],[-1,30,[]],[-1,[[22,[-2]]],[],[]],[-1,[[22,[-2]]],[],[]],[-1,[[22,[-2]]],[],[]],[1,[[52,[51]]]],[-1,[[22,[-2]]],[],[]],[-1,[[22,[-2]]],[],[]],[-1,[[22,[-2]]],[],[]],[-1,[[22,[-2]]],[],[]],[-1,[[22,[-2]]],[],[]],[-1,[[22,[-2]]],[],[]],[-1,[[22,[-2]]],[],[]],[-1,[[22,[-2]]],[],[]],[7,[[52,[50]]]],[-1,[[22,[-2]]],[],[]],[-1,[[22,[-2]]],[],[]],[-1,[[22,[-2]]],[],[]],[-1,[[22,[-2]]],[],[]],[-1,[[22,[-2]]],[],[]],[-1,[[22,[-2]]],[],[]],[-1,[[22,[-2]]],[],[]],[-1,[[22,[-2]]],[],[]],[-1,[[22,[-2]]],[],[]],[-1,[[22,[-2]]],[],[]],[-1,[[22,[-2]]],[],[]],[-1,[[22,[-2]]],[],[]],[-1,[[22,[-2]]],[],[]],[-1,[[22,[-2]]],[],[]],[-1,[[22,[-2]]],[],[]],[-1,[[22,[-2]]],[],[]],[-1,[[22,[-2]]],[],[]],[-1,[[22,[-2]]],[],[]],[-1,[[22,[-2]]],[],[]],[-1,57,[]],[-1,57,[]],[-1,57,[]],[-1,57,[]],[-1,57,[]],[-1,57,[]],[-1,57,[]],[-1,57,[]],[-1,57,[]],[-1,57,[]],[-1,57,[]],[-1,57,[]],[-1,57,[]],[-1,57,[]],[-1,57,[]],[-1,57,[]],[-1,57,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[106,[[3,[76]]]],[106,106],[49,49],[[-1,-2],11,[],[]],[[-1,-2],11,[],[]],[-1,106,70],[[],49],[[106,26],27],[[106,26],27],[[49,26],27],[-1,-1,[]],[-1,-1,[]],[74,106],[-1,-1,[]],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[107,4],[[],107],[49,107],[[107,4],[[46,[1]]]],[[107,[31,[32]]],[[46,[1]]]],[[107,108],[[46,[1]]]],[[107,36],[[46,[1]]]],[[107,8],[[46,[1]]]],[[107,109],[[46,[1]]]],[[107,9],[[46,[1]]]],[[107,10],[[46,[1]]]],[[107,110],[[46,[1]]]],[[107,[3,[73]]],46],[[107,13,-1],[[46,[1]]],[47,48]],[[107,13,34,13,-1],[[46,[1]]],[47,48]],[107,[[46,[1]]]],[[107,[3,[73]]],46],[[107,-1],[[46,[1]]],[47,48]],[[107,13],[[46,[1]]]],[[107,13,73],46],[[107,13,34,13,73],46],[[107,73],46],[[107,13,73],46],[[107,13,34,13,73],46],[[107,68],[[46,[1]]]],[[107,34],[[46,[1]]]],[[107,111],[[46,[1]]]],[[107,32],[[46,[1]]]],[107,[[46,[1]]]],[[107,13],[[46,[1]]]],[[107,13,34,13],[[46,[1]]]],[-1,[[46,[1]]],[47,48]],[[-1,49],[[46,[1]]],[47,48]],[-1,[[46,[7]]],[47,48]],[[-1,49],[[46,[7]]],[47,48]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[46,[50]]],47],[-1,30,[]],[-1,[[46,[[35,[32]]]]],47],[-1,[[22,[-2]]],[],[]],[-1,[[22,[-2]]],[],[]],[-1,[[22,[-2]]],[],[]],[-1,[[22,[-2]]],[],[]],[-1,[[22,[-2]]],[],[]],[-1,[[22,[-2]]],[],[]],[-1,57,[]],[-1,57,[]],[-1,57,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,[-1,[[22,[5]]],23],[-1,[[22,[30]]],23],[-1,[[22,[10]]],23],[-1,[[22,[30]]],23],[-1,[[22,[14]]],23],[-1,[[22,[34]]],23],[-1,[[22,[34]]],23],[-1,[[22,[111]]],23],0,0,0,[[5,-1],22,45],[[13,-1],22,45],[[10,-1],22,45],[[12,-1],22,45],[[13,-1],22,45],[[14,-1],22,45],[[34,-1],22,45],[[34,-1],22,45],[[34,-1],22,45],[[34,-1],22,45],[[111,-1],22,45],[[111,-1],22,45],[[111,-1],22,45],0,0,0,0,[-1,[[22,[5]]],23],[[5,-1],22,45],[-1,[[22,[30]]],23],[[13,-1],22,45],[-1,[[22,[10]]],23],[[10,-1],22,45],[-1,[[22,[30]]],23],[[13,-1],22,45],[-1,[[22,[14]]],23],[[14,-1],22,45],[-1,[[22,[34]]],23],[[34,-1],22,45],[-1,[[22,[34]]],23],[[34,-1],22,45],[-1,[[22,[111]]],23],[[111,-1],22,45],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[24,24],[62,62],[[-1,-2],11,[],[]],[[-1,-2],11,[],[]],[[24,24],4],[[62,62],4],[[-1,-2],4,[],[]],[[-1,-2],4,[],[]],[[-1,-2],4,[],[]],[[-1,-2],4,[],[]],[[-1,-2],4,[],[]],[[-1,-2],4,[],[]],[[-1,-2],4,[],[]],[[-1,-2],4,[],[]],[[24,26],27],[[62,26],27],[32,[[3,[24]]]],[-1,-1,[]],[-1,-1,[]],[32,62],[[62,-1],11,43],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[22,[-2]]],[],[]],[-1,[[22,[-2]]],[],[]],[-1,[[22,[-2]]],[],[]],[-1,[[22,[-2]]],[],[]],[-1,57,[]],[-1,57,[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[19,[[33,[32]]]],[112,112],[[-1,-2],11,[],[]],[[112,26],27],[[112,26],27],[-1,-1,[]],[[[33,[32]]],19],[-1,-2,[],[]],[[],19],[-1,[[63,[19]]],[[61,[13]]]],[-1,-2,[],[]],[-1,30,[]],[-1,[[22,[-2]]],[],[]],[-1,[[22,[-2]]],[],[]],[-1,57,[]],[-1,-2,[],[]],0,0,0,0,0],"c":[478],"p":[[4,"Bson",0],[6,"Array",0],[4,"Option",1532],[15,"bool"],[3,"DateTime",0],[3,"DbPointer",0],[3,"Document",0],[15,"f64"],[15,"i32"],[15,"i64"],[15,"tuple"],[3,"ObjectId",787],[15,"str"],[3,"Timestamp",0],[3,"Binary",0],[3,"Regex",0],[3,"JavaScriptCodeWithScope",0],[3,"Decimal128",0],[3,"Uuid",0],[4,"UuidRepresentation",0],[4,"Ordering",1533],[4,"Result",1534],[8,"Deserializer",1535],[4,"ElementType",1426],[8,"IntoIterator",1536],[3,"Formatter",1537],[6,"Result",1537],[8,"Into",1538],[8,"Clone",1539],[3,"String",1540],[15,"slice"],[15,"u8"],[15,"array"],[15,"u32"],[3,"Vec",1541],[15,"f32"],[3,"SystemTime",1542],[6,"Result",493],[8,"DeserializeOwned",1535],[3,"DeserializerOptions",493],[8,"Read",1543],[8,"Deserialize",1535],[8,"Hasher",1544],[4,"Value",1545],[8,"Serializer",1546],[6,"Result",1292],[8,"Serialize",1546],[8,"Sized",1547],[3,"SerializerOptions",1292],[3,"RawDocumentBuf",847],[4,"RawBson",847],[6,"Result",847],[6,"Result",763],[3,"Map",1548],[4,"RawBsonRef",847],[3,"RawDocument",847],[3,"TypeId",1549],[3,"RawBinaryRef",847],[4,"Error",410],[6,"Result",410],[8,"AsRef",1538],[4,"BinarySubtype",1426],[6,"Result",1496],[3,"DateTimeBuilder",439],[6,"Result",439],[3,"Duration",1550],[4,"Error",439],[15,"u16"],[4,"Error",493],[8,"Display",1537],[3,"Deserializer",493],[8,"Visitor",1535],[15,"usize"],[3,"Error",1551],[3,"FromUtf8Error",1540],[8,"Error",1552],[4,"ParseError",588],[4,"ValueAccessError",610],[4,"Entry",610],[6,"ValueAccessResult",610],[3,"Iter",610],[3,"IterMut",610],[3,"OccupiedEntry",610],[3,"Keys",610],[3,"IntoIter",610],[3,"Values",610],[8,"FnOnce",1553],[8,"Write",1543],[4,"Error",763],[4,"Error",787],[3,"Error",1554],[6,"Result",787],[3,"RawArray",847],[3,"RawArrayBuf",847],[3,"RawDbPointerRef",847],[3,"RawJavaScriptCodeWithScopeRef",847],[3,"RawRegexRef",847],[3,"RawJavaScriptCodeWithScope",847],[3,"Error",847],[4,"ErrorKind",847],[3,"ValueAccessError",847],[4,"ValueAccessErrorKind",847],[6,"ValueAccessResult",847],[3,"RawArrayIter",847],[3,"Iter",847],[4,"Error",1292],[3,"Serializer",1292],[15,"char"],[15,"i16"],[15,"i8"],[15,"u64"],[4,"Error",1496],[13,"DecodingError",438],[13,"InvalidTimestamp",491],[13,"CannotFormat",491],[13,"UnrecognizedDocumentElementType",585],[13,"DeserializationError",585],[3,"VacantEntry",610],[13,"DeserializationError",786],[13,"InvalidHexStringCharacter",842],[13,"InvalidHexStringLength",842],[13,"MalformedValue",1289],[13,"UnexpectedType",1290],[13,"SerializationError",1380],[13,"RepresentationMismatch",1527],[13,"InvalidLength",1527],[13,"InvalidUuidString",1527]],"b":[[214,"impl-Display-for-Binary"],[215,"impl-Debug-for-Binary"],[216,"impl-Display-for-Bson"],[217,"impl-Debug-for-Bson"],[218,"impl-Display-for-Timestamp"],[219,"impl-Debug-for-Timestamp"],[220,"impl-Debug-for-Regex"],[221,"impl-Display-for-Regex"],[222,"impl-Debug-for-JavaScriptCodeWithScope"],[223,"impl-Display-for-JavaScriptCodeWithScope"],[225,"impl-Display-for-DateTime"],[226,"impl-Debug-for-DateTime"],[227,"impl-Debug-for-Decimal128"],[228,"impl-Display-for-Decimal128"],[229,"impl-Display-for-Document"],[230,"impl-Debug-for-Document"],[231,"impl-Debug-for-Uuid"],[232,"impl-Display-for-Uuid"],[236,"impl-From%3COption%3CT%3E%3E-for-Bson"],[237,"impl-From%3CBinary%3E-for-Bson"],[239,"impl-From%3C%26T%3E-for-Bson"],[240,"impl-From%3CTimestamp%3E-for-Bson"],[241,"impl-From%3CDbPointer%3E-for-Bson"],[242,"impl-From%3CString%3E-for-Bson"],[243,"impl-From%3CDocument%3E-for-Bson"],[244,"impl-From%3C%26%5BT%5D%3E-for-Bson"],[245,"impl-From%3CJavaScriptCodeWithScope%3E-for-Bson"],[246,"impl-From%3CRegex%3E-for-Bson"],[247,"impl-From%3Cf64%3E-for-Bson"],[248,"impl-From%3CUuid%3E-for-Bson"],[249,"impl-From%3C%5Bu8;+12%5D%3E-for-Bson"],[250,"impl-From%3Cu32%3E-for-Bson"],[251,"impl-From%3CVec%3CT%3E%3E-for-Bson"],[252,"impl-From%3Cf32%3E-for-Bson"],[253,"impl-From%3C%26str%3E-for-Bson"],[254,"impl-From%3Ci64%3E-for-Bson"],[255,"impl-From%3CObjectId%3E-for-Bson"],[256,"impl-From%3CDateTime%3E-for-Bson"],[257,"impl-From%3Cbool%3E-for-Bson"],[258,"impl-From%3Ci32%3E-for-Bson"],[259,"impl-From%3CDecimal128%3E-for-Bson"],[299,"impl-IntoIterator-for-%26Document"],[300,"impl-IntoIterator-for-Document"],[360,"impl-TryFrom%3CRawBson%3E-for-Bson"],[361,"impl-TryFrom%3CValue%3E-for-Bson"],[362,"impl-TryFrom%3CMap%3CString,+Value%3E%3E-for-Bson"],[363,"impl-TryFrom%3CRawBsonRef%3C\'a%3E%3E-for-Bson"],[370,"impl-TryFrom%3C%26RawDocument%3E-for-Document"],[371,"impl-TryFrom%3CRawDocumentBuf%3E-for-Document"],[373,"impl-TryFrom%3CMap%3CString,+Value%3E%3E-for-Document"],[422,"impl-Display-for-Error"],[423,"impl-Debug-for-Error"],[460,"impl-Display-for-Error"],[461,"impl-Debug-for-Error"],[546,"impl-Debug-for-Error"],[547,"impl-Display-for-Error"],[551,"impl-From%3CError%3E-for-Error"],[552,"impl-From%3CFromUtf8Error%3E-for-Error"],[599,"impl-Debug-for-ParseError"],[600,"impl-Display-for-ParseError"],[651,"impl-Debug-for-ValueAccessError"],[652,"impl-Display-for-ValueAccessError"],[774,"impl-Display-for-Error"],[775,"impl-Debug-for-Error"],[776,"impl-From%3CError%3E-for-Error"],[777,"impl-From%3CError%3E-for-Error"],[812,"impl-Debug-for-Error"],[813,"impl-Display-for-Error"],[814,"impl-Display-for-ObjectId"],[815,"impl-Debug-for-ObjectId"],[1068,"impl-Debug-for-Error"],[1069,"impl-Display-for-Error"],[1071,"impl-Display-for-ValueAccessError"],[1072,"impl-Debug-for-ValueAccessError"],[1077,"impl-From%3CRawDocumentBuf%3E-for-RawBson"],[1078,"impl-From%3CRegex%3E-for-RawBson"],[1079,"impl-From%3C%26str%3E-for-RawBson"],[1080,"impl-From%3CString%3E-for-RawBson"],[1081,"impl-From%3CDecimal128%3E-for-RawBson"],[1083,"impl-From%3CTimestamp%3E-for-RawBson"],[1084,"impl-From%3Cf64%3E-for-RawBson"],[1085,"impl-From%3CObjectId%3E-for-RawBson"],[1086,"impl-From%3Ci64%3E-for-RawBson"],[1087,"impl-From%3CRawArrayBuf%3E-for-RawBson"],[1088,"impl-From%3Ci32%3E-for-RawBson"],[1089,"impl-From%3Cbool%3E-for-RawBson"],[1090,"impl-From%3CBinary%3E-for-RawBson"],[1091,"impl-From%3CDbPointer%3E-for-RawBson"],[1092,"impl-From%3CDateTime%3E-for-RawBson"],[1093,"impl-From%3CRawJavaScriptCodeWithScope%3E-for-RawBson"],[1095,"impl-From%3C%26RawArray%3E-for-RawBsonRef%3C\'a%3E"],[1096,"impl-From%3CObjectId%3E-for-RawBsonRef%3C\'a%3E"],[1097,"impl-From%3CTimestamp%3E-for-RawBsonRef%3C\'a%3E"],[1098,"impl-From%3CRawBinaryRef%3C\'a%3E%3E-for-RawBsonRef%3C\'a%3E"],[1099,"impl-From%3CRawJavaScriptCodeWithScopeRef%3C\'a%3E%3E-for-RawBsonRef%3C\'a%3E"],[1100,"impl-From%3C%26RawDocumentBuf%3E-for-RawBsonRef%3C\'a%3E"],[1101,"impl-From%3CRawRegexRef%3C\'a%3E%3E-for-RawBsonRef%3C\'a%3E"],[1102,"impl-From%3Ci64%3E-for-RawBsonRef%3C\'a%3E"],[1103,"impl-From%3C%26RawArrayBuf%3E-for-RawBsonRef%3C\'a%3E"],[1104,"impl-From%3Ci32%3E-for-RawBsonRef%3C\'a%3E"],[1105,"impl-From%3CDecimal128%3E-for-RawBsonRef%3C\'a%3E"],[1106,"impl-From%3C%26RawDocument%3E-for-RawBsonRef%3C\'a%3E"],[1107,"impl-From%3Cbool%3E-for-RawBsonRef%3C\'a%3E"],[1108,"impl-From%3C%26str%3E-for-RawBsonRef%3C\'a%3E"],[1109,"impl-From%3C%26Binary%3E-for-RawBsonRef%3C\'a%3E"],[1110,"impl-From%3Cf64%3E-for-RawBsonRef%3C\'a%3E"],[1112,"impl-From%3CDateTime%3E-for-RawBsonRef%3C\'a%3E"],[1317,"impl-Display-for-Error"],[1318,"impl-Debug-for-Error"],[1514,"impl-Debug-for-Error"],[1515,"impl-Display-for-Error"]]},\
"cfg_if":{"doc":"A macro for defining <code>#[cfg]</code> if-else statements.","t":"O","n":["cfg_if"],"q":[[0,"cfg_if"]],"d":["The main macro provided by this crate. See crate …"],"i":[0],"f":[0],"c":[],"p":[],"b":[]},\
"deranged":{"doc":"","t":"SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSDDDDDDDDDDDDDDDDDDDDDDDDDLLLLLLLLLLLLDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL","n":["MAX","MAX","MAX","MAX","MAX","MAX","MAX","MAX","MAX","MAX","MAX","MAX","MIN","MIN","MIN","MIN","MIN","MIN","MIN","MIN","MIN","MIN","MIN","MIN","None","None","None","None","None","None","None","None","None","None","None","None","OptionRangedI128","OptionRangedI16","OptionRangedI32","OptionRangedI64","OptionRangedI8","OptionRangedIsize","OptionRangedU128","OptionRangedU16","OptionRangedU32","OptionRangedU64","OptionRangedU8","OptionRangedUsize","ParseIntError","RangedI128","RangedI16","RangedI32","RangedI64","RangedI8","RangedIsize","RangedU128","RangedU16","RangedU32","RangedU64","RangedU8","RangedUsize","Some","Some","Some","Some","Some","Some","Some","Some","Some","Some","Some","Some","TryFromIntError","abs","abs","abs","abs","abs","abs","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","checked_abs","checked_abs","checked_abs","checked_abs","checked_abs","checked_abs","checked_add","checked_add","checked_add","checked_add","checked_add","checked_add","checked_add","checked_add","checked_add","checked_add","checked_add","checked_add","checked_div","checked_div","checked_div","checked_div","checked_div","checked_div","checked_div","checked_div","checked_div","checked_div","checked_div","checked_div","checked_div_euclid","checked_div_euclid","checked_div_euclid","checked_div_euclid","checked_div_euclid","checked_div_euclid","checked_div_euclid","checked_div_euclid","checked_div_euclid","checked_div_euclid","checked_div_euclid","checked_div_euclid","checked_mul","checked_mul","checked_mul","checked_mul","checked_mul","checked_mul","checked_mul","checked_mul","checked_mul","checked_mul","checked_mul","checked_mul","checked_neg","checked_neg","checked_neg","checked_neg","checked_neg","checked_neg","checked_neg","checked_neg","checked_neg","checked_neg","checked_neg","checked_neg","checked_pow","checked_pow","checked_pow","checked_pow","checked_pow","checked_pow","checked_pow","checked_pow","checked_pow","checked_pow","checked_pow","checked_pow","checked_rem","checked_rem","checked_rem","checked_rem","checked_rem","checked_rem","checked_rem","checked_rem","checked_rem","checked_rem","checked_rem","checked_rem","checked_rem_euclid","checked_rem_euclid","checked_rem_euclid","checked_rem_euclid","checked_rem_euclid","checked_rem_euclid","checked_rem_euclid","checked_rem_euclid","checked_rem_euclid","checked_rem_euclid","checked_rem_euclid","checked_rem_euclid","checked_shl","checked_shl","checked_shl","checked_shl","checked_shl","checked_shl","checked_shl","checked_shl","checked_shl","checked_shl","checked_shl","checked_shl","checked_shr","checked_shr","checked_shr","checked_shr","checked_shr","checked_shr","checked_shr","checked_shr","checked_shr","checked_shr","checked_shr","checked_shr","checked_sub","checked_sub","checked_sub","checked_sub","checked_sub","checked_sub","checked_sub","checked_sub","checked_sub","checked_sub","checked_sub","checked_sub","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","default","default","default","default","default","default","default","default","default","default","default","default","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","exact","exact","exact","exact","exact","exact","exact","exact","exact","exact","exact","exact","expand","expand","expand","expand","expand","expand","expand","expand","expand","expand","expand","expand","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt_with_metadata","fmt_with_metadata","fmt_with_metadata","fmt_with_metadata","fmt_with_metadata","fmt_with_metadata","fmt_with_metadata","fmt_with_metadata","fmt_with_metadata","fmt_with_metadata","fmt_with_metadata","fmt_with_metadata","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_str","from_str","from_str","from_str","from_str","from_str","from_str","from_str","from_str","from_str","from_str","from_str","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","get","get","get","get","get","get","get","get","get","get","get","get","get","get","get","get","get","get","get","get","get","get","get","get","get_primitive","get_primitive","get_primitive","get_primitive","get_primitive","get_primitive","get_primitive","get_primitive","get_primitive","get_primitive","get_primitive","get_primitive","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","is_none","is_none","is_none","is_none","is_none","is_none","is_none","is_none","is_none","is_none","is_none","is_none","is_some","is_some","is_some","is_some","is_some","is_some","is_some","is_some","is_some","is_some","is_some","is_some","kind","metadata","metadata","metadata","metadata","metadata","metadata","metadata","metadata","metadata","metadata","metadata","metadata","narrow","narrow","narrow","narrow","narrow","narrow","narrow","narrow","narrow","narrow","narrow","narrow","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","new","new","new","new","new","new","new","new","new","new","new","new","new_saturating","new_saturating","new_saturating","new_saturating","new_saturating","new_saturating","new_saturating","new_saturating","new_saturating","new_saturating","new_saturating","new_saturating","new_static","new_static","new_static","new_static","new_static","new_static","new_static","new_static","new_static","new_static","new_static","new_static","new_unchecked","new_unchecked","new_unchecked","new_unchecked","new_unchecked","new_unchecked","new_unchecked","new_unchecked","new_unchecked","new_unchecked","new_unchecked","new_unchecked","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","rem","rem","rem","rem","rem","rem","saturating_abs","saturating_abs","saturating_abs","saturating_abs","saturating_abs","saturating_abs","saturating_add","saturating_add","saturating_add","saturating_add","saturating_add","saturating_add","saturating_add","saturating_add","saturating_add","saturating_add","saturating_add","saturating_add","saturating_mul","saturating_mul","saturating_mul","saturating_mul","saturating_mul","saturating_mul","saturating_mul","saturating_mul","saturating_mul","saturating_mul","saturating_mul","saturating_mul","saturating_neg","saturating_neg","saturating_neg","saturating_neg","saturating_neg","saturating_neg","saturating_pow","saturating_pow","saturating_pow","saturating_pow","saturating_pow","saturating_pow","saturating_pow","saturating_pow","saturating_pow","saturating_pow","saturating_pow","saturating_pow","saturating_sub","saturating_sub","saturating_sub","saturating_sub","saturating_sub","saturating_sub","saturating_sub","saturating_sub","saturating_sub","saturating_sub","saturating_sub","saturating_sub","some_unchecked","some_unchecked","some_unchecked","some_unchecked","some_unchecked","some_unchecked","some_unchecked","some_unchecked","some_unchecked","some_unchecked","some_unchecked","some_unchecked","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","unchecked_abs","unchecked_abs","unchecked_abs","unchecked_abs","unchecked_abs","unchecked_abs","unchecked_add","unchecked_add","unchecked_add","unchecked_add","unchecked_add","unchecked_add","unchecked_add","unchecked_add","unchecked_add","unchecked_add","unchecked_add","unchecked_add","unchecked_div","unchecked_div","unchecked_div","unchecked_div","unchecked_div","unchecked_div","unchecked_div","unchecked_div","unchecked_div","unchecked_div","unchecked_div","unchecked_div","unchecked_div_euclid","unchecked_div_euclid","unchecked_div_euclid","unchecked_div_euclid","unchecked_div_euclid","unchecked_div_euclid","unchecked_div_euclid","unchecked_div_euclid","unchecked_div_euclid","unchecked_div_euclid","unchecked_div_euclid","unchecked_div_euclid","unchecked_mul","unchecked_mul","unchecked_mul","unchecked_mul","unchecked_mul","unchecked_mul","unchecked_mul","unchecked_mul","unchecked_mul","unchecked_mul","unchecked_mul","unchecked_mul","unchecked_neg","unchecked_neg","unchecked_neg","unchecked_neg","unchecked_neg","unchecked_neg","unchecked_neg","unchecked_neg","unchecked_neg","unchecked_neg","unchecked_neg","unchecked_neg","unchecked_pow","unchecked_pow","unchecked_pow","unchecked_pow","unchecked_pow","unchecked_pow","unchecked_pow","unchecked_pow","unchecked_pow","unchecked_pow","unchecked_pow","unchecked_pow","unchecked_rem","unchecked_rem","unchecked_rem","unchecked_rem","unchecked_rem","unchecked_rem","unchecked_rem","unchecked_rem","unchecked_rem","unchecked_rem","unchecked_rem","unchecked_rem","unchecked_rem_euclid","unchecked_rem_euclid","unchecked_rem_euclid","unchecked_rem_euclid","unchecked_rem_euclid","unchecked_rem_euclid","unchecked_rem_euclid","unchecked_rem_euclid","unchecked_rem_euclid","unchecked_rem_euclid","unchecked_rem_euclid","unchecked_rem_euclid","unchecked_shl","unchecked_shl","unchecked_shl","unchecked_shl","unchecked_shl","unchecked_shl","unchecked_shl","unchecked_shl","unchecked_shl","unchecked_shl","unchecked_shl","unchecked_shl","unchecked_shr","unchecked_shr","unchecked_shr","unchecked_shr","unchecked_shr","unchecked_shr","unchecked_shr","unchecked_shr","unchecked_shr","unchecked_shr","unchecked_shr","unchecked_shr","unchecked_sub","unchecked_sub","unchecked_sub","unchecked_sub","unchecked_sub","unchecked_sub","unchecked_sub","unchecked_sub","unchecked_sub","unchecked_sub","unchecked_sub","unchecked_sub","wrapping_add","wrapping_add","wrapping_add","wrapping_add","wrapping_add","wrapping_add","wrapping_add","wrapping_add","wrapping_add","wrapping_add","wrapping_add","wrapping_add","wrapping_sub","wrapping_sub","wrapping_sub","wrapping_sub","wrapping_sub","wrapping_sub","wrapping_sub","wrapping_sub","wrapping_sub","wrapping_sub","wrapping_sub","wrapping_sub"],"q":[[0,"deranged"],[1219,"core::option"],[1220,"core::cmp"],[1221,"core::fmt"],[1222,"core::fmt"],[1223,"core::result"],[1224,"core::hash"],[1225,"core::num::error"],[1226,"powerfmt::smart_display"],[1227,"core::any"]],"d":["The largest value that can be represented by this type.","The largest value that can be represented by this type.","The largest value that can be represented by this type.","The largest value that can be represented by this type.","The largest value that can be represented by this type.","The largest value that can be represented by this type.","The largest value that can be represented by this type.","The largest value that can be represented by this type.","The largest value that can be represented by this type.","The largest value that can be represented by this type.","The largest value that can be represented by this type.","The largest value that can be represented by this type.","The smallest value that can be represented by this type.","The smallest value that can be represented by this type.","The smallest value that can be represented by this type.","The smallest value that can be represented by this type.","The smallest value that can be represented by this type.","The smallest value that can be represented by this type.","The smallest value that can be represented by this type.","The smallest value that can be represented by this type.","The smallest value that can be represented by this type.","The smallest value that can be represented by this type.","The smallest value that can be represented by this type.","The smallest value that can be represented by this type.","An optional ranged value that is not present.","An optional ranged value that is not present.","An optional ranged value that is not present.","An optional ranged value that is not present.","An optional ranged value that is not present.","An optional ranged value that is not present.","An optional ranged value that is not present.","An optional ranged value that is not present.","An optional ranged value that is not present.","An optional ranged value that is not present.","An optional ranged value that is not present.","An optional ranged value that is not present.","A <code>RangedI128</code> that is optional. Equivalent to …","A <code>RangedI16</code> that is optional. Equivalent to …","A <code>RangedI32</code> that is optional. Equivalent to …","A <code>RangedI64</code> that is optional. Equivalent to …","A <code>RangedI8</code> that is optional. Equivalent to <code>Option&lt;RangedI8&gt;</code>…","A <code>RangedIsize</code> that is optional. Equivalent to …","A <code>RangedU128</code> that is optional. Equivalent to …","A <code>RangedU16</code> that is optional. Equivalent to …","A <code>RangedU32</code> that is optional. Equivalent to …","A <code>RangedU64</code> that is optional. Equivalent to …","A <code>RangedU8</code> that is optional. Equivalent to <code>Option&lt;RangedU8&gt;</code>…","A <code>RangedUsize</code> that is optional. Equivalent to …","","An <code>i128</code> that is known to be in the range <code>MIN..=MAX</code>.","An <code>i16</code> that is known to be in the range <code>MIN..=MAX</code>.","An <code>i32</code> that is known to be in the range <code>MIN..=MAX</code>.","An <code>i64</code> that is known to be in the range <code>MIN..=MAX</code>.","An <code>i8</code> that is known to be in the range <code>MIN..=MAX</code>.","An <code>isize</code> that is known to be in the range <code>MIN..=MAX</code>.","A <code>u128</code> that is known to be in the range <code>MIN..=MAX</code>.","A <code>u16</code> that is known to be in the range <code>MIN..=MAX</code>.","A <code>u32</code> that is known to be in the range <code>MIN..=MAX</code>.","A <code>u64</code> that is known to be in the range <code>MIN..=MAX</code>.","A <code>u8</code> that is known to be in the range <code>MIN..=MAX</code>.","A <code>usize</code> that is known to be in the range <code>MIN..=MAX</code>.","Creates an optional ranged value that is present.","Creates an optional ranged value that is present.","Creates an optional ranged value that is present.","Creates an optional ranged value that is present.","Creates an optional ranged value that is present.","Creates an optional ranged value that is present.","Creates an optional ranged value that is present.","Creates an optional ranged value that is present.","Creates an optional ranged value that is present.","Creates an optional ranged value that is present.","Creates an optional ranged value that is present.","Creates an optional ranged value that is present.","","Absolute value. Computes <code>self.abs()</code>, <strong>failing to compile</strong> if …","Absolute value. Computes <code>self.abs()</code>, <strong>failing to compile</strong> if …","Absolute value. Computes <code>self.abs()</code>, <strong>failing to compile</strong> if …","Absolute value. Computes <code>self.abs()</code>, <strong>failing to compile</strong> if …","Absolute value. Computes <code>self.abs()</code>, <strong>failing to compile</strong> if …","Absolute value. Computes <code>self.abs()</code>, <strong>failing to compile</strong> if …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Checked absolute value. Computes <code>self.abs()</code>, returning <code>None</code>…","Checked absolute value. Computes <code>self.abs()</code>, returning <code>None</code>…","Checked absolute value. Computes <code>self.abs()</code>, returning <code>None</code>…","Checked absolute value. Computes <code>self.abs()</code>, returning <code>None</code>…","Checked absolute value. Computes <code>self.abs()</code>, returning <code>None</code>…","Checked absolute value. Computes <code>self.abs()</code>, returning <code>None</code>…","Checked integer addition. Computes <code>self + rhs</code>, returning …","Checked integer addition. Computes <code>self + rhs</code>, returning …","Checked integer addition. Computes <code>self + rhs</code>, returning …","Checked integer addition. Computes <code>self + rhs</code>, returning …","Checked integer addition. Computes <code>self + rhs</code>, returning …","Checked integer addition. Computes <code>self + rhs</code>, returning …","Checked integer addition. Computes <code>self + rhs</code>, returning …","Checked integer addition. Computes <code>self + rhs</code>, returning …","Checked integer addition. Computes <code>self + rhs</code>, returning …","Checked integer addition. Computes <code>self + rhs</code>, returning …","Checked integer addition. Computes <code>self + rhs</code>, returning …","Checked integer addition. Computes <code>self + rhs</code>, returning …","Checked integer addition. Computes <code>self / rhs</code>, returning …","Checked integer addition. Computes <code>self / rhs</code>, returning …","Checked integer addition. Computes <code>self / rhs</code>, returning …","Checked integer addition. Computes <code>self / rhs</code>, returning …","Checked integer addition. Computes <code>self / rhs</code>, returning …","Checked integer addition. Computes <code>self / rhs</code>, returning …","Checked integer addition. Computes <code>self / rhs</code>, returning …","Checked integer addition. Computes <code>self / rhs</code>, returning …","Checked integer addition. Computes <code>self / rhs</code>, returning …","Checked integer addition. Computes <code>self / rhs</code>, returning …","Checked integer addition. Computes <code>self / rhs</code>, returning …","Checked integer addition. Computes <code>self / rhs</code>, returning …","Checked Euclidean division. Computes <code>self.div_euclid(rhs)</code>, …","Checked Euclidean division. Computes <code>self.div_euclid(rhs)</code>, …","Checked Euclidean division. Computes <code>self.div_euclid(rhs)</code>, …","Checked Euclidean division. Computes <code>self.div_euclid(rhs)</code>, …","Checked Euclidean division. Computes <code>self.div_euclid(rhs)</code>, …","Checked Euclidean division. Computes <code>self.div_euclid(rhs)</code>, …","Checked Euclidean division. Computes <code>self.div_euclid(rhs)</code>, …","Checked Euclidean division. Computes <code>self.div_euclid(rhs)</code>, …","Checked Euclidean division. Computes <code>self.div_euclid(rhs)</code>, …","Checked Euclidean division. Computes <code>self.div_euclid(rhs)</code>, …","Checked Euclidean division. Computes <code>self.div_euclid(rhs)</code>, …","Checked Euclidean division. Computes <code>self.div_euclid(rhs)</code>, …","Checked integer addition. Computes <code>self * rhs</code>, returning …","Checked integer addition. Computes <code>self * rhs</code>, returning …","Checked integer addition. Computes <code>self * rhs</code>, returning …","Checked integer addition. Computes <code>self * rhs</code>, returning …","Checked integer addition. Computes <code>self * rhs</code>, returning …","Checked integer addition. Computes <code>self * rhs</code>, returning …","Checked integer addition. Computes <code>self * rhs</code>, returning …","Checked integer addition. Computes <code>self * rhs</code>, returning …","Checked integer addition. Computes <code>self * rhs</code>, returning …","Checked integer addition. Computes <code>self * rhs</code>, returning …","Checked integer addition. Computes <code>self * rhs</code>, returning …","Checked integer addition. Computes <code>self * rhs</code>, returning …","Checked negation. Computes <code>-self</code>, returning <code>None</code> if the …","Checked negation. Computes <code>-self</code>, returning <code>None</code> if the …","Checked negation. Computes <code>-self</code>, returning <code>None</code> if the …","Checked negation. Computes <code>-self</code>, returning <code>None</code> if the …","Checked negation. Computes <code>-self</code>, returning <code>None</code> if the …","Checked negation. Computes <code>-self</code>, returning <code>None</code> if the …","Checked negation. Computes <code>-self</code>, returning <code>None</code> if the …","Checked negation. Computes <code>-self</code>, returning <code>None</code> if the …","Checked negation. Computes <code>-self</code>, returning <code>None</code> if the …","Checked negation. Computes <code>-self</code>, returning <code>None</code> if the …","Checked negation. Computes <code>-self</code>, returning <code>None</code> if the …","Checked negation. Computes <code>-self</code>, returning <code>None</code> if the …","Checked exponentiation. Computes <code>self.pow(exp)</code>, returning …","Checked exponentiation. Computes <code>self.pow(exp)</code>, returning …","Checked exponentiation. Computes <code>self.pow(exp)</code>, returning …","Checked exponentiation. Computes <code>self.pow(exp)</code>, returning …","Checked exponentiation. Computes <code>self.pow(exp)</code>, returning …","Checked exponentiation. Computes <code>self.pow(exp)</code>, returning …","Checked exponentiation. Computes <code>self.pow(exp)</code>, returning …","Checked exponentiation. Computes <code>self.pow(exp)</code>, returning …","Checked exponentiation. Computes <code>self.pow(exp)</code>, returning …","Checked exponentiation. Computes <code>self.pow(exp)</code>, returning …","Checked exponentiation. Computes <code>self.pow(exp)</code>, returning …","Checked exponentiation. Computes <code>self.pow(exp)</code>, returning …","Checked integer remainder. Computes <code>self % rhs</code>, returning …","Checked integer remainder. Computes <code>self % rhs</code>, returning …","Checked integer remainder. Computes <code>self % rhs</code>, returning …","Checked integer remainder. Computes <code>self % rhs</code>, returning …","Checked integer remainder. Computes <code>self % rhs</code>, returning …","Checked integer remainder. Computes <code>self % rhs</code>, returning …","Checked integer remainder. Computes <code>self % rhs</code>, returning …","Checked integer remainder. Computes <code>self % rhs</code>, returning …","Checked integer remainder. Computes <code>self % rhs</code>, returning …","Checked integer remainder. Computes <code>self % rhs</code>, returning …","Checked integer remainder. Computes <code>self % rhs</code>, returning …","Checked integer remainder. Computes <code>self % rhs</code>, returning …","Checked Euclidean remainder. Computes <code>self.rem_euclid(rhs)</code>…","Checked Euclidean remainder. Computes <code>self.rem_euclid(rhs)</code>…","Checked Euclidean remainder. Computes <code>self.rem_euclid(rhs)</code>…","Checked Euclidean remainder. Computes <code>self.rem_euclid(rhs)</code>…","Checked Euclidean remainder. Computes <code>self.rem_euclid(rhs)</code>…","Checked Euclidean remainder. Computes <code>self.rem_euclid(rhs)</code>…","Checked Euclidean remainder. Computes <code>self.rem_euclid(rhs)</code>…","Checked Euclidean remainder. Computes <code>self.rem_euclid(rhs)</code>…","Checked Euclidean remainder. Computes <code>self.rem_euclid(rhs)</code>…","Checked Euclidean remainder. Computes <code>self.rem_euclid(rhs)</code>…","Checked Euclidean remainder. Computes <code>self.rem_euclid(rhs)</code>…","Checked Euclidean remainder. Computes <code>self.rem_euclid(rhs)</code>…","Checked shift left. Computes <code>self &lt;&lt; rhs</code>, returning <code>None</code> …","Checked shift left. Computes <code>self &lt;&lt; rhs</code>, returning <code>None</code> …","Checked shift left. Computes <code>self &lt;&lt; rhs</code>, returning <code>None</code> …","Checked shift left. Computes <code>self &lt;&lt; rhs</code>, returning <code>None</code> …","Checked shift left. Computes <code>self &lt;&lt; rhs</code>, returning <code>None</code> …","Checked shift left. Computes <code>self &lt;&lt; rhs</code>, returning <code>None</code> …","Checked shift left. Computes <code>self &lt;&lt; rhs</code>, returning <code>None</code> …","Checked shift left. Computes <code>self &lt;&lt; rhs</code>, returning <code>None</code> …","Checked shift left. Computes <code>self &lt;&lt; rhs</code>, returning <code>None</code> …","Checked shift left. Computes <code>self &lt;&lt; rhs</code>, returning <code>None</code> …","Checked shift left. Computes <code>self &lt;&lt; rhs</code>, returning <code>None</code> …","Checked shift left. Computes <code>self &lt;&lt; rhs</code>, returning <code>None</code> …","Checked shift right. Computes <code>self &gt;&gt; rhs</code>, returning <code>None</code> …","Checked shift right. Computes <code>self &gt;&gt; rhs</code>, returning <code>None</code> …","Checked shift right. Computes <code>self &gt;&gt; rhs</code>, returning <code>None</code> …","Checked shift right. Computes <code>self &gt;&gt; rhs</code>, returning <code>None</code> …","Checked shift right. Computes <code>self &gt;&gt; rhs</code>, returning <code>None</code> …","Checked shift right. Computes <code>self &gt;&gt; rhs</code>, returning <code>None</code> …","Checked shift right. Computes <code>self &gt;&gt; rhs</code>, returning <code>None</code> …","Checked shift right. Computes <code>self &gt;&gt; rhs</code>, returning <code>None</code> …","Checked shift right. Computes <code>self &gt;&gt; rhs</code>, returning <code>None</code> …","Checked shift right. Computes <code>self &gt;&gt; rhs</code>, returning <code>None</code> …","Checked shift right. Computes <code>self &gt;&gt; rhs</code>, returning <code>None</code> …","Checked shift right. Computes <code>self &gt;&gt; rhs</code>, returning <code>None</code> …","Checked integer addition. Computes <code>self - rhs</code>, returning …","Checked integer addition. Computes <code>self - rhs</code>, returning …","Checked integer addition. Computes <code>self - rhs</code>, returning …","Checked integer addition. Computes <code>self - rhs</code>, returning …","Checked integer addition. Computes <code>self - rhs</code>, returning …","Checked integer addition. Computes <code>self - rhs</code>, returning …","Checked integer addition. Computes <code>self - rhs</code>, returning …","Checked integer addition. Computes <code>self - rhs</code>, returning …","Checked integer addition. Computes <code>self - rhs</code>, returning …","Checked integer addition. Computes <code>self - rhs</code>, returning …","Checked integer addition. Computes <code>self - rhs</code>, returning …","Checked integer addition. Computes <code>self - rhs</code>, returning …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Expand the range that the value may be in. <strong>Fails to compile</strong>…","Expand the range that the value may be in. <strong>Fails to compile</strong>…","Expand the range that the value may be in. <strong>Fails to compile</strong>…","Expand the range that the value may be in. <strong>Fails to compile</strong>…","Expand the range that the value may be in. <strong>Fails to compile</strong>…","Expand the range that the value may be in. <strong>Fails to compile</strong>…","Expand the range that the value may be in. <strong>Fails to compile</strong>…","Expand the range that the value may be in. <strong>Fails to compile</strong>…","Expand the range that the value may be in. <strong>Fails to compile</strong>…","Expand the range that the value may be in. <strong>Fails to compile</strong>…","Expand the range that the value may be in. <strong>Fails to compile</strong>…","Expand the range that the value may be in. <strong>Fails to compile</strong>…","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","","Converts a string slice in a given base to an integer.","Converts a string slice in a given base to an integer.","Converts a string slice in a given base to an integer.","Converts a string slice in a given base to an integer.","Converts a string slice in a given base to an integer.","Converts a string slice in a given base to an integer.","Converts a string slice in a given base to an integer.","Converts a string slice in a given base to an integer.","Converts a string slice in a given base to an integer.","Converts a string slice in a given base to an integer.","Converts a string slice in a given base to an integer.","Converts a string slice in a given base to an integer.","Returns the value as a primitive type.","Returns the value as the standard library’s <code>Option</code> type.","Returns the value as a primitive type.","Returns the value as the standard library’s <code>Option</code> type.","Returns the value as a primitive type.","Returns the value as the standard library’s <code>Option</code> type.","Returns the value as a primitive type.","Returns the value as the standard library’s <code>Option</code> type.","Returns the value as a primitive type.","Returns the value as the standard library’s <code>Option</code> type.","Returns the value as a primitive type.","Returns the value as the standard library’s <code>Option</code> type.","Returns the value as a primitive type.","Returns the value as the standard library’s <code>Option</code> type.","Returns the value as a primitive type.","Returns the value as the standard library’s <code>Option</code> type.","Returns the value as a primitive type.","Returns the value as the standard library’s <code>Option</code> type.","Returns the value as a primitive type.","Returns the value as the standard library’s <code>Option</code> type.","Returns the value as a primitive type.","Returns the value as the standard library’s <code>Option</code> type.","Returns the value as a primitive type.","Returns the value as the standard library’s <code>Option</code> type.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns <code>true</code> if the value is the niche value.","Returns <code>true</code> if the value is the niche value.","Returns <code>true</code> if the value is the niche value.","Returns <code>true</code> if the value is the niche value.","Returns <code>true</code> if the value is the niche value.","Returns <code>true</code> if the value is the niche value.","Returns <code>true</code> if the value is the niche value.","Returns <code>true</code> if the value is the niche value.","Returns <code>true</code> if the value is the niche value.","Returns <code>true</code> if the value is the niche value.","Returns <code>true</code> if the value is the niche value.","Returns <code>true</code> if the value is the niche value.","Returns <code>true</code> if the value is not the niche value.","Returns <code>true</code> if the value is not the niche value.","Returns <code>true</code> if the value is not the niche value.","Returns <code>true</code> if the value is not the niche value.","Returns <code>true</code> if the value is not the niche value.","Returns <code>true</code> if the value is not the niche value.","Returns <code>true</code> if the value is not the niche value.","Returns <code>true</code> if the value is not the niche value.","Returns <code>true</code> if the value is not the niche value.","Returns <code>true</code> if the value is not the niche value.","Returns <code>true</code> if the value is not the niche value.","Returns <code>true</code> if the value is not the niche value.","Outputs the detailed cause of parsing an integer failing.","","","","","","","","","","","","","Attempt to narrow the range that the value may be in. …","Attempt to narrow the range that the value may be in. …","Attempt to narrow the range that the value may be in. …","Attempt to narrow the range that the value may be in. …","Attempt to narrow the range that the value may be in. …","Attempt to narrow the range that the value may be in. …","Attempt to narrow the range that the value may be in. …","Attempt to narrow the range that the value may be in. …","Attempt to narrow the range that the value may be in. …","Attempt to narrow the range that the value may be in. …","Attempt to narrow the range that the value may be in. …","Attempt to narrow the range that the value may be in. …","Negation. Computes <code>self.neg()</code>, <strong>failing to compile</strong> if the …","Negation. Computes <code>self.neg()</code>, <strong>failing to compile</strong> if the …","Negation. Computes <code>self.neg()</code>, <strong>failing to compile</strong> if the …","Negation. Computes <code>self.neg()</code>, <strong>failing to compile</strong> if the …","Negation. Computes <code>self.neg()</code>, <strong>failing to compile</strong> if the …","Negation. Computes <code>self.neg()</code>, <strong>failing to compile</strong> if the …","Negation. Computes <code>self.neg()</code>, <strong>failing to compile</strong> if the …","Negation. Computes <code>self.neg()</code>, <strong>failing to compile</strong> if the …","Negation. Computes <code>self.neg()</code>, <strong>failing to compile</strong> if the …","Negation. Computes <code>self.neg()</code>, <strong>failing to compile</strong> if the …","Negation. Computes <code>self.neg()</code>, <strong>failing to compile</strong> if the …","Negation. Computes <code>self.neg()</code>, <strong>failing to compile</strong> if the …","Creates a ranged integer if the given value is in the …","Creates a ranged integer if the given value is in the …","Creates a ranged integer if the given value is in the …","Creates a ranged integer if the given value is in the …","Creates a ranged integer if the given value is in the …","Creates a ranged integer if the given value is in the …","Creates a ranged integer if the given value is in the …","Creates a ranged integer if the given value is in the …","Creates a ranged integer if the given value is in the …","Creates a ranged integer if the given value is in the …","Creates a ranged integer if the given value is in the …","Creates a ranged integer if the given value is in the …","Creates a ranged integer with the given value, saturating …","Creates a ranged integer with the given value, saturating …","Creates a ranged integer with the given value, saturating …","Creates a ranged integer with the given value, saturating …","Creates a ranged integer with the given value, saturating …","Creates a ranged integer with the given value, saturating …","Creates a ranged integer with the given value, saturating …","Creates a ranged integer with the given value, saturating …","Creates a ranged integer with the given value, saturating …","Creates a ranged integer with the given value, saturating …","Creates a ranged integer with the given value, saturating …","Creates a ranged integer with the given value, saturating …","Creates a ranged integer with a statically known value. …","Creates a ranged integer with a statically known value. …","Creates a ranged integer with a statically known value. …","Creates a ranged integer with a statically known value. …","Creates a ranged integer with a statically known value. …","Creates a ranged integer with a statically known value. …","Creates a ranged integer with a statically known value. …","Creates a ranged integer with a statically known value. …","Creates a ranged integer with a statically known value. …","Creates a ranged integer with a statically known value. …","Creates a ranged integer with a statically known value. …","Creates a ranged integer with a statically known value. …","Creates a ranged integer without checking the value.","Creates a ranged integer without checking the value.","Creates a ranged integer without checking the value.","Creates a ranged integer without checking the value.","Creates a ranged integer without checking the value.","Creates a ranged integer without checking the value.","Creates a ranged integer without checking the value.","Creates a ranged integer without checking the value.","Creates a ranged integer without checking the value.","Creates a ranged integer without checking the value.","Creates a ranged integer without checking the value.","Creates a ranged integer without checking the value.","","","","","","","","","","","","","","","","","","","","","","","","","Remainder. Computes <code>self % rhs</code>, statically guaranteeing …","Remainder. Computes <code>self % rhs</code>, statically guaranteeing …","Remainder. Computes <code>self % rhs</code>, statically guaranteeing …","Remainder. Computes <code>self % rhs</code>, statically guaranteeing …","Remainder. Computes <code>self % rhs</code>, statically guaranteeing …","Remainder. Computes <code>self % rhs</code>, statically guaranteeing …","Saturating absolute value. Computes <code>self.abs()</code>, saturating …","Saturating absolute value. Computes <code>self.abs()</code>, saturating …","Saturating absolute value. Computes <code>self.abs()</code>, saturating …","Saturating absolute value. Computes <code>self.abs()</code>, saturating …","Saturating absolute value. Computes <code>self.abs()</code>, saturating …","Saturating absolute value. Computes <code>self.abs()</code>, saturating …","Saturating integer addition. Computes <code>self + rhs</code>, …","Saturating integer addition. Computes <code>self + rhs</code>, …","Saturating integer addition. Computes <code>self + rhs</code>, …","Saturating integer addition. Computes <code>self + rhs</code>, …","Saturating integer addition. Computes <code>self + rhs</code>, …","Saturating integer addition. Computes <code>self + rhs</code>, …","Saturating integer addition. Computes <code>self + rhs</code>, …","Saturating integer addition. Computes <code>self + rhs</code>, …","Saturating integer addition. Computes <code>self + rhs</code>, …","Saturating integer addition. Computes <code>self + rhs</code>, …","Saturating integer addition. Computes <code>self + rhs</code>, …","Saturating integer addition. Computes <code>self + rhs</code>, …","Saturating integer multiplication. Computes <code>self * rhs</code>, …","Saturating integer multiplication. Computes <code>self * rhs</code>, …","Saturating integer multiplication. Computes <code>self * rhs</code>, …","Saturating integer multiplication. Computes <code>self * rhs</code>, …","Saturating integer multiplication. Computes <code>self * rhs</code>, …","Saturating integer multiplication. Computes <code>self * rhs</code>, …","Saturating integer multiplication. Computes <code>self * rhs</code>, …","Saturating integer multiplication. Computes <code>self * rhs</code>, …","Saturating integer multiplication. Computes <code>self * rhs</code>, …","Saturating integer multiplication. Computes <code>self * rhs</code>, …","Saturating integer multiplication. Computes <code>self * rhs</code>, …","Saturating integer multiplication. Computes <code>self * rhs</code>, …","Saturating integer negation. Computes <code>self - rhs</code>, …","Saturating integer negation. Computes <code>self - rhs</code>, …","Saturating integer negation. Computes <code>self - rhs</code>, …","Saturating integer negation. Computes <code>self - rhs</code>, …","Saturating integer negation. Computes <code>self - rhs</code>, …","Saturating integer negation. Computes <code>self - rhs</code>, …","Saturating integer exponentiation. Computes <code>self.pow(exp)</code>, …","Saturating integer exponentiation. Computes <code>self.pow(exp)</code>, …","Saturating integer exponentiation. Computes <code>self.pow(exp)</code>, …","Saturating integer exponentiation. Computes <code>self.pow(exp)</code>, …","Saturating integer exponentiation. Computes <code>self.pow(exp)</code>, …","Saturating integer exponentiation. Computes <code>self.pow(exp)</code>, …","Saturating integer exponentiation. Computes <code>self.pow(exp)</code>, …","Saturating integer exponentiation. Computes <code>self.pow(exp)</code>, …","Saturating integer exponentiation. Computes <code>self.pow(exp)</code>, …","Saturating integer exponentiation. Computes <code>self.pow(exp)</code>, …","Saturating integer exponentiation. Computes <code>self.pow(exp)</code>, …","Saturating integer exponentiation. Computes <code>self.pow(exp)</code>, …","Saturating integer subtraction. Computes <code>self - rhs</code>, …","Saturating integer subtraction. Computes <code>self - rhs</code>, …","Saturating integer subtraction. Computes <code>self - rhs</code>, …","Saturating integer subtraction. Computes <code>self - rhs</code>, …","Saturating integer subtraction. Computes <code>self - rhs</code>, …","Saturating integer subtraction. Computes <code>self - rhs</code>, …","Saturating integer subtraction. Computes <code>self - rhs</code>, …","Saturating integer subtraction. Computes <code>self - rhs</code>, …","Saturating integer subtraction. Computes <code>self - rhs</code>, …","Saturating integer subtraction. Computes <code>self - rhs</code>, …","Saturating integer subtraction. Computes <code>self - rhs</code>, …","Saturating integer subtraction. Computes <code>self - rhs</code>, …","Creates an optional ranged integer without checking the …","Creates an optional ranged integer without checking the …","Creates an optional ranged integer without checking the …","Creates an optional ranged integer without checking the …","Creates an optional ranged integer without checking the …","Creates an optional ranged integer without checking the …","Creates an optional ranged integer without checking the …","Creates an optional ranged integer without checking the …","Creates an optional ranged integer without checking the …","Creates an optional ranged integer without checking the …","Creates an optional ranged integer without checking the …","Creates an optional ranged integer without checking the …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Unchecked absolute value. Computes <code>self.abs()</code>, assuming …","Unchecked absolute value. Computes <code>self.abs()</code>, assuming …","Unchecked absolute value. Computes <code>self.abs()</code>, assuming …","Unchecked absolute value. Computes <code>self.abs()</code>, assuming …","Unchecked absolute value. Computes <code>self.abs()</code>, assuming …","Unchecked absolute value. Computes <code>self.abs()</code>, assuming …","Unchecked integer addition. Computes <code>self + rhs</code>, assuming …","Unchecked integer addition. Computes <code>self + rhs</code>, assuming …","Unchecked integer addition. Computes <code>self + rhs</code>, assuming …","Unchecked integer addition. Computes <code>self + rhs</code>, assuming …","Unchecked integer addition. Computes <code>self + rhs</code>, assuming …","Unchecked integer addition. Computes <code>self + rhs</code>, assuming …","Unchecked integer addition. Computes <code>self + rhs</code>, assuming …","Unchecked integer addition. Computes <code>self + rhs</code>, assuming …","Unchecked integer addition. Computes <code>self + rhs</code>, assuming …","Unchecked integer addition. Computes <code>self + rhs</code>, assuming …","Unchecked integer addition. Computes <code>self + rhs</code>, assuming …","Unchecked integer addition. Computes <code>self + rhs</code>, assuming …","Unchecked integer division. Computes <code>self / rhs</code>, assuming …","Unchecked integer division. Computes <code>self / rhs</code>, assuming …","Unchecked integer division. Computes <code>self / rhs</code>, assuming …","Unchecked integer division. Computes <code>self / rhs</code>, assuming …","Unchecked integer division. Computes <code>self / rhs</code>, assuming …","Unchecked integer division. Computes <code>self / rhs</code>, assuming …","Unchecked integer division. Computes <code>self / rhs</code>, assuming …","Unchecked integer division. Computes <code>self / rhs</code>, assuming …","Unchecked integer division. Computes <code>self / rhs</code>, assuming …","Unchecked integer division. Computes <code>self / rhs</code>, assuming …","Unchecked integer division. Computes <code>self / rhs</code>, assuming …","Unchecked integer division. Computes <code>self / rhs</code>, assuming …","Unchecked Euclidean division. Computes <code>self.div_euclid(rhs)</code>…","Unchecked Euclidean division. Computes <code>self.div_euclid(rhs)</code>…","Unchecked Euclidean division. Computes <code>self.div_euclid(rhs)</code>…","Unchecked Euclidean division. Computes <code>self.div_euclid(rhs)</code>…","Unchecked Euclidean division. Computes <code>self.div_euclid(rhs)</code>…","Unchecked Euclidean division. Computes <code>self.div_euclid(rhs)</code>…","Unchecked Euclidean division. Computes <code>self.div_euclid(rhs)</code>…","Unchecked Euclidean division. Computes <code>self.div_euclid(rhs)</code>…","Unchecked Euclidean division. Computes <code>self.div_euclid(rhs)</code>…","Unchecked Euclidean division. Computes <code>self.div_euclid(rhs)</code>…","Unchecked Euclidean division. Computes <code>self.div_euclid(rhs)</code>…","Unchecked Euclidean division. Computes <code>self.div_euclid(rhs)</code>…","Unchecked integer multiplication. Computes <code>self * rhs</code>, …","Unchecked integer multiplication. Computes <code>self * rhs</code>, …","Unchecked integer multiplication. Computes <code>self * rhs</code>, …","Unchecked integer multiplication. Computes <code>self * rhs</code>, …","Unchecked integer multiplication. Computes <code>self * rhs</code>, …","Unchecked integer multiplication. Computes <code>self * rhs</code>, …","Unchecked integer multiplication. Computes <code>self * rhs</code>, …","Unchecked integer multiplication. Computes <code>self * rhs</code>, …","Unchecked integer multiplication. Computes <code>self * rhs</code>, …","Unchecked integer multiplication. Computes <code>self * rhs</code>, …","Unchecked integer multiplication. Computes <code>self * rhs</code>, …","Unchecked integer multiplication. Computes <code>self * rhs</code>, …","Unchecked negation. Computes <code>-self</code>, assuming that <code>-self</code> is …","Unchecked negation. Computes <code>-self</code>, assuming that <code>-self</code> is …","Unchecked negation. Computes <code>-self</code>, assuming that <code>-self</code> is …","Unchecked negation. Computes <code>-self</code>, assuming that <code>-self</code> is …","Unchecked negation. Computes <code>-self</code>, assuming that <code>-self</code> is …","Unchecked negation. Computes <code>-self</code>, assuming that <code>-self</code> is …","Unchecked negation. Computes <code>-self</code>, assuming that <code>-self</code> is …","Unchecked negation. Computes <code>-self</code>, assuming that <code>-self</code> is …","Unchecked negation. Computes <code>-self</code>, assuming that <code>-self</code> is …","Unchecked negation. Computes <code>-self</code>, assuming that <code>-self</code> is …","Unchecked negation. Computes <code>-self</code>, assuming that <code>-self</code> is …","Unchecked negation. Computes <code>-self</code>, assuming that <code>-self</code> is …","Unchecked exponentiation. Computes <code>self.pow(exp)</code>, assuming …","Unchecked exponentiation. Computes <code>self.pow(exp)</code>, assuming …","Unchecked exponentiation. Computes <code>self.pow(exp)</code>, assuming …","Unchecked exponentiation. Computes <code>self.pow(exp)</code>, assuming …","Unchecked exponentiation. Computes <code>self.pow(exp)</code>, assuming …","Unchecked exponentiation. Computes <code>self.pow(exp)</code>, assuming …","Unchecked exponentiation. Computes <code>self.pow(exp)</code>, assuming …","Unchecked exponentiation. Computes <code>self.pow(exp)</code>, assuming …","Unchecked exponentiation. Computes <code>self.pow(exp)</code>, assuming …","Unchecked exponentiation. Computes <code>self.pow(exp)</code>, assuming …","Unchecked exponentiation. Computes <code>self.pow(exp)</code>, assuming …","Unchecked exponentiation. Computes <code>self.pow(exp)</code>, assuming …","Unchecked remainder. Computes <code>self % rhs</code>, assuming that …","Unchecked remainder. Computes <code>self % rhs</code>, assuming that …","Unchecked remainder. Computes <code>self % rhs</code>, assuming that …","Unchecked remainder. Computes <code>self % rhs</code>, assuming that …","Unchecked remainder. Computes <code>self % rhs</code>, assuming that …","Unchecked remainder. Computes <code>self % rhs</code>, assuming that …","Unchecked remainder. Computes <code>self % rhs</code>, assuming that …","Unchecked remainder. Computes <code>self % rhs</code>, assuming that …","Unchecked remainder. Computes <code>self % rhs</code>, assuming that …","Unchecked remainder. Computes <code>self % rhs</code>, assuming that …","Unchecked remainder. Computes <code>self % rhs</code>, assuming that …","Unchecked remainder. Computes <code>self % rhs</code>, assuming that …","Unchecked Euclidean remainder. Computes …","Unchecked Euclidean remainder. Computes …","Unchecked Euclidean remainder. Computes …","Unchecked Euclidean remainder. Computes …","Unchecked Euclidean remainder. Computes …","Unchecked Euclidean remainder. Computes …","Unchecked Euclidean remainder. Computes …","Unchecked Euclidean remainder. Computes …","Unchecked Euclidean remainder. Computes …","Unchecked Euclidean remainder. Computes …","Unchecked Euclidean remainder. Computes …","Unchecked Euclidean remainder. Computes …","Unchecked shift left. Computes <code>self &lt;&lt; rhs</code>, assuming that …","Unchecked shift left. Computes <code>self &lt;&lt; rhs</code>, assuming that …","Unchecked shift left. Computes <code>self &lt;&lt; rhs</code>, assuming that …","Unchecked shift left. Computes <code>self &lt;&lt; rhs</code>, assuming that …","Unchecked shift left. Computes <code>self &lt;&lt; rhs</code>, assuming that …","Unchecked shift left. Computes <code>self &lt;&lt; rhs</code>, assuming that …","Unchecked shift left. Computes <code>self &lt;&lt; rhs</code>, assuming that …","Unchecked shift left. Computes <code>self &lt;&lt; rhs</code>, assuming that …","Unchecked shift left. Computes <code>self &lt;&lt; rhs</code>, assuming that …","Unchecked shift left. Computes <code>self &lt;&lt; rhs</code>, assuming that …","Unchecked shift left. Computes <code>self &lt;&lt; rhs</code>, assuming that …","Unchecked shift left. Computes <code>self &lt;&lt; rhs</code>, assuming that …","Unchecked shift right. Computes <code>self &gt;&gt; rhs</code>, assuming that …","Unchecked shift right. Computes <code>self &gt;&gt; rhs</code>, assuming that …","Unchecked shift right. Computes <code>self &gt;&gt; rhs</code>, assuming that …","Unchecked shift right. Computes <code>self &gt;&gt; rhs</code>, assuming that …","Unchecked shift right. Computes <code>self &gt;&gt; rhs</code>, assuming that …","Unchecked shift right. Computes <code>self &gt;&gt; rhs</code>, assuming that …","Unchecked shift right. Computes <code>self &gt;&gt; rhs</code>, assuming that …","Unchecked shift right. Computes <code>self &gt;&gt; rhs</code>, assuming that …","Unchecked shift right. Computes <code>self &gt;&gt; rhs</code>, assuming that …","Unchecked shift right. Computes <code>self &gt;&gt; rhs</code>, assuming that …","Unchecked shift right. Computes <code>self &gt;&gt; rhs</code>, assuming that …","Unchecked shift right. Computes <code>self &gt;&gt; rhs</code>, assuming that …","Unchecked integer subtraction. Computes <code>self - rhs</code>, …","Unchecked integer subtraction. Computes <code>self - rhs</code>, …","Unchecked integer subtraction. Computes <code>self - rhs</code>, …","Unchecked integer subtraction. Computes <code>self - rhs</code>, …","Unchecked integer subtraction. Computes <code>self - rhs</code>, …","Unchecked integer subtraction. Computes <code>self - rhs</code>, …","Unchecked integer subtraction. Computes <code>self - rhs</code>, …","Unchecked integer subtraction. Computes <code>self - rhs</code>, …","Unchecked integer subtraction. Computes <code>self - rhs</code>, …","Unchecked integer subtraction. Computes <code>self - rhs</code>, …","Unchecked integer subtraction. Computes <code>self - rhs</code>, …","Unchecked integer subtraction. Computes <code>self - rhs</code>, …","Wrapping integer addition. Computes <code>self + rhs</code>, wrapping …","Wrapping integer addition. Computes <code>self + rhs</code>, wrapping …","Wrapping integer addition. Computes <code>self + rhs</code>, wrapping …","Wrapping integer addition. Computes <code>self + rhs</code>, wrapping …","Wrapping integer addition. Computes <code>self + rhs</code>, wrapping …","Wrapping integer addition. Computes <code>self + rhs</code>, wrapping …","Wrapping integer addition. Computes <code>self + rhs</code>, wrapping …","Wrapping integer addition. Computes <code>self + rhs</code>, wrapping …","Wrapping integer addition. Computes <code>self + rhs</code>, wrapping …","Wrapping integer addition. Computes <code>self + rhs</code>, wrapping …","Wrapping integer addition. Computes <code>self + rhs</code>, wrapping …","Wrapping integer addition. Computes <code>self + rhs</code>, wrapping …","Wrapping integer subtraction. Computes <code>self - rhs</code>, …","Wrapping integer subtraction. Computes <code>self - rhs</code>, …","Wrapping integer subtraction. Computes <code>self - rhs</code>, …","Wrapping integer subtraction. Computes <code>self - rhs</code>, …","Wrapping integer subtraction. Computes <code>self - rhs</code>, …","Wrapping integer subtraction. Computes <code>self - rhs</code>, …","Wrapping integer subtraction. Computes <code>self - rhs</code>, …","Wrapping integer subtraction. Computes <code>self - rhs</code>, …","Wrapping integer subtraction. Computes <code>self - rhs</code>, …","Wrapping integer subtraction. Computes <code>self - rhs</code>, …","Wrapping integer subtraction. Computes <code>self - rhs</code>, …","Wrapping integer subtraction. Computes <code>self - rhs</code>, …"],"i":[1,3,5,7,9,11,13,15,17,19,21,23,1,3,5,7,9,11,13,15,17,19,21,23,2,4,6,8,10,12,14,16,18,20,22,24,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,4,6,8,10,12,14,16,18,20,22,24,0,13,15,17,19,21,23,1,3,5,7,9,11,13,15,17,19,21,23,38,39,1,1,2,3,3,4,5,5,6,7,7,8,9,9,10,11,11,12,13,13,14,15,15,16,17,17,18,19,19,20,21,21,22,23,23,24,38,39,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,13,15,17,19,21,23,1,3,5,7,9,11,13,15,17,19,21,23,1,3,5,7,9,11,13,15,17,19,21,23,1,3,5,7,9,11,13,15,17,19,21,23,1,3,5,7,9,11,13,15,17,19,21,23,1,3,5,7,9,11,13,15,17,19,21,23,1,3,5,7,9,11,13,15,17,19,21,23,1,3,5,7,9,11,13,15,17,19,21,23,1,3,5,7,9,11,13,15,17,19,21,23,1,3,5,7,9,11,13,15,17,19,21,23,1,3,5,7,9,11,13,15,17,19,21,23,1,3,5,7,9,11,13,15,17,19,21,23,38,39,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,38,39,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,2,4,6,8,10,12,14,16,18,20,22,24,38,39,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,1,3,5,7,9,11,13,15,17,19,21,23,1,3,5,7,9,11,13,15,17,19,21,23,38,38,39,39,1,1,1,1,1,1,1,1,2,3,3,3,3,3,3,3,3,4,5,5,5,5,5,5,5,5,6,7,7,7,7,7,7,7,7,8,9,9,9,9,9,9,9,9,10,11,11,11,11,11,11,11,11,12,13,13,13,13,13,13,13,13,14,15,15,15,15,15,15,15,15,16,17,17,17,17,17,17,17,17,18,19,19,19,19,19,19,19,19,20,21,21,21,21,21,21,21,21,22,23,23,23,23,23,23,23,23,24,1,3,5,7,9,11,13,15,17,19,21,23,38,39,1,2,2,2,3,4,4,4,5,6,6,6,7,8,8,8,9,10,10,10,11,12,12,12,13,14,14,14,15,16,16,16,17,18,18,18,19,20,20,20,21,22,22,22,23,24,24,24,1,3,5,7,9,11,13,15,17,19,21,23,1,3,5,7,9,11,13,15,17,19,21,23,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,2,4,6,8,10,12,14,16,18,20,22,24,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,38,39,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,2,4,6,8,10,12,14,16,18,20,22,24,2,4,6,8,10,12,14,16,18,20,22,24,39,1,3,5,7,9,11,13,15,17,19,21,23,1,3,5,7,9,11,13,15,17,19,21,23,1,3,5,7,9,11,13,15,17,19,21,23,1,3,5,7,9,11,13,15,17,19,21,23,1,3,5,7,9,11,13,15,17,19,21,23,1,3,5,7,9,11,13,15,17,19,21,23,1,3,5,7,9,11,13,15,17,19,21,23,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,1,3,5,7,9,11,13,15,17,19,21,23,1,3,5,7,9,11,13,15,17,19,21,23,1,3,5,7,9,11,13,15,17,19,21,23,13,15,17,19,21,23,1,3,5,7,9,11,13,15,17,19,21,23,1,3,5,7,9,11,13,15,17,19,21,23,2,4,6,8,10,12,14,16,18,20,22,24,38,39,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,38,39,1,3,5,7,9,11,13,15,17,19,21,23,38,39,1,1,2,3,3,4,5,5,6,7,7,8,9,9,10,11,11,12,13,13,14,15,15,16,17,17,18,19,19,20,21,21,22,23,23,24,38,39,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,38,39,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,13,15,17,19,21,23,1,3,5,7,9,11,13,15,17,19,21,23,1,3,5,7,9,11,13,15,17,19,21,23,1,3,5,7,9,11,13,15,17,19,21,23,1,3,5,7,9,11,13,15,17,19,21,23,1,3,5,7,9,11,13,15,17,19,21,23,1,3,5,7,9,11,13,15,17,19,21,23,1,3,5,7,9,11,13,15,17,19,21,23,1,3,5,7,9,11,13,15,17,19,21,23,1,3,5,7,9,11,13,15,17,19,21,23,1,3,5,7,9,11,13,15,17,19,21,23,1,3,5,7,9,11,13,15,17,19,21,23,1,3,5,7,9,11,13,15,17,19,21,23,1,3,5,7,9,11,13,15,17,19,21,23],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[1,2],[3,4],[5,6],[7,8],[9,10],[11,12],[13,14],[15,16],[17,18],[19,20],[21,22],[23,24],0,[13,13],[15,15],[17,17],[19,19],[21,21],[23,23],[1,25],[3,26],[5,27],[7,28],[9,29],[11,30],[13,31],[15,32],[17,33],[19,34],[21,35],[23,36],[-1,-2,[],[]],[-1,-2,[],[]],[1,25],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[3,26],[-1,-2,[],[]],[5,27],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[7,28],[-1,-2,[],[]],[9,29],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[11,30],[-1,-2,[],[]],[13,31],[-1,-2,[],[]],[-1,-2,[],[]],[15,32],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[17,33],[-1,-2,[],[]],[19,34],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[21,35],[-1,-2,[],[]],[-1,-2,[],[]],[23,36],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[13,[[37,[13]]]],[15,[[37,[15]]]],[17,[[37,[17]]]],[19,[[37,[19]]]],[21,[[37,[21]]]],[23,[[37,[23]]]],[[1,25],[[37,[1]]]],[[3,26],[[37,[3]]]],[[5,27],[[37,[5]]]],[[7,28],[[37,[7]]]],[[9,29],[[37,[9]]]],[[11,30],[[37,[11]]]],[[13,31],[[37,[13]]]],[[15,32],[[37,[15]]]],[[17,33],[[37,[17]]]],[[19,34],[[37,[19]]]],[[21,35],[[37,[21]]]],[[23,36],[[37,[23]]]],[[1,25],[[37,[1]]]],[[3,26],[[37,[3]]]],[[5,27],[[37,[5]]]],[[7,28],[[37,[7]]]],[[9,29],[[37,[9]]]],[[11,30],[[37,[11]]]],[[13,31],[[37,[13]]]],[[15,32],[[37,[15]]]],[[17,33],[[37,[17]]]],[[19,34],[[37,[19]]]],[[21,35],[[37,[21]]]],[[23,36],[[37,[23]]]],[[1,25],[[37,[1]]]],[[3,26],[[37,[3]]]],[[5,27],[[37,[5]]]],[[7,28],[[37,[7]]]],[[9,29],[[37,[9]]]],[[11,30],[[37,[11]]]],[[13,31],[[37,[13]]]],[[15,32],[[37,[15]]]],[[17,33],[[37,[17]]]],[[19,34],[[37,[19]]]],[[21,35],[[37,[21]]]],[[23,36],[[37,[23]]]],[[1,25],[[37,[1]]]],[[3,26],[[37,[3]]]],[[5,27],[[37,[5]]]],[[7,28],[[37,[7]]]],[[9,29],[[37,[9]]]],[[11,30],[[37,[11]]]],[[13,31],[[37,[13]]]],[[15,32],[[37,[15]]]],[[17,33],[[37,[17]]]],[[19,34],[[37,[19]]]],[[21,35],[[37,[21]]]],[[23,36],[[37,[23]]]],[1,[[37,[1]]]],[3,[[37,[3]]]],[5,[[37,[5]]]],[7,[[37,[7]]]],[9,[[37,[9]]]],[11,[[37,[11]]]],[13,[[37,[13]]]],[15,[[37,[15]]]],[17,[[37,[17]]]],[19,[[37,[19]]]],[21,[[37,[21]]]],[23,[[37,[23]]]],[[1,27],[[37,[1]]]],[[3,27],[[37,[3]]]],[[5,27],[[37,[5]]]],[[7,27],[[37,[7]]]],[[9,27],[[37,[9]]]],[[11,27],[[37,[11]]]],[[13,27],[[37,[13]]]],[[15,27],[[37,[15]]]],[[17,27],[[37,[17]]]],[[19,27],[[37,[19]]]],[[21,27],[[37,[21]]]],[[23,27],[[37,[23]]]],[[1,25],[[37,[1]]]],[[3,26],[[37,[3]]]],[[5,27],[[37,[5]]]],[[7,28],[[37,[7]]]],[[9,29],[[37,[9]]]],[[11,30],[[37,[11]]]],[[13,31],[[37,[13]]]],[[15,32],[[37,[15]]]],[[17,33],[[37,[17]]]],[[19,34],[[37,[19]]]],[[21,35],[[37,[21]]]],[[23,36],[[37,[23]]]],[[1,25],[[37,[1]]]],[[3,26],[[37,[3]]]],[[5,27],[[37,[5]]]],[[7,28],[[37,[7]]]],[[9,29],[[37,[9]]]],[[11,30],[[37,[11]]]],[[13,31],[[37,[13]]]],[[15,32],[[37,[15]]]],[[17,33],[[37,[17]]]],[[19,34],[[37,[19]]]],[[21,35],[[37,[21]]]],[[23,36],[[37,[23]]]],[[1,27],[[37,[1]]]],[[3,27],[[37,[3]]]],[[5,27],[[37,[5]]]],[[7,27],[[37,[7]]]],[[9,27],[[37,[9]]]],[[11,27],[[37,[11]]]],[[13,27],[[37,[13]]]],[[15,27],[[37,[15]]]],[[17,27],[[37,[17]]]],[[19,27],[[37,[19]]]],[[21,27],[[37,[21]]]],[[23,27],[[37,[23]]]],[[1,27],[[37,[1]]]],[[3,27],[[37,[3]]]],[[5,27],[[37,[5]]]],[[7,27],[[37,[7]]]],[[9,27],[[37,[9]]]],[[11,27],[[37,[11]]]],[[13,27],[[37,[13]]]],[[15,27],[[37,[15]]]],[[17,27],[[37,[17]]]],[[19,27],[[37,[19]]]],[[21,27],[[37,[21]]]],[[23,27],[[37,[23]]]],[[1,25],[[37,[1]]]],[[3,26],[[37,[3]]]],[[5,27],[[37,[5]]]],[[7,28],[[37,[7]]]],[[9,29],[[37,[9]]]],[[11,30],[[37,[11]]]],[[13,31],[[37,[13]]]],[[15,32],[[37,[15]]]],[[17,33],[[37,[17]]]],[[19,34],[[37,[19]]]],[[21,35],[[37,[21]]]],[[23,36],[[37,[23]]]],[38,38],[39,39],[1,1],[2,2],[3,3],[4,4],[5,5],[6,6],[7,7],[8,8],[9,9],[10,10],[11,11],[12,12],[13,13],[14,14],[15,15],[16,16],[17,17],[18,18],[19,19],[20,20],[21,21],[22,22],[23,23],[24,24],[[-1,-2],40,[],[]],[[-1,-2],40,[],[]],[[-1,-2],40,[],[]],[[-1,-2],40,[],[]],[[-1,-2],40,[],[]],[[-1,-2],40,[],[]],[[-1,-2],40,[],[]],[[-1,-2],40,[],[]],[[-1,-2],40,[],[]],[[-1,-2],40,[],[]],[[-1,-2],40,[],[]],[[-1,-2],40,[],[]],[[-1,-2],40,[],[]],[[-1,-2],40,[],[]],[[-1,-2],40,[],[]],[[-1,-2],40,[],[]],[[-1,-2],40,[],[]],[[-1,-2],40,[],[]],[[-1,-2],40,[],[]],[[-1,-2],40,[],[]],[[-1,-2],40,[],[]],[[-1,-2],40,[],[]],[[-1,-2],40,[],[]],[[-1,-2],40,[],[]],[[-1,-2],40,[],[]],[[-1,-2],40,[],[]],[[1,1],41],[[2,2],41],[[3,3],41],[[4,4],41],[[5,5],41],[[6,6],41],[[7,7],41],[[8,8],41],[[9,9],41],[[10,10],41],[[11,11],41],[[12,12],41],[[13,13],41],[[14,14],41],[[15,15],41],[[16,16],41],[[17,17],41],[[18,18],41],[[19,19],41],[[20,20],41],[[21,21],41],[[22,22],41],[[23,23],41],[[24,24],41],[[],2],[[],4],[[],6],[[],8],[[],10],[[],12],[[],14],[[],16],[[],18],[[],20],[[],22],[[],24],[[38,38],42],[[39,39],42],[[1,1],42],[[2,2],42],[[3,3],42],[[4,4],42],[[5,5],42],[[6,6],42],[[7,7],42],[[8,8],42],[[9,9],42],[[10,10],42],[[11,11],42],[[12,12],42],[[13,13],42],[[14,14],42],[[15,15],42],[[16,16],42],[[17,17],42],[[18,18],42],[[19,19],42],[[20,20],42],[[21,21],42],[[22,22],42],[[23,23],42],[[24,24],42],[[],1],[[],3],[[],5],[[],7],[[],9],[[],11],[[],13],[[],15],[[],17],[[],19],[[],21],[[],23],[1,1],[3,3],[5,5],[7,7],[9,9],[11,11],[13,13],[15,15],[17,17],[19,19],[21,21],[23,23],[[38,43],44],[[38,43],44],[[39,43],44],[[39,43],44],[[1,43],44],[[1,43],44],[[1,43],44],[[1,43],44],[[1,43],44],[[1,43],44],[[1,43],44],[[1,43],44],[[2,43],44],[[3,43],44],[[3,43],44],[[3,43],44],[[3,43],44],[[3,43],44],[[3,43],44],[[3,43],44],[[3,43],44],[[4,43],44],[[5,43],44],[[5,43],44],[[5,43],44],[[5,43],44],[[5,43],44],[[5,43],44],[[5,43],44],[[5,43],44],[[6,43],44],[[7,43],44],[[7,43],44],[[7,43],44],[[7,43],44],[[7,43],44],[[7,43],44],[[7,43],44],[[7,43],44],[[8,43],44],[[9,43],44],[[9,43],44],[[9,43],44],[[9,43],44],[[9,43],44],[[9,43],44],[[9,43],44],[[9,43],44],[[10,43],44],[[11,43],44],[[11,43],44],[[11,43],44],[[11,43],44],[[11,43],44],[[11,43],44],[[11,43],44],[[11,43],44],[[12,43],44],[[13,43],44],[[13,43],44],[[13,43],44],[[13,43],44],[[13,43],44],[[13,43],44],[[13,43],44],[[13,43],44],[[14,43],44],[[15,43],44],[[15,43],44],[[15,43],44],[[15,43],44],[[15,43],44],[[15,43],44],[[15,43],44],[[15,43],44],[[16,43],44],[[17,43],44],[[17,43],44],[[17,43],44],[[17,43],44],[[17,43],44],[[17,43],44],[[17,43],44],[[17,43],44],[[18,43],44],[[19,43],44],[[19,43],44],[[19,43],44],[[19,43],44],[[19,43],44],[[19,43],44],[[19,43],44],[[19,43],44],[[20,43],44],[[21,43],44],[[21,43],44],[[21,43],44],[[21,43],44],[[21,43],44],[[21,43],44],[[21,43],44],[[21,43],44],[[22,43],44],[[23,43],44],[[23,43],44],[[23,43],44],[[23,43],44],[[23,43],44],[[23,43],44],[[23,43],44],[[23,43],44],[[24,43],44],[[1,43,[45,[1]]],44],[[3,43,[45,[3]]],44],[[5,43,[45,[5]]],44],[[7,43,[45,[7]]],44],[[9,43,[45,[9]]],44],[[11,43,[45,[11]]],44],[[13,43,[45,[13]]],44],[[15,43,[45,[15]]],44],[[17,43,[45,[17]]],44],[[19,43,[45,[19]]],44],[[21,43,[45,[21]]],44],[[23,43,[45,[23]]],44],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[1,2],[[[37,[1]]],2],[-1,-1,[]],[-1,-1,[]],[3,4],[-1,-1,[]],[[[37,[3]]],4],[-1,-1,[]],[5,6],[-1,-1,[]],[[[37,[5]]],6],[-1,-1,[]],[[[37,[7]]],8],[7,8],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[9,10],[[[37,[9]]],10],[-1,-1,[]],[11,12],[[[37,[11]]],12],[-1,-1,[]],[-1,-1,[]],[13,14],[-1,-1,[]],[[[37,[13]]],14],[-1,-1,[]],[15,16],[-1,-1,[]],[[[37,[15]]],16],[-1,-1,[]],[17,18],[[[37,[17]]],18],[-1,-1,[]],[-1,-1,[]],[[[37,[19]]],20],[19,20],[-1,-1,[]],[-1,-1,[]],[[[37,[21]]],22],[-1,-1,[]],[21,22],[-1,-1,[]],[-1,-1,[]],[23,24],[[[37,[23]]],24],[46,[[47,[1]]]],[46,[[47,[3]]]],[46,[[47,[5]]]],[46,[[47,[7]]]],[46,[[47,[9]]]],[46,[[47,[11]]]],[46,[[47,[13]]]],[46,[[47,[15]]]],[46,[[47,[17]]]],[46,[[47,[19]]]],[46,[[47,[21]]]],[46,[[47,[23]]]],[[46,27],[[47,[1,39]]]],[[46,27],[[47,[3,39]]]],[[46,27],[[47,[5,39]]]],[[46,27],[[47,[7,39]]]],[[46,27],[[47,[9,39]]]],[[46,27],[[47,[11,39]]]],[[46,27],[[47,[13,39]]]],[[46,27],[[47,[15,39]]]],[[46,27],[[47,[17,39]]]],[[46,27],[[47,[19,39]]]],[[46,27],[[47,[21,39]]]],[[46,27],[[47,[23,39]]]],[1,25],[2,[[37,[1]]]],[3,26],[4,[[37,[3]]]],[5,27],[6,[[37,[5]]]],[7,28],[8,[[37,[7]]]],[9,29],[10,[[37,[9]]]],[11,30],[12,[[37,[11]]]],[13,31],[14,[[37,[13]]]],[15,32],[16,[[37,[15]]]],[17,33],[18,[[37,[17]]]],[19,34],[20,[[37,[19]]]],[21,35],[22,[[37,[21]]]],[23,36],[24,[[37,[23]]]],[2,[[37,[25]]]],[4,[[37,[26]]]],[6,[[37,[27]]]],[8,[[37,[28]]]],[10,[[37,[29]]]],[12,[[37,[30]]]],[14,[[37,[31]]]],[16,[[37,[32]]]],[18,[[37,[33]]]],[20,[[37,[34]]]],[22,[[37,[35]]]],[24,[[37,[36]]]],[[1,-1],40,48],[[2,-1],40,48],[[3,-1],40,48],[[4,-1],40,48],[[5,-1],40,48],[[6,-1],40,48],[[7,-1],40,48],[[8,-1],40,48],[[9,-1],40,48],[[10,-1],40,48],[[11,-1],40,48],[[12,-1],40,48],[[13,-1],40,48],[[14,-1],40,48],[[15,-1],40,48],[[16,-1],40,48],[[17,-1],40,48],[[18,-1],40,48],[[19,-1],40,48],[[20,-1],40,48],[[21,-1],40,48],[[22,-1],40,48],[[23,-1],40,48],[[24,-1],40,48],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[2,42],[4,42],[6,42],[8,42],[10,42],[12,42],[14,42],[16,42],[18,42],[20,42],[22,42],[24,42],[2,42],[4,42],[6,42],[8,42],[10,42],[12,42],[14,42],[16,42],[18,42],[20,42],[22,42],[24,42],[39,49],[[1,50],[[45,[1]]]],[[3,50],[[45,[3]]]],[[5,50],[[45,[5]]]],[[7,50],[[45,[7]]]],[[9,50],[[45,[9]]]],[[11,50],[[45,[11]]]],[[13,50],[[45,[13]]]],[[15,50],[[45,[15]]]],[[17,50],[[45,[17]]]],[[19,50],[[45,[19]]]],[[21,50],[[45,[21]]]],[[23,50],[[45,[23]]]],[1,[[37,[1]]]],[3,[[37,[3]]]],[5,[[37,[5]]]],[7,[[37,[7]]]],[9,[[37,[9]]]],[11,[[37,[11]]]],[13,[[37,[13]]]],[15,[[37,[15]]]],[17,[[37,[17]]]],[19,[[37,[19]]]],[21,[[37,[21]]]],[23,[[37,[23]]]],[1,1],[3,3],[5,5],[7,7],[9,9],[11,11],[13,13],[15,15],[17,17],[19,19],[21,21],[23,23],[25,[[37,[1]]]],[26,[[37,[3]]]],[27,[[37,[5]]]],[28,[[37,[7]]]],[29,[[37,[9]]]],[30,[[37,[11]]]],[31,[[37,[13]]]],[32,[[37,[15]]]],[33,[[37,[17]]]],[34,[[37,[19]]]],[35,[[37,[21]]]],[36,[[37,[23]]]],[25,1],[26,3],[27,5],[28,7],[29,9],[30,11],[31,13],[32,15],[33,17],[34,19],[35,21],[36,23],[[],1],[[],3],[[],5],[[],7],[[],9],[[],11],[[],13],[[],15],[[],17],[[],19],[[],21],[[],23],[25,1],[26,3],[27,5],[28,7],[29,9],[30,11],[31,13],[32,15],[33,17],[34,19],[35,21],[36,23],[[1,1],[[37,[41]]]],[[2,2],[[37,[41]]]],[[3,3],[[37,[41]]]],[[4,4],[[37,[41]]]],[[5,5],[[37,[41]]]],[[6,6],[[37,[41]]]],[[7,7],[[37,[41]]]],[[8,8],[[37,[41]]]],[[9,9],[[37,[41]]]],[[10,10],[[37,[41]]]],[[11,11],[[37,[41]]]],[[12,12],[[37,[41]]]],[[13,13],[[37,[41]]]],[[14,14],[[37,[41]]]],[[15,15],[[37,[41]]]],[[16,16],[[37,[41]]]],[[17,17],[[37,[41]]]],[[18,18],[[37,[41]]]],[[19,19],[[37,[41]]]],[[20,20],[[37,[41]]]],[[21,21],[[37,[41]]]],[[22,22],[[37,[41]]]],[[23,23],[[37,[41]]]],[[24,24],[[37,[41]]]],[[1,1],1],[[3,3],3],[[5,5],5],[[7,7],7],[[9,9],9],[[11,11],11],[13,13],[15,15],[17,17],[19,19],[21,21],[23,23],[[1,25],1],[[3,26],3],[[5,27],5],[[7,28],7],[[9,29],9],[[11,30],11],[[13,31],13],[[15,32],15],[[17,33],17],[[19,34],19],[[21,35],21],[[23,36],23],[[1,25],1],[[3,26],3],[[5,27],5],[[7,28],7],[[9,29],9],[[11,30],11],[[13,31],13],[[15,32],15],[[17,33],17],[[19,34],19],[[21,35],21],[[23,36],23],[13,13],[15,15],[17,17],[19,19],[21,21],[23,23],[[1,27],1],[[3,27],3],[[5,27],5],[[7,27],7],[[9,27],9],[[11,27],11],[[13,27],13],[[15,27],15],[[17,27],17],[[19,27],19],[[21,27],21],[[23,27],23],[[1,25],1],[[3,26],3],[[5,27],5],[[7,28],7],[[9,29],9],[[11,30],11],[[13,31],13],[[15,32],15],[[17,33],17],[[19,34],19],[[21,35],21],[[23,36],23],[25,2],[26,4],[27,6],[28,8],[29,10],[30,12],[31,14],[32,16],[33,18],[34,20],[35,22],[36,24],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,51,[]],[-1,51,[]],[-1,51,[]],[-1,51,[]],[-1,51,[]],[-1,51,[]],[-1,51,[]],[-1,51,[]],[-1,51,[]],[-1,51,[]],[-1,51,[]],[-1,51,[]],[-1,51,[]],[-1,51,[]],[-1,[[47,[-2]]],[],[]],[-1,[[47,[-2]]],[],[]],[25,[[47,[1]]]],[-1,[[47,[-2]]],[],[]],[-1,[[47,[-2]]],[],[]],[-1,[[47,[-2]]],[],[]],[26,[[47,[3]]]],[-1,[[47,[-2]]],[],[]],[27,[[47,[5]]]],[-1,[[47,[-2]]],[],[]],[-1,[[47,[-2]]],[],[]],[-1,[[47,[-2]]],[],[]],[28,[[47,[7]]]],[-1,[[47,[-2]]],[],[]],[-1,[[47,[-2]]],[],[]],[29,[[47,[9]]]],[-1,[[47,[-2]]],[],[]],[-1,[[47,[-2]]],[],[]],[30,[[47,[11]]]],[-1,[[47,[-2]]],[],[]],[-1,[[47,[-2]]],[],[]],[31,[[47,[13]]]],[-1,[[47,[-2]]],[],[]],[-1,[[47,[-2]]],[],[]],[32,[[47,[15]]]],[-1,[[47,[-2]]],[],[]],[33,[[47,[17]]]],[-1,[[47,[-2]]],[],[]],[-1,[[47,[-2]]],[],[]],[-1,[[47,[-2]]],[],[]],[34,[[47,[19]]]],[-1,[[47,[-2]]],[],[]],[-1,[[47,[-2]]],[],[]],[35,[[47,[21]]]],[-1,[[47,[-2]]],[],[]],[-1,[[47,[-2]]],[],[]],[36,[[47,[23]]]],[-1,[[47,[-2]]],[],[]],[-1,[[47,[-2]]],[],[]],[-1,[[47,[-2]]],[],[]],[-1,[[47,[-2]]],[],[]],[-1,[[47,[-2]]],[],[]],[-1,[[47,[-2]]],[],[]],[-1,[[47,[-2]]],[],[]],[-1,[[47,[-2]]],[],[]],[-1,[[47,[-2]]],[],[]],[-1,[[47,[-2]]],[],[]],[-1,[[47,[-2]]],[],[]],[-1,[[47,[-2]]],[],[]],[-1,[[47,[-2]]],[],[]],[-1,[[47,[-2]]],[],[]],[-1,[[47,[-2]]],[],[]],[-1,[[47,[-2]]],[],[]],[-1,[[47,[-2]]],[],[]],[-1,[[47,[-2]]],[],[]],[-1,[[47,[-2]]],[],[]],[-1,[[47,[-2]]],[],[]],[-1,[[47,[-2]]],[],[]],[-1,[[47,[-2]]],[],[]],[-1,[[47,[-2]]],[],[]],[-1,[[47,[-2]]],[],[]],[-1,[[47,[-2]]],[],[]],[-1,[[47,[-2]]],[],[]],[-1,[[47,[-2]]],[],[]],[-1,52,[]],[-1,52,[]],[-1,52,[]],[-1,52,[]],[-1,52,[]],[-1,52,[]],[-1,52,[]],[-1,52,[]],[-1,52,[]],[-1,52,[]],[-1,52,[]],[-1,52,[]],[-1,52,[]],[-1,52,[]],[-1,52,[]],[-1,52,[]],[-1,52,[]],[-1,52,[]],[-1,52,[]],[-1,52,[]],[-1,52,[]],[-1,52,[]],[-1,52,[]],[-1,52,[]],[-1,52,[]],[-1,52,[]],[13,13],[15,15],[17,17],[19,19],[21,21],[23,23],[[1,25],1],[[3,26],3],[[5,27],5],[[7,28],7],[[9,29],9],[[11,30],11],[[13,31],13],[[15,32],15],[[17,33],17],[[19,34],19],[[21,35],21],[[23,36],23],[[1,25],1],[[3,26],3],[[5,27],5],[[7,28],7],[[9,29],9],[[11,30],11],[[13,31],13],[[15,32],15],[[17,33],17],[[19,34],19],[[21,35],21],[[23,36],23],[[1,25],1],[[3,26],3],[[5,27],5],[[7,28],7],[[9,29],9],[[11,30],11],[[13,31],13],[[15,32],15],[[17,33],17],[[19,34],19],[[21,35],21],[[23,36],23],[[1,25],1],[[3,26],3],[[5,27],5],[[7,28],7],[[9,29],9],[[11,30],11],[[13,31],13],[[15,32],15],[[17,33],17],[[19,34],19],[[21,35],21],[[23,36],23],[1,1],[3,3],[5,5],[7,7],[9,9],[11,11],[13,13],[15,15],[17,17],[19,19],[21,21],[23,23],[[1,27],1],[[3,27],3],[[5,27],5],[[7,27],7],[[9,27],9],[[11,27],11],[[13,27],13],[[15,27],15],[[17,27],17],[[19,27],19],[[21,27],21],[[23,27],23],[[1,25],1],[[3,26],3],[[5,27],5],[[7,28],7],[[9,29],9],[[11,30],11],[[13,31],13],[[15,32],15],[[17,33],17],[[19,34],19],[[21,35],21],[[23,36],23],[[1,25],1],[[3,26],3],[[5,27],5],[[7,28],7],[[9,29],9],[[11,30],11],[[13,31],13],[[15,32],15],[[17,33],17],[[19,34],19],[[21,35],21],[[23,36],23],[[1,27],1],[[3,27],3],[[5,27],5],[[7,27],7],[[9,27],9],[[11,27],11],[[13,27],13],[[15,27],15],[[17,27],17],[[19,27],19],[[21,27],21],[[23,27],23],[[1,27],1],[[3,27],3],[[5,27],5],[[7,27],7],[[9,27],9],[[11,27],11],[[13,27],13],[[15,27],15],[[17,27],17],[[19,27],19],[[21,27],21],[[23,27],23],[[1,25],1],[[3,26],3],[[5,27],5],[[7,28],7],[[9,29],9],[[11,30],11],[[13,31],13],[[15,32],15],[[17,33],17],[[19,34],19],[[21,35],21],[[23,36],23],[[1,25],1],[[3,26],3],[[5,27],5],[[7,28],7],[[9,29],9],[[11,30],11],[[13,31],13],[[15,32],15],[[17,33],17],[[19,34],19],[[21,35],21],[[23,36],23],[[1,25],1],[[3,26],3],[[5,27],5],[[7,28],7],[[9,29],9],[[11,30],11],[[13,31],13],[[15,32],15],[[17,33],17],[[19,34],19],[[21,35],21],[[23,36],23]],"c":[],"p":[[3,"RangedU8",0],[3,"OptionRangedU8",0],[3,"RangedU16",0],[3,"OptionRangedU16",0],[3,"RangedU32",0],[3,"OptionRangedU32",0],[3,"RangedU64",0],[3,"OptionRangedU64",0],[3,"RangedU128",0],[3,"OptionRangedU128",0],[3,"RangedUsize",0],[3,"OptionRangedUsize",0],[3,"RangedI8",0],[3,"OptionRangedI8",0],[3,"RangedI16",0],[3,"OptionRangedI16",0],[3,"RangedI32",0],[3,"OptionRangedI32",0],[3,"RangedI64",0],[3,"OptionRangedI64",0],[3,"RangedI128",0],[3,"OptionRangedI128",0],[3,"RangedIsize",0],[3,"OptionRangedIsize",0],[15,"u8"],[15,"u16"],[15,"u32"],[15,"u64"],[15,"u128"],[15,"usize"],[15,"i8"],[15,"i16"],[15,"i32"],[15,"i64"],[15,"i128"],[15,"isize"],[4,"Option",1219],[3,"TryFromIntError",0],[3,"ParseIntError",0],[15,"tuple"],[4,"Ordering",1220],[15,"bool"],[3,"Formatter",1221],[6,"Result",1221],[3,"Metadata",1222],[15,"str"],[4,"Result",1223],[8,"Hasher",1224],[4,"IntErrorKind",1225],[3,"FormatterOptions",1222],[3,"String",1226],[3,"TypeId",1227]],"b":[[432,"impl-Display-for-TryFromIntError"],[433,"impl-Debug-for-TryFromIntError"],[434,"impl-Display-for-ParseIntError"],[435,"impl-Debug-for-ParseIntError"],[436,"impl-Debug-for-RangedU8%3CMIN,+MAX%3E"],[437,"impl-LowerExp-for-RangedU8%3CMIN,+MAX%3E"],[438,"impl-LowerHex-for-RangedU8%3CMIN,+MAX%3E"],[439,"impl-UpperHex-for-RangedU8%3CMIN,+MAX%3E"],[440,"impl-UpperExp-for-RangedU8%3CMIN,+MAX%3E"],[441,"impl-Octal-for-RangedU8%3CMIN,+MAX%3E"],[442,"impl-Binary-for-RangedU8%3CMIN,+MAX%3E"],[443,"impl-Display-for-RangedU8%3CMIN,+MAX%3E"],[445,"impl-LowerHex-for-RangedU16%3CMIN,+MAX%3E"],[446,"impl-Binary-for-RangedU16%3CMIN,+MAX%3E"],[447,"impl-Octal-for-RangedU16%3CMIN,+MAX%3E"],[448,"impl-LowerExp-for-RangedU16%3CMIN,+MAX%3E"],[449,"impl-UpperHex-for-RangedU16%3CMIN,+MAX%3E"],[450,"impl-Display-for-RangedU16%3CMIN,+MAX%3E"],[451,"impl-UpperExp-for-RangedU16%3CMIN,+MAX%3E"],[452,"impl-Debug-for-RangedU16%3CMIN,+MAX%3E"],[454,"impl-UpperExp-for-RangedU32%3CMIN,+MAX%3E"],[455,"impl-Debug-for-RangedU32%3CMIN,+MAX%3E"],[456,"impl-Binary-for-RangedU32%3CMIN,+MAX%3E"],[457,"impl-Display-for-RangedU32%3CMIN,+MAX%3E"],[458,"impl-LowerHex-for-RangedU32%3CMIN,+MAX%3E"],[459,"impl-UpperHex-for-RangedU32%3CMIN,+MAX%3E"],[460,"impl-Octal-for-RangedU32%3CMIN,+MAX%3E"],[461,"impl-LowerExp-for-RangedU32%3CMIN,+MAX%3E"],[463,"impl-Debug-for-RangedU64%3CMIN,+MAX%3E"],[464,"impl-Octal-for-RangedU64%3CMIN,+MAX%3E"],[465,"impl-UpperHex-for-RangedU64%3CMIN,+MAX%3E"],[466,"impl-LowerExp-for-RangedU64%3CMIN,+MAX%3E"],[467,"impl-UpperExp-for-RangedU64%3CMIN,+MAX%3E"],[468,"impl-Display-for-RangedU64%3CMIN,+MAX%3E"],[469,"impl-LowerHex-for-RangedU64%3CMIN,+MAX%3E"],[470,"impl-Binary-for-RangedU64%3CMIN,+MAX%3E"],[472,"impl-Debug-for-RangedU128%3CMIN,+MAX%3E"],[473,"impl-LowerHex-for-RangedU128%3CMIN,+MAX%3E"],[474,"impl-Binary-for-RangedU128%3CMIN,+MAX%3E"],[475,"impl-Display-for-RangedU128%3CMIN,+MAX%3E"],[476,"impl-LowerExp-for-RangedU128%3CMIN,+MAX%3E"],[477,"impl-UpperExp-for-RangedU128%3CMIN,+MAX%3E"],[478,"impl-Octal-for-RangedU128%3CMIN,+MAX%3E"],[479,"impl-UpperHex-for-RangedU128%3CMIN,+MAX%3E"],[481,"impl-Octal-for-RangedUsize%3CMIN,+MAX%3E"],[482,"impl-LowerExp-for-RangedUsize%3CMIN,+MAX%3E"],[483,"impl-Debug-for-RangedUsize%3CMIN,+MAX%3E"],[484,"impl-UpperExp-for-RangedUsize%3CMIN,+MAX%3E"],[485,"impl-Display-for-RangedUsize%3CMIN,+MAX%3E"],[486,"impl-LowerHex-for-RangedUsize%3CMIN,+MAX%3E"],[487,"impl-UpperHex-for-RangedUsize%3CMIN,+MAX%3E"],[488,"impl-Binary-for-RangedUsize%3CMIN,+MAX%3E"],[490,"impl-LowerHex-for-RangedI8%3CMIN,+MAX%3E"],[491,"impl-Binary-for-RangedI8%3CMIN,+MAX%3E"],[492,"impl-UpperExp-for-RangedI8%3CMIN,+MAX%3E"],[493,"impl-UpperHex-for-RangedI8%3CMIN,+MAX%3E"],[494,"impl-LowerExp-for-RangedI8%3CMIN,+MAX%3E"],[495,"impl-Debug-for-RangedI8%3CMIN,+MAX%3E"],[496,"impl-Display-for-RangedI8%3CMIN,+MAX%3E"],[497,"impl-Octal-for-RangedI8%3CMIN,+MAX%3E"],[499,"impl-LowerExp-for-RangedI16%3CMIN,+MAX%3E"],[500,"impl-Debug-for-RangedI16%3CMIN,+MAX%3E"],[501,"impl-Display-for-RangedI16%3CMIN,+MAX%3E"],[502,"impl-Octal-for-RangedI16%3CMIN,+MAX%3E"],[503,"impl-UpperHex-for-RangedI16%3CMIN,+MAX%3E"],[504,"impl-UpperExp-for-RangedI16%3CMIN,+MAX%3E"],[505,"impl-Binary-for-RangedI16%3CMIN,+MAX%3E"],[506,"impl-LowerHex-for-RangedI16%3CMIN,+MAX%3E"],[508,"impl-UpperExp-for-RangedI32%3CMIN,+MAX%3E"],[509,"impl-Display-for-RangedI32%3CMIN,+MAX%3E"],[510,"impl-Debug-for-RangedI32%3CMIN,+MAX%3E"],[511,"impl-UpperHex-for-RangedI32%3CMIN,+MAX%3E"],[512,"impl-LowerHex-for-RangedI32%3CMIN,+MAX%3E"],[513,"impl-Octal-for-RangedI32%3CMIN,+MAX%3E"],[514,"impl-LowerExp-for-RangedI32%3CMIN,+MAX%3E"],[515,"impl-Binary-for-RangedI32%3CMIN,+MAX%3E"],[517,"impl-Display-for-RangedI64%3CMIN,+MAX%3E"],[518,"impl-Binary-for-RangedI64%3CMIN,+MAX%3E"],[519,"impl-Debug-for-RangedI64%3CMIN,+MAX%3E"],[520,"impl-UpperHex-for-RangedI64%3CMIN,+MAX%3E"],[521,"impl-LowerExp-for-RangedI64%3CMIN,+MAX%3E"],[522,"impl-LowerHex-for-RangedI64%3CMIN,+MAX%3E"],[523,"impl-Octal-for-RangedI64%3CMIN,+MAX%3E"],[524,"impl-UpperExp-for-RangedI64%3CMIN,+MAX%3E"],[526,"impl-Debug-for-RangedI128%3CMIN,+MAX%3E"],[527,"impl-UpperHex-for-RangedI128%3CMIN,+MAX%3E"],[528,"impl-UpperExp-for-RangedI128%3CMIN,+MAX%3E"],[529,"impl-LowerExp-for-RangedI128%3CMIN,+MAX%3E"],[530,"impl-Display-for-RangedI128%3CMIN,+MAX%3E"],[531,"impl-LowerHex-for-RangedI128%3CMIN,+MAX%3E"],[532,"impl-Binary-for-RangedI128%3CMIN,+MAX%3E"],[533,"impl-Octal-for-RangedI128%3CMIN,+MAX%3E"],[535,"impl-Display-for-RangedIsize%3CMIN,+MAX%3E"],[536,"impl-LowerExp-for-RangedIsize%3CMIN,+MAX%3E"],[537,"impl-LowerHex-for-RangedIsize%3CMIN,+MAX%3E"],[538,"impl-Debug-for-RangedIsize%3CMIN,+MAX%3E"],[539,"impl-Binary-for-RangedIsize%3CMIN,+MAX%3E"],[540,"impl-Octal-for-RangedIsize%3CMIN,+MAX%3E"],[541,"impl-UpperHex-for-RangedIsize%3CMIN,+MAX%3E"],[542,"impl-UpperExp-for-RangedIsize%3CMIN,+MAX%3E"],[559,"impl-From%3CRangedU8%3CMIN,+MAX%3E%3E-for-OptionRangedU8%3CMIN,+MAX%3E"],[560,"impl-From%3COption%3CRangedU8%3CMIN,+MAX%3E%3E%3E-for-OptionRangedU8%3CMIN,+MAX%3E"],[563,"impl-From%3CRangedU16%3CMIN,+MAX%3E%3E-for-OptionRangedU16%3CMIN,+MAX%3E"],[565,"impl-From%3COption%3CRangedU16%3CMIN,+MAX%3E%3E%3E-for-OptionRangedU16%3CMIN,+MAX%3E"],[567,"impl-From%3CRangedU32%3CMIN,+MAX%3E%3E-for-OptionRangedU32%3CMIN,+MAX%3E"],[569,"impl-From%3COption%3CRangedU32%3CMIN,+MAX%3E%3E%3E-for-OptionRangedU32%3CMIN,+MAX%3E"],[571,"impl-From%3COption%3CRangedU64%3CMIN,+MAX%3E%3E%3E-for-OptionRangedU64%3CMIN,+MAX%3E"],[572,"impl-From%3CRangedU64%3CMIN,+MAX%3E%3E-for-OptionRangedU64%3CMIN,+MAX%3E"],[576,"impl-From%3CRangedU128%3CMIN,+MAX%3E%3E-for-OptionRangedU128%3CMIN,+MAX%3E"],[577,"impl-From%3COption%3CRangedU128%3CMIN,+MAX%3E%3E%3E-for-OptionRangedU128%3CMIN,+MAX%3E"],[579,"impl-From%3CRangedUsize%3CMIN,+MAX%3E%3E-for-OptionRangedUsize%3CMIN,+MAX%3E"],[580,"impl-From%3COption%3CRangedUsize%3CMIN,+MAX%3E%3E%3E-for-OptionRangedUsize%3CMIN,+MAX%3E"],[583,"impl-From%3CRangedI8%3CMIN,+MAX%3E%3E-for-OptionRangedI8%3CMIN,+MAX%3E"],[585,"impl-From%3COption%3CRangedI8%3CMIN,+MAX%3E%3E%3E-for-OptionRangedI8%3CMIN,+MAX%3E"],[587,"impl-From%3CRangedI16%3CMIN,+MAX%3E%3E-for-OptionRangedI16%3CMIN,+MAX%3E"],[589,"impl-From%3COption%3CRangedI16%3CMIN,+MAX%3E%3E%3E-for-OptionRangedI16%3CMIN,+MAX%3E"],[591,"impl-From%3CRangedI32%3CMIN,+MAX%3E%3E-for-OptionRangedI32%3CMIN,+MAX%3E"],[592,"impl-From%3COption%3CRangedI32%3CMIN,+MAX%3E%3E%3E-for-OptionRangedI32%3CMIN,+MAX%3E"],[595,"impl-From%3COption%3CRangedI64%3CMIN,+MAX%3E%3E%3E-for-OptionRangedI64%3CMIN,+MAX%3E"],[596,"impl-From%3CRangedI64%3CMIN,+MAX%3E%3E-for-OptionRangedI64%3CMIN,+MAX%3E"],[599,"impl-From%3COption%3CRangedI128%3CMIN,+MAX%3E%3E%3E-for-OptionRangedI128%3CMIN,+MAX%3E"],[601,"impl-From%3CRangedI128%3CMIN,+MAX%3E%3E-for-OptionRangedI128%3CMIN,+MAX%3E"],[604,"impl-From%3CRangedIsize%3CMIN,+MAX%3E%3E-for-OptionRangedIsize%3CMIN,+MAX%3E"],[605,"impl-From%3COption%3CRangedIsize%3CMIN,+MAX%3E%3E%3E-for-OptionRangedIsize%3CMIN,+MAX%3E"]]},\
"equivalent":{"doc":"<code>Equivalent</code> and <code>Comparable</code> are traits for key comparison in …","t":"IIKK","n":["Comparable","Equivalent","compare","equivalent"],"q":[[0,"equivalent"],[4,"core::cmp"]],"d":["Key ordering trait.","Key equivalence trait.","Compare self to <code>key</code> and return their ordering.","Compare self to <code>key</code> and return <code>true</code> if they are equal."],"i":[0,0,3,4],"f":[0,0,[[-1,-2],1,[],[]],[[-1,-2],2,[],[]]],"c":[],"p":[[4,"Ordering",4],[15,"bool"],[8,"Comparable",0],[8,"Equivalent",0]],"b":[]},\
"funty":{"doc":"<code>fun</code>damental <code>ty</code>pes","t":"IIIIIIIIIISQSSSSSSSSSSSSIISIIIIIISSSSSSSSSSSSSSSSISSSQSIISKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKK","n":["AtLeast128","AtLeast16","AtLeast32","AtLeast64","AtLeast8","AtMost128","AtMost16","AtMost32","AtMost64","AtMost8","BITS","Bytes","DIGITS","E","EPSILON","FRAC_1_PI","FRAC_1_SQRT_2","FRAC_2_PI","FRAC_2_SQRT_PI","FRAC_PI_2","FRAC_PI_3","FRAC_PI_4","FRAC_PI_6","FRAC_PI_8","Floating","Fundamental","INFINITY","Integral","Is128","Is16","Is32","Is64","Is8","LN_10","LN_2","LOG10_E","LOG2_E","MANTISSA_DIGITS","MAX","MAX","MAX_10_EXP","MAX_EXP","MIN","MIN","MIN_10_EXP","MIN_EXP","MIN_POSITIVE","NAN","NEG_INFINITY","Numeric","ONE","PI","RADIX","Raw","SQRT_2","Signed","Unsigned","ZERO","abs","as_bool","as_char","as_f32","as_f64","as_i128","as_i16","as_i32","as_i64","as_i8","as_isize","as_u128","as_u16","as_u32","as_u64","as_u8","as_usize","checked_abs","checked_add","checked_div","checked_div_euclid","checked_mul","checked_neg","checked_next_power_of_two","checked_pow","checked_rem","checked_rem_euclid","checked_shl","checked_shr","checked_sub","classify","count_ones","count_zeros","div_euclid","from_be","from_be_bytes","from_bits","from_le","from_le_bytes","from_ne_bytes","from_str_radix","is_finite","is_infinite","is_nan","is_negative","is_normal","is_positive","is_power_of_two","is_sign_negative","is_sign_positive","leading_ones","leading_zeros","max","max_value","min","min_value","next_power_of_two","overflowing_abs","overflowing_add","overflowing_div","overflowing_div_euclid","overflowing_mul","overflowing_neg","overflowing_pow","overflowing_rem","overflowing_rem_euclid","overflowing_shl","overflowing_shr","overflowing_sub","pow","recip","rem_euclid","reverse_bits","rotate_left","rotate_right","saturating_add","saturating_mul","saturating_pow","saturating_sub","signum","swap_bytes","to_be","to_be_bytes","to_bits","to_degrees","to_le","to_le_bytes","to_ne_bytes","to_radians","trailing_ones","trailing_zeros","wrapping_abs","wrapping_add","wrapping_div","wrapping_div_euclid","wrapping_mul","wrapping_neg","wrapping_pow","wrapping_rem","wrapping_rem_euclid","wrapping_shl","wrapping_shr","wrapping_sub"],"q":[[0,"funty"],[161,"core::option"],[162,"core::num"],[163,"core::num::error"],[164,"core::result"]],"d":["Declare that a type is one hundred twenty-eight or more …","Declare that a type is sixteen or more bits wide.","Declare that a type is thirty-two or more bits wide.","Declare that a type is sixty-four or more bits wide.","Declare that a type is eight or more bits wide.","Declare that a type is one hundred twenty-eight or fewer …","Declare that a type is sixteen or fewer bits wide.","Declare that a type is thirty-two or fewer bits wide.","Declare that a type is sixty-four or fewer bits wide.","Declare that a type is eight or fewer bits wide.","The size of this type in bits.","The <code>[u8; N]</code> byte array that stores values of <code>Self</code>.","Approximate number of significant digits in base 10.","Euler’s number (e)","Machine epsilon value for <code>f32</code>.","1/π","1/sqrt(2)","2/π","2/sqrt(π)","π/2","π/3","π/4","π/6","π/8","Declare that a type is a floating-point number.","Declare that a type is one of the language fundamental …","Infinity (∞).","Declare that a type is a fixed-point integer.","Declare that a type is exactly one hundred twenty-eight …","Declare that a type is exactly sixteen bits wide.","Declare that a type is exactly thirty-two bits wide.","Declare that a type is exactly sixty-four bits wide.","Declare that a type is exactly eight bits wide.","ln(10)","ln(2)","log10(e)","log2(e)","Number of significant digits in base 2.","The type’s maximum value.","Largest finite <code>f32</code> value.","Maximum possible power of 10 exponent.","Maximum possible power of 2 exponent.","The type’s minimum value. This is zero for unsigned …","Smallest finite <code>f32</code> value.","Minimum possible normal power of 10 exponent.","One greater than the minimum possible normal power of 2 …","Smallest positive normal <code>f32</code> value.","Not a Number (NaN).","Negative infinity (−∞).","Declare that a type is an abstract number.","The type’s step value.","Archimedes’ constant (π)","The radix or base of the internal representation of <code>f32</code>.","The unsigned integer type of the same width as <code>Self</code>.","sqrt(2)","Declare that a type is a signed integer.","Declare that a type is an unsigned integer.","The type’s zero value.","Overflow behavior","Tests <code>self != 0</code>.","Represents <code>self</code> as a Unicode Scalar Value, if possible.","Performs <code>self as f32</code>.","Performs <code>self as f64</code>.","Performs <code>self as i128</code>.","Performs <code>self as i16</code>.","Performs <code>self as i32</code>.","Performs <code>self as i64</code>.","Performs <code>self as i8</code>.","Performs <code>self as isize</code>.","Performs <code>self as u128</code>.","Performs <code>self as u16</code>.","Performs <code>self as u32</code>.","Performs <code>self as u64</code>.","Performs <code>self as u8</code>.","Performs <code>self as usize</code>.","Checked absolute value. Computes <code>self.abs()</code>, returning <code>None</code>…","Checked integer addition. Computes <code>self + rhs</code>, returning …","Checked integer division. Computes <code>self / rhs</code>, returning …","Checked Euclidean division. Computes <code>self.div_euclid(rhs)</code>, …","Checked integer multiplication. Computes <code>self * rhs</code>, …","Checked negation. Computes <code>-self</code>, returning <code>None</code> if …","Returns the smallest power of two greater than or equal to …","Checked exponentiation. Computes <code>self.pow(exp)</code>, returning …","Checked integer remainder. Computes <code>self % rhs</code>, returning …","Checked Euclidean remainder. Computes <code>self.rem_euclid(rhs)</code>…","Checked shift left. Computes <code>self &lt;&lt; rhs</code>, returning <code>None</code> …","Checked shift right. Computes <code>self &gt;&gt; rhs</code>, returning <code>None</code> …","Checked integer subtraction. Computes <code>self - rhs</code>, …","Returns the floating point category of the number. If only …","Returns the number of ones in the binary representation of …","Returns the number of zeros in the binary representation …","Calculates the quotient of Euclidean division of self by …","Converts an integer from big endian to the target’s …","Create a numeric value from its representation as a byte …","Raw transmutation from <code>u32</code>.","Converts an integer frm little endian to the target’s …","Create a numeric value from its representation as a byte …","Create a numeric value from its memory representation as a …","Converts a string slice in a given base to an integer.","Returns <code>true</code> if this number is neither infinite nor <code>NaN</code>.","Returns <code>true</code> if this value is positive infinity or …","Returns <code>true</code> if this value is <code>NaN</code>.","Returns <code>true</code> if <code>self</code> is negative and <code>false</code> if the number …","Returns <code>true</code> if the number is neither zero, infinite, …","Returns <code>true</code> if <code>self</code> is positive and <code>false</code> if the number …","Returns <code>true</code> if and only if <code>self == 2^k</code> for some <code>k</code>.","Returns <code>true</code> if <code>self</code> has a negative sign, including <code>-0.0</code>, …","Returns <code>true</code> if <code>self</code> has a positive sign, including <code>+0.0</code>, …","Returns the number of leading ones in the binary …","Returns the number of leading zeros in the binary …","Returns the maximum of the two numbers.","Returns the largest value that can be represented by this …","Returns the minimum of the two numbers.","Returns the smallest value that can be represented by this …","Returns the smallest power of two greater than or equal to …","Computes the absolute value of <code>self</code>.","Calculates <code>self + rhs</code>","Calculates the divisor when <code>self</code> is divided by <code>rhs</code>.","Calculates the quotient of Euclidean division …","Calculates the multiplication of <code>self</code> and <code>rhs</code>.","Negates self, overflowing if this is equal to the minimum …","Raises self to the power of <code>exp</code>, using exponentiation by …","Calculates the remainder when <code>self</code> is divided by <code>rhs</code>.","Overflowing Euclidean remainder. Calculates …","Shifts self left by <code>rhs</code> bits.","Shifts self right by <code>rhs</code> bits.","Calculates <code>self - rhs</code>","Raises self to the power of <code>exp</code>, using exponentiation by …","Takes the reciprocal (inverse) of a number, <code>1/x</code>.","Calculates the least nonnegative remainder of …","Reverses the bit pattern of the integer.","Shifts the bits to the left by a specified amount, <code>n</code>, …","Shifts the bits to the right by a specified amount, <code>n</code>, …","Saturating integer addition. Computes <code>self + rhs</code>, …","Saturating integer multiplication. Computes <code>self * rhs</code>, …","Saturating integer exponentiation. Computes <code>self.pow(exp)</code>, …","Saturating integer subtraction. Computes <code>self - rhs</code>, …","Returns a number representing sign of <code>self</code>.","Reverses the byte order of the integer.","Converts <code>self</code> to big endian from the target’s endianness.","Return the memory representation of this number as a byte …","Raw transmutation to <code>u32</code>.","Converts radians to degrees.","Converts <code>self</code> to little endian from the target’s …","Return the memory representation of this number as a byte …","Return the memory representation of this number as a byte …","Converts degrees to radians.","Returns the number of trailing ones in the binary …","Returns the number of trailing zeros in the binary …","Wrapping (modular) absolute value. Computes <code>self.abs()</code>, …","Wrapping (modular) addition. Computes <code>self + rhs</code>, wrapping …","Wrapping (modular) division. Computes <code>self / rhs</code>, wrapping …","Wrapping Euclidean division. Computes <code>self.div_euclid(rhs)</code>…","Wrapping (modular) multiplication. Computes <code>self * rhs</code>, …","Wrapping (modular) negation. Computes <code>-self</code>, wrapping …","Wrapping (modular) exponentiation. Computes <code>self.pow(exp)</code>, …","Wrapping (modular) remainder. Computes <code>self % rhs</code>, …","Wrapping Euclidean remainder. Computes <code>self.rem_euclid(rhs)</code>…","Panic-free bitwise shift-left; yields <code>self &lt;&lt; mask(rhs)</code>, …","Panic-free bitwise shift-right; yields <code>self &gt;&gt; mask(rhs)</code>, …","Wrapping (modular) subtraction. Computes <code>self - rhs</code>, …"],"i":[0,0,0,0,0,0,0,0,0,0,23,24,25,25,25,25,25,25,25,25,25,25,25,25,0,0,25,0,0,0,0,0,0,25,25,25,25,25,23,25,25,25,23,25,25,25,25,25,25,0,23,25,25,25,25,0,0,23,26,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,26,23,23,23,23,23,28,23,23,23,23,23,23,25,23,23,23,23,24,25,23,24,24,23,25,25,25,26,25,26,28,25,25,23,23,25,23,25,23,28,26,23,23,23,23,23,23,23,23,23,23,23,23,25,23,23,23,23,23,23,23,23,26,23,23,24,25,25,23,24,24,25,23,23,26,23,23,23,23,23,23,23,23,23,23,23],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-1,[]],[-1,1,[]],[-1,[[3,[2]]],[]],[-1,4,[]],[-1,5,[]],[-1,6,[]],[-1,7,[]],[-1,8,[]],[-1,9,[]],[-1,10,[]],[-1,11,[]],[-1,12,[]],[-1,13,[]],[-1,14,[]],[-1,15,[]],[-1,16,[]],[-1,17,[]],[-1,[[3,[-1]]],[]],[[-1,-1],[[3,[-1]]],[]],[[-1,-1],[[3,[-1]]],[]],[[-1,-1],[[3,[-1]]],[]],[[-1,-1],[[3,[-1]]],[]],[-1,[[3,[-1]]],[]],[-1,[[3,[-1]]],[]],[[-1,14],[[3,[-1]]],[]],[[-1,-1],[[3,[-1]]],[]],[[-1,-1],[[3,[-1]]],[]],[[-1,14],[[3,[-1]]],[]],[[-1,14],[[3,[-1]]],[]],[[-1,-1],[[3,[-1]]],[]],[-1,18,[]],[-1,14,[]],[-1,14,[]],[[-1,-1],-1,[]],[-1,-1,[]],[[],-1,[]],[[],-1,[]],[-1,-1,[]],[[],-1,[]],[[],-1,[]],[[19,14],[[21,[-1,20]]],[]],[-1,1,[]],[-1,1,[]],[-1,1,[]],[-1,1,[]],[-1,1,[]],[-1,1,[]],[-1,1,[]],[-1,1,[]],[-1,1,[]],[-1,14,[]],[-1,14,[]],[[-1,-1],-1,[]],[[],-1,[]],[[-1,-1],-1,[]],[[],-1,[]],[-1,-1,[]],[-1,[[22,[-1,1]]],[]],[[-1,-1],[[22,[-1,1]]],[]],[[-1,-1],[[22,[-1,1]]],[]],[[-1,-1],[[22,[-1,1]]],[]],[[-1,-1],[[22,[-1,1]]],[]],[-1,[[22,[-1,1]]],[]],[[-1,14],[[22,[-1,1]]],[]],[[-1,-1],[[22,[-1,1]]],[]],[[-1,-1],[[22,[-1,1]]],[]],[[-1,14],[[22,[-1,1]]],[]],[[-1,14],[[22,[-1,1]]],[]],[[-1,-1],[[22,[-1,1]]],[]],[[-1,14],-1,[]],[-1,-1,[]],[[-1,-1],-1,[]],[-1,-1,[]],[[-1,14],-1,[]],[[-1,14],-1,[]],[[-1,-1],-1,[]],[[-1,-1],-1,[]],[[-1,14],-1,[]],[[-1,-1],-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,[],[]],[-1,[],[]],[-1,-1,[]],[-1,-1,[]],[-1,[],[]],[-1,[],[]],[-1,-1,[]],[-1,14,[]],[-1,14,[]],[-1,-1,[]],[[-1,-1],-1,[]],[[-1,-1],-1,[]],[[-1,-1],-1,[]],[[-1,-1],-1,[]],[-1,-1,[]],[[-1,14],-1,[]],[[-1,-1],-1,[]],[[-1,-1],-1,[]],[[-1,14],-1,[]],[[-1,14],-1,[]],[[-1,-1],-1,[]]],"c":[],"p":[[15,"bool"],[15,"char"],[4,"Option",161],[15,"f32"],[15,"f64"],[15,"i128"],[15,"i16"],[15,"i32"],[15,"i64"],[15,"i8"],[15,"isize"],[15,"u128"],[15,"u16"],[15,"u32"],[15,"u64"],[15,"u8"],[15,"usize"],[4,"FpCategory",162],[15,"str"],[3,"ParseIntError",163],[4,"Result",164],[15,"tuple"],[8,"Integral",0],[8,"Numeric",0],[8,"Floating",0],[8,"Signed",0],[8,"Fundamental",0],[8,"Unsigned",0]],"b":[]},\
"getrandom":{"doc":"Interface to the operating system’s random number …","t":"SSDSSSSSSSSSSSSSLLLLLLLLLLFFLLLLLLL","n":["CUSTOM_START","ERRNO_NOT_POSITIVE","Error","FAILED_RDRAND","INTERNAL_START","IOS_SEC_RANDOM","NODE_CRYPTO","NODE_ES_MODULE","NODE_RANDOM_FILL_SYNC","NO_RDRAND","UNEXPECTED","UNSUPPORTED","VXWORKS_RAND_SECURE","WEB_CRYPTO","WEB_GET_RANDOM_VALUES","WINDOWS_RTL_GEN_RANDOM","borrow","borrow_mut","clone","clone_into","code","eq","fmt","fmt","from","from","getrandom","getrandom_uninit","into","raw_os_error","to_owned","to_string","try_from","try_into","type_id"],"q":[[0,"getrandom"],[35,"core::num::nonzero"],[36,"core::fmt"],[37,"core::fmt"],[38,"core::mem::maybe_uninit"],[39,"core::option"],[40,"alloc::string"],[41,"core::any"]],"d":["Codes at or above this point can be used by users to …","The platform-specific <code>errno</code> returned a non-positive value.","A small and <code>no_std</code> compatible error type","RDRAND instruction failed due to a hardware issue.","Codes below this point represent OS Errors (i.e. positive …","Call to <code>CCRandomGenerateBytes</code> failed on iOS, tvOS, or …","Node.js does not have the <code>crypto</code> CommonJS module.","Called from an ES module on Node.js. This is unsupported, …","Calling Node.js function <code>crypto.randomFillSync</code> failed.","RDRAND instruction unsupported on this target.","Encountered an unexpected situation which should not …","This target/platform is not supported by <code>getrandom</code>.","On VxWorks, call to <code>randSecure</code> failed (random number …","The environment does not support the Web Crypto API.","Calling Web Crypto API <code>crypto.getRandomValues</code> failed.","Call to Windows <code>RtlGenRandom</code> failed.","","","","","Extract the bare error code.","","","","","Returns the argument unchanged.","Fill <code>dest</code> with random bytes from the system’s preferred …","Version of the <code>getrandom</code> function which fills <code>dest</code> with …","Calls <code>U::from(self)</code>.","Extract the raw OS error code (if this error came from the …","","","","",""],"i":[1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[1,1],[[-1,-2],2,[],[]],[1,3],[[1,1],4],[[1,5],6],[[1,5],6],[3,1],[-1,-1,[]],[[[8,[7]]],[[9,[2,1]]]],[[[8,[[10,[7]]]]],[[9,[[8,[7]],1]]]],[-1,-2,[],[]],[1,[[12,[11]]]],[-1,-2,[],[]],[-1,13,[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,14,[]]],"c":[],"p":[[3,"Error",0],[15,"tuple"],[3,"NonZeroU32",35],[15,"bool"],[3,"Formatter",36],[6,"Result",36],[15,"u8"],[15,"slice"],[4,"Result",37],[19,"MaybeUninit",38],[15,"i32"],[4,"Option",39],[3,"String",40],[3,"TypeId",41]],"b":[[22,"impl-Debug-for-Error"],[23,"impl-Display-for-Error"]]},\
"hashbrown":{"doc":"This crate is a Rust port of Google’s high-performance …","t":"NNIDDDELLLLLKLLLAAALALLLLMEDEEDDDDDDDDNNNDDDDDEDDNNNDDDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLDDEDDDDDNDDDNDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDDEDDDDDNDNDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDDDDDDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL","n":["AllocError","CapacityOverflow","Equivalent","HashMap","HashSet","HashTable","TryReserveError","borrow","borrow_mut","clone","clone_into","eq","equivalent","equivalent","fmt","from","hash_map","hash_set","hash_table","into","raw","to_owned","try_from","try_into","type_id","layout","DefaultHashBuilder","Drain","Entry","EntryRef","ExtractIf","HashMap","IntoIter","IntoKeys","IntoValues","Iter","IterMut","Keys","Occupied","Occupied","Occupied","OccupiedEntry","OccupiedEntryRef","OccupiedError","RawEntryBuilder","RawEntryBuilderMut","RawEntryMut","RawOccupiedEntryMut","RawVacantEntryMut","Vacant","Vacant","Vacant","VacantEntry","VacantEntryRef","Values","ValuesMut","allocator","and_modify","and_modify","and_modify","and_replace_entry_with","and_replace_entry_with","and_replace_entry_with","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","capacity","clear","clone","clone","clone","clone","clone_from","clone_into","clone_into","clone_into","clone_into","contains_key","default","drain","entry","entry","entry_ref","eq","equivalent","extend","extend","extend","extract_if","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fold","fold","fold","fold","fold","fold","fold","fold","fold","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_hash","from_hash","from_iter","from_key","from_key","from_key_hashed_nocheck","from_key_hashed_nocheck","get","get","get","get","get_key_value","get_key_value","get_key_value_mut","get_key_value_mut","get_many_key_value_mut","get_many_key_value_unchecked_mut","get_many_mut","get_many_unchecked_mut","get_mut","get_mut","get_mut","get_mut","hasher","index","insert","insert","insert","insert","insert","insert","insert","insert","insert","insert","insert_hashed_nocheck","insert_key","insert_unique_unchecked","insert_with_hasher","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_key","into_key","into_key","into_key_value","into_keys","into_mut","into_mut","into_mut","into_values","is_empty","iter","iter_mut","key","key","key","key","key","key","key","key_mut","keys","len","len","len","len","len","len","len","len","len","len","next","next","next","next","next","next","next","next","next","next","or_default","or_default","or_insert","or_insert","or_insert","or_insert_with","or_insert_with","or_insert_with","or_insert_with_key","or_insert_with_key","raw_entry","raw_entry_mut","raw_table","raw_table_mut","remove","remove","remove","remove","remove_entry","remove_entry","remove_entry","remove_entry","replace_entry","replace_entry","replace_entry_with","replace_entry_with","replace_entry_with","replace_key","replace_key","reserve","retain","shrink_to","shrink_to_fit","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","to_owned","to_owned","to_owned","to_owned","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_insert","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_reserve","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","value","values","values_mut","with_capacity_and_hasher","with_capacity_and_hasher_in","with_hasher","with_hasher_in","Difference","Drain","Entry","ExtractIf","HashSet","Intersection","IntoIter","Iter","Occupied","OccupiedEntry","SymmetricDifference","Union","Vacant","VacantEntry","allocator","bitand","bitor","bitxor","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","capacity","clear","clone","clone","clone","clone","clone","clone","clone_from","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","contains","default","difference","drain","entry","eq","equivalent","extend","extend","extract_if","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fold","fold","fold","fold","fold","fold","fold","from","from","from","from","from","from","from","from","from","from","from","from","from","from_iter","get","get","get","get","get_or_insert","get_or_insert_owned","get_or_insert_with","hasher","insert","insert","insert","insert_unique_unchecked","intersection","into","into","into","into","into","into","into","into","into","into","into","into","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_value","is_disjoint","is_empty","is_subset","is_superset","iter","len","len","len","len","next","next","next","next","next","next","next","next","or_insert","raw_table","raw_table_mut","remove","remove","replace","replace","reserve","retain","shrink_to","shrink_to_fit","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","sub","symmetric_difference","take","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_reserve","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","union","with_capacity_and_hasher","with_capacity_and_hasher_in","with_hasher","with_hasher_in","AbsentEntry","Drain","Entry","ExtractIf","HashTable","IntoIter","Iter","IterMut","Occupied","OccupiedEntry","Vacant","VacantEntry","allocator","and_modify","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","capacity","clear","clone","clone_into","default","drain","entry","extract_if","find","find_entry","find_mut","fmt","fmt","fmt","fmt","fmt","fmt","fold","fold","fold","from","from","from","from","from","from","from","from","from","from","get","get_many_mut","get_many_unchecked_mut","get_mut","insert","insert","insert_unique","into","into","into","into","into","into","into","into","into","into","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_mut","into_table","into_table","into_table","is_empty","iter","iter_mut","len","len","len","len","len","new","new_in","next","next","next","next","next","or_insert","or_insert_with","remove","reserve","retain","shrink_to","shrink_to_fit","size_hint","size_hint","size_hint","size_hint","size_hint","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_reserve","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","with_capacity","with_capacity_in","Bucket","InsertSlot","RawDrain","RawIntoIter","RawIter","RawIterHash","RawTable","allocation_info","allocator","as_mut","as_ptr","as_ref","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","bucket","bucket_index","buckets","capacity","clear","clear_no_drop","clone","clone","clone","clone_from","clone_from_with_hasher","clone_into","clone_into","clone_into","copy_from_nonoverlapping","data_end","data_start","default","drain","drain_iter_from","drop","drop","drop","erase","erase_entry","find","find_or_find_insert_slot","fold","from","from","from","from","from","from","from","get","get_many_mut","get_many_unchecked_mut","get_mut","insert","insert_entry","insert_in_slot","insert_no_grow","into","into","into","into","into","into","into","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter_from","is_bucket_full","is_empty","iter","iter","iter","iter_hash","len","new","new_in","next","next","next","next","reflect_insert","reflect_remove","remove","remove_entry","replace_bucket_with","reserve","shrink_to","size_hint","size_hint","size_hint","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_insert_no_grow","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_reserve","try_with_capacity","try_with_capacity_in","type_id","type_id","type_id","type_id","type_id","type_id","type_id","with_capacity","with_capacity_in"],"q":[[0,"hashbrown"],[25,"hashbrown::TryReserveError"],[26,"hashbrown::hash_map"],[436,"hashbrown::hash_set"],[658,"hashbrown::hash_table"],[812,"hashbrown::raw"],[947,"core::fmt"],[948,"core::fmt"],[949,"core::any"],[950,"core::ops::function"],[951,"core::marker"],[952,"core::clone"],[953,"core::cmp"],[954,"core::hash"],[955,"core::hash"],[956,"core::cmp"],[957,"core::ops::function"],[958,"core::option"],[959,"core::convert"],[960,"core::ops::function"],[961,"alloc::borrow"],[962,"core::ptr::non_null"],[963,"core::alloc::layout"]],"d":["The memory allocator returned an error","Error due to the computed capacity exceeding the collection…","Key equivalence trait.","A hash map implemented with quadratic probing and SIMD …","A hash set implemented as a <code>HashMap</code> where the value is <code>()</code>.","Low-level hash table with explicit hashing.","The error type for <code>try_reserve</code> methods.","","","","","","Checks if this value is equivalent to the given key.","","","Returns the argument unchanged.","A hash map implemented with quadratic probing and SIMD …","A hash set implemented as a <code>HashMap</code> where the value is <code>()</code>.","A hash table implemented with quadratic probing and SIMD …","Calls <code>U::from(self)</code>.","Experimental and unsafe <code>RawTable</code> API. This module is only …","","","","","The layout of the allocation request that failed.","Dummy default hasher for <code>HashMap</code>.","A draining iterator over the entries of a <code>HashMap</code> in …","A view into a single entry in a map, which may either be …","A view into a single entry in a map, which may either be …","A draining iterator over entries of a <code>HashMap</code> which don’…","A hash map implemented with quadratic probing and SIMD …","An owning iterator over the entries of a <code>HashMap</code> in …","An owning iterator over the keys of a <code>HashMap</code> in arbitrary …","An owning iterator over the values of a <code>HashMap</code> in …","An iterator over the entries of a <code>HashMap</code> in arbitrary …","A mutable iterator over the entries of a <code>HashMap</code> in …","An iterator over the keys of a <code>HashMap</code> in arbitrary order. …","An occupied entry.","An occupied entry.","An occupied entry.","A view into an occupied entry in a <code>HashMap</code>. It is part of …","A view into an occupied entry in a <code>HashMap</code>. It is part of …","The error returned by <code>try_insert</code> when the key already …","A builder for computing where in a <code>HashMap</code> a key-value …","A builder for computing where in a <code>HashMap</code> a key-value …","A view into a single entry in a map, which may either be …","A view into an occupied entry in a <code>HashMap</code>. It is part of …","A view into a vacant entry in a <code>HashMap</code>. It is part of the …","A vacant entry.","A vacant entry.","A vacant entry.","A view into a vacant entry in a <code>HashMap</code>. It is part of the …","A view into a vacant entry in a <code>HashMap</code>. It is part of the …","An iterator over the values of a <code>HashMap</code> in arbitrary …","A mutable iterator over the values of a <code>HashMap</code> in …","Returns a reference to the underlying allocator.","Provides in-place mutable access to an occupied entry …","Provides in-place mutable access to an occupied entry …","Provides in-place mutable access to an occupied entry …","Provides shared access to the key and owned access to the …","Provides shared access to the key and owned access to the …","Provides shared access to the key and owned access to the …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the number of elements the map can hold without …","Clears the map, removing all key-value pairs. Keeps the …","","","","","","","","","","Returns <code>true</code> if the map contains a value for the specified …","Creates an empty <code>HashMap&lt;K, V, S, A&gt;</code>, with the <code>Default</code> …","Clears the map, returning all key-value pairs as an …","Gets the given key’s corresponding entry in the map for …","The entry in the map that was already occupied.","Gets the given key’s corresponding entry by reference in …","","","Inserts all new key-values from the iterator to existing …","Inserts all new key-values from the iterator to existing …","Inserts all new key-values from the iterator to existing …","Drains elements which are true under the given predicate, …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Creates a <code>RawEntryMut</code> from the given hash and matching …","Access an immutable entry by hash and matching function.","","Creates a <code>RawEntryMut</code> from the given key.","Access an immutable entry by key.","Creates a <code>RawEntryMut</code> from the given key and its hash.","Access an immutable entry by a key and its hash.","Returns a reference to the value corresponding to the key.","Gets a reference to the value in the entry.","Gets a reference to the value in the entry.","Gets a reference to the value in the entry.","Returns the key-value pair corresponding to the supplied …","Gets a reference to the key and value in the entry.","Returns the key-value pair corresponding to the supplied …","Gets a mutable reference to the key and value in the entry.","Attempts to get mutable references to <code>N</code> values in the map …","Attempts to get mutable references to <code>N</code> values in the map …","Attempts to get mutable references to <code>N</code> values in the map …","Attempts to get mutable references to <code>N</code> values in the map …","Returns a mutable reference to the value corresponding to …","Gets a mutable reference to the value in the entry.","Gets a mutable reference to the value in the entry.","Gets a mutable reference to the value in the entry.","Returns a reference to the map’s <code>BuildHasher</code>.","Returns a reference to the value corresponding to the …","Inserts a key-value pair into the map.","Sets the value of the entry, and returns a …","Sets the value of the entry, and returns the entry’s old …","Sets the value of the entry with the VacantEntry’s key, …","Sets the value of the entry, and returns an OccupiedEntry.","Sets the value of the entry, and returns the entry’s old …","Sets the value of the entry with the VacantEntry’s key, …","Sets the value of the entry, and returns an …","Sets the value of the entry, and returns the entry’s old …","Sets the value of the entry with the VacantEntryRef’s …","Sets the value of the entry with the VacantEntry’s key, …","Sets the value of the entry, and returns the entry’s old …","Insert a key-value pair into the map without checking if …","Set the value of an entry with a custom hasher function.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Creates an iterator over the entries of a <code>HashMap</code> in …","Creates an iterator over the entries of a <code>HashMap</code> in …","Creates a consuming iterator, that is, one that moves each …","","","","","","","","","","","Converts the entry into a mutable reference to the key in …","Take ownership of the key.","Take ownership of the key.","Converts the OccupiedEntry into a mutable reference to the …","Creates a consuming iterator visiting all the keys in …","Converts the OccupiedEntry into a mutable reference to the …","Converts the OccupiedEntry into a mutable reference to the …","Converts the OccupiedEntryRef into a mutable reference to …","Creates a consuming iterator visiting all the values in …","Returns <code>true</code> if the map contains no elements.","An iterator visiting all key-value pairs in arbitrary …","An iterator visiting all key-value pairs in arbitrary …","Gets a reference to the key in the entry.","Returns a reference to this entry’s key.","Gets a reference to the key in the entry.","Gets a reference to the key that would be used when …","Returns a reference to this entry’s key.","Gets a reference to the key in the entry.","Gets a reference to the key that would be used when …","Gets a mutable reference to the key in the entry.","An iterator visiting all keys in arbitrary order. The …","Returns the number of elements in the map.","","","","","","","","","","","","","","","","","","","","Ensures a value is in the entry by inserting the default …","Ensures a value is in the entry by inserting the default …","Ensures a value is in the entry by inserting the default …","Ensures a value is in the entry by inserting the default …","Ensures a value is in the entry by inserting the default …","Ensures a value is in the entry by inserting the result of …","Ensures a value is in the entry by inserting the result of …","Ensures a value is in the entry by inserting the result of …","Ensures a value is in the entry by inserting, if empty, …","Ensures a value is in the entry by inserting, if empty, …","Creates a raw immutable entry builder for the HashMap.","Creates a raw entry builder for the HashMap.","Returns a reference to the <code>RawTable</code> used underneath <code>HashMap</code>…","Returns a mutable reference to the <code>RawTable</code> used …","Removes a key from the map, returning the value at the key …","Takes the value out of the entry, and returns it.","Takes the value out of the entry, and returns it. Keeps …","Takes the value out of the entry, and returns it. Keeps …","Removes a key from the map, returning the stored key and …","Take the ownership of the key and value from the map.","Take the ownership of the key and value from the map. …","Take the ownership of the key and value from the map. …","Replaces the entry, returning the old key and value. The …","Replaces the entry, returning the old key and value. The …","Provides shared access to the key and owned access to the …","Provides shared access to the key and owned access to the …","Provides shared access to the key and owned access to the …","Replaces the key in the hash map with the key used to …","Replaces the key in the hash map with the key used to …","Reserves capacity for at least <code>additional</code> more elements to …","Retains only the elements specified by the predicate. …","Shrinks the capacity of the map with a lower limit. It …","Shrinks the capacity of the map as much as possible. It …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Tries to insert a key-value pair into the map, and returns …","","","","","","","","","","","","","","","","","","","","","","","","","Tries to reserve capacity for at least <code>additional</code> more …","","","","","","","","","","","","","","","","","","","","","","","","","The value which was not inserted, because the entry was …","An iterator visiting all values in arbitrary order. The …","An iterator visiting all values mutably in arbitrary order.","Creates an empty <code>HashMap</code> with the specified capacity, …","Creates an empty <code>HashMap</code> with the specified capacity, …","Creates an empty <code>HashMap</code> which will use the given hash …","Creates an empty <code>HashMap</code> which will use the given hash …","A lazy iterator producing elements in the difference of …","A draining iterator over the items of a <code>HashSet</code>.","A view into a single entry in a set, which may either be …","A draining iterator over entries of a <code>HashSet</code> which don’…","A hash set implemented as a <code>HashMap</code> where the value is <code>()</code>.","A lazy iterator producing elements in the intersection of …","An owning iterator over the items of a <code>HashSet</code>.","An iterator over the items of a <code>HashSet</code>.","An occupied entry.","A view into an occupied entry in a <code>HashSet</code>. It is part of …","A lazy iterator producing elements in the symmetric …","A lazy iterator producing elements in the union of <code>HashSet</code>…","A vacant entry.","A view into a vacant entry in a <code>HashSet</code>. It is part of the …","Returns a reference to the underlying allocator.","Returns the intersection of <code>self</code> and <code>rhs</code> as a new …","Returns the union of <code>self</code> and <code>rhs</code> as a new <code>HashSet&lt;T, S&gt;</code>.","Returns the symmetric difference of <code>self</code> and <code>rhs</code> as a new …","","","","","","","","","","","","","","","","","","","","","","","","","Returns the number of elements the set can hold without …","Clears the set, removing all values.","","","","","","","","","","","","","","Returns <code>true</code> if the set contains a value.","Creates an empty <code>HashSet&lt;T, S&gt;</code> with the <code>Default</code> value for …","Visits the values representing the difference, i.e., the …","Clears the set, returning all elements in an iterator.","Gets the given value’s corresponding entry in the set …","","","","","Drains elements which are true under the given predicate, …","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns a reference to the value in the set, if any, that …","Returns a reference to this entry’s value.","Gets a reference to the value in the entry.","Gets a reference to the value that would be used when …","Inserts the given <code>value</code> into the set if it is not present, …","Inserts an owned copy of the given <code>value</code> into the set if …","Inserts a value computed from <code>f</code> into the set if the given …","Returns a reference to the set’s <code>BuildHasher</code>.","Adds a value to the set.","Sets the value of the entry, and returns an OccupiedEntry.","Sets the value of the entry with the VacantEntry’s value.","Insert a value the set without checking if the value …","Visits the values representing the intersection, i.e., the …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Creates a consuming iterator, that is, one that moves each …","","","","","","","","","","Take ownership of the value.","Returns <code>true</code> if <code>self</code> has no elements in common with <code>other</code>. …","Returns <code>true</code> if the set contains no elements.","Returns <code>true</code> if the set is a subset of another, i.e., <code>other</code>…","Returns <code>true</code> if the set is a superset of another, i.e., …","An iterator visiting all elements in arbitrary order. The …","Returns the number of elements in the set.","","","","","","","","","","","","Ensures a value is in the entry by inserting if it was …","Returns a reference to the <code>RawTable</code> used underneath <code>HashSet</code>…","Returns a mutable reference to the <code>RawTable</code> used …","Removes a value from the set. Returns whether the value was","Takes the value out of the entry, and returns it. Keeps …","Adds a value to the set, replacing the existing value, if …","Replaces the entry, returning the old value. The new value …","Reserves capacity for at least <code>additional</code> more elements to …","Retains only the elements specified by the predicate.","Shrinks the capacity of the set with a lower limit. It …","Shrinks the capacity of the set as much as possible. It …","","","","","","","","","Returns the difference of <code>self</code> and <code>rhs</code> as a new …","Visits the values representing the symmetric difference, …","Removes and returns the value in the set, if any, that is …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Tries to reserve capacity for at least <code>additional</code> more …","","","","","","","","","","","","","Visits the values representing the union, i.e., all the …","Creates an empty <code>HashSet</code> with the specified capacity, using","Creates an empty <code>HashSet</code> with the specified capacity, using","Creates a new empty hash set which will use the given …","Creates a new empty hash set which will use the given …","Type representing the absence of an entry, as returned by …","A draining iterator over the items of a <code>HashTable</code>.","A view into a single entry in a table, which may either be …","A draining iterator over entries of a <code>HashTable</code> which don…","Low-level hash table with explicit hashing.","An owning iterator over the entries of a <code>HashTable</code> in …","An iterator over the entries of a <code>HashTable</code> in arbitrary …","A mutable iterator over the entries of a <code>HashTable</code> in …","An occupied entry.","A view into an occupied entry in a <code>HashTable</code>. It is part …","A vacant entry.","A view into a vacant entry in a <code>HashTable</code>. It is part of …","Returns a reference to the underlying allocator.","Provides in-place mutable access to an occupied entry …","","","","","","","","","","","","","","","","","","","","","Returns the number of elements the table can hold without …","Clears the table, removing all values.","","","","Clears the set, returning all elements in an iterator.","Returns an <code>Entry</code> for an entry in the table with the given …","Drains elements which are true under the given predicate, …","Returns a reference to an entry in the table with the …","Returns an <code>OccupiedEntry</code> for an entry in the table with …","Returns a mutable reference to an entry in the table with …","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Gets a reference to the value in the entry.","Attempts to get mutable references to <code>N</code> values in the map …","Attempts to get mutable references to <code>N</code> values in the map …","Gets a mutable reference to the value in the entry.","Sets the value of the entry, replacing any existing value …","Inserts a new element into the table with the hash that …","Inserts an element into the <code>HashTable</code> with the given hash …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","Converts the OccupiedEntry into a mutable reference to the …","Converts the OccupiedEntry into a mutable reference to the …","Converts the VacantEntry into a mutable reference to the …","Converts the AbsentEntry into a mutable reference to the …","Returns <code>true</code> if the set contains no elements.","An iterator visiting all elements in arbitrary order. The …","An iterator visiting all elements in arbitrary order, with …","Returns the number of elements in the table.","","","","","Creates an empty <code>HashTable</code>.","Creates an empty <code>HashTable</code> using the given allocator.","","","","","","Ensures a value is in the entry by inserting if it was …","Ensures a value is in the entry by inserting the result of …","Takes the value out of the entry, and returns it along …","Reserves capacity for at least <code>additional</code> more elements to …","Retains only the elements specified by the predicate.","Shrinks the capacity of the table with a lower limit. It …","Shrinks the capacity of the table as much as possible. It …","","","","","","","","","","","","","","","","","","","","","","","","","","","Tries to reserve capacity for at least <code>additional</code> more …","","","","","","","","","","","Creates an empty <code>HashTable</code> with the specified capacity.","Creates an empty <code>HashTable</code> with the specified capacity …","A reference to a hash table bucket containing a <code>T</code>.","A reference to an empty bucket into which an can be …","Iterator which consumes elements without freeing the table …","Iterator which consumes a table and returns elements.","Iterator which returns a raw pointer to every full bucket …","Iterator over occupied buckets that could match a given …","A raw hash table with an unsafe API.","Return the information about memory allocated by the table.","Returns a reference to the underlying allocator.","Returns a unique mutable reference to the <code>value</code>.","Acquires the underlying raw pointer <code>*mut T</code> to <code>data</code>.","Returns a shared immutable reference to the <code>value</code>.","","","","","","","","","","","","","","","Returns a pointer to an element in the table.","Returns the index of a bucket from a <code>Bucket</code>.","Returns the number of buckets in the table.","Returns the number of elements the map can hold without …","Removes all elements from the table without freeing the …","Marks all table buckets as empty without dropping their …","","","","","Variant of <code>clone_from</code> to use when a hasher is available.","","","","Copies <code>size_of&lt;T&gt;</code> bytes from <code>other</code> to <code>self</code>. The source and …","Returns pointer to one past last <code>data</code> element in the the …","Returns pointer to start of data table.","","Returns an iterator which removes all elements from the …","Returns an iterator which removes all elements from the …","","","","Erases an element from the table, dropping it in place.","Finds and erases an element from the table, dropping it in …","Searches for an element in the table.","Searches for an element in the table. If the element is …","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Gets a reference to an element in the table.","Attempts to get mutable references to <code>N</code> entries in the …","","Gets a mutable reference to an element in the table.","Inserts a new element into the table, and returns its raw …","Inserts a new element into the table, and returns a …","Inserts a new element into the table in the given slot, …","Inserts a new element into the table, without growing the …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","Returns an iterator which consumes all elements from the …","Checks whether the bucket at <code>index</code> is full.","Returns <code>true</code> if the table contains no elements.","Returns an iterator over every element in the table. It is …","","","Returns an iterator over occupied buckets that could match …","Returns the number of elements in the table.","Creates a new empty hash table without allocating any …","Creates a new empty hash table without allocating any …","","","","","Refresh the iterator so that it reflects an insertion into …","Refresh the iterator so that it reflects a removal from …","Removes an element from the table, returning it.","Finds and removes an element from the table, returning it.","Temporary removes a bucket, applying the given function to …","Ensures that at least <code>additional</code> items can be inserted …","Shrinks the table to fit <code>max(self.len(), min_size)</code> …","","","","","","","","","","","","","","Attempts to insert a new element without growing the table …","","","","","","","","Tries to ensure that at least <code>additional</code> items can be …","Attempts to allocate a new hash table with at least enough …","Attempts to allocate a new hash table using the given …","","","","","","","","Allocates a new hash table with at least enough capacity …","Allocates a new hash table using the given allocator, with …"],"i":[1,1,0,0,0,0,0,1,1,1,1,1,22,1,1,1,0,0,0,1,0,1,1,1,1,85,0,0,0,0,0,0,0,0,0,0,0,0,9,11,12,0,0,0,0,0,0,0,0,9,11,12,0,0,0,0,8,9,11,12,9,11,12,86,8,16,31,32,33,34,17,18,24,28,35,36,9,37,38,39,11,40,41,12,43,44,45,86,8,16,31,32,33,34,17,18,24,28,35,36,9,37,38,39,11,40,41,12,43,44,45,8,8,8,16,17,18,8,8,16,17,18,8,8,8,8,45,8,8,8,8,8,8,8,8,16,31,32,33,34,17,18,24,35,36,9,37,38,39,11,40,41,12,43,44,45,45,16,31,32,33,34,17,18,24,35,86,8,16,31,32,33,34,17,18,24,28,35,36,9,37,38,39,11,40,41,12,43,44,45,36,39,8,36,39,36,39,8,37,40,43,8,37,8,37,8,8,8,8,8,37,40,43,8,8,8,9,37,38,11,40,41,12,43,44,38,37,8,38,86,8,16,31,32,33,34,17,18,24,28,35,36,9,37,38,39,11,40,41,12,43,44,45,8,8,8,16,31,32,33,34,17,18,24,28,35,37,41,44,37,8,37,40,43,8,8,8,8,37,11,40,41,12,43,44,37,8,8,16,31,32,33,34,17,18,24,35,16,31,32,33,34,17,18,24,28,35,11,12,9,11,12,9,11,12,11,12,8,8,8,8,8,37,40,43,8,37,40,43,40,43,37,40,43,40,43,8,8,8,8,16,31,32,33,34,17,18,24,28,35,8,16,17,18,45,86,8,16,31,32,33,34,17,18,24,28,35,36,9,37,38,39,11,40,41,12,43,44,45,8,86,8,16,31,32,33,34,17,18,24,28,35,36,9,37,38,39,11,40,41,12,43,44,45,8,86,8,16,31,32,33,34,17,18,24,28,35,36,9,37,38,39,11,40,41,12,43,44,45,45,8,8,8,8,8,8,0,0,0,0,0,0,0,0,60,0,0,0,60,0,53,53,53,53,53,54,62,59,61,55,56,57,58,60,63,64,53,54,62,59,61,55,56,57,58,60,63,64,53,53,53,54,55,56,57,58,53,53,54,55,56,57,58,53,53,53,53,53,53,53,53,53,53,53,54,62,59,55,56,57,58,60,63,64,54,62,59,55,56,57,58,53,53,54,62,59,61,55,56,57,58,60,63,64,53,53,60,63,64,53,53,53,53,53,60,64,53,53,53,54,62,59,61,55,56,57,58,60,63,64,53,53,54,62,59,61,55,56,57,58,64,53,53,53,53,53,53,54,62,59,54,62,59,61,55,56,57,58,60,53,53,53,63,53,63,53,53,53,53,54,62,59,61,55,56,57,58,53,53,53,53,54,55,56,57,58,53,54,62,59,61,55,56,57,58,60,63,64,53,54,62,59,61,55,56,57,58,60,63,64,53,53,54,62,59,61,55,56,57,58,60,63,64,53,53,53,53,53,0,0,0,0,0,0,0,0,67,0,67,0,66,67,66,67,70,72,71,73,74,75,68,69,66,67,70,72,71,73,74,75,68,69,66,66,66,66,66,66,66,66,66,66,66,66,67,70,72,71,68,73,74,75,66,67,70,72,71,73,74,75,68,69,70,66,66,70,67,72,66,66,67,70,72,71,73,74,75,68,69,66,66,66,73,74,75,68,69,70,70,72,71,66,66,66,66,73,74,75,68,66,66,73,74,75,68,69,67,67,70,66,66,66,66,73,74,75,68,69,66,66,67,70,72,71,73,74,75,68,69,66,67,70,72,71,73,74,75,68,69,66,66,67,70,72,71,73,74,75,68,69,66,66,0,0,0,0,0,0,0,51,51,79,79,79,83,79,51,80,82,81,84,83,79,51,80,82,81,84,51,51,51,51,51,51,79,51,80,51,51,79,51,80,79,51,51,51,51,51,51,82,81,51,51,51,51,80,83,79,51,80,82,81,84,51,51,51,51,51,51,51,51,83,79,51,80,82,81,84,51,80,82,81,84,51,51,51,51,82,81,51,51,51,51,80,82,81,84,80,80,51,51,51,51,51,80,82,81,79,51,80,83,79,51,80,82,81,84,51,83,79,51,80,82,81,84,51,51,51,83,79,51,80,82,81,84,51,51],"f":[0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[1,1],[[-1,-2],2,[],[]],[[1,1],3],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[1,4],5],[-1,-1,[]],0,0,0,[-1,-2,[],[]],0,[-1,-2,[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,7,[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[[8,[-1,-2,-3,-4]]],-4,[],[],[],0],[[[9,[-1,-2,-3,-4]],-5],[[9,[-1,-2,-3,-4]]],[],[],[],0,10],[[[11,[-1,-2,-3,-4]],-5],[[11,[-1,-2,-3,-4]]],[],[],[],0,10],[[[12,[-1,-2,-3,-4,-5]],-6],[[12,[-1,-2,-3,-4,-5]]],[],13,[],[],0,10],[[[9,[-1,-2,-3,-4]],-5],[[9,[-1,-2,-3,-4]]],[],[],[],0,10],[[[11,[-1,-2,-3,-4]],-5],[[11,[-1,-2,-3,-4]]],[],[],[],0,10],[[[12,[-1,-2,-3,-4,-5]],-6],[[12,[-1,-2,-3,-4,-5]]],[],13,[],[],0,10],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[8,[-1,-2,-3,-4]]],14,[],[],[],0],[[[8,[-1,-2,-3,-4]]],2,[],[],[],0],[[[8,[-1,-2,-3,-4]]],[[8,[-1,-2,-3,-4]]],15,15,15,[0,15]],[[[16,[-1,-2]]],[[16,[-1,-2]]],[],[]],[[[17,[-1,-2]]],[[17,[-1,-2]]],[],[]],[[[18,[-1,-2]]],[[18,[-1,-2]]],[],[]],[[[8,[-1,-2,-3,-4]],[8,[-1,-2,-3,-4]]],2,15,15,15,[0,15]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[[8,[-1,-2,-3,-4]],-5],3,[19,20],[],21,0,[20,[22,[-1]],13]],[[],[[8,[-1,-2,-3,-4]]],[],[],23,[23,0]],[[[8,[-1,-2,-3,-4]]],[[24,[-1,-2,-4]]],[],[],[],0],[[[8,[-1,-2,-3,-4]],-1],[[11,[-1,-2,-3,-4]]],[19,20],[],21,0],0,[[[8,[-1,-2,-3,-4]],-5],[[12,[-1,-5,-2,-3,-4]]],[19,20],[],21,0,[20,[22,[-1]],13]],[[[8,[-1,-2,-3,-4]],[8,[-1,-2,-3,-4]]],3,[19,20],25,21,0],[[-1,-2],3,[],[]],[[[8,[-1,-2,-3,-4]],-5],2,[19,20,26],26,21,0,27],[[[8,[-1,-2,-3,-4]],-5],2,[19,20],[],21,0,27],[[[8,[-1,-2,-3,-4]],-5],2,[19,20,26],26,21,0,27],[[[8,[-1,-2,-3,-4]],-5],[[28,[-1,-2,-5,-4]]],[],[],[],0,29],[[[8,[-1,-2,-3,-4]],4],5,30,30,[],0],[[[16,[-1,-2]],4],5,30,30],[[[31,[-1,-2]],4],5,30,30],[[[32,[-1,-2,-3]],4],5,30,30,0],[[[33,[-1,-2,-3]],4],5,30,30,0],[[[34,[-1,-2,-3]],4],5,[],30,0],[[[17,[-1,-2]],4],5,30,[]],[[[18,[-1,-2]],4],5,[],30],[[[24,[-1,-2,-3]],4],5,30,30,0],[[[35,[-1,-2]],4],5,[],30],[[[36,[-1,-2,-3,-4]],4],5,[],[],[],0],[[[9,[-1,-2,-3,-4]],4],5,30,30,[],0],[[[37,[-1,-2,-3,-4]],4],5,30,30,[],0],[[[38,[-1,-2,-3,-4]],4],5,[],[],[],0],[[[39,[-1,-2,-3,-4]],4],5,[],[],[],0],[[[11,[-1,-2,-3,-4]],4],5,30,30,[],0],[[[40,[-1,-2,-3,-4]],4],5,30,30,[],0],[[[41,[-1,-2,-3,-4]],4],5,30,[],[],0],[[[12,[-2,-1,-3,-4,-5]],4],5,[13,30],[[42,[-1]]],30,[],0],[[[43,[-2,-1,-3,-4,-5]],4],5,[13,30],[[42,[-1]]],30,[],0],[[[44,[-2,-1,-3,-4,-5]],4],5,[13,30],[[42,[-1]]],[],[],0],[[[45,[-1,-2,-3,-4]],4],5,30,30,[],0],[[[45,[-1,-2,-3,-4]],4],5,30,30,[],0],[[[16,[-1,-2]],-3,-4],-3,[],[],[],29],[[[31,[-1,-2]],-3,-4],-3,[],[],[],29],[[[32,[-1,-2,-3]],-4,-5],-4,[],[],0,[],29],[[[33,[-1,-2,-3]],-4,-5],-4,[],[],0,[],29],[[[34,[-1,-2,-3]],-4,-5],-4,[],[],0,[],29],[[[17,[-1,-2]],-3,-4],-3,[],[],[],29],[[[18,[-1,-2]],-3,-4],-3,[],[],[],29],[[[24,[-1,-2,-3]],-4,-5],-4,[],[],0,[],29],[[[35,[-1,-2]],-3,-4],-3,[],[],[],29],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[[36,[-1,-2,-3,-4]],46,-5],[[9,[-1,-2,-3,-4]]],[],[],[],0,29],[[[39,[-1,-2,-3,-4]],46,-5],[[47,[[2,[-1,-2]]]]],[],[],[],0,29],[-1,[[8,[-2,-3,-4,-5]]],27,[19,20],[],[21,23],[23,0]],[[[36,[-1,-2,-3,-4]],-5],[[9,[-1,-2,-3,-4]]],[],[],21,0,[20,[22,[-1]],13]],[[[39,[-1,-2,-3,-4]],-5],[[47,[[2,[-1,-2]]]]],[],[],21,0,[20,[22,[-1]],13]],[[[36,[-1,-2,-3,-4]],46,-5],[[9,[-1,-2,-3,-4]]],[],[],[],0,[[22,[-1]],13]],[[[39,[-1,-2,-3,-4]],46,-5],[[47,[[2,[-1,-2]]]]],[],[],[],0,[[22,[-1]],13]],[[[8,[-1,-2,-3,-4]],-5],[[47,[-2]]],[19,20],[],21,0,[20,[22,[-1]],13]],[[[37,[-1,-2,-3,-4]]],-2,[],[],[],0],[[[40,[-1,-2,-3,-4]]],-2,[],[],[],0],[[[43,[-1,-2,-3,-4,-5]]],-3,[],13,[],[],0],[[[8,[-1,-2,-3,-4]],-5],[[47,[[2,[-1,-2]]]]],[19,20],[],21,0,[20,[22,[-1]],13]],[[[37,[-1,-2,-3,-4]]],[[2,[-1,-2]]],[],[],[],0],[[[8,[-1,-2,-3,-4]],-5],[[47,[[2,[-1,-2]]]]],[19,20],[],21,0,[20,[22,[-1]],13]],[[[37,[-1,-2,-3,-4]]],[[2,[-1,-2]]],[],[],[],0],[[[8,[-1,-2,-3,-4]],[48,[-5]]],[[47,[[48,[[2,[-1,-2]]]]]]],[19,20],[],21,0,[20,[22,[-1]],13]],[[[8,[-1,-2,-3,-4]],[48,[-5]]],[[47,[[48,[[2,[-1,-2]]]]]]],[19,20],[],21,0,[20,[22,[-1]],13]],[[[8,[-1,-2,-3,-4]],[48,[-5]]],[[47,[[48,[-2]]]]],[19,20],[],21,0,[20,[22,[-1]],13]],[[[8,[-1,-2,-3,-4]],[48,[-5]]],[[47,[[48,[-2]]]]],[19,20],[],21,0,[20,[22,[-1]],13]],[[[8,[-1,-2,-3,-4]],-5],[[47,[-2]]],[19,20],[],21,0,[20,[22,[-1]],13]],[[[37,[-1,-2,-3,-4]]],-2,[],[],[],0],[[[40,[-1,-2,-3,-4]]],-2,[],[],[],0],[[[43,[-1,-2,-3,-4,-5]]],-3,[],13,[],[],0],[[[8,[-1,-2,-3,-4]]],-3,[],[],[],0],[[[8,[-1,-2,-3,-4]],-5],-2,[19,20],[],21,0,[20,[22,[-1]],13]],[[[8,[-1,-2,-3,-4]],-1,-2],[[47,[-2]]],[19,20],[],21,0],[[[9,[-1,-2,-3,-4]],-1,-2],[[37,[-1,-2,-3,-4]]],20,[],21,0],[[[37,[-1,-2,-3,-4]],-2],-2,[],[],[],0],[[[38,[-1,-2,-3,-4]],-1,-2],[[2,[-1,-2]]],20,[],21,0],[[[11,[-1,-2,-3,-4]],-2],[[40,[-1,-2,-3,-4]]],20,[],21,0],[[[40,[-1,-2,-3,-4]],-2],-2,[],[],[],0],[[[41,[-1,-2,-3,-4]],-2],-2,20,[],21,0],[[[12,[-2,-1,-3,-4,-5]],-3],[[43,[-2,-1,-3,-4,-5]]],13,[20,[49,[-1]]],[],21,0],[[[43,[-1,-2,-3,-4,-5]],-3],-3,[],13,[],[],0],[[[44,[-2,-1,-3,-4,-5]],-3],-3,13,[20,[49,[-1]]],[],21,0],[[[38,[-1,-2,-3,-4]],46,-1,-2],[[2,[-1,-2]]],20,[],21,0],[[[37,[-1,-2,-3,-4]],-1],-1,[],[],[],0],[[[8,[-1,-2,-3,-4]],-1,-2],[[2,[-1,-2]]],[19,20],[],21,0],[[[38,[-1,-2,-3,-4]],46,-1,-2,-5],[[2,[-1,-2]]],[],[],[],0,50],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[8,[-1,-2,-3,-4]]],[[16,[-1,-2]]],[],[],[],0],[[[8,[-1,-2,-3,-4]]],[[31,[-1,-2]]],[],[],[],0],[[[8,[-1,-2,-3,-4]]],[[32,[-1,-2,-4]]],[],[],[],0],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[37,[-1,-2,-3,-4]]],-1,[],[],[],0],[[[41,[-1,-2,-3,-4]]],-1,[],[],[],0],[[[44,[-2,-1,-3,-4,-5]]],-2,13,[[49,[-1]]],[],[],0],[[[37,[-1,-2,-3,-4]]],[[2,[-1,-2]]],[],[],[],0],[[[8,[-1,-2,-3,-4]]],[[33,[-1,-2,-4]]],[],[],[],0],[[[37,[-1,-2,-3,-4]]],-2,[],[],[],0],[[[40,[-1,-2,-3,-4]]],-2,[],[],[],0],[[[43,[-1,-2,-3,-4,-5]]],-3,[],13,[],[],0],[[[8,[-1,-2,-3,-4]]],[[34,[-1,-2,-4]]],[],[],[],0],[[[8,[-1,-2,-3,-4]]],3,[],[],[],0],[[[8,[-1,-2,-3,-4]]],[[16,[-1,-2]]],[],[],[],0],[[[8,[-1,-2,-3,-4]]],[[31,[-1,-2]]],[],[],[],0],[[[37,[-1,-2,-3,-4]]],-1,[],[],[],0],[[[11,[-1,-2,-3,-4]]],-1,[],[],[],0],[[[40,[-1,-2,-3,-4]]],-1,[],[],[],0],[[[41,[-1,-2,-3,-4]]],-1,[],[],[],0],[[[12,[-2,-1,-3,-4,-5]]],-1,13,[[42,[-1]]],[],[],0],[[[43,[-1,-2,-3,-4,-5]]],-1,[],13,[],[],0],[[[44,[-2,-1,-3,-4,-5]]],-1,13,[[42,[-1]]],[],[],0],[[[37,[-1,-2,-3,-4]]],-1,[],[],[],0],[[[8,[-1,-2,-3,-4]]],[[17,[-1,-2]]],[],[],[],0],[[[8,[-1,-2,-3,-4]]],14,[],[],[],0],[[[16,[-1,-2]]],14,[],[]],[[[31,[-1,-2]]],14,[],[]],[[[32,[-1,-2,-3]]],14,[],[],0],[[[33,[-1,-2,-3]]],14,[],[],0],[[[34,[-1,-2,-3]]],14,[],[],0],[[[17,[-1,-2]]],14,[],[]],[[[18,[-1,-2]]],14,[],[]],[[[24,[-1,-2,-3]]],14,[],[],0],[[[35,[-1,-2]]],14,[],[]],[[[16,[-1,-2]]],[[47,[[2,[-1,-2]]]]],[],[]],[[[31,[-1,-2]]],[[47,[[2,[-1,-2]]]]],[],[]],[[[32,[-1,-2,-3]]],[[47,[[2,[-1,-2]]]]],[],[],0],[[[33,[-1,-2,-3]]],[[47,[-1]]],[],[],0],[[[34,[-1,-2,-3]]],[[47,[-2]]],[],[],0],[[[17,[-1,-2]]],[[47,[-1]]],[],[]],[[[18,[-1,-2]]],[[47,[-2]]],[],[]],[[[24,[-1,-2,-3]]],[[47,[[2,[-1,-2]]]]],[],[],0],[[[28,[-1,-2,-3,-4]]],47,[],[],29,0],[[[35,[-1,-2]]],[[47,[-2]]],[],[]],[[[11,[-1,-2,-3,-4]]],-2,20,23,21,0],[[[12,[-2,-1,-3,-4,-5]]],-3,13,[20,[49,[-1]]],23,21,0],[[[9,[-1,-2,-3,-4]],-1,-2],[[2,[-1,-2]]],20,[],21,0],[[[11,[-1,-2,-3,-4]],-2],-2,20,[],21,0],[[[12,[-2,-1,-3,-4,-5]],-3],-3,13,[20,[49,[-1]]],[],21,0],[[[9,[-1,-2,-3,-4]],-5],[[2,[-1,-2]]],20,[],21,0,10],[[[11,[-1,-2,-3,-4]],-5],-2,20,[],21,0,10],[[[12,[-2,-1,-3,-4,-5]],-6],-3,13,[20,[49,[-1]]],[],21,0,10],[[[11,[-1,-2,-3,-4]],-5],-2,20,[],21,0,10],[[[12,[-2,-1,-3,-4,-5]],-6],-3,13,[20,[42,[-1]],[49,[-1]]],[],21,0,10],[[[8,[-1,-2,-3,-4]]],[[39,[-1,-2,-3,-4]]],[],[],[],0],[[[8,[-1,-2,-3,-4]]],[[36,[-1,-2,-3,-4]]],[],[],[],0],[[[8,[-1,-2,-3,-4]]],[[51,[[2,[-1,-2]],-4]]],[],[],[],0],[[[8,[-1,-2,-3,-4]]],[[51,[[2,[-1,-2]],-4]]],[],[],[],0],[[[8,[-1,-2,-3,-4]],-5],[[47,[-2]]],[19,20],[],21,0,[20,[22,[-1]],13]],[[[37,[-1,-2,-3,-4]]],-2,[],[],[],0],[[[40,[-1,-2,-3,-4]]],-2,[],[],[],0],[[[43,[-1,-2,-3,-4,-5]]],-3,[],13,[],[],0],[[[8,[-1,-2,-3,-4]],-5],[[47,[[2,[-1,-2]]]]],[19,20],[],21,0,[20,[22,[-1]],13]],[[[37,[-1,-2,-3,-4]]],[[2,[-1,-2]]],[],[],[],0],[[[40,[-1,-2,-3,-4]]],[[2,[-1,-2]]],[],[],[],0],[[[43,[-1,-2,-3,-4,-5]]],[[2,[-1,-3]]],[],13,[],[],0],[[[40,[-1,-2,-3,-4]],-2],[[2,[-1,-2]]],[],[],[],0],[[[43,[-2,-1,-3,-4,-5]],-3],[[2,[-2,-3]]],13,[[49,[-1]]],[],[],0],[[[37,[-1,-2,-3,-4]],-5],[[9,[-1,-2,-3,-4]]],[],[],[],0,10],[[[40,[-1,-2,-3,-4]],-5],[[11,[-1,-2,-3,-4]]],[],[],[],0,10],[[[43,[-1,-2,-3,-4,-5]],-6],[[12,[-1,-2,-3,-4,-5]]],[],13,[],[],0,10],[[[40,[-1,-2,-3,-4]]],-1,[],[],[],0],[[[43,[-2,-1,-3,-4,-5]]],-2,13,[[49,[-1]]],[],[],0],[[[8,[-1,-2,-3,-4]],14],2,[19,20],[],21,0],[[[8,[-1,-2,-3,-4]],-5],2,[],[],[],0,29],[[[8,[-1,-2,-3,-4]],14],2,[19,20],[],21,0],[[[8,[-1,-2,-3,-4]]],2,[19,20],[],21,0],[[[16,[-1,-2]]],[[2,[14,[47,[14]]]]],[],[]],[[[31,[-1,-2]]],[[2,[14,[47,[14]]]]],[],[]],[[[32,[-1,-2,-3]]],[[2,[14,[47,[14]]]]],[],[],0],[[[33,[-1,-2,-3]]],[[2,[14,[47,[14]]]]],[],[],0],[[[34,[-1,-2,-3]]],[[2,[14,[47,[14]]]]],[],[],0],[[[17,[-1,-2]]],[[2,[14,[47,[14]]]]],[],[]],[[[18,[-1,-2]]],[[2,[14,[47,[14]]]]],[],[]],[[[24,[-1,-2,-3]]],[[2,[14,[47,[14]]]]],[],[],0],[[[28,[-1,-2,-3,-4]]],[[2,[14,[47,[14]]]]],[],[],29,0],[[[35,[-1,-2]]],[[2,[14,[47,[14]]]]],[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,52,[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[[[8,[-1,-2,-3,-4]],-1,-2],[[6,[-2,[45,[-1,-2,-3,-4]]]]],[19,20],[],21,0],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[[[8,[-1,-2,-3,-4]],14],[[6,[2,1]]],[19,20],[],21,0],[-1,7,[]],[-1,7,[]],[-1,7,[]],[-1,7,[]],[-1,7,[]],[-1,7,[]],[-1,7,[]],[-1,7,[]],[-1,7,[]],[-1,7,[]],[-1,7,[]],[-1,7,[]],[-1,7,[]],[-1,7,[]],[-1,7,[]],[-1,7,[]],[-1,7,[]],[-1,7,[]],[-1,7,[]],[-1,7,[]],[-1,7,[]],[-1,7,[]],[-1,7,[]],[-1,7,[]],0,[[[8,[-1,-2,-3,-4]]],[[18,[-1,-2]]],[],[],[],0],[[[8,[-1,-2,-3,-4]]],[[35,[-1,-2]]],[],[],[],0],[[14,-1],[[8,[-2,-3,-1]]],[],[],[]],[[14,-1,-2],[[8,[-3,-4,-1,-2]]],[],0,[],[]],[-1,[[8,[-2,-3,-1]]],[],[],[]],[[-1,-2],[[8,[-3,-4,-1,-2]]],[],0,[],[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[[53,[-1,-2,-3]]],-3,[],[],0],[[[53,[-1,-2,-3]],[53,[-1,-2,-3]]],[[53,[-1,-2]]],[19,20,15],[21,23],0],[[[53,[-1,-2,-3]],[53,[-1,-2,-3]]],[[53,[-1,-2]]],[19,20,15],[21,23],0],[[[53,[-1,-2]],[53,[-1,-2]]],[[53,[-1,-2]]],[19,20,15],[21,23]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[53,[-1,-2,-3]]],14,[],[],0],[[[53,[-1,-2,-3]]],2,[],[],0],[[[53,[-1,-2,-3]]],[[53,[-1,-2,-3]]],15,15,[0,15]],[[[54,[-1]]],[[54,[-1]]],[]],[[[55,[-1,-2,-3]]],[[55,[-1,-2,-3]]],[],[],0],[[[56,[-1,-2,-3]]],[[56,[-1,-2,-3]]],[],[],0],[[[57,[-1,-2,-3]]],[[57,[-1,-2,-3]]],[],[],0],[[[58,[-1,-2,-3]]],[[58,[-1,-2,-3]]],[],[],0],[[[53,[-1,-2,-3]],[53,[-1,-2,-3]]],2,15,15,[0,15]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[[53,[-1,-2,-3]],-4],3,[19,20],21,0,[20,[22,[-1]],13]],[[],[[53,[-1,-2,-3]]],[],23,[23,0]],[[[53,[-1,-2,-3]],[53,[-1,-2,-3]]],[[56,[-1,-2,-3]]],[19,20],21,0],[[[53,[-1,-2,-3]]],[[59,[-1,-3]]],[],[],0],[[[53,[-1,-2,-3]],-1],[[60,[-1,-2,-3]]],[19,20],21,0],[[[53,[-1,-2,-3]],[53,[-1,-2,-3]]],3,[19,20],21,0],[[-1,-2],3,[],[]],[[[53,[-1,-2,-3]],-4],2,[19,20,26],21,0,27],[[[53,[-1,-2,-3]],-4],2,[19,20],21,0,27],[[[53,[-1,-2,-3]],-4],[[61,[-1,-4,-3]]],[],[],0,29],[[[53,[-1,-2,-3]],4],5,30,[],0],[[[54,[-1]],4],5,30],[[[62,[-1,-2]],4],5,30,0],[[[59,[-1,-2]],4],5,30,0],[[[55,[-1,-2,-3]],4],5,[30,19,20],21,0],[[[56,[-1,-2,-3]],4],5,[30,19,20],21,0],[[[57,[-1,-2,-3]],4],5,[30,19,20],21,0],[[[58,[-1,-2,-3]],4],5,[30,19,20],21,0],[[[60,[-1,-2,-3]],4],5,30,[],0],[[[63,[-1,-2,-3]],4],5,30,[],0],[[[64,[-1,-2,-3]],4],5,30,[],0],[[[54,[-1]],-2,-3],-2,[],[],29],[[[62,[-1,-2]],-3,-4],-3,[],0,[],29],[[[59,[-1,-2]],-3,-4],-3,[],0,[],29],[[[55,[-1,-2,-3]],-4,-5],-4,[19,20],21,0,[],29],[[[56,[-1,-2,-3]],-4,-5],-4,[19,20],21,0,[],29],[[[57,[-1,-2,-3]],-4,-5],-4,[19,20],21,0,[],29],[[[58,[-1,-2,-3]],-4,-5],-4,[19,20],21,0,[],29],[-1,-1,[]],[[[8,[-1,2,-2,-3]]],[[53,[-1,-2,-3]]],[],[],0],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,[[53,[-2,-3,-4]]],27,[19,20],[21,23],[23,0]],[[[53,[-1,-2,-3]],-4],[[47,[-1]]],[19,20],21,0,[20,[22,[-1]],13]],[[[60,[-1,-2,-3]]],-1,[],[],0],[[[63,[-1,-2,-3]]],-1,[],[],0],[[[64,[-1,-2,-3]]],-1,[],[],0],[[[53,[-1,-2,-3]],-1],-1,[19,20],21,0],[[[53,[-1,-2,-3]],-4],-1,[19,20],21,0,[20,[22,[-1]],65,13]],[[[53,[-1,-2,-3]],-4,-5],-1,[19,20],21,0,[20,[22,[-1]],13],10],[[[53,[-1,-2,-3]]],-2,[],[],0],[[[53,[-1,-2,-3]],-1],3,[19,20],21,0],[[[60,[-1,-2,-3]]],[[63,[-1,-2,-3]]],20,21,0],[[[64,[-1,-2,-3]]],2,20,21,0],[[[53,[-1,-2,-3]],-1],-1,[19,20],21,0],[[[53,[-1,-2,-3]],[53,[-1,-2,-3]]],[[55,[-1,-2,-3]]],[19,20],21,0],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[53,[-1,-2,-3]]],[[62,[-1,-3]]],[],[],0],[[[53,[-1,-2,-3]]],[[54,[-1]]],[],[],0],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[64,[-1,-2,-3]]],-1,[],[],0],[[[53,[-1,-2,-3]],[53,[-1,-2,-3]]],3,[19,20],21,0],[[[53,[-1,-2,-3]]],3,[],[],0],[[[53,[-1,-2,-3]],[53,[-1,-2,-3]]],3,[19,20],21,0],[[[53,[-1,-2,-3]],[53,[-1,-2,-3]]],3,[19,20],21,0],[[[53,[-1,-2,-3]]],[[54,[-1]]],[],[],0],[[[53,[-1,-2,-3]]],14,[],[],0],[[[54,[-1]]],14,[]],[[[62,[-1,-2]]],14,[],0],[[[59,[-1,-2]]],14,[],0],[[[54,[-1]]],[[47,[-1]]],[]],[[[62,[-1,-2]]],[[47,[-1]]],[],0],[[[59,[-1,-2]]],[[47,[-1]]],[],0],[[[61,[-1,-2,-3]]],47,[],29,0],[[[55,[-1,-2,-3]]],[[47,[-1]]],[19,20],21,0],[[[56,[-1,-2,-3]]],[[47,[-1]]],[19,20],21,0],[[[57,[-1,-2,-3]]],[[47,[-1]]],[19,20],21,0],[[[58,[-1,-2,-3]]],[[47,[-1]]],[19,20],21,0],[[[60,[-1,-2,-3]]],2,20,21,0],[[[53,[-1,-2,-3]]],[[51,[[2,[-1,2]],-3]]],[],[],0],[[[53,[-1,-2,-3]]],[[51,[[2,[-1,2]],-3]]],[],[],0],[[[53,[-1,-2,-3]],-4],3,[19,20],21,0,[20,[22,[-1]],13]],[[[63,[-1,-2,-3]]],-1,[],[],0],[[[53,[-1,-2,-3]],-1],[[47,[-1]]],[19,20],21,0],[[[63,[-1,-2,-3]]],-1,[],[],0],[[[53,[-1,-2,-3]],14],2,[19,20],21,0],[[[53,[-1,-2,-3]],-4],2,[],[],0,29],[[[53,[-1,-2,-3]],14],2,[19,20],21,0],[[[53,[-1,-2,-3]]],2,[19,20],21,0],[[[54,[-1]]],[[2,[14,[47,[14]]]]],[]],[[[62,[-1,-2]]],[[2,[14,[47,[14]]]]],[],0],[[[59,[-1,-2]]],[[2,[14,[47,[14]]]]],[],0],[[[61,[-1,-2,-3]]],[[2,[14,[47,[14]]]]],[],29,0],[[[55,[-1,-2,-3]]],[[2,[14,[47,[14]]]]],[19,20],21,0],[[[56,[-1,-2,-3]]],[[2,[14,[47,[14]]]]],[19,20],21,0],[[[57,[-1,-2,-3]]],[[2,[14,[47,[14]]]]],[19,20],21,0],[[[58,[-1,-2,-3]]],[[2,[14,[47,[14]]]]],[19,20],21,0],[[[53,[-1,-2]],[53,[-1,-2]]],[[53,[-1,-2]]],[19,20,15],[21,23]],[[[53,[-1,-2,-3]],[53,[-1,-2,-3]]],[[57,[-1,-2,-3]]],[19,20],21,0],[[[53,[-1,-2,-3]],-4],[[47,[-1]]],[19,20],21,0,[20,[22,[-1]],13]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[[[53,[-1,-2,-3]],14],[[6,[2,1]]],[19,20],21,0],[-1,7,[]],[-1,7,[]],[-1,7,[]],[-1,7,[]],[-1,7,[]],[-1,7,[]],[-1,7,[]],[-1,7,[]],[-1,7,[]],[-1,7,[]],[-1,7,[]],[-1,7,[]],[[[53,[-1,-2,-3]],[53,[-1,-2,-3]]],[[58,[-1,-2,-3]]],[19,20],21,0],[[14,-1],[[53,[-2,-1,0]]],[],[]],[[14,-1,-2],[[53,[-3,-1,-2]]],[],0,[]],[-1,[[53,[-2,-1,0]]],[],[]],[[-1,-2],[[53,[-3,-1,-2]]],[],0,[]],0,0,0,0,0,0,0,0,0,0,0,0,[[[66,[-1,-2]]],-2,[],0],[[[67,[-1,-2]],-3],[[67,[-1,-2]]],[],0,10],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[66,[-1,-2]]],14,[],0],[[[66,[-1,-2]]],2,[],0],[[[66,[-1,-2]]],[[66,[-1,-2]]],15,[0,15]],[[-1,-2],2,[],[]],[[],[[66,[-1,-2]]],[],[0,23]],[[[66,[-1,-2]]],[[68,[-1,-2]]],[],0],[[[66,[-1,-2]],46,-3,-4],[[67,[-1,-2]]],[],0,29,50],[[[66,[-1,-2]],-3],[[69,[-1,-3,-2]]],[],0,29],[[[66,[-1,-2]],46,-3],[[47,[-1]]],[],0,29],[[[66,[-1,-2]],46,-3],[[6,[[70,[-1,-2]],[71,[-1,-2]]]]],[],0,29],[[[66,[-1,-2]],46,-3],[[47,[-1]]],[],0,29],[[[66,[-1,-2]],4],5,30,0],[[[67,[-1,-2]],4],5,30,0],[[[70,[-1,-2]],4],5,30,0],[[[72,[-1,-2]],4],5,30,0],[[[71,[-1,-2]],4],5,30,0],[[[68,[-1,-2]],4],5,30,0],[[[73,[-1]],-2,-3],-2,[],[],29],[[[74,[-1]],-2,-3],-2,[],[],29],[[[75,[-1,-2]],-3,-4],-3,[],0,[],29],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[[70,[-1,-2]]],-1,[],0],[[[66,[-1,-2]],[48,[46]],-3],[[47,[[48,[-1]]]]],[],0,29],[[[66,[-1,-2]],[48,[46]],-3],[[47,[[48,[-1]]]]],[],0,29],[[[70,[-1,-2]]],-1,[],0],[[[67,[-1,-2]],-1],[[70,[-1,-2]]],[],0],[[[72,[-1,-2]],-1],[[70,[-1,-2]]],[],0],[[[66,[-1,-2]],46,-1,-3],[[70,[-1,-2]]],[],0,50],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[66,[-1,-2]]],[[73,[-1]]],[],0],[[[66,[-1,-2]]],[[74,[-1]]],[],0],[[[66,[-1,-2]]],[[75,[-1,-2]]],[],0],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[70,[-1,-2]]],-1,[],0],[[[70,[-1,-2]]],[[66,[-1,-2]]],[],0],[[[72,[-1,-2]]],[[66,[-1,-2]]],[],0],[[[71,[-1,-2]]],[[66,[-1,-2]]],[],0],[[[66,[-1,-2]]],3,[],0],[[[66,[-1,-2]]],[[73,[-1]]],[],0],[[[66,[-1,-2]]],[[74,[-1]]],[],0],[[[66,[-1,-2]]],14,[],0],[[[73,[-1]]],14,[]],[[[74,[-1]]],14,[]],[[[75,[-1,-2]]],14,[],0],[[[68,[-1,-2]]],14,[],0],[[],[[66,[-1,0]]],[]],[-1,[[66,[-2,-1]]],0,[]],[[[73,[-1]]],47,[]],[[[74,[-1]]],47,[]],[[[75,[-1,-2]]],47,[],0],[[[68,[-1,-2]]],[[47,[-1]]],[],0],[[[69,[-1,-2,-3]]],47,[],29,0],[[[67,[-1,-2]],-1],[[70,[-1,-2]]],[],0],[[[67,[-1,-2]],-3],[[70,[-1,-2]]],[],0,10],[[[70,[-1,-2]]],[[2,[-1,[72,[-1,-2]]]]],[],0],[[[66,[-1,-2]],14,-3],2,[],0,50],[[[66,[-1,-2]],-3],2,[],0,29],[[[66,[-1,-2]],14,-3],2,[],0,50],[[[66,[-1,-2]],-3],2,[],0,50],[[[73,[-1]]],[[2,[14,[47,[14]]]]],[]],[[[74,[-1]]],[[2,[14,[47,[14]]]]],[]],[[[75,[-1,-2]]],[[2,[14,[47,[14]]]]],[],0],[[[68,[-1,-2]]],[[2,[14,[47,[14]]]]],[],0],[[[69,[-1,-2,-3]]],[[2,[14,[47,[14]]]]],[],29,0],[-1,-2,[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[[[66,[-1,-2]],14,-3],[[6,[2,1]]],[],0,50],[-1,7,[]],[-1,7,[]],[-1,7,[]],[-1,7,[]],[-1,7,[]],[-1,7,[]],[-1,7,[]],[-1,7,[]],[-1,7,[]],[-1,7,[]],[14,[[66,[-1,0]]],[]],[[14,-1],[[66,[-2,-1]]],0,[]],0,0,0,0,0,0,0,[[[51,[-1,-2]]],[[2,[[77,[76]],78]]],[],0],[[[51,[-1,-2]]],-2,[],0],[[[79,[-1]]],-1,[]],[[[79,[-1]]],[],[]],[[[79,[-1]]],-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[51,[-1,-2]],14],[[79,[-1]]],[],0],[[[51,[-1,-2]],[79,[-1]]],14,[],0],[[[51,[-1,-2]]],14,[],0],[[[51,[-1,-2]]],14,[],0],[[[51,[-1,-2]]],2,[],0],[[[51,[-1,-2]]],2,[],0],[[[79,[-1]]],[[79,[-1]]],[]],[[[51,[-1,-2]]],[[51,[-1,-2]]],15,[0,15]],[[[80,[-1]]],[[80,[-1]]],[]],[[[51,[-1,-2]],[51,[-1,-2]]],2,15,[0,15]],[[[51,[-1,-2]],[51,[-1,-2]],-3],2,15,[0,15],50],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[[79,[-1]],[79,[-1]]],2,[]],[[[51,[-1,-2]]],[[77,[-1]]],[],0],[[[51,[-1,-2]]],[[77,[-1]]],[],0],[[],[[51,[-1,-2]]],[],[0,23]],[[[51,[-1,-2]]],[[81,[-1,-2]]],[],0],[[[51,[-1,-2]],[80,[-1]]],[[81,[-1,-2]]],[],0],[[[51,[-1,-2]]],2,[],0],[[[82,[-1,-2]]],2,[],0],[[[81,[-1,-2]]],2,[],0],[[[51,[-1,-2]],[79,[-1]]],2,[],0],[[[51,[-1,-2]],46,-3],3,[],0,29],[[[51,[-1,-2]],46,-3],[[47,[[79,[-1]]]]],[],0,29],[[[51,[-1,-2]],46,-3,-4],[[6,[[79,[-1]],83]]],[],0,29,50],[[[80,[-1]],-2,-3],-2,[],[],29],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[[51,[-1,-2]],46,-3],[[47,[-1]]],[],0,29],[[[51,[-1,-2]],[48,[46]],-3],[[47,[[48,[-1]]]]],[],0,29],[[[51,[-1,-2]],[48,[46]],-3],[[47,[[48,[-1]]]]],[],0,29],[[[51,[-1,-2]],46,-3],[[47,[-1]]],[],0,29],[[[51,[-1,-2]],46,-1,-3],[[79,[-1]]],[],0,50],[[[51,[-1,-2]],46,-1,-3],-1,[],0,50],[[[51,[-1,-2]],46,83,-1],[[79,[-1]]],[],0],[[[51,[-1,-2]],46,-1],[[79,[-1]]],[],0],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[51,[-1,-2]]],[[82,[-1,-2]]],[],0],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[51,[-1,-2]],[80,[-1]]],[[82,[-1,-2]]],[],0],[[[51,[-1,-2]],14],3,[],0],[[[51,[-1,-2]]],3,[],0],[[[51,[-1,-2]]],[[80,[-1]]],[],0],[[[82,[-1,-2]]],[[80,[-1]]],[],0],[[[81,[-1,-2]]],[[80,[-1]]],[],0],[[[51,[-1,-2]],46],[[84,[-1]]],[],0],[[[51,[-1,-2]]],14,[],0],[[],[[51,[-1,0]]],[]],[-1,[[51,[-2,-1]]],0,[]],[[[80,[-1]]],[[47,[[79,[-1]]]]],[]],[[[82,[-1,-2]]],[[47,[-1]]],[],0],[[[81,[-1,-2]]],[[47,[-1]]],[],0],[[[84,[-1]]],[[47,[[79,[-1]]]]],[]],[[[80,[-1]],[79,[-1]]],2,[]],[[[80,[-1]],[79,[-1]]],2,[]],[[[51,[-1,-2]],[79,[-1]]],[[2,[-1,83]]],[],0],[[[51,[-1,-2]],46,-3],[[47,[-1]]],[],0,29],[[[51,[-1,-2]],[79,[-1]],-3],3,[],0,10],[[[51,[-1,-2]],14,-3],2,[],0,50],[[[51,[-1,-2]],14,-3],2,[],0,50],[[[80,[-1]]],[[2,[14,[47,[14]]]]],[]],[[[82,[-1,-2]]],[[2,[14,[47,[14]]]]],[],0],[[[81,[-1,-2]]],[[2,[14,[47,[14]]]]],[],0],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[[[51,[-1,-2]],46,-1],[[6,[[79,[-1]],-1]]],[],0],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[[[51,[-1,-2]],14,-3],[[6,[2,1]]],[],0,50],[14,[[6,[[51,[-1,0]],1]]],[]],[[14,-1],[[6,[[51,[-2,-1]],1]]],0,[]],[-1,7,[]],[-1,7,[]],[-1,7,[]],[-1,7,[]],[-1,7,[]],[-1,7,[]],[-1,7,[]],[14,[[51,[-1,0]]],[]],[[14,-1],[[51,[-2,-1]]],0,[]]],"c":[],"p":[[4,"TryReserveError",0],[15,"tuple"],[15,"bool"],[3,"Formatter",947],[6,"Result",947],[4,"Result",948],[3,"TypeId",949],[3,"HashMap",26],[4,"RawEntryMut",26],[8,"FnOnce",950],[4,"Entry",26],[4,"EntryRef",26],[8,"Sized",951],[15,"usize"],[8,"Clone",952],[3,"Iter",26],[3,"Keys",26],[3,"Values",26],[8,"Eq",953],[8,"Hash",954],[8,"BuildHasher",954],[8,"Equivalent",0],[8,"Default",955],[3,"Drain",26],[8,"PartialEq",953],[8,"Copy",951],[8,"IntoIterator",956],[3,"ExtractIf",26],[8,"FnMut",950],[8,"Debug",947],[3,"IterMut",26],[3,"IntoIter",26],[3,"IntoKeys",26],[3,"IntoValues",26],[3,"ValuesMut",26],[3,"RawEntryBuilderMut",26],[3,"RawOccupiedEntryMut",26],[3,"RawVacantEntryMut",26],[3,"RawEntryBuilder",26],[3,"OccupiedEntry",26],[3,"VacantEntry",26],[8,"Borrow",957],[3,"OccupiedEntryRef",26],[3,"VacantEntryRef",26],[3,"OccupiedError",26],[15,"u64"],[4,"Option",958],[15,"array"],[8,"From",959],[8,"Fn",950],[3,"RawTable",812],[3,"String",960],[3,"HashSet",436],[3,"Iter",436],[3,"Intersection",436],[3,"Difference",436],[3,"SymmetricDifference",436],[3,"Union",436],[3,"Drain",436],[4,"Entry",436],[3,"ExtractIf",436],[3,"IntoIter",436],[3,"OccupiedEntry",436],[3,"VacantEntry",436],[8,"ToOwned",961],[3,"HashTable",658],[4,"Entry",658],[3,"Drain",658],[3,"ExtractIf",658],[3,"OccupiedEntry",658],[3,"AbsentEntry",658],[3,"VacantEntry",658],[3,"Iter",658],[3,"IterMut",658],[3,"IntoIter",658],[15,"u8"],[3,"NonNull",962],[3,"Layout",963],[3,"Bucket",812],[3,"RawIter",812],[3,"RawDrain",812],[3,"RawIntoIter",812],[3,"InsertSlot",812],[3,"RawIterHash",812],[13,"AllocError",25],[4,"DefaultHashBuilder",26]],"b":[[130,"impl-Extend%3C(%26K,+%26V)%3E-for-HashMap%3CK,+V,+S,+A%3E"],[131,"impl-Extend%3C(K,+V)%3E-for-HashMap%3CK,+V,+S,+A%3E"],[132,"impl-Extend%3C%26(K,+V)%3E-for-HashMap%3CK,+V,+S,+A%3E"],[155,"impl-Debug-for-OccupiedError%3C\'_,+K,+V,+S,+A%3E"],[156,"impl-Display-for-OccupiedError%3C\'a,+K,+V,+S,+A%3E"],[253,"impl-IntoIterator-for-%26HashMap%3CK,+V,+S,+A%3E"],[254,"impl-IntoIterator-for-%26mut+HashMap%3CK,+V,+S,+A%3E"],[255,"impl-IntoIterator-for-HashMap%3CK,+V,+S,+A%3E"],[500,"impl-Extend%3C%26T%3E-for-HashSet%3CT,+S,+A%3E"],[501,"impl-Extend%3CT%3E-for-HashSet%3CT,+S,+A%3E"],[560,"impl-IntoIterator-for-HashSet%3CT,+S,+A%3E"],[561,"impl-IntoIterator-for-%26HashSet%3CT,+S,+A%3E"],[739,"impl-IntoIterator-for-%26HashTable%3CT,+A%3E"],[740,"impl-IntoIterator-for-%26mut+HashTable%3CT,+A%3E"],[741,"impl-IntoIterator-for-HashTable%3CT,+A%3E"]]},\
"hex":{"doc":"Encoding and decoding hex strings.","t":"QIENNNILLLLFFFKKFFLLLLKLLLLLLMM","n":["Error","FromHex","FromHexError","InvalidHexCharacter","InvalidStringLength","OddLength","ToHex","borrow","borrow_mut","clone","clone_into","decode","decode_to_slice","encode","encode_hex","encode_hex_upper","encode_to_slice","encode_upper","eq","fmt","fmt","from","from_hex","into","to_owned","to_string","try_from","try_into","type_id","c","index"],"q":[[0,"hex"],[29,"hex::FromHexError"],[31,"alloc::vec"],[32,"core::result"],[33,"core::convert"],[34,"alloc::string"],[35,"core::iter::traits::collect"],[36,"core::fmt"],[37,"core::fmt"]],"d":["","Types that can be decoded from a hex string.","The error type for decoding a hex string into <code>Vec&lt;u8&gt;</code> or …","An invalid character was found. Valid ones are: <code>0...9</code>, …","If the hex string is decoded into a fixed sized container, …","A hex string’s length needs to be even, as two digits …","Encoding values as hex string.","","","","","Decodes a hex string into raw bytes.","Decode a hex string into a mutable bytes slice.","Encodes <code>data</code> as hex string using lowercase characters.","Encode the hex strict representing <code>self</code> into the result. …","Encode the hex strict representing <code>self</code> into the result. …","Encodes some bytes into a mutable slice of bytes.","Encodes <code>data</code> as hex string using uppercase characters.","","","","Returns the argument unchanged.","Creates an instance of type <code>Self</code> from the given hex …","Calls <code>U::from(self)</code>.","","","","","","",""],"i":[15,0,0,1,1,1,0,1,1,1,1,0,0,0,16,16,0,0,1,1,1,1,15,1,1,1,1,1,1,17,17],"f":[0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[1,1],[[-1,-2],2,[],[]],[-1,[[5,[[4,[3]],1]]],[[7,[[6,[3]]]]]],[[-1,[6,[3]]],[[5,[2,1]]],[[7,[[6,[3]]]]]],[-1,8,[[7,[[6,[3]]]]]],[-1,-2,[],[[10,[9]]]],[-1,-2,[],[[10,[9]]]],[[-1,[6,[3]]],[[5,[2,1]]],[[7,[[6,[3]]]]]],[-1,8,[[7,[[6,[3]]]]]],[[1,1],11],[[1,12],13],[[1,12],13],[-1,-1,[]],[-1,[[5,[-2]]],[[7,[[6,[3]]]]],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,8,[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,14,[]],0,0],"c":[],"p":[[4,"FromHexError",0],[15,"tuple"],[15,"u8"],[3,"Vec",31],[4,"Result",32],[15,"slice"],[8,"AsRef",33],[3,"String",34],[15,"char"],[8,"FromIterator",35],[15,"bool"],[3,"Formatter",36],[6,"Result",36],[3,"TypeId",37],[8,"FromHex",0],[8,"ToHex",0],[13,"InvalidHexCharacter",29]],"b":[[19,"impl-Display-for-FromHexError"],[20,"impl-Debug-for-FromHexError"]]},\
"indexmap":{"doc":"<code>IndexMap</code> is a hash table where the iteration order of the …","t":"ICCDLLLLLKLLLLLLOOLAALLLLLDEDDDDDDQDINDDNDQDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDDDDDDDDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL","n":["Equivalent","IndexMap","IndexSet","TryReserveError","borrow","borrow_mut","clone","clone_into","eq","equivalent","equivalent","equivalent","equivalent","fmt","fmt","from","indexmap","indexset","into","map","set","to_owned","to_string","try_from","try_into","type_id","Drain","Entry","IndexMap","IntoIter","IntoKeys","IntoValues","Iter","IterMut","Key","Keys","MutableKeys","Occupied","OccupiedEntry","Slice","Vacant","VacantEntry","Value","Values","ValuesMut","and_modify","as_mut_slice","as_mut_slice","as_slice","as_slice","as_slice","as_slice","as_slice","binary_search_by","binary_search_by","binary_search_by_key","binary_search_by_key","binary_search_keys","binary_search_keys","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","capacity","clear","clone","clone","clone","clone","clone_from","clone_into","clone_into","clone_into","clone_into","cmp","collect","collect","collect","collect","collect","collect","collect","collect","collect","compare","contains_key","count","count","count","count","count","count","count","count","count","default","default","default","default","default","default","default","default","default","default","default","drain","entry","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","extend","extend","first","first","first_mut","first_mut","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_iter","get","get","get_full","get_full_mut","get_full_mut2","get_full_mut2","get_index","get_index","get_index_mut","get_index_mut","get_index_mut2","get_index_mut2","get_index_of","get_key_value","get_mut","get_mut","get_range","get_range","get_range_mut","get_range_mut","hash","hasher","index","index","index","index","index","index","index","index","index","index","index","index","index","index","index","index","index","index","index","index","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","insert","insert","insert","insert_full","into","into","into","into","into","into","into","into","into","into","into","into","into","into_boxed_slice","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_key","into_keys","into_keys","into_mut","into_slice","into_values","into_values","is_empty","is_empty","iter","iter","iter_mut","iter_mut","key","key","key","keys","keys","last","last","last","last","last","last","last","last","last","last","last","last_mut","last_mut","len","len","len","len","len","len","len","len","len","len","len","move_index","new","new","new_mut","next","next","next","next","next","next","next","next","next","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","nth","nth","nth","nth","nth","nth","nth","nth","nth","nth_back","nth_back","nth_back","nth_back","nth_back","nth_back","nth_back","nth_back","nth_back","or_default","or_insert","or_insert_with","or_insert_with_key","partial_cmp","partition_point","partition_point","pop","remove","remove","remove_entry","remove_entry","reserve","reserve_exact","retain","retain2","retain2","reverse","shift_remove","shift_remove","shift_remove_entry","shift_remove_entry","shift_remove_full","shift_remove_index","shrink_to","shrink_to_fit","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","sort_by","sort_by_cached_key","sort_keys","sort_unstable_by","sort_unstable_keys","sorted_by","sorted_unstable_by","split_at","split_at_mut","split_first","split_first_mut","split_last","split_last_mut","split_off","swap_indices","swap_remove","swap_remove","swap_remove_entry","swap_remove_entry","swap_remove_full","swap_remove_index","to_owned","to_owned","to_owned","to_owned","truncate","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_reserve","try_reserve_exact","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","values","values","values_mut","values_mut","with_capacity","with_capacity_and_hasher","with_hasher","Difference","Drain","IndexSet","Intersection","IntoIter","Iter","Slice","SymmetricDifference","Union","as_slice","as_slice","as_slice","as_slice","binary_search","binary_search","binary_search_by","binary_search_by","binary_search_by_key","binary_search_by_key","bitand","bitor","bitxor","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","capacity","clear","clone","clone","clone","clone","clone","clone","clone_from","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","collect","collect","collect","compare","contains","count","count","count","default","default","default","default","difference","drain","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","extend","extend","first","first","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fold","fold","from","from","from","from","from","from","from","from","from","from_iter","get","get_full","get_index","get_index","get_index_of","get_range","get_range","hash","hasher","index","index","index","index","index","index","index","index","index","index","index","index","index","index","index","index","insert","insert_full","intersection","into","into","into","into","into","into","into","into","into_boxed_slice","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","is_disjoint","is_empty","is_empty","is_subset","is_superset","iter","iter","last","last","last","last","last","len","len","len","len","len","move_index","new","new","next","next","next","next","next","next","next","next_back","next_back","next_back","next_back","next_back","next_back","next_back","nth","nth","nth","nth_back","nth_back","nth_back","partial_cmp","partition_point","partition_point","pop","remove","replace","replace_full","reserve","reserve_exact","retain","reverse","rfold","rfold","shift_remove","shift_remove_full","shift_remove_index","shift_take","shrink_to","shrink_to_fit","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","sort","sort_by","sort_by_cached_key","sort_unstable","sort_unstable_by","sorted_by","sorted_unstable_by","split_at","split_first","split_last","split_off","sub","swap_indices","swap_remove","swap_remove_full","swap_remove_index","swap_take","symmetric_difference","take","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","truncate","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_reserve","try_reserve_exact","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","union","with_capacity","with_capacity_and_hasher","with_hasher"],"q":[[0,"indexmap"],[26,"indexmap::map"],[458,"indexmap::set"],[731,"core::fmt"],[732,"core::fmt"],[733,"core::result"],[734,"core::any"],[735,"core::ops::function"],[736,"core::ops::function"],[737,"core::cmp"],[738,"core::hash"],[739,"core::cmp"],[740,"core::marker"],[741,"core::default"],[742,"core::ops::range"],[743,"core::cmp"],[744,"core::fmt"],[745,"core::hash"],[746,"core::cmp"]],"d":["Key equivalence trait.","","","The error type for <code>try_reserve</code> methods.","","","","","","Compare self to <code>key</code> and return <code>true</code> if they are equal.","","","","","","Returns the argument unchanged.","Create an <code>IndexMap</code> from a list of key-value pairs","Create an <code>IndexSet</code> from a list of values","Calls <code>U::from(self)</code>.","<code>IndexMap</code> is a hash table where the iteration order of the …","A hash set implemented using <code>IndexMap</code>","","","","","","A draining iterator over the entries of a <code>IndexMap</code>.","Entry for an existing key-value pair or a vacant location …","A hash table where the iteration order of the key-value …","An owning iterator over the entries of a <code>IndexMap</code>.","An owning iterator over the keys of a <code>IndexMap</code>.","An owning iterator over the values of a <code>IndexMap</code>.","An iterator over the entries of a <code>IndexMap</code>.","A mutable iterator over the entries of a <code>IndexMap</code>.","","An iterator over the keys of a <code>IndexMap</code>.","Opt-in mutable access to keys.","Existing slot with equivalent key.","A view into an occupied entry in a <code>IndexMap</code>. It is part of …","A dynamically-sized slice of key-value pairs in an <code>IndexMap</code>…","Vacant slot (no equivalent key in the map).","A view into a vacant entry in a <code>IndexMap</code>. It is part of …","","An iterator over the values of a <code>IndexMap</code>.","A mutable iterator over the values of a <code>IndexMap</code>.","Modifies the entry if it is occupied.","Returns a mutable slice of the remaining entries in the …","Returns a mutable slice of all the key-value pairs in the …","Returns a slice of the remaining entries in the iterator.","Returns a slice of the remaining entries in the iterator.","Returns a slice of the remaining entries in the iterator.","Returns a slice of the remaining entries in the iterator.","Returns a slice of all the key-value pairs in the map.","Search over a sorted map with a comparator function.","Search over a sorted map with a comparator function.","Search over a sorted map with an extraction function.","Search over a sorted map with an extraction function.","Search over a sorted map for a key.","Search over a sorted map for a key.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Return the number of elements the map can hold without …","Remove all key-value pairs in the map, while preserving …","","","","","","","","","","","","","","","","","","","","","Return <code>true</code> if an equivalent to <code>key</code> exists in the map.","","","","","","","","","","","","","","","","","","","","Return an empty <code>IndexMap</code>","Clears the <code>IndexMap</code> in the given index range, returning …","Get the given key’s corresponding entry in the map for …","","","","","","","","","Extend the map with all key-value pairs in the iterable.","Extend the map with all key-value pairs in the iterable.","Get the first key-value pair.","Get the first key-value pair","Get the first key-value pair, with mutable access to the …","Get the first key-value pair, with mutable access to the …","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Examples","Returns the argument unchanged.","Create an <code>IndexMap</code> from the sequence of key-value pairs in …","Gets a reference to the entry’s value in the map.","Return a reference to the value stored for <code>key</code>, if it is …","Return item index, key and value","","Return item index, mutable reference to key and value","","Get a key-value pair by index.","Get a key-value pair by index","Get a key-value pair by index, with mutable access to the …","Get a key-value pair by index","Return mutable reference to key and value at an index.","","Return item index, if it exists in the map","Return references to the key-value pair stored for <code>key</code>, if …","Gets a mutable reference to the entry’s value in the map.","","Returns a slice of key-value pairs in the given range of …","Returns a slice of key-value pairs in the given range of …","Returns a mutable slice of key-value pairs in the given …","Returns a mutable slice of key-value pairs in the given …","","Return a reference to the map’s <code>BuildHasher</code>.","Return the index of the key-value pair","Return the index where the key-value pair exists or will …","Return the index where the key-value pair will be inserted.","","","","","","","","","Returns a reference to the value at the supplied <code>index</code>.","","","","","Returns a reference to the value corresponding to the …","","","","","","","","","","","","","","","","Returns a mutable reference to the value at the supplied …","","","Returns a mutable reference to the value corresponding to …","","Sets the value of the entry to <code>value</code>, and returns the entry…","Inserts the entry’s key and the given value into the …","Insert a key-value pair in the map.","Insert a key-value pair in the map, and get their index.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Converts into a boxed slice of all the key-value pairs in …","","","","","","","","","","","","","","","Takes ownership of the key, leaving the entry vacant.","Return an owning iterator over the keys of the map slice.","Return an owning iterator over the keys of the map, in …","Converts into a mutable reference to the entry’s value …","Returns a mutable slice of the remaining entries in the …","Return an owning iterator over the values of the map slice.","Return an owning iterator over the values of the map, in …","Returns true if the map slice contains no elements.","Returns true if the map contains no elements.","Return an iterator over the key-value pairs of the map …","Return an iterator over the key-value pairs of the map, in …","Return an iterator over the key-value pairs of the map …","Return an iterator over the key-value pairs of the map, in …","Gets a reference to the entry’s key in the map.","Gets a reference to the entry’s key, either within the …","Gets a reference to the key that was used to find the …","Return an iterator over the keys of the map slice.","Return an iterator over the keys of the map, in their order","","","","","","","","","","Get the last key-value pair.","Get the last key-value pair","Get the last key-value pair, with mutable access to the …","Get the last key-value pair, with mutable access to the …","","","","","","","","","","Return the number of key-value pairs in the map slice.","Return the number of key-value pairs in the map.","Moves the position of a key-value pair from one index to …","Returns an empty slice.","Create a new map. (Does not allocate.)","Returns an empty mutable slice.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Inserts a default-constructed value in the entry if it is …","Inserts the given default value in the entry if it is …","Inserts the result of the <code>call</code> function in the entry if it …","Inserts the result of the <code>call</code> function with a reference …","","Returns the index of the partition point of a sorted map …","Returns the index of the partition point of a sorted map …","Remove the last key-value pair","Remove the key, value pair stored in the map for this …","Remove the key-value pair equivalent to <code>key</code> and return its …","Remove and return the key, value pair stored in the map …","Remove and return the key-value pair equivalent to <code>key</code>.","Reserve capacity for <code>additional</code> more key-value pairs.","Reserve capacity for <code>additional</code> more key-value pairs, …","Scan through each key-value pair in the map and keep those …","Scan through each key-value pair in the map and keep those …","","Reverses the order of the map’s key-value pairs in place.","Remove the key, value pair stored in the map for this …","Remove the key-value pair equivalent to <code>key</code> and return its …","Remove and return the key, value pair stored in the map …","Remove and return the key-value pair equivalent to <code>key</code>.","Remove the key-value pair equivalent to <code>key</code> and return it …","Remove the key-value pair by index","Shrink the capacity of the map with a lower limit.","Shrink the capacity of the map as much as possible.","","","","","","","","","","Sort the map’s key-value pairs in place using the …","Sort the map’s key-value pairs in place using a sort-key …","Sort the map’s key-value pairs by the default ordering …","Sort the map’s key-value pairs in place using the …","Sort the map’s key-value pairs by the default ordering …","Sort the key-value pairs of the map and return a by-value …","Sort the key-value pairs of the map and return a by-value …","Divides one slice into two at an index.","Divides one mutable slice into two at an index.","Returns the first key-value pair and the rest of the slice,","Returns the first key-value pair and the rest of the slice,","Returns the last key-value pair and the rest of the slice, …","Returns the last key-value pair and the rest of the slice, …","Splits the collection into two at the given index.","Swaps the position of two key-value pairs in the map.","Remove the key, value pair stored in the map for this …","Remove the key-value pair equivalent to <code>key</code> and return its …","Remove and return the key, value pair stored in the map …","Remove and return the key-value pair equivalent to <code>key</code>.","Remove the key-value pair equivalent to <code>key</code> and return it …","Remove the key-value pair by index","","","","","Shortens the map, keeping the first <code>len</code> elements and …","","","","","","","","","","","","","","","","","","","","","","","","","","","Try to reserve capacity for <code>additional</code> more key-value …","Try to reserve capacity for <code>additional</code> more key-value …","","","","","","","","","","","","","","","Return an iterator over the values of the map slice.","Return an iterator over the values of the map, in their …","Return an iterator over mutable references to the the …","Return an iterator over mutable references to the values …","Create a new map with capacity for <code>n</code> key-value pairs. …","Create a new map with capacity for <code>n</code> key-value pairs. …","Create a new map with <code>hash_builder</code>.","A lazy iterator producing elements in the difference of …","A draining iterator over the items of a <code>IndexSet</code>.","A hash set where the iteration order of the values is …","A lazy iterator producing elements in the intersection of …","An owning iterator over the items of a <code>IndexSet</code>.","An iterator over the items of a <code>IndexSet</code>.","A dynamically-sized slice of values in an <code>IndexSet</code>.","A lazy iterator producing elements in the symmetric …","A lazy iterator producing elements in the union of <code>IndexSet</code>…","Returns a slice of the remaining entries in the iterator.","Returns a slice of the remaining entries in the iterator.","Returns a slice of the remaining entries in the iterator.","Returns a slice of all the values in the set.","Search over a sorted set for a value.","Search over a sorted set for a value.","Search over a sorted set with a comparator function.","Search over a sorted set with a comparator function.","Search over a sorted set with an extraction function.","Search over a sorted set with an extraction function.","Returns the set intersection, cloned into a new set.","Returns the set union, cloned into a new set.","Returns the set symmetric-difference, cloned into a new …","","","","","","","","","","","","","","","","","","","Return the number of elements the set can hold without …","Remove all elements in the set, while preserving its …","","","","","","","","","","","","","","","","","","","Return <code>true</code> if an equivalent to <code>value</code> exists in the set.","","","","","","","Return an empty <code>IndexSet</code>","Return an iterator over the values that are in <code>self</code> but …","Clears the <code>IndexSet</code> in the given index range, returning …","","","","","","","","","","","Get the first value.","Get the first value","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Examples","Returns the argument unchanged.","","Return a reference to the value stored in the set, if it …","Return item index and value","Get a value by index.","Get a value by index","Return item index, if it exists in the set","Returns a slice of values in the given range of indices.","Returns a slice of values in the given range of indices.","","Return a reference to the set’s <code>BuildHasher</code>.","","","","","","","","","","","","","","","","Returns a reference to the value at the supplied <code>index</code>.","Insert the value into the set.","Insert the value into the set, and get its index.","Return an iterator over the values that are in both <code>self</code> …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Converts into a boxed slice of all the values in the set.","","","","","","","","","","","Returns <code>true</code> if <code>self</code> has no elements in common with <code>other</code>.","Returns true if the set slice contains no elements.","Returns true if the set contains no elements.","Returns <code>true</code> if all elements of <code>self</code> are contained in <code>other</code>…","Returns <code>true</code> if all elements of <code>other</code> are contained in <code>self</code>…","Return an iterator over the values of the set slice.","Return an iterator over the values of the set, in their …","","","","Get the last value.","Get the last value","","","","Return the number of elements in the set slice.","Return the number of elements in the set.","Moves the position of a value from one index to another by …","Returns an empty slice.","Create a new set. (Does not allocate.)","","","","","","","","","","","","","","","","","","","","","","Returns the index of the partition point of a sorted set …","Returns the index of the partition point of a sorted set …","Remove the last value","Remove the value from the set, and return <code>true</code> if it was …","Adds a value to the set, replacing the existing value, if …","Adds a value to the set, replacing the existing value, if …","Reserve capacity for <code>additional</code> more values.","Reserve capacity for <code>additional</code> more values, without …","Scan through each value in the set and keep those where the","Reverses the order of the set’s values in place.","","","Remove the value from the set, and return <code>true</code> if it was …","Remove the value from the set return it and the index it …","Remove the value by index","Removes and returns the value in the set, if any, that is …","Shrink the capacity of the set with a lower limit.","Shrink the capacity of the set as much as possible.","","","","","","","","Sort the set’s values by their default ordering.","Sort the set’s values in place using the comparison …","Sort the set’s values in place using a key extraction …","Sort the set’s values by their default ordering.","Sort the set’s values in place using the comparison …","Sort the values of the set and return a by-value iterator …","Sort the values of the set and return a by-value iterator …","Divides one slice into two at an index.","Returns the first value and the rest of the slice, or <code>None</code> …","Returns the last value and the rest of the slice, or <code>None</code> …","Splits the collection into two at the given index.","Returns the set difference, cloned into a new set.","Swaps the position of two values in the set.","Remove the value from the set, and return <code>true</code> if it was …","Remove the value from the set return it and the index it …","Remove the value by index","Removes and returns the value in the set, if any, that is …","Return an iterator over the values that are in <code>self</code> or …","Removes and returns the value in the set, if any, that is …","","","","","","","Shortens the set, keeping the first <code>len</code> elements and …","","","","","","","","","","","","","","","","","Try to reserve capacity for <code>additional</code> more values.","Try to reserve capacity for <code>additional</code> more values, …","","","","","","","","","","Return an iterator over all values that are in <code>self</code> or …","Create a new set with capacity for <code>n</code> elements. (Does not …","Create a new set with capacity for <code>n</code> elements. (Does not …","Create a new set with <code>hash_builder</code>."],"i":[0,0,0,0,1,1,1,1,1,31,1,1,1,1,1,1,0,0,1,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,63,0,0,9,0,0,9,0,63,0,0,9,11,13,14,15,11,16,13,12,13,12,13,12,13,39,9,41,14,15,11,16,23,28,24,29,30,12,13,39,9,41,14,15,11,16,23,28,24,29,30,12,13,13,13,14,23,24,13,13,14,23,24,13,12,14,15,11,16,23,28,24,29,30,12,13,14,15,11,16,23,28,24,29,30,14,15,11,23,28,24,29,30,12,12,13,13,13,12,13,12,12,12,13,13,13,13,13,12,13,12,13,39,9,41,14,15,11,16,23,28,24,29,30,12,13,39,9,41,14,15,11,16,23,28,24,29,30,13,13,13,39,13,13,13,63,13,12,13,12,13,63,13,13,13,39,13,12,13,12,13,12,13,39,9,41,12,12,12,12,12,12,12,12,13,13,13,13,13,13,13,13,13,12,12,12,12,12,12,12,12,13,13,13,13,13,13,13,13,13,39,41,13,13,39,9,41,14,15,11,16,23,28,24,29,30,13,13,14,15,11,16,23,28,24,29,30,12,12,13,13,13,41,12,13,39,15,12,13,12,13,12,13,12,13,39,9,41,12,13,14,15,11,16,23,28,24,29,30,12,13,12,13,14,15,11,16,23,28,24,29,30,12,13,13,12,13,12,14,15,11,16,23,28,24,29,30,14,15,11,16,23,28,24,29,30,14,15,11,16,23,28,24,29,30,14,15,11,16,23,28,24,29,30,9,9,9,9,12,12,13,13,39,13,39,13,13,13,13,63,13,13,39,13,39,13,13,13,13,13,14,15,11,16,23,28,24,29,30,13,13,13,13,13,13,13,12,12,12,12,12,12,13,13,39,13,39,13,13,13,14,23,24,13,13,39,9,41,14,15,11,16,23,28,24,29,30,13,39,9,41,14,15,11,16,23,28,24,29,30,13,13,13,39,9,41,14,15,11,16,23,28,24,29,30,12,13,12,13,12,13,13,13,13,0,0,0,0,0,0,0,0,0,54,56,57,58,55,58,55,58,55,58,58,58,58,54,56,57,59,60,61,62,55,58,54,56,57,59,60,61,62,55,58,58,58,54,59,60,61,62,58,58,54,59,60,61,62,58,55,54,56,57,55,58,54,56,57,54,56,55,58,58,58,55,58,55,55,55,58,58,58,58,58,55,58,54,56,57,59,60,61,62,55,58,61,62,54,56,57,59,60,61,62,58,58,58,58,58,55,58,58,55,58,55,58,55,55,55,55,55,55,55,55,58,58,58,58,58,58,58,58,58,58,58,54,56,57,59,60,61,62,58,58,54,56,57,59,60,61,62,55,58,58,58,55,58,58,58,55,58,54,56,57,55,58,54,56,57,55,58,58,55,58,54,56,57,59,60,61,62,54,56,57,59,60,61,62,54,56,57,54,56,57,55,55,58,58,58,58,58,58,58,58,58,61,62,58,58,58,58,58,58,54,56,57,59,60,61,62,58,58,58,58,58,58,58,55,55,55,58,58,58,58,58,58,58,58,58,54,59,60,61,62,58,58,54,56,57,59,60,61,62,58,54,56,57,59,60,61,62,58,58,58,54,56,57,59,60,61,62,55,58,58,58,58,58],"f":[0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[1,1],[[-1,-2],2,[],[]],[[1,1],3],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[1,4],5],[[1,4],5],[-1,-1,[]],0,0,[-1,-2,[],[]],0,0,[-1,-2,[],[]],[-1,6,[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,8,[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[[9,[-1,-2]],-3],[[9,[-1,-2]]],[],[],10],[[[11,[-1,-2]]],[[12,[-1,-2]]],[],[]],[[[13,[-1,-2,-3]]],[[12,[-1,-2]]],[],[],[]],[[[14,[-1,-2]]],[[12,[-1,-2]]],[],[]],[[[15,[-1,-2]]],[[12,[-1,-2]]],[],[]],[[[11,[-1,-2]]],[[12,[-1,-2]]],[],[]],[[[16,[-1,-2]]],[[12,[-1,-2]]],[],[]],[[[13,[-1,-2,-3]]],[[12,[-1,-2]]],[],[],[]],[[[12,[-1,-2]],-3],[[7,[17,17]]],[],[],18],[[[13,[-1,-2,-3]],-4],[[7,[17,17]]],[19,20],[],21,18],[[[12,[-1,-2]],-3,-4],[[7,[17,17]]],[],[],22,18],[[[13,[-1,-2,-3]],-4,-5],[[7,[17,17]]],[19,20],[],21,22,18],[[[12,[-1,-2]],-1],[[7,[17,17]]],22,[]],[[[13,[-1,-2,-3]],-1],[[7,[17,17]]],[22,19,20],[],21],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[13,[-1,-2,-3]]],17,[],[],[]],[[[13,[-1,-2,-3]]],2,[],[],[]],[[[14,[-1,-2]]],[[14,[-1,-2]]],[],[]],[[[23,[-1,-2]]],[[23,[-1,-2]]],[],[]],[[[24,[-1,-2]]],[[24,[-1,-2]]],[],[]],[[[13,[-1,-2,-3]]],[[13,[-1,-2,-3]]],25,25,25],[[[13,[-1,-2,-3]],[13,[-1,-2,-3]]],2,25,25,25],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[[12,[-1,-2]],[12,[-1,-2]]],26,22,22],[[[14,[-1,-2]]],-3,[],[],27],[[[15,[-1,-2]]],-3,[],[],27],[[[11,[-1,-2]]],-3,[],[],27],[[[16,[-1,-2]]],-3,[],[],27],[[[23,[-1,-2]]],-3,[],[],27],[[[28,[-1,-2]]],-3,[],[],27],[[[24,[-1,-2]]],-3,[],[],27],[[[29,[-1,-2]]],-3,[],[],27],[[[30,[-1,-2]]],-3,[],[],27],[[-1,-2],26,[],[]],[[[13,[-1,-2,-3]],-4],3,[19,20],[],21,[19,[31,[-1]],32]],[[[14,[-1,-2]]],17,[],[]],[[[15,[-1,-2]]],17,[],[]],[[[11,[-1,-2]]],17,[],[]],[[[16,[-1,-2]]],17,[],[]],[[[23,[-1,-2]]],17,[],[]],[[[28,[-1,-2]]],17,[],[]],[[[24,[-1,-2]]],17,[],[]],[[[29,[-1,-2]]],17,[],[]],[[[30,[-1,-2]]],17,[],[]],[[],[[14,[-1,-2]]],[],[]],[[],[[15,[-1,-2]]],[],[]],[[],[[11,[-1,-2]]],[],[]],[[],[[23,[-1,-2]]],[],[]],[[],[[28,[-1,-2]]],[],[]],[[],[[24,[-1,-2]]],[],[]],[[],[[29,[-1,-2]]],[],[]],[[],[[30,[-1,-2]]],[],[]],[[],[[12,[-1,-2]]],[],[]],[[],[[12,[-1,-2]]],[],[]],[[],[[13,[-1,-2,-3]]],[],[],33],[[[13,[-1,-2,-3]],-4],[[16,[-1,-2]]],[],[],[],[[34,[17]]]],[[[13,[-1,-2,-3]],-1],[[9,[-1,-2]]],[19,20],[],21],[[[12,[-1,-2]],[12,[-1,-2]]],3,35,35],[[[13,[-1,-3,-4]],[13,[-1,-2,-5]]],3,[19,20],[],[[35,[-2]]],21,21],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[[13,[-1,-2,-3]],-4],2,[19,20],[],21,36],[[[13,[-1,-2,-3]],-4],2,[19,20,37],37,21,36],[[[12,[-1,-2]]],[[38,[[2,[-1,-2]]]]],[],[]],[[[13,[-1,-2,-3]]],[[38,[[2,[-1,-2]]]]],[],[],[]],[[[12,[-1,-2]]],[[38,[[2,[-1,-2]]]]],[],[]],[[[13,[-1,-2,-3]]],[[38,[[2,[-1,-2]]]]],[],[],[]],[[[39,[-1,-2]],4],5,40,40],[[[9,[-1,-2]],4],5,40,40],[[[41,[-1,-2]],4],5,40,[]],[[[14,[-1,-2]],4],5,40,40],[[[15,[-1,-2]],4],5,40,40],[[[11,[-1,-2]],4],5,40,40],[[[16,[-1,-2]],4],5,40,40],[[[23,[-1,-2]],4],5,40,[]],[[[28,[-1,-2]],4],5,40,[]],[[[24,[-1,-2]],4],5,[],40],[[[29,[-1,-2]],4],5,[],40],[[[30,[-1,-2]],4],5,[],40],[[[12,[-1,-2]],4],5,40,40],[[[13,[-1,-2,-3]],4],5,40,40,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[[42,[[2,[-1,-2]]]]],[[13,[-1,-2,43]]],[19,20],[]],[-1,-1,[]],[-1,[[13,[-2,-3,-4]]],36,[19,20],[],[21,33]],[[[39,[-1,-2]]],-2,[],[]],[[[13,[-1,-2,-3]],-4],[[38,[-2]]],[19,20],[],21,[19,[31,[-1]],32]],[[[13,[-1,-2,-3]],-4],[[38,[[2,[17,-1,-2]]]]],[19,20],[],21,[19,[31,[-1]],32]],[[[13,[-1,-2,-3]],-4],[[38,[[2,[17,-1,-2]]]]],[19,20],[],21,[19,[31,[-1]],32]],[[-1,-2],[[38,[[2,[17]]]]],[],[19,31,32]],[[[13,[-1,-2,-3]],-4],[[38,[[2,[17,-1,-2]]]]],[20,19],[],21,[19,[31,[-1]],32]],[[[12,[-1,-2]],17],[[38,[[2,[-1,-2]]]]],[],[]],[[[13,[-1,-2,-3]],17],[[38,[[2,[-1,-2]]]]],[],[],[]],[[[12,[-1,-2]],17],[[38,[[2,[-1,-2]]]]],[],[]],[[[13,[-1,-2,-3]],17],[[38,[[2,[-1,-2]]]]],[],[],[]],[[-1,17],[[38,[2]]],[]],[[[13,[-1,-2,-3]],17],[[38,[[2,[-1,-2]]]]],[20,19],[],21],[[[13,[-1,-2,-3]],-4],[[38,[17]]],[19,20],[],21,[19,[31,[-1]],32]],[[[13,[-1,-2,-3]],-4],[[38,[[2,[-1,-2]]]]],[19,20],[],21,[19,[31,[-1]],32]],[[[39,[-1,-2]]],-2,[],[]],[[[13,[-1,-2,-3]],-4],[[38,[-2]]],[19,20],[],21,[19,[31,[-1]],32]],[[[12,[-1,-2]],-3],[[38,[[12,[-1,-2]]]]],[],[],[[34,[17]]]],[[[13,[-1,-2,-3]],-4],[[38,[[12,[-1,-2]]]]],[],[],[],[[34,[17]]]],[[[12,[-1,-2]],-3],[[38,[[12,[-1,-2]]]]],[],[],[[34,[17]]]],[[[13,[-1,-2,-3]],-4],[[38,[[12,[-1,-2]]]]],[],[],[],[[34,[17]]]],[[[12,[-1,-2]],-3],2,19,19,44],[[[13,[-1,-2,-3]]],-3,[],[],[]],[[[39,[-1,-2]]],17,[],[]],[[[9,[-1,-2]]],17,[],[]],[[[41,[-1,-2]]],17,[],[]],[[[12,[-1,-2]],17],-2,[],[]],[[[12,[-1,-2]],[45,[17]]],[[12,[-1,-2]]],[],[]],[[[12,[-1,-2]],46],[[12,[-1,-2]]],[],[]],[[[12,[-1,-2]],[47,[17]]],[[12,[-1,-2]]],[],[]],[[[12,[-1,-2]],[48,[17]]],[[12,[-1,-2]]],[],[]],[[[12,[-1,-2]],[49,[17]]],[[12,[-1,-2]]],[],[]],[[[12,[-1,-2]],[50,[17]]],[[12,[-1,-2]]],[],[]],[[[12,[-1,-2]],[2,[[51,[17]],[51,[17]]]]],[[12,[-1,-2]]],[],[]],[[[13,[-1,-2,-3]],17],-2,[],[],[]],[[[13,[-1,-2,-3]],46],[],[],[],[]],[[[13,[-1,-2,-3]],[48,[17]]],[],[],[],[]],[[[13,[-1,-2,-3]],[50,[17]]],[],[],[],[]],[[[13,[-1,-2,-3]],[2,[[51,[17]],[51,[17]]]]],[],[],[],[]],[[[13,[-1,-2,-3]],-4],-2,[19,20],[],21,[19,[31,[-1]],32]],[[[13,[-1,-2,-3]],[49,[17]]],[],[],[],[]],[[[13,[-1,-2,-3]],[45,[17]]],[],[],[],[]],[[[13,[-1,-2,-3]],[47,[17]]],[],[],[],[]],[[[12,[-1,-2]],[47,[17]]],[[12,[-1,-2]]],[],[]],[[[12,[-1,-2]],17],-2,[],[]],[[[12,[-1,-2]],[48,[17]]],[[12,[-1,-2]]],[],[]],[[[12,[-1,-2]],[45,[17]]],[[12,[-1,-2]]],[],[]],[[[12,[-1,-2]],[2,[[51,[17]],[51,[17]]]]],[[12,[-1,-2]]],[],[]],[[[12,[-1,-2]],[49,[17]]],[[12,[-1,-2]]],[],[]],[[[12,[-1,-2]],[50,[17]]],[[12,[-1,-2]]],[],[]],[[[12,[-1,-2]],46],[[12,[-1,-2]]],[],[]],[[[13,[-1,-2,-3]],[47,[17]]],[],[],[],[]],[[[13,[-1,-2,-3]],[45,[17]]],[],[],[],[]],[[[13,[-1,-2,-3]],[48,[17]]],[],[],[],[]],[[[13,[-1,-2,-3]],46],[],[],[],[]],[[[13,[-1,-2,-3]],17],-2,[],[],[]],[[[13,[-1,-2,-3]],[2,[[51,[17]],[51,[17]]]]],[],[],[],[]],[[[13,[-1,-2,-3]],[50,[17]]],[],[],[],[]],[[[13,[-1,-2,-3]],-4],-2,[19,20],[],21,[19,[31,[-1]],32]],[[[13,[-1,-2,-3]],[49,[17]]],[],[],[],[]],[[[39,[-1,-2]],-2],-2,[],[]],[[[41,[-1,-2]],-2],-2,[],[]],[[[13,[-1,-2,-3]],-1,-2],[[38,[-2]]],[19,20],[],21],[[[13,[-1,-2,-3]],-1,-2],[[2,[17,[38,[-2]]]]],[19,20],[],21],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[13,[-1,-2,-3]]],[[52,[[12,[-1,-2]]]]],[],[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[12,[-1,-2]]],[],[],[]],[[[12,[-1,-2]]],[],[],[]],[[[13,[-1,-2,-3]]],[],[],[],[]],[[[13,[-1,-2,-3]]],[],[],[],[]],[[[13,[-1,-2,-3]]],[],[],[],[]],[[[41,[-1,-2]]],-1,[],[]],[[[52,[[12,[-1,-2]]]]],[[28,[-1,-2]]],[],[]],[[[13,[-1,-2,-3]]],[[28,[-1,-2]]],[],[],[]],[[[39,[-1,-2]]],-2,[],[]],[[[15,[-1,-2]]],[[12,[-1,-2]]],[],[]],[[[52,[[12,[-1,-2]]]]],[[30,[-1,-2]]],[],[]],[[[13,[-1,-2,-3]]],[[30,[-1,-2]]],[],[],[]],[[[12,[-1,-2]]],3,[],[]],[[[13,[-1,-2,-3]]],3,[],[],[]],[[[12,[-1,-2]]],[[14,[-1,-2]]],[],[]],[[[13,[-1,-2,-3]]],[[14,[-1,-2]]],[],[],[]],[[[12,[-1,-2]]],[[15,[-1,-2]]],[],[]],[[[13,[-1,-2,-3]]],[[15,[-1,-2]]],[],[],[]],[[[39,[-1,-2]]],-1,[],[]],[[[9,[-1,-2]]],-1,[],[]],[[[41,[-1,-2]]],-1,[],[]],[[[12,[-1,-2]]],[[23,[-1,-2]]],[],[]],[[[13,[-1,-2,-3]]],[[23,[-1,-2]]],[],[],[]],[[[14,[-1,-2]]],38,[],[]],[[[15,[-1,-2]]],38,[],[]],[[[11,[-1,-2]]],38,[],[]],[[[16,[-1,-2]]],38,[],[]],[[[23,[-1,-2]]],38,[],[]],[[[28,[-1,-2]]],38,[],[]],[[[24,[-1,-2]]],38,[],[]],[[[29,[-1,-2]]],38,[],[]],[[[30,[-1,-2]]],38,[],[]],[[[12,[-1,-2]]],[[38,[[2,[-1,-2]]]]],[],[]],[[[13,[-1,-2,-3]]],[[38,[[2,[-1,-2]]]]],[],[],[]],[[[12,[-1,-2]]],[[38,[[2,[-1,-2]]]]],[],[]],[[[13,[-1,-2,-3]]],[[38,[[2,[-1,-2]]]]],[],[],[]],[[[14,[-1,-2]]],17,[],[]],[[[15,[-1,-2]]],17,[],[]],[[[11,[-1,-2]]],17,[],[]],[[[16,[-1,-2]]],17,[],[]],[[[23,[-1,-2]]],17,[],[]],[[[28,[-1,-2]]],17,[],[]],[[[24,[-1,-2]]],17,[],[]],[[[29,[-1,-2]]],17,[],[]],[[[30,[-1,-2]]],17,[],[]],[[[12,[-1,-2]]],17,[],[]],[[[13,[-1,-2,-3]]],17,[],[],[]],[[[13,[-1,-2,-3]],17,17],2,[],[],[]],[[],[[12,[-1,-2]]],[],[]],[[],[[13,[-1,-2]]],[],[]],[[],[[12,[-1,-2]]],[],[]],[[[14,[-1,-2]]],38,[],[]],[[[15,[-1,-2]]],38,[],[]],[[[11,[-1,-2]]],38,[],[]],[[[16,[-1,-2]]],38,[],[]],[[[23,[-1,-2]]],38,[],[]],[[[28,[-1,-2]]],38,[],[]],[[[24,[-1,-2]]],38,[],[]],[[[29,[-1,-2]]],38,[],[]],[[[30,[-1,-2]]],38,[],[]],[[[14,[-1,-2]]],38,[],[]],[[[15,[-1,-2]]],38,[],[]],[[[11,[-1,-2]]],38,[],[]],[[[16,[-1,-2]]],38,[],[]],[[[23,[-1,-2]]],38,[],[]],[[[28,[-1,-2]]],38,[],[]],[[[24,[-1,-2]]],38,[],[]],[[[29,[-1,-2]]],38,[],[]],[[[30,[-1,-2]]],38,[],[]],[[[14,[-1,-2]],17],38,[],[]],[[[15,[-1,-2]],17],38,[],[]],[[[11,[-1,-2]],17],38,[],[]],[[[16,[-1,-2]],17],38,[],[]],[[[23,[-1,-2]],17],38,[],[]],[[[28,[-1,-2]],17],38,[],[]],[[[24,[-1,-2]],17],38,[],[]],[[[29,[-1,-2]],17],38,[],[]],[[[30,[-1,-2]],17],38,[],[]],[[[14,[-1,-2]],17],38,[],[]],[[[15,[-1,-2]],17],38,[],[]],[[[11,[-1,-2]],17],38,[],[]],[[[16,[-1,-2]],17],38,[],[]],[[[23,[-1,-2]],17],38,[],[]],[[[28,[-1,-2]],17],38,[],[]],[[[24,[-1,-2]],17],38,[],[]],[[[29,[-1,-2]],17],38,[],[]],[[[30,[-1,-2]],17],38,[],[]],[[[9,[-1,-2]]],-2,[],33],[[[9,[-1,-2]],-2],-2,[],[]],[[[9,[-1,-2]],-3],-2,[],[],10],[[[9,[-1,-2]],-3],-2,[],[],10],[[[12,[-1,-2]],[12,[-1,-2]]],[[38,[26]]],53,53],[[[12,[-1,-2]],-3],17,[],[],18],[[[13,[-1,-2,-3]],-4],17,[19,20],[],21,18],[[[13,[-1,-2,-3]]],[[38,[[2,[-1,-2]]]]],[19,20],[],21],[[[39,[-1,-2]]],-2,[],[]],[[[13,[-1,-2,-3]],-4],[[38,[-2]]],[19,20],[],21,[19,[31,[-1]],32]],[[[39,[-1,-2]]],[[2,[-1,-2]]],[],[]],[[[13,[-1,-2,-3]],-4],[[38,[[2,[-1,-2]]]]],[19,20],[],21,[19,[31,[-1]],32]],[[[13,[-1,-2,-3]],17],2,[19,20],[],21],[[[13,[-1,-2,-3]],17],2,[19,20],[],21],[[[13,[-1,-2,-3]],-4],2,[19,20],[],21,18],[[-1,-2],2,[],18],[[[13,[-1,-2,-3]],-4],2,[20,19],[],21,18],[[[13,[-1,-2,-3]]],2,[19,20],[],21],[[[39,[-1,-2]]],-2,[],[]],[[[13,[-1,-2,-3]],-4],[[38,[-2]]],[19,20],[],21,[19,[31,[-1]],32]],[[[39,[-1,-2]]],[[2,[-1,-2]]],[],[]],[[[13,[-1,-2,-3]],-4],[[38,[[2,[-1,-2]]]]],[19,20],[],21,[19,[31,[-1]],32]],[[[13,[-1,-2,-3]],-4],[[38,[[2,[17,-1,-2]]]]],[19,20],[],21,[19,[31,[-1]],32]],[[[13,[-1,-2,-3]],17],[[38,[[2,[-1,-2]]]]],[],[],[]],[[[13,[-1,-2,-3]],17],2,[19,20],[],21],[[[13,[-1,-2,-3]]],2,[19,20],[],21],[[[14,[-1,-2]]],[[2,[17,[38,[17]]]]],[],[]],[[[15,[-1,-2]]],[[2,[17,[38,[17]]]]],[],[]],[[[11,[-1,-2]]],[[2,[17,[38,[17]]]]],[],[]],[[[16,[-1,-2]]],[[2,[17,[38,[17]]]]],[],[]],[[[23,[-1,-2]]],[[2,[17,[38,[17]]]]],[],[]],[[[28,[-1,-2]]],[[2,[17,[38,[17]]]]],[],[]],[[[24,[-1,-2]]],[[2,[17,[38,[17]]]]],[],[]],[[[29,[-1,-2]]],[[2,[17,[38,[17]]]]],[],[]],[[[30,[-1,-2]]],[[2,[17,[38,[17]]]]],[],[]],[[[13,[-1,-2,-3]],-4],2,[19,20],[],21,18],[[[13,[-1,-2,-3]],-4],2,[19,20],[],21,18],[[[13,[-1,-2,-3]]],2,[22,19,20],[],21],[[[13,[-1,-2,-3]],-4],2,[19,20],[],21,18],[[[13,[-1,-2,-3]]],2,[22,19,20],[],21],[[[13,[-1,-2,-3]],-4],[[11,[-1,-2]]],[19,20],[],21,18],[[[13,[-1,-2,-3]],-4],[[11,[-1,-2]]],[19,20],[],21,18],[[[12,[-1,-2]],17],[[2,[[12,[-1,-2]],[12,[-1,-2]]]]],[],[]],[[[12,[-1,-2]],17],[[2,[[12,[-1,-2]],[12,[-1,-2]]]]],[],[]],[[[12,[-1,-2]]],[[38,[[2,[[2,[-1,-2]],[12,[-1,-2]]]]]]],[],[]],[[[12,[-1,-2]]],[[38,[[2,[[2,[-1,-2]],[12,[-1,-2]]]]]]],[],[]],[[[12,[-1,-2]]],[[38,[[2,[[2,[-1,-2]],[12,[-1,-2]]]]]]],[],[]],[[[12,[-1,-2]]],[[38,[[2,[[2,[-1,-2]],[12,[-1,-2]]]]]]],[],[]],[[[13,[-1,-2,-3]],17],[[13,[-1,-2,-3]]],[],[],25],[[[13,[-1,-2,-3]],17,17],2,[],[],[]],[[[39,[-1,-2]]],-2,[],[]],[[[13,[-1,-2,-3]],-4],[[38,[-2]]],[19,20],[],21,[19,[31,[-1]],32]],[[[39,[-1,-2]]],[[2,[-1,-2]]],[],[]],[[[13,[-1,-2,-3]],-4],[[38,[[2,[-1,-2]]]]],[19,20],[],21,[19,[31,[-1]],32]],[[[13,[-1,-2,-3]],-4],[[38,[[2,[17,-1,-2]]]]],[19,20],[],21,[19,[31,[-1]],32]],[[[13,[-1,-2,-3]],17],[[38,[[2,[-1,-2]]]]],[],[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[13,[-1,-2,-3]],17],2,[],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[[[13,[-1,-2,-3]],17],[[7,[2,1]]],[19,20],[],21],[[[13,[-1,-2,-3]],17],[[7,[2,1]]],[19,20],[],21],[-1,8,[]],[-1,8,[]],[-1,8,[]],[-1,8,[]],[-1,8,[]],[-1,8,[]],[-1,8,[]],[-1,8,[]],[-1,8,[]],[-1,8,[]],[-1,8,[]],[-1,8,[]],[-1,8,[]],[-1,8,[]],[[[12,[-1,-2]]],[[24,[-1,-2]]],[],[]],[[[13,[-1,-2,-3]]],[[24,[-1,-2]]],[],[],[]],[[[12,[-1,-2]]],[[29,[-1,-2]]],[],[]],[[[13,[-1,-2,-3]]],[[29,[-1,-2]]],[],[],[]],[17,[[13,[-1,-2]]],[],[]],[[17,-1],[[13,[-2,-3,-1]]],[],[],[]],[-1,[[13,[-2,-3,-1]]],[],[],[]],0,0,0,0,0,0,0,0,0,[[[54,[-1]]],[[55,[-1]]],[]],[[[56,[-1]]],[[55,[-1]]],[]],[[[57,[-1]]],[[55,[-1]]],[]],[[[58,[-1,-2]]],[[55,[-1]]],[],[]],[[[55,[-1]],-1],[[7,[17,17]]],22],[[[58,[-1,-2]],-1],[[7,[17,17]]],[22,19,20],21],[[[55,[-1]],-2],[[7,[17,17]]],[],18],[[[58,[-1,-2]],-3],[[7,[17,17]]],[19,20],21,18],[[[55,[-1]],-2,-3],[[7,[17,17]]],[],22,18],[[[58,[-1,-2]],-3,-4],[[7,[17,17]]],[19,20],21,22,18],[[[58,[-1,-2]],[58,[-1,-3]]],[],[20,19,25],[21,33],21],[[[58,[-1,-2]],[58,[-1,-3]]],[],[20,19,25],[21,33],21],[[[58,[-1,-2]],[58,[-1,-3]]],[],[20,19,25],[21,33],21],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[58,[-1,-2]]],17,[],[]],[[[58,[-1,-2]]],2,[],[]],[[[54,[-1]]],[[54,[-1]]],[]],[[[59,[-1,-2]]],[[59,[-1,-2]]],[],[]],[[[60,[-1,-2]]],[[60,[-1,-2]]],[],[]],[[[61,[-1,-2,-3]]],[[61,[-1,-2,-3]]],[],[],[]],[[[62,[-1,-2]]],[[62,[-1,-2]]],[],[]],[[[58,[-1,-2]]],[[58,[-1,-2]]],25,25],[[[58,[-1,-2]],[58,[-1,-2]]],2,25,25],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[[55,[-1]],[55,[-1]]],26,22],[[[54,[-1]]],-2,[],27],[[[56,[-1]]],-2,[],27],[[[57,[-1]]],-2,[],27],[[-1,-2],26,[],[]],[[[58,[-1,-2]],-3],3,[19,20],21,[19,[31,[-1]],32]],[[[54,[-1]]],17,[]],[[[56,[-1]]],17,[]],[[[57,[-1]]],17,[]],[[],[[54,[-1]]],[]],[[],[[56,[-1]]],[]],[[],[[55,[-1]]],[]],[[],[[58,[-1,-2]]],[],33],[[[58,[-1,-2]],[58,[-1,-3]]],[[59,[-1,-3]]],[19,20],21,21],[[[58,[-1,-2]],-3],[[57,[-1]]],[],[],[[34,[17]]]],[[[55,[-1]],[55,[-1]]],3,35],[[[58,[-1,-2]],[58,[-1,-3]]],3,[19,20],21,21],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[[58,[-1,-2]],-3],2,[19,20,37],21,36],[[[58,[-1,-2]],-3],2,[19,20],21,36],[[[55,[-1]]],[[38,[-1]]],[]],[[[58,[-1,-2]]],[[38,[-1]]],[],[]],[[[54,[-1]],4],5,40],[[[56,[-1]],4],5,40],[[[57,[-1]],4],5,40],[[[59,[-1,-2]],4],5,[40,20,19],21],[[[60,[-1,-2]],4],5,[40,20,19],21],[[[61,[-1,-2,-3]],4],5,[40,20,19],21,21],[[[62,[-1,-2]],4],5,[40,20,19],21],[[[55,[-1]],4],5,40],[[[58,[-1,-2]],4],5,40,[]],[[[61,[-1,-2,-3]],-4,-5],-4,[20,19],21,21,[],18],[[[62,[-1,-2]],-3,-4],-3,[20,19],21,[],18],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[[42,[-1]]],[[58,[-1,43]]],[20,19]],[-1,-1,[]],[-1,[[58,[-2,-3]]],36,[19,20],[21,33]],[[[58,[-1,-2]],-3],[[38,[-1]]],[19,20],21,[19,[31,[-1]],32]],[[[58,[-1,-2]],-3],[[38,[[2,[17,-1]]]]],[19,20],21,[19,[31,[-1]],32]],[[[55,[-1]],17],[[38,[-1]]],[]],[[[58,[-1,-2]],17],[[38,[-1]]],[],[]],[[[58,[-1,-2]],-3],[[38,[17]]],[19,20],21,[19,[31,[-1]],32]],[[[55,[-1]],-2],[[38,[[55,[-1]]]]],[],[[34,[17]]]],[[[58,[-1,-2]],-3],[[38,[[55,[-1]]]]],[],[],[[34,[17]]]],[[[55,[-1]],-2],2,19,44],[[[58,[-1,-2]]],-2,[],[]],[[[55,[-1]],46],[],[]],[[[55,[-1]],17],[],[]],[[[55,[-1]],[45,[17]]],[],[]],[[[55,[-1]],[49,[17]]],[],[]],[[[55,[-1]],[2,[[51,[17]],[51,[17]]]]],[],[]],[[[55,[-1]],[48,[17]]],[],[]],[[[55,[-1]],[47,[17]]],[],[]],[[[55,[-1]],[50,[17]]],[],[]],[[[58,[-1,-2]],[45,[17]]],[],[],[]],[[[58,[-1,-2]],[48,[17]]],[],[],[]],[[[58,[-1,-2]],[47,[17]]],[],[],[]],[[[58,[-1,-2]],[49,[17]]],[],[],[]],[[[58,[-1,-2]],46],[],[],[]],[[[58,[-1,-2]],[2,[[51,[17]],[51,[17]]]]],[],[],[]],[[[58,[-1,-2]],[50,[17]]],[],[],[]],[[[58,[-1,-2]],17],-1,[],[]],[[[58,[-1,-2]],-1],3,[19,20],21],[[[58,[-1,-2]],-1],[[2,[17,3]]],[19,20],21],[[[58,[-1,-2]],[58,[-1,-3]]],[[60,[-1,-3]]],[19,20],21,21],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[58,[-1,-2]]],[[52,[[55,[-1]]]]],[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[55,[-1]]],[],[]],[[[58,[-1,-2]]],[],[],[]],[[[58,[-1,-2]]],[],[],[]],[[[58,[-1,-2]],[58,[-1,-3]]],3,[20,19],21,21],[[[55,[-1]]],3,[]],[[[58,[-1,-2]]],3,[],[]],[[[58,[-1,-2]],[58,[-1,-3]]],3,[20,19],21,21],[[[58,[-1,-2]],[58,[-1,-3]]],3,[20,19],21,21],[[[55,[-1]]],[[54,[-1]]],[]],[[[58,[-1,-2]]],[[54,[-1]]],[],[]],[[[54,[-1]]],38,[]],[[[56,[-1]]],38,[]],[[[57,[-1]]],38,[]],[[[55,[-1]]],[[38,[-1]]],[]],[[[58,[-1,-2]]],[[38,[-1]]],[],[]],[[[54,[-1]]],17,[]],[[[56,[-1]]],17,[]],[[[57,[-1]]],17,[]],[[[55,[-1]]],17,[]],[[[58,[-1,-2]]],17,[],[]],[[[58,[-1,-2]],17,17],2,[],[]],[[],[[55,[-1]]],[]],[[],[[58,[-1]]],[]],[[[54,[-1]]],38,[]],[[[56,[-1]]],38,[]],[[[57,[-1]]],38,[]],[[[59,[-1,-2]]],38,[20,19],21],[[[60,[-1,-2]]],38,[20,19],21],[[[61,[-1,-2,-3]]],38,[20,19],21,21],[[[62,[-1,-2]]],38,[20,19],21],[[[54,[-1]]],38,[]],[[[56,[-1]]],38,[]],[[[57,[-1]]],38,[]],[[[59,[-1,-2]]],38,[20,19],21],[[[60,[-1,-2]]],38,[20,19],21],[[[61,[-1,-2,-3]]],38,[20,19],21,21],[[[62,[-1,-2]]],38,[20,19],21],[[[54,[-1]],17],38,[]],[[[56,[-1]],17],38,[]],[[[57,[-1]],17],38,[]],[[[54,[-1]],17],38,[]],[[[56,[-1]],17],38,[]],[[[57,[-1]],17],38,[]],[[[55,[-1]],[55,[-1]]],[[38,[26]]],53],[[[55,[-1]],-2],17,[],18],[[[58,[-1,-2]],-3],17,[19,20],21,18],[[[58,[-1,-2]]],[[38,[-1]]],[19,20],21],[[[58,[-1,-2]],-3],3,[19,20],21,[19,[31,[-1]],32]],[[[58,[-1,-2]],-1],[[38,[-1]]],[19,20],21],[[[58,[-1,-2]],-1],[[2,[17,[38,[-1]]]]],[19,20],21],[[[58,[-1,-2]],17],2,[19,20],21],[[[58,[-1,-2]],17],2,[19,20],21],[[[58,[-1,-2]],-3],2,[19,20],21,18],[[[58,[-1,-2]]],2,[19,20],21],[[[61,[-1,-2,-3]],-4,-5],-4,[20,19],21,21,[],18],[[[62,[-1,-2]],-3,-4],-3,[20,19],21,[],18],[[[58,[-1,-2]],-3],3,[19,20],21,[19,[31,[-1]],32]],[[[58,[-1,-2]],-3],[[38,[[2,[17,-1]]]]],[19,20],21,[19,[31,[-1]],32]],[[[58,[-1,-2]],17],[[38,[-1]]],[],[]],[[[58,[-1,-2]],-3],[[38,[-1]]],[19,20],21,[19,[31,[-1]],32]],[[[58,[-1,-2]],17],2,[19,20],21],[[[58,[-1,-2]]],2,[19,20],21],[[[54,[-1]]],[[2,[17,[38,[17]]]]],[]],[[[56,[-1]]],[[2,[17,[38,[17]]]]],[]],[[[57,[-1]]],[[2,[17,[38,[17]]]]],[]],[[[59,[-1,-2]]],[[2,[17,[38,[17]]]]],[20,19],21],[[[60,[-1,-2]]],[[2,[17,[38,[17]]]]],[20,19],21],[[[61,[-1,-2,-3]]],[[2,[17,[38,[17]]]]],[20,19],21,21],[[[62,[-1,-2]]],[[2,[17,[38,[17]]]]],[20,19],21],[[[58,[-1,-2]]],2,[22,19,20],21],[[[58,[-1,-2]],-3],2,[19,20],21,18],[[[58,[-1,-2]],-3],2,[19,20],21,18],[[[58,[-1,-2]]],2,[22,19,20],21],[[[58,[-1,-2]],-3],2,[19,20],21,18],[[[58,[-1,-2]],-3],[[56,[-1]]],[19,20],21,18],[[[58,[-1,-2]],-3],[[56,[-1]]],[19,20],21,18],[[[55,[-1]],17],[[2,[[55,[-1]],[55,[-1]]]]],[]],[[[55,[-1]]],[[38,[[2,[-1,[55,[-1]]]]]]],[]],[[[55,[-1]]],[[38,[[2,[-1,[55,[-1]]]]]]],[]],[[[58,[-1,-2]],17],[[58,[-1,-2]]],[],25],[[[58,[-1,-2]],[58,[-1,-3]]],[],[20,19,25],[21,33],21],[[[58,[-1,-2]],17,17],2,[],[]],[[[58,[-1,-2]],-3],3,[19,20],21,[19,[31,[-1]],32]],[[[58,[-1,-2]],-3],[[38,[[2,[17,-1]]]]],[19,20],21,[19,[31,[-1]],32]],[[[58,[-1,-2]],17],[[38,[-1]]],[],[]],[[[58,[-1,-2]],-3],[[38,[-1]]],[19,20],21,[19,[31,[-1]],32]],[[[58,[-1,-2]],[58,[-1,-3]]],[[61,[-1,-2,-3]]],[19,20],21,21],[[[58,[-1,-2]],-3],[[38,[-1]]],[19,20],21,[19,[31,[-1]],32]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[58,[-1,-2]],17],2,[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[[[58,[-1,-2]],17],[[7,[2,1]]],[19,20],21],[[[58,[-1,-2]],17],[[7,[2,1]]],[19,20],21],[-1,8,[]],[-1,8,[]],[-1,8,[]],[-1,8,[]],[-1,8,[]],[-1,8,[]],[-1,8,[]],[-1,8,[]],[-1,8,[]],[[[58,[-1,-2]],[58,[-1,-3]]],[[62,[-1,-2]]],[19,20],21,21],[17,[[58,[-1]]],[]],[[17,-1],[[58,[-2,-1]]],[],[]],[-1,[[58,[-2,-1]]],[],[]]],"c":[],"p":[[3,"TryReserveError",0],[15,"tuple"],[15,"bool"],[3,"Formatter",731],[6,"Result",731],[3,"String",732],[4,"Result",733],[3,"TypeId",734],[4,"Entry",26],[8,"FnOnce",735],[3,"IntoIter",26],[3,"Slice",26],[3,"IndexMap",26],[3,"Iter",26],[3,"IterMut",26],[3,"Drain",26],[15,"usize"],[8,"FnMut",735],[8,"Hash",736],[8,"Eq",737],[8,"BuildHasher",736],[8,"Ord",737],[3,"Keys",26],[3,"Values",26],[8,"Clone",738],[4,"Ordering",737],[8,"FromIterator",739],[3,"IntoKeys",26],[3,"ValuesMut",26],[3,"IntoValues",26],[8,"Equivalent",0],[8,"Sized",740],[8,"Default",741],[8,"RangeBounds",742],[8,"PartialEq",737],[8,"IntoIterator",739],[8,"Copy",740],[4,"Option",743],[3,"OccupiedEntry",26],[8,"Debug",731],[3,"VacantEntry",26],[15,"array"],[3,"RandomState",744],[8,"Hasher",736],[3,"RangeFrom",742],[3,"RangeFull",742],[3,"RangeInclusive",742],[3,"RangeTo",742],[3,"Range",742],[3,"RangeToInclusive",742],[4,"Bound",742],[3,"Box",745],[8,"PartialOrd",737],[3,"Iter",458],[3,"Slice",458],[3,"IntoIter",458],[3,"Drain",458],[3,"IndexSet",458],[3,"Difference",458],[3,"Intersection",458],[3,"SymmetricDifference",458],[3,"Union",458],[8,"MutableKeys",26]],"b":[[13,"impl-Debug-for-TryReserveError"],[14,"impl-Display-for-TryReserveError"],[127,"impl-Default-for-%26Slice%3CK,+V%3E"],[128,"impl-Default-for-%26mut+Slice%3CK,+V%3E"],[140,"impl-Extend%3C(K,+V)%3E-for-IndexMap%3CK,+V,+S%3E"],[141,"impl-Extend%3C(%26K,+%26V)%3E-for-IndexMap%3CK,+V,+S%3E"],[200,"impl-Index%3Cusize%3E-for-Slice%3CK,+V%3E"],[201,"impl-Index%3CRangeFrom%3Cusize%3E%3E-for-Slice%3CK,+V%3E"],[202,"impl-Index%3CRangeFull%3E-for-Slice%3CK,+V%3E"],[203,"impl-Index%3CRangeInclusive%3Cusize%3E%3E-for-Slice%3CK,+V%3E"],[204,"impl-Index%3CRangeTo%3Cusize%3E%3E-for-Slice%3CK,+V%3E"],[205,"impl-Index%3CRange%3Cusize%3E%3E-for-Slice%3CK,+V%3E"],[206,"impl-Index%3CRangeToInclusive%3Cusize%3E%3E-for-Slice%3CK,+V%3E"],[207,"impl-Index%3C(Bound%3Cusize%3E,+Bound%3Cusize%3E)%3E-for-Slice%3CK,+V%3E"],[208,"impl-Index%3Cusize%3E-for-IndexMap%3CK,+V,+S%3E"],[209,"impl-Index%3CRangeFull%3E-for-IndexMap%3CK,+V,+S%3E"],[210,"impl-Index%3CRangeTo%3Cusize%3E%3E-for-IndexMap%3CK,+V,+S%3E"],[211,"impl-Index%3CRangeToInclusive%3Cusize%3E%3E-for-IndexMap%3CK,+V,+S%3E"],[212,"impl-Index%3C(Bound%3Cusize%3E,+Bound%3Cusize%3E)%3E-for-IndexMap%3CK,+V,+S%3E"],[213,"impl-Index%3C%26Q%3E-for-IndexMap%3CK,+V,+S%3E"],[214,"impl-Index%3CRange%3Cusize%3E%3E-for-IndexMap%3CK,+V,+S%3E"],[215,"impl-Index%3CRangeFrom%3Cusize%3E%3E-for-IndexMap%3CK,+V,+S%3E"],[216,"impl-Index%3CRangeInclusive%3Cusize%3E%3E-for-IndexMap%3CK,+V,+S%3E"],[217,"impl-IndexMut%3CRangeInclusive%3Cusize%3E%3E-for-Slice%3CK,+V%3E"],[218,"impl-IndexMut%3Cusize%3E-for-Slice%3CK,+V%3E"],[219,"impl-IndexMut%3CRangeTo%3Cusize%3E%3E-for-Slice%3CK,+V%3E"],[220,"impl-IndexMut%3CRangeFrom%3Cusize%3E%3E-for-Slice%3CK,+V%3E"],[221,"impl-IndexMut%3C(Bound%3Cusize%3E,+Bound%3Cusize%3E)%3E-for-Slice%3CK,+V%3E"],[222,"impl-IndexMut%3CRange%3Cusize%3E%3E-for-Slice%3CK,+V%3E"],[223,"impl-IndexMut%3CRangeToInclusive%3Cusize%3E%3E-for-Slice%3CK,+V%3E"],[224,"impl-IndexMut%3CRangeFull%3E-for-Slice%3CK,+V%3E"],[225,"impl-IndexMut%3CRangeInclusive%3Cusize%3E%3E-for-IndexMap%3CK,+V,+S%3E"],[226,"impl-IndexMut%3CRangeFrom%3Cusize%3E%3E-for-IndexMap%3CK,+V,+S%3E"],[227,"impl-IndexMut%3CRangeTo%3Cusize%3E%3E-for-IndexMap%3CK,+V,+S%3E"],[228,"impl-IndexMut%3CRangeFull%3E-for-IndexMap%3CK,+V,+S%3E"],[229,"impl-IndexMut%3Cusize%3E-for-IndexMap%3CK,+V,+S%3E"],[230,"impl-IndexMut%3C(Bound%3Cusize%3E,+Bound%3Cusize%3E)%3E-for-IndexMap%3CK,+V,+S%3E"],[231,"impl-IndexMut%3CRangeToInclusive%3Cusize%3E%3E-for-IndexMap%3CK,+V,+S%3E"],[232,"impl-IndexMut%3C%26Q%3E-for-IndexMap%3CK,+V,+S%3E"],[233,"impl-IndexMut%3CRange%3Cusize%3E%3E-for-IndexMap%3CK,+V,+S%3E"],[261,"impl-IntoIterator-for-%26mut+Slice%3CK,+V%3E"],[262,"impl-IntoIterator-for-%26Slice%3CK,+V%3E"],[263,"impl-IntoIterator-for-%26IndexMap%3CK,+V,+S%3E"],[264,"impl-IntoIterator-for-IndexMap%3CK,+V,+S%3E"],[265,"impl-IntoIterator-for-%26mut+IndexMap%3CK,+V,+S%3E"],[536,"impl-Extend%3C%26T%3E-for-IndexSet%3CT,+S%3E"],[537,"impl-Extend%3CT%3E-for-IndexSet%3CT,+S%3E"],[570,"impl-Index%3CRangeFull%3E-for-Slice%3CT%3E"],[571,"impl-Index%3Cusize%3E-for-Slice%3CT%3E"],[572,"impl-Index%3CRangeFrom%3Cusize%3E%3E-for-Slice%3CT%3E"],[573,"impl-Index%3CRange%3Cusize%3E%3E-for-Slice%3CT%3E"],[574,"impl-Index%3C(Bound%3Cusize%3E,+Bound%3Cusize%3E)%3E-for-Slice%3CT%3E"],[575,"impl-Index%3CRangeTo%3Cusize%3E%3E-for-Slice%3CT%3E"],[576,"impl-Index%3CRangeInclusive%3Cusize%3E%3E-for-Slice%3CT%3E"],[577,"impl-Index%3CRangeToInclusive%3Cusize%3E%3E-for-Slice%3CT%3E"],[578,"impl-Index%3CRangeFrom%3Cusize%3E%3E-for-IndexSet%3CT,+S%3E"],[579,"impl-Index%3CRangeTo%3Cusize%3E%3E-for-IndexSet%3CT,+S%3E"],[580,"impl-Index%3CRangeInclusive%3Cusize%3E%3E-for-IndexSet%3CT,+S%3E"],[581,"impl-Index%3CRange%3Cusize%3E%3E-for-IndexSet%3CT,+S%3E"],[582,"impl-Index%3CRangeFull%3E-for-IndexSet%3CT,+S%3E"],[583,"impl-Index%3C(Bound%3Cusize%3E,+Bound%3Cusize%3E)%3E-for-IndexSet%3CT,+S%3E"],[584,"impl-Index%3CRangeToInclusive%3Cusize%3E%3E-for-IndexSet%3CT,+S%3E"],[585,"impl-Index%3Cusize%3E-for-IndexSet%3CT,+S%3E"],[606,"impl-IntoIterator-for-%26IndexSet%3CT,+S%3E"],[607,"impl-IntoIterator-for-IndexSet%3CT,+S%3E"]]},\
"itoa":{"doc":"github crates-io docs-rs","t":"DILLLLLLLLLLL","n":["Buffer","Integer","borrow","borrow_mut","clone","default","format","from","into","new","try_from","try_into","type_id"],"q":[[0,"itoa"],[13,"core::result"],[14,"core::any"]],"d":["A correctly sized stack allocation for the formatted …","An integer that can be written into an <code>itoa::Buffer</code>.","","","","","Print an integer into this buffer and return a reference …","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","This is a cheap operation; you don’t need to worry about …","","",""],"i":[0,0,1,1,1,1,1,1,1,1,1,1,1],"f":[0,0,[-1,-2,[],[]],[-1,-2,[],[]],[1,1],[[],1],[[1,-1],2,3],[-1,-1,[]],[-1,-2,[],[]],[[],1],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,5,[]]],"c":[],"p":[[3,"Buffer",0],[15,"str"],[8,"Integer",0],[4,"Result",13],[3,"TypeId",14]],"b":[]},\
"once_cell":{"doc":"Overview","t":"AAADDDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL","n":["race","sync","unsync","OnceBool","OnceBox","OnceNonZeroUsize","OnceRef","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","default","default","default","default","drop","fmt","fmt","fmt","fmt","from","from","from","from","get","get","get","get","get_or_init","get_or_init","get_or_init","get_or_init","get_or_try_init","get_or_try_init","get_or_try_init","get_or_try_init","into","into","into","into","new","new","new","new","set","set","set","set","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","Lazy","OnceCell","borrow","borrow","borrow_mut","borrow_mut","clone","clone_from","clone_into","default","default","deref","deref_mut","eq","fmt","fmt","force","force_mut","from","from","from","from","get","get","get_mut","get_mut","get_or_init","get_or_try_init","get_unchecked","into","into","into_inner","into_value","new","new","set","take","to_owned","try_from","try_from","try_insert","try_into","try_into","type_id","type_id","wait","with_value","Lazy","OnceCell","borrow","borrow","borrow_mut","borrow_mut","clone","clone_from","clone_into","default","default","deref","deref_mut","eq","fmt","fmt","force","force_mut","from","from","from","from","get","get","get_mut","get_mut","get_or_init","get_or_try_init","into","into","into_inner","into_value","new","new","set","take","to_owned","try_from","try_from","try_insert","try_into","try_into","type_id","type_id","with_value"],"q":[[0,"once_cell"],[3,"once_cell::race"],[64,"once_cell::sync"],[111,"once_cell::unsync"],[156,"core::fmt"],[157,"core::fmt"],[158,"core::num::nonzero"],[159,"core::ops::function"],[160,"core::result"],[161,"alloc::boxed"],[162,"core::any"],[163,"core::clone"],[164,"core::default"],[165,"core::cmp"],[166,"core::fmt"]],"d":["Thread-safe, non-blocking, “first one wins” flavor of …","Thread-safe, blocking version of <code>OnceCell</code>.","Single-threaded version of <code>OnceCell</code>.","A thread-safe cell which can be written to only once.","A thread-safe cell which can be written to only once.","A thread-safe cell which can be written to only once.","A thread-safe cell which can be written to only once.","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Gets a reference to the underlying value.","Gets a reference to the underlying value.","Gets the underlying value.","Gets the underlying value.","Gets the contents of the cell, initializing it with <code>f</code> if …","Gets the contents of the cell, initializing it with <code>f</code> if …","Gets the contents of the cell, initializing it with <code>f</code> if …","Gets the contents of the cell, initializing it with <code>f</code> if …","Gets the contents of the cell, initializing it with <code>f</code> if …","Gets the contents of the cell, initializing it with <code>f</code> if …","Gets the contents of the cell, initializing it with <code>f</code> if …","Gets the contents of the cell, initializing it with <code>f</code> if …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Creates a new empty cell.","Creates a new empty cell.","Creates a new empty cell.","Creates a new empty cell.","Sets the contents of this cell to <code>value</code>.","Sets the contents of this cell to <code>value</code>.","Sets the contents of this cell to <code>value</code>.","Sets the contents of this cell to <code>value</code>.","","","","","","","","","","","","","A value which is initialized on the first access.","A thread-safe cell which can be written to only once.","","","","","","","","","Creates a new lazy value using <code>Default</code> as the initializing …","","","","","","Forces the evaluation of this lazy value and returns a …","Forces the evaluation of this lazy value and returns a …","Returns the argument unchanged.","","","Returns the argument unchanged.","Gets the reference to the underlying value.","Gets the reference to the result of this lazy value if it …","Gets the mutable reference to the underlying value.","Gets the reference to the result of this lazy value if it …","Gets the contents of the cell, initializing it with <code>f</code> if …","Gets the contents of the cell, initializing it with <code>f</code> if …","Get the reference to the underlying value, without …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Consumes the <code>OnceCell</code>, returning the wrapped value. Returns","Consumes this <code>Lazy</code> returning the stored value.","Creates a new empty cell.","Creates a new lazy value with the given initializing …","Sets the contents of this cell to <code>value</code>.","Takes the value out of this <code>OnceCell</code>, moving it back to an …","","","","Like <code>set</code>, but also returns a reference to the final cell …","","","","","Gets the reference to the underlying value, blocking the …","Creates a new initialized cell.","A value which is initialized on the first access.","A cell which can be written to only once. It is not thread …","","","","","","","","","Creates a new lazy value using <code>Default</code> as the initializing …","","","","","","Forces the evaluation of this lazy value and returns a …","Forces the evaluation of this lazy value and returns a …","","Returns the argument unchanged.","","Returns the argument unchanged.","Gets a reference to the underlying value.","Gets the reference to the result of this lazy value if it …","Gets a mutable reference to the underlying value.","Gets the mutable reference to the result of this lazy …","Gets the contents of the cell, initializing it with <code>f</code> if …","Gets the contents of the cell, initializing it with <code>f</code> if …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Consumes the <code>OnceCell</code>, returning the wrapped value.","Consumes this <code>Lazy</code> returning the stored value.","Creates a new empty cell.","Creates a new lazy value with the given initializing …","Sets the contents of this cell to <code>value</code>.","Takes the value out of this <code>OnceCell</code>, moving it back to an …","","","","Like <code>set</code>, but also returns a reference to the final cell …","","","","","Creates a new initialized cell."],"i":[0,0,0,0,0,0,0,1,2,3,4,1,2,3,4,1,2,3,4,2,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,0,0,15,17,15,17,15,15,15,15,17,17,17,15,15,17,17,17,15,15,15,17,15,17,15,17,15,15,15,15,17,15,17,15,17,15,15,15,15,17,15,15,17,15,17,15,15,0,0,22,23,22,23,22,22,22,22,23,23,23,22,22,23,23,23,22,22,22,23,22,23,22,23,22,22,22,23,22,23,22,23,22,22,22,22,23,22,22,23,22,23,22],"f":[0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[],[[1,[-1]]],[]],[[],[[2,[-1]]],[]],[[],3],[[],4],[[[2,[-1]]],5,[]],[[[1,[-1]],6],7,[]],[[[2,[-1]],6],7,[]],[[3,6],7],[[4,6],7],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[[1,[-1]]],[[8,[-1]]],[]],[[[2,[-1]]],[[8,[-1]]],[]],[3,[[8,[9]]]],[4,[[8,[10]]]],[[[1,[-1]],-2],-1,[],11],[[[2,[-1]],-2],-1,[],11],[[3,-1],9,11],[[4,-1],10,11],[[[1,[-1]],-2],[[12,[-1,-3]]],[],11,[]],[[[2,[-1]],-2],[[12,[-1,-3]]],[],11,[]],[[3,-1],[[12,[9,-2]]],11,[]],[[4,-1],[[12,[10,-2]]],11,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[],[[1,[-1]]],[]],[[],[[2,[-1]]],[]],[[],3],[[],4],[[[1,[-1]],-1],[[12,[5,5]]],[]],[[[2,[-1]],[13,[-1]]],[[12,[5,[13,[-1]]]]],[]],[[3,9],[[12,[5,5]]]],[[4,10],[[12,[5,5]]]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,14,[]],[-1,14,[]],[-1,14,[]],[-1,14,[]],0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[15,[-1]]],[[15,[-1]]],16],[[[15,[-1]],[15,[-1]]],5,16],[[-1,-2],5,[],[]],[[],[[15,[-1]]],[]],[[],[[17,[-1]]],18],[[[17,[-1,-2]]],-1,[],11],[[[17,[-1,-2]]],-1,[],11],[[[15,[-1]],[15,[-1]]],10,19],[[[15,[-1]],6],7,20],[[[17,[-1,-2]],6],7,20,[]],[[[17,[-1,-2]]],-1,[],11],[[[17,[-1,-2]]],-1,[],11],[-1,-1,[]],[21,-1,[]],[-1,[[15,[-1]]],[]],[-1,-1,[]],[[[15,[-1]]],[[8,[-1]]],[]],[[[17,[-1,-2]]],[[8,[-1]]],[],11],[[[15,[-1]]],[[8,[-1]]],[]],[[[17,[-1,-2]]],[[8,[-1]]],[],11],[[[15,[-1]],-2],-1,[],11],[[[15,[-1]],-2],[[12,[-1,-3]]],[],11,[]],[[[15,[-1]]],-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[15,[-1]]],[[8,[-1]]],[]],[[[17,[-1,-2]]],[[12,[-1,-2]]],[],[]],[[],[[15,[-1]]],[]],[-1,[[17,[-2,-1]]],[],[]],[[[15,[-1]],-1],[[12,[5,-1]]],[]],[[[15,[-1]]],[[8,[-1]]],[]],[-1,-2,[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[[[15,[-1]],-1],[[12,[-1,[5,[-1,-1]]]]],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,14,[]],[-1,14,[]],[[[15,[-1]]],-1,[]],[-1,[[15,[-1]]],[]],0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[22,[-1]]],[[22,[-1]]],16],[[[22,[-1]],[22,[-1]]],5,16],[[-1,-2],5,[],[]],[[],[[22,[-1]]],[]],[[],[[23,[-1]]],18],[[[23,[-1,-2]]],-1,[],11],[[[23,[-1,-2]]],-1,[],11],[[[22,[-1]],[22,[-1]]],10,19],[[[22,[-1]],6],7,20],[[[23,[-1,-2]],6],7,20,[]],[[[23,[-1,-2]]],-1,[],11],[[[23,[-1,-2]]],-1,[],11],[21,-1,[]],[-1,-1,[]],[-1,[[22,[-1]]],[]],[-1,-1,[]],[[[22,[-1]]],[[8,[-1]]],[]],[[[23,[-1,-2]]],[[8,[-1]]],[],11],[[[22,[-1]]],[[8,[-1]]],[]],[[[23,[-1,-2]]],[[8,[-1]]],[],11],[[[22,[-1]],-2],-1,[],11],[[[22,[-1]],-2],[[12,[-1,-3]]],[],11,[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[22,[-1]]],[[8,[-1]]],[]],[[[23,[-1,-2]]],[[12,[-1,-2]]],[],[]],[[],[[22,[-1]]],[]],[-1,[[23,[-2,-1]]],[],[]],[[[22,[-1]],-1],[[12,[5,-1]]],[]],[[[22,[-1]]],[[8,[-1]]],[]],[-1,-2,[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[[[22,[-1]],-1],[[12,[-1,[5,[-1,-1]]]]],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,14,[]],[-1,14,[]],[-1,[[22,[-1]]],[]]],"c":[],"p":[[3,"OnceRef",3],[3,"OnceBox",3],[3,"OnceNonZeroUsize",3],[3,"OnceBool",3],[15,"tuple"],[3,"Formatter",156],[6,"Result",156],[4,"Option",157],[3,"NonZeroUsize",158],[15,"bool"],[8,"FnOnce",159],[4,"Result",160],[3,"Box",161],[3,"TypeId",162],[3,"OnceCell",64],[8,"Clone",163],[3,"Lazy",64],[8,"Default",164],[8,"PartialEq",165],[8,"Debug",156],[15,"never"],[3,"OnceCell",111],[3,"Lazy",111]],"b":[]},\
"powerfmt":{"doc":"<code>powerfmt</code> is a library that provides utilities for …","t":"AAADLLLLLLLLLLLLLLLLLLLLLLLLIKDDQILLLLLLLLLLLLLLLLLLLLLKLLLOLLLLLLLLLLLLLLLLLLLLLL","n":["buf","ext","smart_display","WriteBuffer","as_ref","as_ref","as_str","borrow","borrow","borrow_mut","cmp","default","deref","eq","fmt","fmt","fmt","from","hash","into","metadata","new","partial_cmp","remaining_capacity","try_from","try_into","type_id","write_str","FormatterExt","pad_with_width","FormatterOptions","Metadata","Metadata","SmartDisplay","align","alternate","borrow","borrow","borrow_mut","borrow_mut","clone","clone","default","deref","fill","fmt","fmt","fmt","fmt_with_metadata","from","from","from","from","into","into","metadata","new","padded_width","padded_width_of","padded_width_of","precision","reuse","sign_aware_zero_pad","sign_minus","sign_plus","try_from","try_from","try_into","try_into","type_id","type_id","unpadded_width","unpadded_width_of","width","with_align","with_alternate","with_fill","with_precision","with_sign_aware_zero_pad","with_sign_minus","with_sign_plus","with_width"],"q":[[0,"powerfmt"],[3,"powerfmt::buf"],[28,"powerfmt::ext"],[30,"powerfmt::smart_display"],[82,"core::cmp"],[83,"core::fmt"],[84,"core::fmt"],[85,"core::option"],[86,"core::result"],[87,"core::any"],[88,"core::fmt"]],"d":["A buffer for constructing a string while avoiding heap …","Extension traits.","Definition of <code>SmartDisplay</code> and its related items.","A buffer for construct a string while avoiding heap …","","","Obtain the contents of the buffer as a string.","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","Creates an empty buffer.","","Determine how many bytes are remaining in the buffer.","","","","","An extension trait for <code>core::fmt::Formatter</code>.","Writes the given arguments to the formatter, padding them …","Configuration for formatting.","Information used to format a value. This is returned by …","User-provided metadata type.","Format trait that allows authors to provide additional …","Flag indicating what form of alignment was requested.","Determines if the <code>#</code> flag was specified.","","","","","","","","","Character used as ‘fill’ whenever there is alignment.","","Format the value using the given formatter. This is the …","","Format the value using the given formatter and metadata. …","Returns the argument unchanged.","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Compute any information needed to format the value. This …","Creates a new <code>Metadata</code> with the given width and metadata. …","Obtain the width of the value after padding.","Obtain the width of the value after padding, given the …","Compute the width of multiple items while optionally …","Optionally specified precision for numeric types. …","Reuse the metadata for another type. This is useful when …","Determines if the <code>0</code> flag was specified.","Determines if the <code>-</code> flag was specified.","Determines if the <code>+</code> flag was specified.","","","","","","","Obtain the width of the value before padding.","Obtain the width of the value before padding, given the …","Optionally specified integer width that the output should …","Set the flag indicating what form of alignment is …","Set whether the <code>#</code> flag is specified.","Sets the fill character to use whenever there is alignment.","Set the optional precision for numeric types. …","Set whether the <code>0</code> flag is specified.","Set whether the <code>-</code> flag is specified.","Set whether the <code>+</code> flag is specified.","Set the optional integer width that the output should be."],"i":[0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,22,0,0,19,0,11,11,12,11,12,11,12,11,11,12,11,12,19,11,19,12,11,11,11,12,11,19,12,12,12,0,11,12,11,11,11,12,11,12,11,12,11,12,12,11,11,11,11,11,11,11,11,11],"f":[0,0,0,0,[1,[[3,[2]]]],[1,4],[1,4],[1,4],[-1,-2,[],[]],[-1,-2,[],[]],[[1,1],5],[[],1],[1],[[1,1],6],[[1,7],8],[[1,7],8],[[1,7],8],[-1,-1,[]],[[1,-1],9,10],[-1,-2,[],[]],[[1,11],[[12,[1]]]],[[],1],[[1,1],[[13,[5]]]],[1,14],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,16,[]],[[1,4],8],0,[[-1,14,17],8,[]],0,0,0,0,[11,[[13,[18]]]],[11,6],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[12,[-1]]],[[12,[-1]]],19],[11,11],[[],11],[[[12,[-1]]],[],[19,20]],[11,21],[[[12,[-1]],7],8,19],[[-1,7],8,[]],[[11,7],8],[[-1,7,[12,[-1]]],8,[]],[-1,-1,[]],[7,11],[-1,-1,[]],[7,11],[-1,-2,[],[]],[-1,-2,[],[]],[[-1,11],[[12,[-1]]],[]],[[14,-1],[[12,[-1]]],[19,20]],[[[12,[-1]],11],14,[19,20]],[[-1,11],14,19],0,[11,[[13,[14]]]],[[[12,[-1]]],[[12,[-2]]],[19,20],[19,20]],[11,6],[11,6],[11,6],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,16,[]],[-1,16,[]],[[[12,[-1]]],14,[19,20]],[[-1,11],14,19],[11,[[13,[14]]]],[[11,[13,[18]]],11],[[11,6],11],[[11,21],11],[[11,[13,[14]]],11],[[11,6],11],[[11,6],11],[[11,6],11],[[11,[13,[14]]],11]],"c":[],"p":[[3,"WriteBuffer",3],[15,"u8"],[15,"slice"],[15,"str"],[4,"Ordering",82],[15,"bool"],[3,"Formatter",83],[6,"Result",83],[15,"tuple"],[8,"Hasher",84],[3,"FormatterOptions",30],[3,"Metadata",30],[4,"Option",85],[15,"usize"],[4,"Result",86],[3,"TypeId",87],[3,"Arguments",83],[4,"Alignment",83],[8,"SmartDisplay",30],[8,"Sized",88],[15,"char"],[8,"FormatterExt",28]],"b":[[4,"impl-AsRef%3C%5Bu8%5D%3E-for-WriteBuffer%3CSIZE%3E"],[5,"impl-AsRef%3Cstr%3E-for-WriteBuffer%3CSIZE%3E"],[14,"impl-Debug-for-WriteBuffer%3CSIZE%3E"],[15,"impl-Display-for-WriteBuffer%3CSIZE%3E"],[16,"impl-SmartDisplay-for-WriteBuffer%3CSIZE%3E"],[50,"impl-From%3C%26Formatter%3C\'_%3E%3E-for-FormatterOptions"],[52,"impl-From%3C%26mut+Formatter%3C\'_%3E%3E-for-FormatterOptions"]]},\
"ppv_lite86":{"doc":"","t":"IIIIIIIIIIQIIIIIIIIIIIIIKKOOOKKKKKKLLLLKKKKKKKKKKKKKKKKKKKKKKKKKIQIQIQIQIQIQIQIQIQIQKLLKKKLLCCCKKKAGGDDDDDDGGGDDDDDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLTTTLLLLLLLLLLLLLLL","n":["AndNot","ArithOps","BSwap","BitOps0","BitOps128","BitOps32","BitOps64","LaneWords4","Machine","MultiLane","Output","RotateEachWord128","RotateEachWord32","RotateEachWord64","Store","StoreBytes","Swap64","UnsafeFrom","VZip","Vec2","Vec4","Vec4Ext","Vector","Words4","andnot","bswap","dispatch","dispatch_light128","dispatch_light256","extract","extract","from_lanes","insert","insert","instance","read_be","read_be","read_le","read_le","rotate_each_word_right11","rotate_each_word_right12","rotate_each_word_right16","rotate_each_word_right20","rotate_each_word_right24","rotate_each_word_right25","rotate_each_word_right32","rotate_each_word_right7","rotate_each_word_right8","shuffle1230","shuffle2301","shuffle3012","shuffle_lane_words1230","shuffle_lane_words2301","shuffle_lane_words3012","swap1","swap16","swap2","swap32","swap4","swap64","swap8","to_lanes","to_scalars","transpose4","u128x1","u128x1","u128x2","u128x2","u128x4","u128x4","u32x4","u32x4","u32x4x2","u32x4x2","u32x4x4","u32x4x4","u64x2","u64x2","u64x2x2","u64x2x2","u64x2x4","u64x2x4","u64x4","u64x4","unpack","unpack","unpack","unsafe_from","unsafe_read_be","unsafe_read_le","vec","vec","vec128_storage","vec256_storage","vec512_storage","vzip","write_be","write_le","x86_64","AVX","AVX2","Avx2Machine","NoA1","NoA2","NoNI","NoS3","NoS4","SSE2","SSE41","SSSE3","SseMachine","YesA1","YesA2","YesNI","YesS3","YesS4","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","default","default","default","eq","eq","eq","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","instance","instance","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","new128","new128","split128","split128","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","unpack","vec128_storage","vec256_storage","vec512_storage","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip"],"q":[[0,"ppv_lite86"],[99,"ppv_lite86::x86_64"],[269,"core::marker"],[270,"core::clone"],[271,"core::marker"],[272,"core::any"]],"d":["","Ops that depend on word size","","Ops that are independent of word size and endian","","","","A vector composed one or more lanes each composed of four …","","A vector composed of multiple 128-bit lanes.","","","","","","","Exchange neigboring ranges of bits of the specified size","","Combine single vectors into a multi-lane vector.","A vector composed of two elements, which may be words or …","A vector composed of four elements, which may be words or …","Vec4 functions which may not be implemented yet for all …","","A vector composed of four words; depending on their size, …","","","Generate the full set of optimized implementations to take …","Generate only the basic implementations necessary to be …","Generate only the basic implementations necessary to be …","","","Build a multi-lane vector from individual lanes.","","","Safety","","","","","","","","","","","","","","","","","","","","","","","","","","","Split a multi-lane vector into single-lane vectors.","","","","","","","","","","","","","","","","","","","","","","","Safety","","","","Safety","Safety","","","","","","","","","","AVX but not AVX2: only 128-bit integer operations, but use …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Generic wrapper for unparameterized storage of any of the …","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,0,0,0,0,31,0,0,0,0,0,0,0,0,0,0,0,0,0,31,32,0,0,0,33,34,8,33,34,35,35,35,35,35,36,36,36,36,36,36,37,36,36,38,38,38,39,39,39,40,40,40,40,40,40,40,8,41,42,0,35,0,35,0,35,0,35,0,35,0,35,0,35,0,35,0,35,0,35,7,35,35,43,4,4,35,35,0,0,0,44,4,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9,10,11,12,13,14,15,16,17,18,19,21,22,23,24,9,10,11,12,13,14,15,16,17,18,19,21,22,23,24,9,10,11,12,13,14,15,16,17,18,19,21,22,23,24,22,23,24,22,23,24,9,10,11,12,13,14,15,16,17,18,19,21,22,22,23,23,24,19,21,9,10,11,12,13,14,15,16,17,18,19,21,22,23,24,23,24,23,24,9,10,11,12,13,14,15,16,17,18,19,21,22,23,24,9,10,11,12,13,14,15,16,17,18,19,21,22,23,24,9,10,11,12,13,14,15,16,17,18,19,21,22,23,24,22,0,0,0,9,10,11,12,13,14,15,16,17,18,19,21,22,23,24],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[-1,-1],[],[]],[-1,-1,[]],0,0,0,[[-1,1],-2,[],[]],[[-1,1],-2,[],[]],[-1,-2,[],[]],[[-1,-2,1],-1,[],[]],[[-1,-2,1],-1,[],[]],[[],-1,[]],[[-1,[3,[2]]],-2,[],4],[[-1,[3,[2]]],-2,[],4],[[-1,[3,[2]]],-2,[],4],[[-1,[3,[2]]],-2,[],4],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[[-1,-1,-1,-1],[[5,[-1,-1,-1,-1]]],6],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[[-1,-2],-3,[],[],[[7,[-2]]]],[[-1,-2],-3,[],[],[[7,[-2]]]],[-1,-2,[],[]],[[[3,[2]]],-1,[]],[[[3,[2]]],-1,[]],[[-1,-2],-3,[],[],[[8,[-2]]]],[[-1,-2],-3,[],[],[[8,[-2]]]],0,0,0,[-1,-2,[],[]],[[-1,[3,[2]]],5,[]],[[-1,[3,[2]]],5,[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[9,9],[10,10],[11,11],[12,12],[13,13],[14,14],[15,15],[16,16],[17,17],[18,18],[[[19,[-1,-2,-3]]],[[19,[-1,-2,-3]]],20,20,20],[[[21,[-1]]],[[21,[-1]]],20],[22,22],[23,23],[24,24],[[],22],[[],23],[[],24],[[22,22],25],[[23,23],25],[[24,24],25],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[[26,[1]]],22],[-1,-1,[]],[[[26,[27]]],23],[-1,-1,[]],[-1,-1,[]],[[],[[19,[-1,-2,-3]]],28,28,28],[[],[[21,[-1]]],28],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[26,[22]]],23],[[[26,[22]]],24],[23,[[26,[22]]]],[24,[[26,[22]]]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[22,22],0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]]],"c":[],"p":[[15,"u32"],[15,"u8"],[15,"slice"],[8,"StoreBytes",0],[15,"tuple"],[8,"Sized",269],[8,"Store",0],[8,"MultiLane",0],[3,"YesS3",99],[3,"NoS3",99],[3,"YesS4",99],[3,"NoS4",99],[3,"YesA1",99],[3,"NoA1",99],[3,"YesA2",99],[3,"NoA2",99],[3,"YesNI",99],[3,"NoNI",99],[3,"SseMachine",99],[8,"Clone",270],[3,"Avx2Machine",99],[19,"vec128_storage",99],[19,"vec256_storage",99],[19,"vec512_storage",99],[15,"bool"],[15,"array"],[15,"u64"],[8,"Copy",269],[4,"Result",271],[3,"TypeId",272],[8,"AndNot",0],[8,"BSwap",0],[8,"Vec2",0],[8,"Vec4",0],[8,"Machine",0],[8,"RotateEachWord32",0],[8,"RotateEachWord64",0],[8,"Words4",0],[8,"LaneWords4",0],[8,"Swap64",0],[8,"Vector",0],[8,"Vec4Ext",0],[8,"UnsafeFrom",0],[8,"VZip",0]],"b":[]},\
"proc_macro2":{"doc":"github crates-io docs-rs","t":"NNNEDNDNNDDNNNDNEDDELLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLALLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLALLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDLLLLLLLLLLLLLLDCLLLLLLLLLLLLLL","n":["Alone","Brace","Bracket","Delimiter","Group","Group","Ident","Ident","Joint","LexError","Literal","Literal","None","Parenthesis","Punct","Punct","Spacing","Span","TokenStream","TokenTree","as_char","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","byte_string","call_site","character","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","default","delim_span","delimiter","eq","eq","eq","eq","extend","extend","extra","f32_suffixed","f32_unsuffixed","f64_suffixed","f64_unsuffixed","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_iter","from_iter","from_str","from_str","hash","i128_suffixed","i128_unsuffixed","i16_suffixed","i16_unsuffixed","i32_suffixed","i32_unsuffixed","i64_suffixed","i64_unsuffixed","i8_suffixed","i8_unsuffixed","into","into","into","into","into","into","into","into","into","into","into_iter","is_empty","isize_suffixed","isize_unsuffixed","join","located_at","mixed_site","new","new","new","new","new_raw","partial_cmp","resolved_at","set_span","set_span","set_span","set_span","set_span","source_text","spacing","span","span","span","span","span","span","span_close","span_open","stream","string","subspan","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","to_string","to_string","to_string","to_string","token_stream","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","u128_suffixed","u128_unsuffixed","u16_suffixed","u16_unsuffixed","u32_suffixed","u32_unsuffixed","u64_suffixed","u64_unsuffixed","u8_suffixed","u8_unsuffixed","unwrap","usize_suffixed","usize_unsuffixed","DelimSpan","borrow","borrow_mut","clone","clone_into","close","fmt","from","into","join","open","to_owned","try_from","try_into","type_id","IntoIter","TokenStream","borrow","borrow_mut","clone","clone_into","fmt","from","into","into_iter","next","size_hint","to_owned","try_from","try_into","type_id"],"q":[[0,"proc_macro2"],[228,"proc_macro2::extra"],[243,"proc_macro2::token_stream"],[259,"core::cmp"],[260,"core::marker"],[261,"core::convert"],[262,"core::iter::traits::collect"],[263,"core::fmt"],[264,"core::fmt"],[265,"proc_macro"],[266,"core::hash"],[267,"core::option"],[268,"alloc::string"],[269,"core::ops::range"],[270,"core::any"]],"d":["E.g. <code>+</code> is <code>Alone</code> in <code>+ =</code>, <code>+ident</code> or <code>+()</code>.","<code>{ ... }</code>","<code>[ ... ]</code>","Describes how a sequence of token trees is delimited.","A delimited token stream.","A token stream surrounded by bracket delimiters.","A word of Rust code, which may be a keyword or legal …","An identifier.","E.g. <code>+</code> is <code>Joint</code> in <code>+=</code> or <code>&#39;</code> is <code>Joint</code> in <code>&#39;#</code>.","Error returned from <code>TokenStream::from_str</code>.","A literal string (<code>&quot;hello&quot;</code>), byte string (<code>b&quot;hello&quot;</code>), …","A literal character (<code>&#39;a&#39;</code>), string (<code>&quot;hello&quot;</code>), number (<code>2.3</code>), …","<code>Ø ... Ø</code>","<code>( ... )</code>","A <code>Punct</code> is a single punctuation character like <code>+</code>, <code>-</code> or <code>#</code>.","A single punctuation character (<code>+</code>, <code>,</code>, <code>$</code>, etc.).","Whether a <code>Punct</code> is followed immediately by another <code>Punct</code> …","A region of source code, along with macro expansion …","An abstract stream of tokens, or more concretely a …","A single token or a delimited sequence of token trees …","Returns the value of this punctuation character as <code>char</code>.","","","","","","","","","","","","","","","","","","","","","Byte string literal.","The span of the invocation of the current procedural macro.","Character literal.","","","","","","","","","","","","","","","","","","","","","Returns an object that holds this group’s <code>span_open()</code> and","Returns the punctuation used as the delimiter for this …","","","","","","","Items which do not have a correspondence to any API in the …","Creates a new suffixed floating-point literal.","Creates a new unsuffixed floating-point literal.","Creates a new suffixed floating-point literal.","Creates a new unsuffixed floating-point literal.","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","Returns the argument unchanged.","","","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","Creates a new suffixed integer literal with the specified …","Creates a new unsuffixed integer literal with the …","Creates a new suffixed integer literal with the specified …","Creates a new unsuffixed integer literal with the …","Creates a new suffixed integer literal with the specified …","Creates a new unsuffixed integer literal with the …","Creates a new suffixed integer literal with the specified …","Creates a new unsuffixed integer literal with the …","Creates a new suffixed integer literal with the specified …","Creates a new unsuffixed integer literal with the …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Checks if this <code>TokenStream</code> is empty.","Creates a new suffixed integer literal with the specified …","Creates a new unsuffixed integer literal with the …","Create a new span encompassing <code>self</code> and <code>other</code>.","Creates a new span with the same name resolution behavior …","The span located at the invocation of the procedural …","Returns an empty <code>TokenStream</code> containing no token trees.","Creates a new <code>Group</code> with the given delimiter and token …","Creates a new <code>Punct</code> from the given character and spacing.","Creates a new <code>Ident</code> with the given <code>string</code> as well as the …","Same as <code>Ident::new</code>, but creates a raw identifier (<code>r#ident</code>…","","Creates a new span with the same line/column information …","Configures the span for <em>only this token</em>.","Configures the span for this <code>Group</code>’s delimiters, but not …","Configure the span for this punctuation character.","Configures the span of this <code>Ident</code>, possibly changing its …","Configures the span associated for this literal.","Returns the source text behind a span. This preserves the …","Returns the spacing of this punctuation character, …","","Returns the span of this tree, delegating to the <code>span</code> …","Returns the span for the delimiters of this token stream, …","Returns the span for this punctuation character.","Returns the span of this <code>Ident</code>.","Returns the span encompassing this literal.","Returns the span pointing to the closing delimiter of this …","Returns the span pointing to the opening delimiter of this …","Returns the <code>TokenStream</code> of tokens that are delimited in …","String literal.","Returns a <code>Span</code> that is a subset of <code>self.span()</code> containing …","","","","","","","","","","","","","","","","","Public implementation details for the <code>TokenStream</code> type, …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Creates a new suffixed integer literal with the specified …","Creates a new unsuffixed integer literal with the …","Creates a new suffixed integer literal with the specified …","Creates a new unsuffixed integer literal with the …","Creates a new suffixed integer literal with the specified …","Creates a new unsuffixed integer literal with the …","Creates a new suffixed integer literal with the specified …","Creates a new unsuffixed integer literal with the …","Creates a new suffixed integer literal with the specified …","Creates a new unsuffixed integer literal with the …","Convert <code>proc_macro2::Span</code> to <code>proc_macro::Span</code>.","Creates a new suffixed integer literal with the specified …","Creates a new unsuffixed integer literal with the …","An object that holds a <code>Group</code>’s <code>span_open()</code> and …","","","","","Returns a span for the closing punctuation of the group …","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Returns a span covering the entire delimited group.","Returns a span for the opening punctuation of the group …","","","","","An iterator over <code>TokenStream</code>’s <code>TokenTree</code>s.","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","",""],"i":[11,10,10,0,0,8,0,8,11,0,0,8,10,10,0,8,0,0,0,0,1,23,7,6,8,9,10,1,11,12,5,23,7,6,8,9,10,1,11,12,5,5,6,5,7,6,8,9,10,1,11,12,5,7,6,8,9,10,1,11,12,5,12,7,9,9,10,11,12,12,7,7,0,5,5,5,5,23,23,7,7,6,8,8,9,9,10,1,1,11,12,12,5,5,23,7,7,7,6,6,8,8,8,8,8,9,10,1,11,12,5,7,7,7,5,12,5,5,5,5,5,5,5,5,5,5,23,7,6,8,9,10,1,11,12,5,7,7,5,5,6,6,6,7,9,1,12,12,12,6,8,9,1,12,5,6,1,23,8,9,1,12,5,9,9,9,5,5,7,6,8,9,10,1,11,12,5,23,7,8,9,1,12,5,0,23,7,6,8,9,10,1,11,12,5,23,7,6,8,9,10,1,11,12,5,23,7,6,8,9,10,1,11,12,5,5,5,5,5,5,5,5,5,5,5,6,5,5,0,15,15,15,15,15,15,15,15,15,15,15,15,15,15,0,0,35,35,35,35,35,35,35,35,35,35,35,35,35,35],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[1,2],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[4,[3]]],5],[[],6],[2,5],[7,7],[6,6],[8,8],[9,9],[10,10],[1,1],[11,11],[12,12],[5,5],[[-1,-2],13,[],[]],[[-1,-2],13,[],[]],[[-1,-2],13,[],[]],[[-1,-2],13,[],[]],[[-1,-2],13,[],[]],[[-1,-2],13,[],[]],[[-1,-2],13,[],[]],[[-1,-2],13,[],[]],[[-1,-2],13,[],[]],[[12,12],14],[[],7],[9,15],[9,10],[[10,10],16],[[11,11],16],[[12,-1],16,[17,[19,[18]]]],[[12,12],16],[[7,-1],13,20],[[7,-1],13,20],0,[21,5],[21,5],[22,5],[22,5],[[23,24],25],[[23,24],25],[[7,24],25],[[7,24],25],[[6,24],25],[[8,24],25],[[8,24],25],[[9,24],25],[[9,24],25],[[10,24],25],[[1,24],25],[[1,24],25],[[11,24],25],[[12,24],25],[[12,24],25],[[5,24],25],[[5,24],25],[-1,-1,[]],[-1,-1,[]],[8,7],[26,7],[27,6],[-1,-1,[]],[9,8],[1,8],[5,8],[-1,-1,[]],[12,8],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,7,20],[-1,7,20],[18,[[28,[7,23]]]],[18,[[28,[5,23]]]],[[12,-1],13,29],[30,5],[30,5],[31,5],[31,5],[32,5],[32,5],[33,5],[33,5],[34,5],[34,5],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[7,35],[7,16],[36,5],[36,5],[[6,6],[[37,[6]]]],[[6,6],6],[[],6],[[],7],[[10,7],9],[[2,11],1],[[18,6],12],[[18,6],12],[[12,12],[[37,[14]]]],[[6,6],6],[[8,6],13],[[9,6],13],[[1,6],13],[[12,6],13],[[5,6],13],[6,[[37,[38]]]],[1,11],[23,6],[8,6],[9,6],[1,6],[12,6],[5,6],[9,6],[9,6],[9,7],[18,5],[[5,-1],[[37,[6]]],[[40,[39]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,38,[]],[-1,38,[]],[-1,38,[]],[-1,38,[]],[-1,38,[]],[-1,38,[]],[-1,38,[]],0,[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,41,[]],[-1,41,[]],[-1,41,[]],[-1,41,[]],[-1,41,[]],[-1,41,[]],[-1,41,[]],[-1,41,[]],[-1,41,[]],[-1,41,[]],[42,5],[42,5],[43,5],[43,5],[44,5],[44,5],[45,5],[45,5],[3,5],[3,5],[6,27],[39,5],[39,5],0,[-1,-2,[],[]],[-1,-2,[],[]],[15,15],[[-1,-2],13,[],[]],[15,6],[[15,24],25],[-1,-1,[]],[-1,-2,[],[]],[15,6],[15,6],[-1,-2,[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,41,[]],0,0,[-1,-2,[],[]],[-1,-2,[],[]],[35,35],[[-1,-2],13,[],[]],[[35,24],25],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[35,[[37,[8]]]],[35,[[13,[39,[37,[39]]]]]],[-1,-2,[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,41,[]]],"c":[],"p":[[3,"Punct",0],[15,"char"],[15,"u8"],[15,"slice"],[3,"Literal",0],[3,"Span",0],[3,"TokenStream",0],[4,"TokenTree",0],[3,"Group",0],[4,"Delimiter",0],[4,"Spacing",0],[3,"Ident",0],[15,"tuple"],[4,"Ordering",259],[3,"DelimSpan",228],[15,"bool"],[8,"Sized",260],[15,"str"],[8,"AsRef",261],[8,"IntoIterator",262],[15,"f32"],[15,"f64"],[3,"LexError",0],[3,"Formatter",263],[6,"Result",263],[3,"TokenStream",264],[3,"Span",264],[4,"Result",265],[8,"Hasher",266],[15,"i128"],[15,"i16"],[15,"i32"],[15,"i64"],[15,"i8"],[3,"IntoIter",243],[15,"isize"],[4,"Option",267],[3,"String",268],[15,"usize"],[8,"RangeBounds",269],[3,"TypeId",270],[15,"u128"],[15,"u16"],[15,"u32"],[15,"u64"]],"b":[[68,"impl-PartialEq%3CT%3E-for-Ident"],[69,"impl-PartialEq-for-Ident"],[70,"impl-Extend%3CTokenStream%3E-for-TokenStream"],[71,"impl-Extend%3CTokenTree%3E-for-TokenStream"],[77,"impl-Display-for-LexError"],[78,"impl-Debug-for-LexError"],[79,"impl-Debug-for-TokenStream"],[80,"impl-Display-for-TokenStream"],[82,"impl-Display-for-TokenTree"],[83,"impl-Debug-for-TokenTree"],[84,"impl-Display-for-Group"],[85,"impl-Debug-for-Group"],[87,"impl-Display-for-Punct"],[88,"impl-Debug-for-Punct"],[90,"impl-Display-for-Ident"],[91,"impl-Debug-for-Ident"],[92,"impl-Display-for-Literal"],[93,"impl-Debug-for-Literal"],[96,"impl-From%3CTokenTree%3E-for-TokenStream"],[97,"impl-From%3CTokenStream%3E-for-TokenStream"],[100,"impl-From%3CGroup%3E-for-TokenTree"],[101,"impl-From%3CPunct%3E-for-TokenTree"],[102,"impl-From%3CLiteral%3E-for-TokenTree"],[104,"impl-From%3CIdent%3E-for-TokenTree"],[111,"impl-FromIterator%3CTokenTree%3E-for-TokenStream"],[112,"impl-FromIterator%3CTokenStream%3E-for-TokenStream"]]},\
"quote":{"doc":"github crates-io docs-rs","t":"IIIKKKKKOLLOOLLLLK","n":["IdentFragment","ToTokens","TokenStreamExt","append","append_all","append_separated","append_terminated","fmt","format_ident","into_token_stream","into_token_stream","quote","quote_spanned","span","span","to_token_stream","to_token_stream","to_tokens"],"q":[[0,"quote"],[18,"proc_macro2"],[19,"core::convert"],[20,"core::iter::traits::collect"],[21,"core::fmt"],[22,"core::fmt"],[23,"proc_macro2"]],"d":["Specialized formatting trait used by <code>format_ident!</code>.","Types that can be interpolated inside a <code>quote!</code> invocation.","TokenStream extension trait with methods for appending …","For use by <code>ToTokens</code> implementations.","For use by <code>ToTokens</code> implementations.","For use by <code>ToTokens</code> implementations.","For use by <code>ToTokens</code> implementations.","Format this value as an identifier fragment.","Formatting macro for constructing <code>Ident</code>s.","Convert <code>self</code> directly into a <code>TokenStream</code> object.","Convert <code>self</code> directly into a <code>TokenStream</code> object.","The whole point.","Same as <code>quote!</code>, but applies a given span to all tokens …","Span associated with this <code>IdentFragment</code>.","Span associated with this <code>IdentFragment</code>.","Convert <code>self</code> directly into a <code>TokenStream</code> object.","Convert <code>self</code> directly into a <code>TokenStream</code> object.","Write <code>self</code> to the given <code>TokenStream</code>."],"i":[0,0,0,12,12,12,12,13,0,5,5,0,0,13,13,5,5,5],"f":[0,0,0,[[-1,-2],1,[],[[3,[2]]]],[[-1,-2],1,[],4],[[-1,-2,-3],1,[],4,5],[[-1,-2,-3],1,[],4,5],[[-1,6],7,[]],0,[-1,8,9],[-1,8,9],0,0,[-1,[[11,[10]]],[]],[-1,[[11,[10]]],[]],[-1,8,[]],[-1,8,[]],[[-1,8],1,[]]],"c":[],"p":[[15,"tuple"],[4,"TokenTree",18],[8,"Into",19],[8,"IntoIterator",20],[8,"ToTokens",0],[3,"Formatter",21],[6,"Result",21],[3,"TokenStream",18],[8,"Sized",22],[3,"Span",18],[4,"Option",23],[8,"TokenStreamExt",0],[8,"IdentFragment",0]],"b":[]},\
"radium":{"doc":"<code>radium</code> provides a series of helpers for a uniform API over …","t":"QIKKKKKKKKKKKKOKKAKKKAIIGGGGGGGGGGGG","n":["Item","Radium","compare_and_swap","compare_exchange","compare_exchange_weak","fence","fetch_add","fetch_and","fetch_nand","fetch_or","fetch_sub","fetch_update","fetch_xor","get_mut","if_atomic","into_inner","load","marker","new","store","swap","types","BitOps","NumericOps","RadiumBool","RadiumI16","RadiumI32","RadiumI64","RadiumI8","RadiumIsize","RadiumPtr","RadiumU16","RadiumU32","RadiumU64","RadiumU8","RadiumUsize"],"q":[[0,"radium"],[22,"radium::marker"],[24,"radium::types"],[36,"core::sync::atomic"],[37,"core::result"],[38,"core::ops::function"]],"d":["","A maybe-atomic shared mutable fundamental type <code>T</code>.","Stores a value into this object if the currently-stored …","Stores a value into this object if the currently-stored …","Stores a value into this object if the currently-stored …","If the underlying value is atomic, calls <code>fence</code> with the …","Adds <code>value</code> to the currently-stored value, wrapping on …","Performs a bitwise “and” on the currently-stored value …","Performs a bitwise “nand” on the currently-stored …","Performs a bitwise “or” on the currently-stored value …","Subtracts <code>value</code> from the currently-stored value, wrapping …","Fetches the value, and applies a function to it that …","Performs a bitwise “xor” on the currently-stored value …","Returns a mutable reference to the underlying value.","Conditional compilation based on the presence of atomic …","Consumes the wrapper and returns the contained value.","Load a value from this object.","Marker traits used by <code>Radium</code>.","Creates a new value of this type.","Store a value in this object.","Swap with the value stored in this object.","Best-effort atomic types","Types supporting maybe-atomic bitwise operations.","Types supporting maybe-atomic arithmetic operations.","Best-effort atomic <code>bool</code> type.","Best-effort atomic <code>i16</code> type.","Best-effort atomic <code>i32</code> type.","Best-effort atomic <code>i64</code> type.","Best-effort atomic <code>i8</code> type.","Best-effort atomic <code>isize</code> type.","Best-effort atomic pointer type.","Best-effort atomic <code>u16</code> type.","Best-effort atomic <code>u32</code> type.","Best-effort atomic <code>u64</code> type.","Best-effort atomic <code>u8</code> type.","Best-effort atomic <code>usize</code> type."],"i":[5,0,5,5,5,5,5,5,5,5,5,5,5,5,0,5,5,0,5,5,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],"f":[0,0,[[-1,1],[],[]],[[-1,1,1],2,[]],[[-1,1,1],2,[]],[1,3],[[-1,1],[],[]],[[-1,1],[],[]],[[-1,1],[],[]],[[-1,1],[],[]],[[-1,1],[],[]],[[-1,1,1,-2],2,[],4],[[-1,1],[],[]],[-1,[],[]],0,[-1,[],[]],[[-1,1],[],[]],0,[[],-1,[]],[[-1,1],3,[]],[[-1,1],[],[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],"c":[2],"p":[[4,"Ordering",36],[4,"Result",37],[15,"tuple"],[8,"FnMut",38],[8,"Radium",0]],"b":[]},\
"rand":{"doc":"Utilities for random number generation","t":"SIDISIIQILLLALLKLLLLLLLKLLLLLLLLLLLKKAFLLALLLLLALLFLKLLKLLLLNDDEDDIINNNDDDDNDEDKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLALLLLLLLLLLLLLAIIIQDDDDDIQKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKKLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLCCAIDLLLLLLLLLLCCCCCCCCCCCDDDALLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLALLLLLLLLLLLLLLLLLLLLLLLLDDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDLLLLLLLLLLLLLLLLLLQIDILLKLKLLKKLKKLLALLLLKKLLLLLEEELLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFFLLLLLLLLLLLLLLLL","n":["CUSTOM_START","CryptoRng","Error","Fill","INTERNAL_START","Rng","RngCore","Seed","SeedableRng","borrow","borrow_mut","code","distributions","fill","fill","fill_bytes","fmt","fmt","from","from","from","from_entropy","from_rng","from_seed","gen","gen","gen_bool","gen_bool","gen_range","gen_range","gen_ratio","gen_ratio","inner","into","new","next_u32","next_u64","prelude","random","raw_os_error","read","rngs","sample","sample","sample_iter","sample_iter","seed_from_u64","seq","source","take_inner","thread_rng","to_string","try_fill","try_fill","try_fill","try_fill_bytes","try_from","try_into","type_id","vzip","AllWeightsZero","Alphanumeric","Bernoulli","BernoulliError","DistIter","DistMap","DistString","Distribution","InvalidProbability","InvalidWeight","NoItem","Open01","OpenClosed01","Slice","Standard","TooMany","Uniform","WeightedError","WeightedIndex","append_string","append_string","append_string","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","eq","eq","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_ratio","into","into","into","into","into","into","into","into","into","into","into","into","into_iter","map","map","new","new","new","next","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample_iter","sample_iter","sample_string","sample_string","size_hint","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","uniform","update_weights","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","weighted","SampleBorrow","SampleRange","SampleUniform","Sampler","Uniform","UniformChar","UniformDuration","UniformFloat","UniformInt","UniformSampler","X","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","eq","eq","fmt","fmt","fmt","fmt","from","from","from","from","into","into","into","into","is_empty","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new_inclusive","new_inclusive","new_inclusive","new_inclusive","new_inclusive","new_inclusive","new_inclusive","new_inclusive","new_inclusive","new_inclusive","new_inclusive","new_inclusive","new_inclusive","new_inclusive","new_inclusive","new_inclusive","new_inclusive","new_inclusive","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample_single","sample_single","sample_single","sample_single","sample_single","sample_single","sample_single","sample_single","sample_single","sample_single","sample_single","sample_single","sample_single","sample_single","sample_single","sample_single","sample_single_inclusive","sample_single_inclusive","sample_single_inclusive","sample_single_inclusive","sample_single_inclusive","sample_single_inclusive","sample_single_inclusive","sample_single_inclusive","sample_single_inclusive","sample_single_inclusive","sample_single_inclusive","sample_single_inclusive","sample_single_inclusive","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","WeightedError","WeightedIndex","alias_method","Weight","WeightedIndex","borrow","borrow_mut","fmt","from","into","new","try_from","try_into","type_id","vzip","CryptoRng","Distribution","IteratorRandom","Rng","RngCore","SeedableRng","SliceRandom","StdRng","ThreadRng","random","thread_rng","OsRng","StdRng","ThreadRng","adapter","as_rngcore","as_rngcore","as_rngcore","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","default","default","eq","fill_bytes","fill_bytes","fill_bytes","fmt","fmt","fmt","from","from","from","from_rng","from_seed","into","into","into","mock","next_u32","next_u32","next_u32","next_u64","next_u64","next_u64","to_owned","to_owned","to_owned","try_fill_bytes","try_fill_bytes","try_fill_bytes","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","vzip","vzip","vzip","ReadError","ReadRng","ReseedingRng","as_rngcore","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone_into","fill_bytes","fill_bytes","fmt","fmt","fmt","fmt","from","from","from","into","into","into","new","new","next_u32","next_u32","next_u64","next_u64","reseed","source","to_owned","to_string","try_fill_bytes","try_fill_bytes","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","vzip","vzip","vzip","StepRng","borrow","borrow_mut","clone","clone_into","eq","fill_bytes","fmt","from","into","new","next_u32","next_u64","to_owned","try_fill_bytes","try_from","try_into","type_id","vzip","Item","IteratorRandom","SliceChooseIter","SliceRandom","borrow","borrow_mut","choose","choose","choose_multiple","choose_multiple","choose_multiple_fill","choose_multiple_weighted","choose_mut","choose_stable","choose_weighted","choose_weighted_mut","fmt","from","index","into","into_iter","len","next","partial_shuffle","shuffle","size_hint","try_from","try_into","type_id","vzip","IndexVec","IndexVecIntoIter","IndexVecIter","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","eq","fmt","fmt","fmt","from","from","from","from","from","index","into","into","into","into_iter","into_iter","into_iter","into_vec","is_empty","iter","len","next","next","sample","sample_weighted","size_hint","size_hint","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","vzip","vzip","vzip"],"q":[[0,"rand"],[60,"rand::distributions"],[328,"rand::distributions::uniform"],[473,"rand::distributions::weighted"],[476,"rand::distributions::weighted::alias_method"],[488,"rand::prelude"],[499,"rand::rngs"],[560,"rand::rngs::adapter"],[608,"rand::rngs::mock"],[627,"rand::seq"],[657,"rand::seq::index"],[710,"core::num::nonzero"],[711,"core::option"],[712,"core::marker"],[713,"core::fmt"],[714,"core::fmt"],[715,"getrandom::error"],[716,"core::error"],[717,"alloc::boxed"],[718,"core::convert"],[719,"std::io::error"],[720,"alloc::string"],[721,"core::any"],[722,"core::clone"],[723,"core::cmp"],[724,"core::cmp"],[725,"core::ops::range"],[726,"core::iter::traits::collect"],[727,"core::ops::arith"],[728,"core::default"],[729,"core::num::nonzero"],[730,"core::num::nonzero"],[731,"alloc::vec"],[732,"rand_core::block"],[733,"std::io"],[734,"core::ops::index"]],"d":["Codes at or above this point can be used by users to …","A marker trait used to indicate that an <code>RngCore</code> or …","Error type of random number generators","Types which may be filled with random data","Codes below this point represent OS Errors (i.e. positive …","An automatically-implemented extension trait on <code>RngCore</code> …","The core of a random number generator.","Seed type, which is restricted to types …","A random number generator that can be explicitly seeded.","","","Retrieve the error code, if any.","Generating random samples from probability distributions","Fill any type implementing <code>Fill</code> with random data","Fill any type implementing <code>Fill</code> with random data","Fill <code>dest</code> with random data.","","","","Returns the argument unchanged.","","Creates a new instance of the RNG seeded via <code>getrandom</code>.","Create a new PRNG seeded from another <code>Rng</code>.","Create a new PRNG using the given seed.","Return a random value supporting the <code>Standard</code> distribution.","Return a random value supporting the <code>Standard</code> distribution.","Return a bool with a probability <code>p</code> of being true.","Return a bool with a probability <code>p</code> of being true.","Generate a random value in the given range.","Generate a random value in the given range.","Return a bool with a probability of <code>numerator/denominator</code> …","Return a bool with a probability of <code>numerator/denominator</code> …","Reference the inner error (<code>std</code> only)","Calls <code>U::from(self)</code>.","Construct from any type supporting <code>std::error::Error</code>","Return the next random <code>u32</code>.","Return the next random <code>u64</code>.","Convenience re-export of common members","Generates a random value using the thread-local random …","Extract the raw OS error code (if this error came from the …","","Random number generators and adapters","Sample a new value, using the given distribution.","Sample a new value, using the given distribution.","Create an iterator that generates values using the given …","Create an iterator that generates values using the given …","Create a new PRNG using a <code>u64</code> seed.","Sequence-related functionality","","Unwrap the inner error (<code>std</code> only)","Retrieve the lazily-initialized thread-local random number …","","Fill self with random data","Fill any type implementing <code>Fill</code> with random data","Fill any type implementing <code>Fill</code> with random data","Fill <code>dest</code> entirely with random data.","","","","","All items in the provided weight collection are zero.","Sample a <code>u8</code>, uniformly distributed over ASCII letters and …","The Bernoulli distribution.","Error type returned from <code>Bernoulli::new</code>.","An iterator that generates random values of <code>T</code> with …","A distribution of values of type <code>S</code> derived from the …","<code>String</code> sampler","Types (distributions) that can be used to create a random …","<code>p &lt; 0</code> or <code>p &gt; 1</code>.","A weight is either less than zero, greater than the …","The provided weight collection contains no items.","A distribution to sample floating point numbers uniformly …","A distribution to sample floating point numbers uniformly …","A distribution to sample items uniformly from a slice.","A generic random value distribution, implemented for many …","Too many weights are provided (length greater than <code>u32::MAX</code>…","Sample values uniformly between two bounds.","Error type returned from <code>WeightedIndex::new</code>.","A distribution using weighted sampling of discrete items","Append <code>len</code> random chars to <code>string</code>","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","Construct a new <code>Bernoulli</code> with the probability of success …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Create a distribution of values of ‘S’ by mapping the …","Create a distribution of values of ‘S’ by mapping the …","Construct a new <code>Bernoulli</code> with the given probability of …","Create a new <code>Slice</code> instance which samples uniformly from …","Creates a new a <code>WeightedIndex</code> <code>Distribution</code> using the values","","Generate a random value of <code>T</code>, using <code>rng</code> as the source of …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Create an iterator that generates random values of <code>T</code>, …","Create an iterator that generates random values of <code>T</code>, …","Generate a <code>String</code> of <code>len</code> random chars","Generate a <code>String</code> of <code>len</code> random chars","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","A distribution uniformly sampling numbers within a given …","Update a subset of weights, without changing the number of …","","","","","","","","","","","","","Weighted index sampling","Helper trait similar to <code>Borrow</code> but implemented only for …","Range that supports generating a single sample efficiently.","Helper trait for creating objects using the correct …","The <code>UniformSampler</code> implementation supporting type <code>X</code>.","Sample values uniformly between two bounds.","The back-end implementing <code>UniformSampler</code> for <code>char</code>.","The back-end implementing <code>UniformSampler</code> for <code>Duration</code>.","The back-end implementing <code>UniformSampler</code> for …","The back-end implementing <code>UniformSampler</code> for integer types.","Helper trait handling actual uniform sampling.","The type sampled by this implementation.","Immutably borrows from an owned value. See <code>Borrow::borrow</code>","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Check whether the range is empty.","Construct self, with inclusive lower bound and exclusive …","Create a new <code>Uniform</code> instance which samples uniformly from …","","","","","","","","","","","","","","","","","Construct self, with inclusive bounds <code>[low, high]</code>.","Create a new <code>Uniform</code> instance which samples uniformly from …","","","","","","","","","","","","","","","","","Sample a value.","","","","","","","","","","","","","","","","","Generate a sample from the given range.","Sample a single value uniformly from a range with …","","","","","","","","","","","","","","","Sample a single value uniformly from a range with …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","A random number generator that retrieves randomness from …","The standard RNG. The PRNG algorithm in <code>StdRng</code> is chosen …","A reference to the thread-local generator","Wrappers / adapters forming RNGs","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Mock random number generator","","","","","","","","","","","","","","","","","","","","","","","","","<code>ReadRng</code> error type","An RNG that reads random bytes straight from any type …","A wrapper around any PRNG that implements <code>BlockRngCore</code>, …","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Create a new <code>ReadRng</code> from a <code>Read</code>.","Create a new <code>ReseedingRng</code> from an existing PRNG, combined …","","","","","Reseed the internal PRNG.","","","","","","","","","","","","","","","","","","A simple implementation of <code>RngCore</code> for testing purposes.","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Create a <code>StepRng</code>, yielding an arithmetic sequence starting …","","","","","","","","","The element type.","Extension trait on iterators, providing random sampling …","An iterator over multiple slice elements.","Extension trait on slices, providing random mutation and …","","","Returns a reference to one random element of the slice, or …","Choose one element at random from the iterator.","Chooses <code>amount</code> elements from the slice at random, without …","Collects <code>amount</code> values at random from the iterator into a …","Collects values at random from the iterator into a …","Similar to <code>choose_multiple</code>, but where the likelihood of …","Returns a mutable reference to one random element of the …","Choose one element at random from the iterator.","Similar to <code>choose</code>, but where the likelihood of each …","Similar to <code>choose_mut</code>, but where the likelihood of each …","","Returns the argument unchanged.","Low-level API for sampling indices","Calls <code>U::from(self)</code>.","","","","Shuffle a slice in place, but exit early.","Shuffle a mutable slice in place.","","","","","","A vector of indices.","Return type of <code>IndexVec::into_iter</code>.","Return type of <code>IndexVec::iter</code>.","","","","","","","","","","","","","","","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","Return the value at the given <code>index</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Convert into an iterator over the indices as a sequence of …","","","Return result as a <code>Vec&lt;usize&gt;</code>. Conversion may or may not …","Returns <code>true</code> if the length is 0.","Iterate over the indices as a sequence of <code>usize</code> values","Returns the number of indices","","","Randomly sample exactly <code>amount</code> distinct indices from …","Randomly sample exactly <code>amount</code> distinct indices from …","","","","","","","","","","","","","","","",""],"i":[1,0,0,0,1,0,0,83,0,1,1,1,0,30,30,13,1,1,1,1,1,83,83,83,30,30,30,30,30,30,30,30,1,1,1,13,13,0,0,1,13,0,30,30,30,30,83,0,1,1,0,1,5,30,30,13,1,1,1,1,42,0,0,0,0,0,0,0,35,42,42,0,0,0,0,42,0,0,0,93,32,33,34,35,27,47,36,37,32,38,40,42,43,33,34,35,27,47,36,37,32,38,40,42,43,33,34,35,36,37,32,38,40,42,43,33,34,35,36,37,32,38,40,42,43,33,34,35,40,42,43,34,35,35,27,47,36,37,32,38,40,42,42,43,33,34,35,27,47,36,37,32,38,40,42,43,43,43,33,34,34,35,27,47,36,37,32,38,40,42,43,33,27,26,26,34,38,40,27,26,34,47,36,36,37,37,32,38,40,43,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,26,26,93,93,27,34,35,36,37,32,38,40,42,43,33,35,42,34,35,27,47,36,37,32,38,40,42,43,33,34,35,27,47,36,37,32,38,40,42,43,33,34,35,27,47,36,37,32,38,40,42,43,33,0,40,34,35,27,47,36,37,32,38,40,42,43,33,0,0,0,0,16,0,0,0,0,0,0,94,74,70,71,72,73,70,71,72,73,70,71,72,73,70,71,72,73,70,72,70,71,72,73,70,71,72,73,70,71,72,73,17,94,43,70,70,70,70,70,70,70,70,70,70,70,70,71,72,72,73,94,43,70,70,70,70,70,70,70,70,70,70,70,70,71,72,72,73,94,70,70,70,70,70,70,70,70,70,70,70,70,71,72,72,73,17,94,70,70,70,70,70,70,70,70,70,70,70,70,72,72,94,70,70,70,70,70,70,70,70,70,70,70,70,70,71,72,73,70,71,72,73,70,71,72,73,70,71,72,73,70,71,72,73,0,0,0,0,0,76,76,76,76,76,76,76,76,76,76,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,79,80,28,79,80,28,79,80,28,79,80,28,79,80,28,79,28,80,79,80,28,79,80,28,79,80,28,80,80,79,80,28,0,79,80,28,79,80,28,79,80,28,79,80,28,79,80,28,79,80,28,79,80,28,79,80,28,0,0,0,81,84,86,81,84,86,81,81,81,84,81,84,86,86,81,84,86,81,84,86,81,84,81,84,81,84,81,81,86,81,86,84,81,84,86,81,84,86,81,84,86,81,84,86,81,0,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,95,0,0,0,88,88,95,96,95,96,96,95,95,96,95,95,88,88,0,88,88,88,88,95,95,88,88,88,88,88,0,0,0,90,92,91,90,92,91,90,91,90,91,90,90,92,91,90,90,90,92,91,90,90,92,91,90,92,91,90,90,90,90,92,91,0,0,92,91,90,91,90,92,91,90,92,91,90,92,91,90,92,91],"f":[0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[1,[[3,[2]]]],0,[[-1,-2],4,[],[5,6]],[[-1,-2],4,[],[5,6]],[[-1,[8,[7]]],4,[]],[[1,9],[[11,[4,10]]]],[[1,9],[[11,[4,10]]]],[2,1],[-1,-1,[]],[12,1],[[],-1,[]],[-1,[[11,[-2,1]]],13,[]],[[],-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[[-1,14],15,[]],[[-1,14],15,[]],[[-1,-3],-2,[],16,[[17,[-2]]]],[[-1,-3],-2,[],16,[[17,[-2]]]],[[-1,18,18],15,[]],[[-1,18,18],15,[]],[1,19],[-1,-2,[],[]],[-1,1,[[21,[[20,[19]]]]]],[-1,18,[]],[-1,22,[]],0,[[],-1,[]],[1,[[3,[23]]]],[[13,[8,[7]]],[[11,[24,25]]]],0,[[-1,-3],-2,[],[],[[26,[-2]]]],[[-1,-3],-2,[],[],[[26,[-2]]]],[[-1,-3],[[27,[-3,-1,-2]]],6,[],[[26,[-2]]]],[[-1,-3],[[27,[-3,-1,-2]]],6,[],[[26,[-2]]]],[22,-1,[]],0,[1,[[3,[19]]]],[1,[[20,[19]]]],[[],28],[-1,29,[]],[[-1,-2],[[11,[4,1]]],[],[30,6]],[[-1,-2],[[11,[4,1]]],[],[5,6]],[[-1,-2],[[11,[4,1]]],[],[5,6]],[[-1,[8,[7]]],[[11,[4,1]]],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,31,[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[-1,-2,29,24],4,[],[30,6]],[[32,-1,29,24],4,[30,6]],[[33,-1,29,24],4,[30,6]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[34,34],[35,35],[36,36],[37,37],[32,32],[[[38,[-1]]],[[38,[-1]]],39],[[[40,[-1]]],[[40,[-1]]],[39,16,41]],[42,42],[[[43,[-1]]],[[43,[-1]]],[39,16]],[33,33],[[-1,-2],4,[],[]],[[-1,-2],4,[],[]],[[-1,-2],4,[],[]],[[-1,-2],4,[],[]],[[-1,-2],4,[],[]],[[-1,-2],4,[],[]],[[-1,-2],4,[],[]],[[-1,-2],4,[],[]],[[-1,-2],4,[],[]],[[-1,-2],4,[],[]],[[34,34],15],[[35,35],15],[[[40,[-1]],[40,[-1]]],15,[44,16,41]],[[42,42],15],[[[43,[-1]],[43,[-1]]],15,[44,16]],[[34,9],45],[[35,9],45],[[35,9],45],[[[27,[-1,-2,-3]],9],45,46,46,46],[[[47,[-1,-2,-3,-4]],9],45,46,46,46,46],[[36,9],45],[[37,9],45],[[32,9],45],[[[38,[-1]],9],45,46],[[[40,[-1]],9],45,[46,16,41]],[[42,9],45],[[42,9],45],[[[43,[-1]],9],45,[46,16]],[[33,9],45],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[[48,[-1]]],[[43,[-1]]],16],[-1,-1,[]],[[[49,[-1]]],[[43,[-1]]],16],[-1,-1,[]],[[18,18],[[11,[34,35]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[-1,-2],[[47,[-1,-2,-3,-4]]],6,50,[],[]],[[-1,-2],[[47,[-1,-2,-3,-4]]],6,50,[],[]],[14,[[11,[34,35]]]],[[[8,[-1]]],[[11,[[38,[-1]],0]]],[]],[-1,[[11,[[40,[-2]],42]]],51,[52,39,53,16,41]],[[[27,[-2,-3,-1]]],[[3,[-1]]],[],[[26,[-1]]],30],[[-1,-2],-3,[],[30,6],[]],[[34,-1],15,[30,6]],[[[47,[-2,-3,-1,-4]],-5],-4,[],[[26,[-1]]],50,[],[30,6]],[[36,-1],14,[30,6]],[[36,-1],54,[30,6]],[[37,-1],14,[30,6]],[[37,-1],54,[30,6]],[[32,-1],7,[30,6]],[[[38,[-1]],-2],-1,[],[30,6]],[[[40,[-1]],-2],24,[16,41],[30,6]],[[[43,[-1]],-2],-1,16,[30,6]],[[33,-1],[[4,[-2,-3,-4,-5,-6,-7,-8,-9,-10,-11]]],[30,6],[],[],[],[],[],[],[],[],[],[]],[[33,-1],[[55,[-2]]],[30,6],[]],[[33,-1],[[55,[-2]]],[30,6],[]],[[33,-1],56,[30,6]],[[33,-1],54,[30,6]],[[33,-1],[[55,[-2]]],[30,6],[]],[[33,-1],57,[30,6]],[[33,-1],14,[30,6]],[[33,-1],[[4,[-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13]]],[30,6],[],[],[],[],[],[],[],[],[],[],[],[]],[[33,-1],[[55,[-2]]],[30,6],[]],[[33,-1],[[4,[-2,-3,-4]]],[30,6],[],[],[]],[[33,-1],[[55,[-2]]],[30,6],[]],[[33,-1],[[55,[-2]]],[30,6],[]],[[33,-1],[[55,[-2]]],[30,6],[]],[[33,-1],[[55,[-2]]],[30,6],[]],[[33,-1],[[55,[-2]]],[30,6],[]],[[33,-1],58,[30,6]],[[33,-1],15,[30,6]],[[33,-1],[[55,[-2]]],[30,6],[]],[[33,-1],[[59,[-2]]],[30,6],[]],[[33,-1],[[55,[-2]]],[30,6],[]],[[33,-1],60,[30,6]],[[33,-1],[[55,[-2]]],[30,6],[]],[[33,-1],[[55,[-2]]],[30,6],[]],[[33,-1],[[55,[-2]]],[30,6],[]],[[33,-1],22,[30,6]],[[33,-1],[[55,[-2]]],[30,6],[]],[[33,-1],[[55,[-2]]],[30,6],[]],[[33,-1],61,[30,6]],[[33,-1],[[55,[-2]]],[30,6],[]],[[33,-1],[[4,[-2,-3,-4,-5]]],[30,6],[],[],[],[]],[[33,-1],[[55,[-2]]],[30,6],[]],[[33,-1],[[55,[-2]]],[30,6],[]],[[33,-1],62,[30,6]],[[33,-1],24,[30,6]],[[33,-1],63,[30,6]],[[33,-1],[[55,[-2]]],[30,6],[]],[[33,-1],18,[30,6]],[[33,-1],[[55,[-2]]],[30,6],[]],[[33,-1],[[4,[-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12]]],[30,6],[],[],[],[],[],[],[],[],[],[],[]],[[33,-1],[[55,[-2]]],[30,6],[]],[[33,-1],64,[30,6]],[[33,-1],7,[30,6]],[[33,-1],23,[30,6]],[[33,-1],[[55,[-2]]],[30,6],[]],[[33,-1],65,[30,6]],[[33,-1],[[55,[-2]]],[30,6],[]],[[33,-1],[[4,[-2,-3,-4,-5,-6,-7]]],[30,6],[],[],[],[],[],[]],[[33,-1],[[55,[-2]]],[30,6],[]],[[33,-1],[[55,[-2]]],[30,6],[]],[[33,-1],[[3,[-2]]],[30,6],[]],[[33,-1],[[4,[-2,-3]]],[30,6],[],[]],[[33,-1],[[55,[-2]]],[30,6],[]],[[33,-1],[[4,[-2,-3,-4,-5,-6]]],[30,6],[],[],[],[],[]],[[33,-1],66,[30,6]],[[33,-1],[[4,[-2,-3,-4,-5,-6,-7,-8,-9]]],[30,6],[],[],[],[],[],[],[],[]],[[33,-1],[[55,[-2]]],[30,6],[]],[[33,-1],[[55,[-2]]],[30,6],[]],[[33,-1],67,[30,6]],[[33,-1],[[4,[-2]]],[30,6],[]],[[33,-1],[[55,[-2]]],[30,6],[]],[[33,-1],68,[30,6]],[[33,-1],[[55,[-2]]],[30,6],[]],[[33,-1],69,[30,6]],[[33,-1],[[55,[-2]]],[30,6],[]],[[33,-1],[[4,[-2,-3,-4,-5,-6,-7,-8,-9,-10]]],[30,6],[],[],[],[],[],[],[],[],[]],[[33,-1],[[4,[-2,-3,-4,-5,-6,-7,-8]]],[30,6],[],[],[],[],[],[],[]],[[33,-1],4,[30,6]],[[33,-1],2,[30,6]],[[33,-1],[[55,[-2]]],[30,6],[]],[[-1,-2],[[27,[-1,-2,-3]]],6,30,[]],[[-1,-2],[[27,[-1,-2,-3]]],6,30,[]],[[-1,-2,24],29,[],[30,6]],[[-1,-2,24],29,[],[30,6]],[[[27,[-2,-3,-1]]],[[4,[24,[3,[24]]]]],[],[[26,[-1]]],30],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,29,[]],[-1,29,[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,31,[]],[-1,31,[]],[-1,31,[]],[-1,31,[]],[-1,31,[]],[-1,31,[]],[-1,31,[]],[-1,31,[]],[-1,31,[]],[-1,31,[]],[-1,31,[]],[-1,31,[]],0,[[[40,[-1]],[8,[[4,[24,-1]]]]],[[11,[4,42]]],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[70,[-1]]],[[70,[-1]]],39],[71,71],[[[72,[-1]]],[[72,[-1]]],39],[73,73],[[-1,-2],4,[],[]],[[-1,-2],4,[],[]],[[-1,-2],4,[],[]],[[-1,-2],4,[],[]],[[[70,[-1]],[70,[-1]]],15,44],[[[72,[-1]],[72,[-1]]],15,44],[[[70,[-1]],9],45,46],[[71,9],45],[[[72,[-1]],9],45,46],[[73,9],45],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,15,[]],[[-1,-2],-3,[74,6],[74,6],[]],[[-2,-3],[[43,[-1]]],16,[[74,[-1]],6],[[74,[-1]],6]],[[-1,-2],[[70,[63]]],[74,6],[74,6]],[[-1,-2],[[70,[7]]],[74,6],[74,6]],[[-1,-2],[[70,[56]]],[74,6],[74,6]],[[-1,-2],[[70,[69]]],[74,6],[74,6]],[[-1,-2],[[70,[18]]],[74,6],[74,6]],[[-1,-2],[[70,[66]]],[74,6],[74,6]],[[-1,-2],[[70,[65]]],[74,6],[74,6]],[[-1,-2],[[70,[22]]],[74,6],[74,6]],[[-1,-2],[[70,[24]]],[74,6],[74,6]],[[-1,-2],[[70,[60]]],[74,6],[74,6]],[[-1,-2],[[70,[64]]],[74,6],[74,6]],[[-1,-2],[[70,[23]]],[74,6],[74,6]],[[-1,-2],71,[74,6],[74,6]],[[-1,-2],[[72,[54]]],[74,6],[74,6]],[[-1,-2],[[72,[14]]],[74,6],[74,6]],[[-1,-2],73,[74,6],[74,6]],[[-1,-2],-3,[74,6],[74,6],[]],[[-2,-3],[[43,[-1]]],16,[[74,[-1]],6],[[74,[-1]],6]],[[-1,-2],[[70,[18]]],[74,6],[74,6]],[[-1,-2],[[70,[23]]],[74,6],[74,6]],[[-1,-2],[[70,[22]]],[74,6],[74,6]],[[-1,-2],[[70,[7]]],[74,6],[74,6]],[[-1,-2],[[70,[60]]],[74,6],[74,6]],[[-1,-2],[[70,[64]]],[74,6],[74,6]],[[-1,-2],[[70,[24]]],[74,6],[74,6]],[[-1,-2],[[70,[65]]],[74,6],[74,6]],[[-1,-2],[[70,[63]]],[74,6],[74,6]],[[-1,-2],[[70,[56]]],[74,6],[74,6]],[[-1,-2],[[70,[66]]],[74,6],[74,6]],[[-1,-2],[[70,[69]]],[74,6],[74,6]],[[-1,-2],71,[74,6],[74,6]],[[-1,-2],[[72,[54]]],[74,6],[74,6]],[[-1,-2],[[72,[14]]],[74,6],[74,6]],[[-1,-2],73,[74,6],[74,6]],[[-1,-2],[],[],[30,6]],[[[70,[7]],-1],[],[30,6]],[[[70,[65]],-1],[],[30,6]],[[[70,[60]],-1],[],[30,6]],[[[70,[64]],-1],[],[30,6]],[[[70,[23]],-1],[],[30,6]],[[[70,[66]],-1],[],[30,6]],[[[70,[22]],-1],[],[30,6]],[[[70,[18]],-1],[],[30,6]],[[[70,[56]],-1],[],[30,6]],[[[70,[63]],-1],[],[30,6]],[[[70,[24]],-1],[],[30,6]],[[[70,[69]],-1],[],[30,6]],[[71,-1],[],[30,6]],[[[72,[14]],-1],[],[30,6]],[[[72,[54]],-1],[],[30,6]],[[73,-1],75,[30,6]],[[-1,-2],-3,[],[13,6],[]],[[-1,-2,-3],[],[74,6],[74,6],[30,6]],[[-1,-2,-3],[],[74,6],[74,6],[30,6]],[[-1,-2,-3],[],[74,6],[74,6],[30,6]],[[-1,-2,-3],[],[74,6],[74,6],[30,6]],[[-1,-2,-3],[],[74,6],[74,6],[30,6]],[[-1,-2,-3],[],[74,6],[74,6],[30,6]],[[-1,-2,-3],[],[74,6],[74,6],[30,6]],[[-1,-2,-3],[],[74,6],[74,6],[30,6]],[[-1,-2,-3],[],[74,6],[74,6],[30,6]],[[-1,-2,-3],[],[74,6],[74,6],[30,6]],[[-1,-2,-3],[],[74,6],[74,6],[30,6]],[[-1,-2,-3],[],[74,6],[74,6],[30,6]],[[-1,-2,-3],[],[74,6],[74,6],[30,6]],[[-1,-2,-3],[],[74,6],[74,6],[30,6]],[[-1,-2,-3],[],[74,6],[74,6],[30,6]],[[-1,-2,-3],[],[74,6],[74,6],[30,6]],[[-1,-2,-3],[],[74,6],[74,6],[30,6]],[[-1,-2,-3],[],[74,6],[74,6],[30,6]],[[-1,-2,-3],[],[74,6],[74,6],[30,6]],[[-1,-2,-3],[],[74,6],[74,6],[30,6]],[[-1,-2,-3],[],[74,6],[74,6],[30,6]],[[-1,-2,-3],[],[74,6],[74,6],[30,6]],[[-1,-2,-3],[],[74,6],[74,6],[30,6]],[[-1,-2,-3],[],[74,6],[74,6],[30,6]],[[-1,-2,-3],[],[74,6],[74,6],[30,6]],[[-1,-2,-3],[],[74,6],[74,6],[30,6]],[[-1,-2,-3],[],[74,6],[74,6],[30,6]],[[-1,-2,-3],[],[74,6],[74,6],[30,6]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,31,[]],[-1,31,[]],[-1,31,[]],[-1,31,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[[[76,[-1]],9],45,[46,77]],[-1,-1,[]],[-1,-2,[],[]],[[[78,[-1]]],[[11,[[76,[-1]],42]]],77],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,31,[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,13,[]],[-1,13,[]],[-1,13,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[79,79],[80,80],[28,28],[[-1,-2],4,[],[]],[[-1,-2],4,[],[]],[[-1,-2],4,[],[]],[[],79],[[],28],[[80,80],15],[[79,[8,[7]]],4],[[80,[8,[7]]],4],[[28,[8,[7]]],4],[[79,9],[[11,[4,10]]]],[[80,9],45],[[28,9],45],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,[[11,[80,1]]],13],[[],80],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[79,18],[80,18],[28,18],[79,22],[80,22],[28,22],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[79,[8,[7]]],[[11,[4,1]]]],[[80,[8,[7]]],[[11,[4,1]]]],[[28,[8,[7]]],[[11,[4,1]]]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,31,[]],[-1,31,[]],[-1,31,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,[-1,13,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[81,[-1,-2]]],[[81,[-1,-2]]],[82,83,39],[13,39]],[[-1,-2],4,[],[]],[[[84,[-1]],[8,[7]]],4,85],[[[81,[-1,-2]],[8,[7]]],4,[82,83],13],[[[84,[-1]],9],45,46],[[86,9],45],[[86,9],45],[[[81,[-1,-2]],9],45,[82,83,46],[13,46]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[84,[-1]]],85],[[-1,22,-2],[[81,[-1,-2]]],[82,83],13],[[[84,[-1]]],18,85],[[[81,[-1,-2]]],18,[82,83],13],[[[84,[-1]]],22,85],[[[81,[-1,-2]]],22,[82,83],13],[[[81,[-1,-2]]],[[11,[4,1]]],[82,83],13],[86,[[3,[19]]]],[-1,-2,[],[]],[-1,29,[]],[[[84,[-1]],[8,[7]]],[[11,[4,1]]],85],[[[81,[-1,-2]],[8,[7]]],[[11,[4,1]]],[82,83],13],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,31,[]],[-1,31,[]],[-1,31,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[-1,-2,[],[]],[-1,-2,[],[]],[87,87],[[-1,-2],4,[],[]],[[87,87],15],[[87,[8,[7]]],4],[[87,9],45],[-1,-1,[]],[-1,-2,[],[]],[[22,22],87],[87,18],[87,22],[-1,-2,[],[]],[[87,[8,[7]]],[[11,[4,1]]]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,31,[]],[-1,-2,[],[]],0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[[-1,-2],3,[],[30,6]],[[-1,-2],3,[],[30,6]],[[-1,-2,24],[[88,[-1]]],[],[30,6]],[[-1,-2,24],78,[],[30,6]],[[-1,-2,8],24,[],[30,6]],[[-1,-2,24,-3],[[11,[[88,[-1]],42]]],[],[30,6],50],[[-1,-2],3,[],[30,6]],[[-1,-2],3,[],[30,6]],[[-1,-2,-3],[[11,[42]]],[],[30,6],50],[[-1,-2,-3],[[11,[42]]],[],[30,6],50],[[[88,[-1,-2]],9],45,[46,6],46],[-1,-1,[]],0,[-1,-2,[],[]],[-1,-2,[],[]],[[[88,[-1,-2]]],24,[[89,[24]],6],[]],[[[88,[-1,-2]]],3,[[89,[24]],6],[]],[[-1,-2,24],[[4,[8,8]]],[],[30,6]],[[-1,-2],4,[],[30,6]],[[[88,[-1,-2]]],[[4,[24,[3,[24]]]]],[[89,[24]],6],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,31,[]],[-1,-2,[],[]],0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[90,90],[91,91],[[-1,-2],4,[],[]],[[-1,-2],4,[],[]],[[90,90],15],[[90,9],45],[[92,9],45],[[91,9],45],[-1,-1,[]],[[[78,[24]]],90],[[[78,[18]]],90],[-1,-1,[]],[-1,-1,[]],[[90,24],24],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[90,91],[-1,-2,[],[]],[-1,-2,[],[]],[90,[[78,[24]]]],[90,15],[90,92],[90,24],[92,[[3,[24]]]],[91,3],[[-1,24,24],90,[30,6]],[[-1,24,-2,24],[[11,[90,42]]],[30,6],50],[92,[[4,[24,[3,[24]]]]]],[91,[[4,[24,[3,[24]]]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,31,[]],[-1,31,[]],[-1,31,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]]],"c":[327,473,474,475,476,477,480,483,560,561],"p":[[3,"Error",0],[3,"NonZeroU32",710],[4,"Option",711],[15,"tuple"],[8,"Fill",0],[8,"Sized",712],[15,"u8"],[15,"slice"],[3,"Formatter",713],[3,"Error",713],[4,"Result",714],[3,"Error",715],[8,"RngCore",0],[15,"f64"],[15,"bool"],[8,"SampleUniform",328],[8,"SampleRange",328],[15,"u32"],[8,"Error",716],[3,"Box",717],[8,"Into",718],[15,"u64"],[15,"i32"],[15,"usize"],[3,"Error",719],[8,"Distribution",60],[3,"DistIter",60],[3,"ThreadRng",499],[3,"String",720],[8,"Rng",0],[3,"TypeId",721],[3,"Alphanumeric",60],[3,"Standard",60],[3,"Bernoulli",60],[4,"BernoulliError",60],[3,"OpenClosed01",60],[3,"Open01",60],[3,"Slice",60],[8,"Clone",722],[3,"WeightedIndex",60],[8,"PartialOrd",723],[4,"WeightedError",60],[3,"Uniform",60],[8,"PartialEq",723],[6,"Result",713],[8,"Debug",713],[3,"DistMap",60],[3,"RangeInclusive",724],[3,"Range",724],[8,"Fn",725],[8,"IntoIterator",726],[8,"AddAssign",727],[8,"Default",728],[15,"f32"],[15,"array"],[15,"i128"],[15,"char"],[3,"NonZeroUsize",710],[3,"Wrapping",729],[15,"isize"],[3,"NonZeroU16",710],[3,"NonZeroU8",710],[15,"u16"],[15,"i16"],[15,"u128"],[15,"i64"],[3,"NonZeroU64",710],[3,"NonZeroU128",710],[15,"i8"],[3,"UniformInt",328],[3,"UniformChar",328],[3,"UniformFloat",328],[3,"UniformDuration",328],[8,"SampleBorrow",328],[3,"Duration",730],[3,"WeightedIndex",476],[8,"Weight",476],[3,"Vec",731],[3,"OsRng",499],[3,"StdRng",499],[3,"ReseedingRng",560],[8,"BlockRngCore",732],[8,"SeedableRng",0],[3,"ReadRng",560],[8,"Read",733],[3,"ReadError",560],[3,"StepRng",608],[3,"SliceChooseIter",627],[8,"Index",734],[4,"IndexVec",657],[4,"IndexVecIntoIter",657],[4,"IndexVecIter",657],[8,"DistString",60],[8,"UniformSampler",328],[8,"SliceRandom",627],[8,"IteratorRandom",627]],"b":[[16,"impl-Debug-for-Error"],[17,"impl-Display-for-Error"],[18,"impl-From%3CNonZeroU32%3E-for-Error"],[20,"impl-From%3CError%3E-for-Error"],[132,"impl-Display-for-BernoulliError"],[133,"impl-Debug-for-BernoulliError"],[141,"impl-Debug-for-WeightedError"],[142,"impl-Display-for-WeightedError"],[155,"impl-From%3CRangeInclusive%3CX%3E%3E-for-Uniform%3CX%3E"],[157,"impl-From%3CRange%3CX%3E%3E-for-Uniform%3CX%3E"],[182,"impl-Distribution%3Cf64%3E-for-OpenClosed01"],[183,"impl-Distribution%3Cf32%3E-for-OpenClosed01"],[184,"impl-Distribution%3Cf64%3E-for-Open01"],[185,"impl-Distribution%3Cf32%3E-for-Open01"],[190,"impl-Distribution%3C(A,+B,+C,+D,+E,+F,+G,+H,+I,+J)%3E-for-Standard"],[191,"impl-Distribution%3C%5BT;+(%24n+-+1)%5D%3E-for-Standard"],[192,"impl-Distribution%3C%5BT;+(%24n+-+1)%5D%3E-for-Standard"],[193,"impl-Distribution%3Ci128%3E-for-Standard"],[194,"impl-Distribution%3Cf32%3E-for-Standard"],[195,"impl-Distribution%3C%5BT;+(%24n+-+1)%5D%3E-for-Standard"],[196,"impl-Distribution%3Cchar%3E-for-Standard"],[197,"impl-Distribution%3Cf64%3E-for-Standard"],[198,"impl-Distribution%3C(A,+B,+C,+D,+E,+F,+G,+H,+I,+J,+K,+L)%3E-for-Standard"],[199,"impl-Distribution%3C%5BT;+(%24n+-+1)%5D%3E-for-Standard"],[200,"impl-Distribution%3C(A,+B,+C)%3E-for-Standard"],[201,"impl-Distribution%3C%5BT;+(%24n+-+1)%5D%3E-for-Standard"],[202,"impl-Distribution%3C%5BT;+(%24n+-+1)%5D%3E-for-Standard"],[203,"impl-Distribution%3C%5BT;+(%24n+-+1)%5D%3E-for-Standard"],[204,"impl-Distribution%3C%5BT;+(%24n+-+1)%5D%3E-for-Standard"],[205,"impl-Distribution%3C%5BT;+(%24n+-+1)%5D%3E-for-Standard"],[206,"impl-Distribution%3CNonZeroUsize%3E-for-Standard"],[207,"impl-Distribution%3Cbool%3E-for-Standard"],[208,"impl-Distribution%3C%5BT;+(%24n+-+1)%5D%3E-for-Standard"],[209,"impl-Distribution%3CWrapping%3CT%3E%3E-for-Standard"],[210,"impl-Distribution%3C%5BT;+32%5D%3E-for-Standard"],[211,"impl-Distribution%3Cisize%3E-for-Standard"],[212,"impl-Distribution%3C%5BT;+(%24n+-+1)%5D%3E-for-Standard"],[213,"impl-Distribution%3C%5BT;+(%24n+-+1)%5D%3E-for-Standard"],[214,"impl-Distribution%3C%5BT;+(%24n+-+1)%5D%3E-for-Standard"],[215,"impl-Distribution%3Cu64%3E-for-Standard"],[216,"impl-Distribution%3C%5BT;+(%24n+-+1)%5D%3E-for-Standard"],[217,"impl-Distribution%3C%5BT;+(%24n+-+1)%5D%3E-for-Standard"],[218,"impl-Distribution%3CNonZeroU16%3E-for-Standard"],[219,"impl-Distribution%3C%5BT;+(%24n+-+1)%5D%3E-for-Standard"],[220,"impl-Distribution%3C(A,+B,+C,+D)%3E-for-Standard"],[221,"impl-Distribution%3C%5BT;+(%24n+-+1)%5D%3E-for-Standard"],[222,"impl-Distribution%3C%5BT;+(%24n+-+1)%5D%3E-for-Standard"],[223,"impl-Distribution%3CNonZeroU8%3E-for-Standard"],[224,"impl-Distribution%3Cusize%3E-for-Standard"],[225,"impl-Distribution%3Cu16%3E-for-Standard"],[226,"impl-Distribution%3C%5BT;+(%24n+-+1)%5D%3E-for-Standard"],[227,"impl-Distribution%3Cu32%3E-for-Standard"],[228,"impl-Distribution%3C%5BT;+(%24n+-+1)%5D%3E-for-Standard"],[229,"impl-Distribution%3C(A,+B,+C,+D,+E,+F,+G,+H,+I,+J,+K)%3E-for-Standard"],[230,"impl-Distribution%3C%5BT;+(%24n+-+1)%5D%3E-for-Standard"],[231,"impl-Distribution%3Ci16%3E-for-Standard"],[232,"impl-Distribution%3Cu8%3E-for-Standard"],[233,"impl-Distribution%3Ci32%3E-for-Standard"],[234,"impl-Distribution%3C%5BT;+(%24n+-+1)%5D%3E-for-Standard"],[235,"impl-Distribution%3Cu128%3E-for-Standard"],[236,"impl-Distribution%3C%5BT;+(%24n+-+1)%5D%3E-for-Standard"],[237,"impl-Distribution%3C(A,+B,+C,+D,+E,+F)%3E-for-Standard"],[238,"impl-Distribution%3C%5BT;+(%24n+-+1)%5D%3E-for-Standard"],[239,"impl-Distribution%3C%5BT;+(%24n+-+1)%5D%3E-for-Standard"],[240,"impl-Distribution%3COption%3CT%3E%3E-for-Standard"],[241,"impl-Distribution%3C(A,+B)%3E-for-Standard"],[242,"impl-Distribution%3C%5BT;+(%24n+-+1)%5D%3E-for-Standard"],[243,"impl-Distribution%3C(A,+B,+C,+D,+E)%3E-for-Standard"],[244,"impl-Distribution%3Ci64%3E-for-Standard"],[245,"impl-Distribution%3C(A,+B,+C,+D,+E,+F,+G,+H)%3E-for-Standard"],[246,"impl-Distribution%3C%5BT;+(%24n+-+1)%5D%3E-for-Standard"],[247,"impl-Distribution%3C%5BT;+(%24n+-+1)%5D%3E-for-Standard"],[248,"impl-Distribution%3CNonZeroU64%3E-for-Standard"],[249,"impl-Distribution%3C(A,)%3E-for-Standard"],[250,"impl-Distribution%3C%5BT;+(%24n+-+1)%5D%3E-for-Standard"],[251,"impl-Distribution%3CNonZeroU128%3E-for-Standard"],[252,"impl-Distribution%3C%5BT;+(%24n+-+1)%5D%3E-for-Standard"],[253,"impl-Distribution%3Ci8%3E-for-Standard"],[254,"impl-Distribution%3C%5BT;+(%24n+-+1)%5D%3E-for-Standard"],[255,"impl-Distribution%3C(A,+B,+C,+D,+E,+F,+G,+H,+I)%3E-for-Standard"],[256,"impl-Distribution%3C(A,+B,+C,+D,+E,+F,+G)%3E-for-Standard"],[257,"impl-Distribution%3C()%3E-for-Standard"],[258,"impl-Distribution%3CNonZeroU32%3E-for-Standard"],[259,"impl-Distribution%3C%5BT;+(%24n+-+1)%5D%3E-for-Standard"],[373,"impl-UniformSampler-for-UniformInt%3Cu16%3E"],[374,"impl-UniformSampler-for-UniformInt%3Cu8%3E"],[375,"impl-UniformSampler-for-UniformInt%3Ci128%3E"],[376,"impl-UniformSampler-for-UniformInt%3Ci8%3E"],[377,"impl-UniformSampler-for-UniformInt%3Cu32%3E"],[378,"impl-UniformSampler-for-UniformInt%3Ci64%3E"],[379,"impl-UniformSampler-for-UniformInt%3Cu128%3E"],[380,"impl-UniformSampler-for-UniformInt%3Cu64%3E"],[381,"impl-UniformSampler-for-UniformInt%3Cusize%3E"],[382,"impl-UniformSampler-for-UniformInt%3Cisize%3E"],[383,"impl-UniformSampler-for-UniformInt%3Ci16%3E"],[384,"impl-UniformSampler-for-UniformInt%3Ci32%3E"],[386,"impl-UniformSampler-for-UniformFloat%3Cf32%3E"],[387,"impl-UniformSampler-for-UniformFloat%3Cf64%3E"],[391,"impl-UniformSampler-for-UniformInt%3Cu32%3E"],[392,"impl-UniformSampler-for-UniformInt%3Ci32%3E"],[393,"impl-UniformSampler-for-UniformInt%3Cu64%3E"],[394,"impl-UniformSampler-for-UniformInt%3Cu8%3E"],[395,"impl-UniformSampler-for-UniformInt%3Cisize%3E"],[396,"impl-UniformSampler-for-UniformInt%3Ci16%3E"],[397,"impl-UniformSampler-for-UniformInt%3Cusize%3E"],[398,"impl-UniformSampler-for-UniformInt%3Cu128%3E"],[399,"impl-UniformSampler-for-UniformInt%3Cu16%3E"],[400,"impl-UniformSampler-for-UniformInt%3Ci128%3E"],[401,"impl-UniformSampler-for-UniformInt%3Ci64%3E"],[402,"impl-UniformSampler-for-UniformInt%3Ci8%3E"],[404,"impl-UniformSampler-for-UniformFloat%3Cf32%3E"],[405,"impl-UniformSampler-for-UniformFloat%3Cf64%3E"],[408,"impl-UniformSampler-for-UniformInt%3Cu8%3E"],[409,"impl-UniformSampler-for-UniformInt%3Cu128%3E"],[410,"impl-UniformSampler-for-UniformInt%3Cisize%3E"],[411,"impl-UniformSampler-for-UniformInt%3Ci16%3E"],[412,"impl-UniformSampler-for-UniformInt%3Ci32%3E"],[413,"impl-UniformSampler-for-UniformInt%3Ci64%3E"],[414,"impl-UniformSampler-for-UniformInt%3Cu64%3E"],[415,"impl-UniformSampler-for-UniformInt%3Cu32%3E"],[416,"impl-UniformSampler-for-UniformInt%3Ci128%3E"],[417,"impl-UniformSampler-for-UniformInt%3Cu16%3E"],[418,"impl-UniformSampler-for-UniformInt%3Cusize%3E"],[419,"impl-UniformSampler-for-UniformInt%3Ci8%3E"],[421,"impl-UniformSampler-for-UniformFloat%3Cf64%3E"],[422,"impl-UniformSampler-for-UniformFloat%3Cf32%3E"],[426,"impl-UniformSampler-for-UniformInt%3Ci32%3E"],[427,"impl-UniformSampler-for-UniformInt%3Cu16%3E"],[428,"impl-UniformSampler-for-UniformInt%3Cu32%3E"],[429,"impl-UniformSampler-for-UniformInt%3Ci128%3E"],[430,"impl-UniformSampler-for-UniformInt%3Cu8%3E"],[431,"impl-UniformSampler-for-UniformInt%3Cisize%3E"],[432,"impl-UniformSampler-for-UniformInt%3Cu128%3E"],[433,"impl-UniformSampler-for-UniformInt%3Cu64%3E"],[434,"impl-UniformSampler-for-UniformInt%3Ci8%3E"],[435,"impl-UniformSampler-for-UniformInt%3Ci16%3E"],[436,"impl-UniformSampler-for-UniformInt%3Cusize%3E"],[437,"impl-UniformSampler-for-UniformInt%3Ci64%3E"],[438,"impl-UniformSampler-for-UniformFloat%3Cf64%3E"],[439,"impl-UniformSampler-for-UniformFloat%3Cf32%3E"],[441,"impl-UniformSampler-for-UniformInt%3Ci16%3E"],[442,"impl-UniformSampler-for-UniformInt%3Cu16%3E"],[443,"impl-UniformSampler-for-UniformInt%3Ci64%3E"],[444,"impl-UniformSampler-for-UniformInt%3Ci32%3E"],[445,"impl-UniformSampler-for-UniformInt%3Cu64%3E"],[446,"impl-UniformSampler-for-UniformInt%3Cu8%3E"],[447,"impl-UniformSampler-for-UniformInt%3Cusize%3E"],[448,"impl-UniformSampler-for-UniformInt%3Ci128%3E"],[449,"impl-UniformSampler-for-UniformInt%3Cisize%3E"],[450,"impl-UniformSampler-for-UniformInt%3Cu32%3E"],[451,"impl-UniformSampler-for-UniformInt%3Cu128%3E"],[452,"impl-UniformSampler-for-UniformInt%3Ci8%3E"],[575,"impl-Debug-for-ReadError"],[576,"impl-Display-for-ReadError"],[675,"impl-From%3CVec%3Cusize%3E%3E-for-IndexVec"],[676,"impl-From%3CVec%3Cu32%3E%3E-for-IndexVec"]]},\
"rand_chacha":{"doc":"The ChaCha random number generator.","t":"DDDDDDGGLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLCLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL","n":["ChaCha12Core","ChaCha12Rng","ChaCha20Core","ChaCha20Rng","ChaCha8Core","ChaCha8Rng","ChaChaCore","ChaChaRng","as_rngcore","as_rngcore","as_rngcore","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","eq","eq","eq","eq","eq","eq","fill_bytes","fill_bytes","fill_bytes","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from_seed","from_seed","from_seed","from_seed","from_seed","from_seed","generate","generate","generate","get_seed","get_seed","get_seed","get_stream","get_stream","get_stream","get_word_pos","get_word_pos","get_word_pos","into","into","into","into","into","into","next_u32","next_u32","next_u32","next_u64","next_u64","next_u64","rand_core","set_stream","set_stream","set_stream","set_word_pos","set_word_pos","set_word_pos","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_fill_bytes","try_fill_bytes","try_fill_bytes","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","vzip","vzip"],"q":[[0,"rand_chacha"],[129,"rand_core"],[130,"core::fmt"],[131,"core::fmt"],[132,"core::result"],[133,"core::any"]],"d":["ChaCha with 12 rounds","A cryptographically secure random number generator that …","ChaCha with 20 rounds","A cryptographically secure random number generator that …","ChaCha with 8 rounds","A cryptographically secure random number generator that …","ChaCha with 20 rounds, low-level interface","ChaCha with 20 rounds","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","","","","","","","","","Get the seed.","Get the seed.","Get the seed.","Get the stream number.","Get the stream number.","Get the stream number.","Get the offset from the start of the stream, in 32-bit …","Get the offset from the start of the stream, in 32-bit …","Get the offset from the start of the stream, in 32-bit …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","Set the stream number.","Set the stream number.","Set the stream number.","Set the offset from the start of the stream, in 32-bit …","Set the offset from the start of the stream, in 32-bit …","Set the offset from the start of the stream, in 32-bit …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,0,0,3,5,7,2,3,4,5,6,7,2,3,4,5,6,7,2,3,4,5,6,7,2,3,4,5,6,7,2,3,4,5,6,7,3,5,7,2,3,4,5,6,7,2,3,3,4,5,5,6,7,7,2,3,4,5,6,7,2,4,6,3,5,7,3,5,7,3,5,7,2,3,4,5,6,7,3,5,7,3,5,7,0,3,5,7,3,5,7,2,3,4,5,6,7,3,5,7,2,3,4,5,6,7,2,3,4,5,6,7,2,3,4,5,6,7,2,3,4,5,6,7],"f":[0,0,0,0,0,0,0,0,[-1,1,[]],[-1,1,[]],[-1,1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[2,2],[3,3],[4,4],[5,5],[6,6],[7,7],[[-1,-2],8,[],[]],[[-1,-2],8,[],[]],[[-1,-2],8,[],[]],[[-1,-2],8,[],[]],[[-1,-2],8,[],[]],[[-1,-2],8,[],[]],[[2,2],9],[[3,3],9],[[4,4],9],[[5,5],9],[[6,6],9],[[7,7],9],[[3,[11,[10]]],8],[[5,[11,[10]]],8],[[7,[11,[10]]],8],[[2,12],13],[[3,12],13],[[4,12],13],[[5,12],13],[[6,12],13],[[7,12],13],[-1,-1,[]],[-1,-1,[]],[2,3],[-1,-1,[]],[4,5],[-1,-1,[]],[-1,-1,[]],[6,7],[-1,-1,[]],[[],2],[[],3],[[],4],[[],5],[[],6],[[],7],[2,8],[4,8],[6,8],[3,[[14,[10]]]],[5,[[14,[10]]]],[7,[[14,[10]]]],[3,15],[5,15],[7,15],[3,16],[5,16],[7,16],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[3,17],[5,17],[7,17],[3,15],[5,15],[7,15],0,[[3,15],8],[[5,15],8],[[7,15],8],[[3,16],8],[[5,16],8],[[7,16],8],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[3,[11,[10]]],[[19,[8,18]]]],[[5,[11,[10]]],[[19,[8,18]]]],[[7,[11,[10]]],[[19,[8,18]]]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,20,[]],[-1,20,[]],[-1,20,[]],[-1,20,[]],[-1,20,[]],[-1,20,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]]],"c":[],"p":[[8,"RngCore",129],[3,"ChaCha20Core",0],[3,"ChaCha20Rng",0],[3,"ChaCha12Core",0],[3,"ChaCha12Rng",0],[3,"ChaCha8Core",0],[3,"ChaCha8Rng",0],[15,"tuple"],[15,"bool"],[15,"u8"],[15,"slice"],[3,"Formatter",130],[6,"Result",130],[15,"array"],[15,"u64"],[15,"u128"],[15,"u32"],[3,"Error",131],[4,"Result",132],[3,"TypeId",133]],"b":[]},\
"rand_core":{"doc":"Random number generation traits","t":"SIIDSDIQIKLALLLLLLLLKLLLLLLLLLLKALLLALKLKLLLLLLLLKLLLLLLLDDIQQLLLLLLLLLMMLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLFFFFFFFF","n":["CUSTOM_START","CryptoRng","CryptoRngCore","Error","INTERNAL_START","OsRng","RngCore","Seed","SeedableRng","as_rngcore","as_rngcore","block","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","code","default","fill_bytes","fill_bytes","fmt","fmt","fmt","from","from","from","from","from_entropy","from_rng","from_seed","impls","inner","into","into","le","new","next_u32","next_u32","next_u64","next_u64","raw_os_error","read","seed_from_u64","source","take_inner","to_owned","to_string","try_fill_bytes","try_fill_bytes","try_from","try_from","try_into","try_into","type_id","type_id","BlockRng","BlockRng64","BlockRngCore","Item","Results","as_rngcore","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","core","core","fill_bytes","fill_bytes","fmt","fmt","from","from","from_rng","from_rng","from_seed","from_seed","generate","generate_and_set","generate_and_set","index","index","into","into","new","new","next_u32","next_u32","next_u64","next_u64","reset","reset","seed_from_u64","seed_from_u64","to_owned","to_owned","try_fill_bytes","try_fill_bytes","try_from","try_from","try_into","try_into","type_id","type_id","fill_bytes_via_next","fill_via_u32_chunks","fill_via_u64_chunks","next_u32_via_fill","next_u64_via_fill","next_u64_via_u32","read_u32_into","read_u64_into"],"q":[[0,"rand_core"],[57,"rand_core::block"],[110,"rand_core::impls"],[116,"rand_core::le"],[118,"core::num::nonzero"],[119,"core::option"],[120,"core::fmt"],[121,"core::fmt"],[122,"core::result"],[123,"core::error"],[124,"alloc::boxed"],[125,"core::convert"],[126,"std::io::error"],[127,"alloc::string"],[128,"core::any"],[129,"core::clone"],[130,"core::marker"],[131,"core::fmt"]],"d":["Codes at or above this point can be used by users to …","A marker trait used to indicate that an <code>RngCore</code> or …","An extension trait that is automatically implemented for …","Error type of random number generators","Codes below this point represent OS Errors (i.e. positive …","A random number generator that retrieves randomness from …","The core of a random number generator.","Seed type, which is restricted to types …","A random number generator that can be explicitly seeded.","Upcast to an <code>RngCore</code> trait object.","","The <code>BlockRngCore</code> trait and implementation helpers","","","","","","","Retrieve the error code, if any.","","Fill <code>dest</code> with random data.","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Creates a new instance of the RNG seeded via <code>getrandom</code>.","Create a new PRNG seeded from another <code>Rng</code>.","Create a new PRNG using the given seed.","Helper functions for implementing <code>RngCore</code> functions.","Reference the inner error (<code>std</code> only)","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Little-Endian utilities","Construct from any type supporting <code>std::error::Error</code>","Return the next random <code>u32</code>.","","Return the next random <code>u64</code>.","","Extract the raw OS error code (if this error came from the …","","Create a new PRNG using a <code>u64</code> seed.","","Unwrap the inner error (<code>std</code> only)","","","Fill <code>dest</code> entirely with random data.","","","","","","","","A wrapper type implementing <code>RngCore</code> for some type …","A wrapper type implementing <code>RngCore</code> for some type …","A trait for RNGs which do not generate random numbers …","Results element type, e.g. <code>u32</code>.","Results type. This is the ‘block’ an RNG implementing …","","","","","","","","","","The <em>core</em> part of the RNG, implementing the <code>generate</code> …","The <em>core</em> part of the RNG, implementing the <code>generate</code> …","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Generate a new block of results.","Generate a new set of results immediately, setting the …","Generate a new set of results immediately, setting the …","Get the index into the result buffer.","Get the index into the result buffer.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Create a new <code>BlockRng</code> from an existing RNG implementing …","Create a new <code>BlockRng</code> from an existing RNG implementing …","","","","","Reset the number of available results. This will force a …","Reset the number of available results. This will force a …","","","","","","","","","","","","","Implement <code>fill_bytes</code> via <code>next_u64</code> and <code>next_u32</code>, …","Implement <code>fill_bytes</code> by reading chunks from the output …","Implement <code>fill_bytes</code> by reading chunks from the output …","Implement <code>next_u32</code> via <code>fill_bytes</code>, little-endian order.","Implement <code>next_u64</code> via <code>fill_bytes</code>, little-endian order.","Implement <code>next_u64</code> via <code>next_u32</code>, little-endian order.","Reads unsigned 32 bit integers from <code>src</code> into <code>dst</code>.","Reads unsigned 64 bit integers from <code>src</code> into <code>dst</code>."],"i":[4,0,0,0,4,0,0,29,0,30,2,0,4,2,4,2,2,2,4,2,1,2,4,4,2,4,4,4,2,29,29,29,0,4,4,2,0,4,1,2,1,2,4,1,29,4,4,2,4,1,2,4,2,4,2,4,2,0,0,0,25,25,23,23,27,23,27,23,27,23,27,23,27,23,27,23,27,23,27,23,27,23,27,25,23,27,23,27,23,27,23,27,23,27,23,27,23,27,23,27,23,27,23,27,23,27,23,27,23,27,0,0,0,0,0,0,0,0],"f":[0,0,0,0,0,0,0,0,0,[-1,1,[]],[-1,1,[]],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[2,2],[[-1,-2],3,[],[]],[4,[[6,[5]]]],[[],2],[[-1,[8,[7]]],3,[]],[[2,[8,[7]]],3],[[4,9],10],[[4,9],10],[[2,9],10],[5,4],[11,4],[-1,-1,[]],[-1,-1,[]],[[],-1,[]],[-1,[[12,[-2,4]]],1,[]],[[],-1,[]],0,[4,13],[-1,-2,[],[]],[-1,-2,[],[]],0,[-1,4,[[15,[[14,[13]]]]]],[-1,16,[]],[2,16],[-1,17,[]],[2,17],[4,[[6,[18]]]],[[1,[8,[7]]],[[12,[19,20]]]],[17,-1,[]],[4,[[6,[13]]]],[4,[[14,[13]]]],[-1,-2,[],[]],[-1,21,[]],[[-1,[8,[7]]],[[12,[3,4]]],[]],[[2,[8,[7]]],[[12,[3,4]]]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,22,[]],[-1,22,[]],0,0,0,0,0,[-1,1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[23,[-1]]],[[23,[-1]]],[24,25,26]],[[[27,[-1]]],[[27,[-1]]],[24,25,26]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],0,0,[[[23,[-1]],[8,[7]]],3,25],[[[27,[-1]],[8,[7]]],3,25],[[[23,[-1]],9],10,[25,28]],[[[27,[-1]],9],10,[25,28]],[-1,-1,[]],[-1,-1,[]],[-1,[[12,[[23,[-2]],4]]],1,[25,29]],[-1,[[12,[[27,[-2]],4]]],1,[25,29]],[[],[[23,[-1]]],[25,29]],[[],[[27,[-1]]],[25,29]],[-1,3,[]],[[[23,[-1]],19],3,25],[[[27,[-1]],19],3,25],[[[23,[-1]]],19,25],[[[27,[-1]]],19,25],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[23,[-1]]],25],[-1,[[27,[-1]]],25],[[[23,[-1]]],16,25],[[[27,[-1]]],16,25],[[[23,[-1]]],17,25],[[[27,[-1]]],17,25],[[[23,[-1]]],3,25],[[[27,[-1]]],3,25],[17,[[23,[-1]]],[25,29]],[17,[[27,[-1]]],[25,29]],[-1,-2,[],[]],[-1,-2,[],[]],[[[23,[-1]],[8,[7]]],[[12,[3,4]]],25],[[[27,[-1]],[8,[7]]],[[12,[3,4]]],25],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,22,[]],[-1,22,[]],[[-1,[8,[7]]],3,[1,26]],[[[8,[16]],[8,[7]]],[[3,[19,19]]]],[[[8,[17]],[8,[7]]],[[3,[19,19]]]],[-1,16,[1,26]],[-1,17,[1,26]],[-1,17,[1,26]],[[[8,[7]],[8,[16]]],3],[[[8,[7]],[8,[17]]],3]],"c":[],"p":[[8,"RngCore",0],[3,"OsRng",0],[15,"tuple"],[3,"Error",0],[3,"NonZeroU32",118],[4,"Option",119],[15,"u8"],[15,"slice"],[3,"Formatter",120],[6,"Result",120],[3,"Error",121],[4,"Result",122],[8,"Error",123],[3,"Box",124],[8,"Into",125],[15,"u32"],[15,"u64"],[15,"i32"],[15,"usize"],[3,"Error",126],[3,"String",127],[3,"TypeId",128],[3,"BlockRng",57],[8,"Clone",129],[8,"BlockRngCore",57],[8,"Sized",130],[3,"BlockRng64",57],[8,"Debug",120],[8,"SeedableRng",0],[8,"CryptoRngCore",0]],"b":[[22,"impl-Debug-for-Error"],[23,"impl-Display-for-Error"],[25,"impl-From%3CNonZeroU32%3E-for-Error"],[26,"impl-From%3CError%3E-for-Error"]]},\
"ryu":{"doc":"github crates-io docs-rs","t":"DILLLLLLLLLALLLFF","n":["Buffer","Float","borrow","borrow_mut","clone","default","format","format_finite","from","into","new","raw","try_from","try_into","type_id","format32","format64"],"q":[[0,"ryu"],[15,"ryu::raw"],[17,"core::result"],[18,"core::any"]],"d":["Safe API for formatting floating point numbers to text.","A floating point number, f32 or f64, that can be written …","","","","","Print a floating point number into this buffer and return …","Print a floating point number into this buffer and return …","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","This is a cheap operation; you don’t need to worry about …","Unsafe functions that mirror the API of the C …","","","","Print f32 to the given buffer and return number of bytes …","Print f64 to the given buffer and return number of bytes …"],"i":[0,0,1,1,1,1,1,1,1,1,1,0,1,1,1,0,0],"f":[0,0,[-1,-2,[],[]],[-1,-2,[],[]],[1,1],[[],1],[[1,-1],2,3],[[1,-1],2,3],[-1,-1,[]],[-1,-2,[],[]],[[],1],0,[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,5,[]],[[6,7],8],[[9,7],8]],"c":[],"p":[[3,"Buffer",0],[15,"str"],[8,"Float",0],[4,"Result",17],[3,"TypeId",18],[15,"f32"],[15,"u8"],[15,"usize"],[15,"f64"]],"b":[]},\
"serde":{"doc":"Serde","t":"IYIQQQIYQQQQQQQILLLAKKKKKKKKKLKKKKKKKKKKKKKKKLKKKKKKOLLAKKKKKKLKKKKKKKKKKKKKKKKLKKKKKKKNNNIIIIQNIIQQQQQINDININNNNNINCNNNENNNQQQIILLLLLLLLKLKKLKKKKKKKKLKKKKKKKKKKKKKKKLKKKKKKLLLKLKLLLLLLLLLKLLLLLLKLKLLLKLKLLKLLLLLLLKLLKLLALKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDDDDDDDDDDDDDDDDDDDDDDDDDDDDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLIQQQQQQQQDQQQQQQQQIIQIQIQIQIQIQIQICLLLLLKKKKKKKKLLLLLLLLLLKKKKKKLLLKKKKKKLLLLLKKKKKLKKKKKKKKKKKKLKKKKKKKKLLLLLL","n":["Deserialize","Deserialize","Deserializer","Error","Error","Ok","Serialize","Serialize","SerializeMap","SerializeSeq","SerializeStruct","SerializeStructVariant","SerializeTuple","SerializeTupleStruct","SerializeTupleVariant","Serializer","collect_map","collect_seq","collect_str","de","deserialize","deserialize_any","deserialize_bool","deserialize_byte_buf","deserialize_bytes","deserialize_char","deserialize_enum","deserialize_f32","deserialize_f64","deserialize_i128","deserialize_i16","deserialize_i32","deserialize_i64","deserialize_i8","deserialize_identifier","deserialize_ignored_any","deserialize_map","deserialize_newtype_struct","deserialize_option","deserialize_seq","deserialize_str","deserialize_string","deserialize_struct","deserialize_tuple","deserialize_tuple_struct","deserialize_u128","deserialize_u16","deserialize_u32","deserialize_u64","deserialize_u8","deserialize_unit","deserialize_unit_struct","forward_to_deserialize_any","is_human_readable","is_human_readable","ser","serialize","serialize_bool","serialize_bytes","serialize_char","serialize_f32","serialize_f64","serialize_i128","serialize_i16","serialize_i32","serialize_i64","serialize_i8","serialize_map","serialize_newtype_struct","serialize_newtype_variant","serialize_none","serialize_seq","serialize_some","serialize_str","serialize_struct","serialize_struct_variant","serialize_tuple","serialize_tuple_struct","serialize_tuple_variant","serialize_u128","serialize_u16","serialize_u32","serialize_u64","serialize_u8","serialize_unit","serialize_unit_struct","serialize_unit_variant","Bool","Bytes","Char","Deserialize","DeserializeOwned","DeserializeSeed","Deserializer","Deserializer","Enum","EnumAccess","Error","Error","Error","Error","Error","Error","Expected","Float","IgnoredAny","IntoDeserializer","Map","MapAccess","NewtypeStruct","NewtypeVariant","Option","Other","Seq","SeqAccess","Signed","StdError","Str","StructVariant","TupleVariant","Unexpected","Unit","UnitVariant","Unsigned","Value","Value","Variant","VariantAccess","Visitor","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","custom","default","deserialize","deserialize","deserialize","deserialize_any","deserialize_bool","deserialize_byte_buf","deserialize_bytes","deserialize_char","deserialize_enum","deserialize_f32","deserialize_f64","deserialize_i128","deserialize_i16","deserialize_i32","deserialize_i64","deserialize_i8","deserialize_identifier","deserialize_ignored_any","deserialize_map","deserialize_newtype_struct","deserialize_option","deserialize_seq","deserialize_str","deserialize_string","deserialize_struct","deserialize_tuple","deserialize_tuple_struct","deserialize_u128","deserialize_u16","deserialize_u32","deserialize_u64","deserialize_u8","deserialize_unit","deserialize_unit_struct","duplicate_field","eq","eq","expecting","expecting","fmt","fmt","fmt","fmt","fmt","fmt","from","from","into","into","into_deserializer","invalid_length","invalid_type","invalid_value","is_human_readable","missing_field","newtype_variant","newtype_variant_seed","next_element","next_element_seed","next_entry","next_entry_seed","next_key","next_key_seed","next_value","next_value_seed","size_hint","size_hint","struct_variant","to_owned","to_owned","to_string","try_from","try_from","try_into","try_into","tuple_variant","type_id","type_id","unit_variant","unknown_field","unknown_variant","value","variant","variant_seed","visit_bool","visit_bool","visit_borrowed_bytes","visit_borrowed_str","visit_byte_buf","visit_bytes","visit_bytes","visit_char","visit_enum","visit_enum","visit_f32","visit_f64","visit_f64","visit_i128","visit_i128","visit_i16","visit_i32","visit_i64","visit_i64","visit_i8","visit_map","visit_map","visit_newtype_struct","visit_newtype_struct","visit_none","visit_none","visit_seq","visit_seq","visit_some","visit_some","visit_str","visit_str","visit_string","visit_u128","visit_u128","visit_u16","visit_u32","visit_u64","visit_u64","visit_u8","visit_unit","visit_unit","BoolDeserializer","BorrowedBytesDeserializer","BorrowedStrDeserializer","BytesDeserializer","CharDeserializer","CowStrDeserializer","EnumAccessDeserializer","Error","F32Deserializer","F64Deserializer","I128Deserializer","I16Deserializer","I32Deserializer","I64Deserializer","I8Deserializer","IsizeDeserializer","MapAccessDeserializer","MapDeserializer","SeqAccessDeserializer","SeqDeserializer","StrDeserializer","StringDeserializer","U128Deserializer","U16Deserializer","U32Deserializer","U64Deserializer","U8Deserializer","UnitDeserializer","UsizeDeserializer","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","custom","custom","description","deserialize_any","deserialize_any","deserialize_any","deserialize_any","deserialize_any","deserialize_any","deserialize_any","deserialize_any","deserialize_any","deserialize_any","deserialize_any","deserialize_any","deserialize_any","deserialize_any","deserialize_any","deserialize_any","deserialize_any","deserialize_any","deserialize_any","deserialize_any","deserialize_any","deserialize_any","deserialize_any","deserialize_any","deserialize_any","deserialize_any","deserialize_any","deserialize_any","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_char","deserialize_char","deserialize_char","deserialize_char","deserialize_char","deserialize_char","deserialize_char","deserialize_char","deserialize_char","deserialize_char","deserialize_char","deserialize_char","deserialize_char","deserialize_char","deserialize_char","deserialize_char","deserialize_char","deserialize_char","deserialize_char","deserialize_char","deserialize_char","deserialize_char","deserialize_char","deserialize_char","deserialize_char","deserialize_char","deserialize_char","deserialize_char","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_map","deserialize_map","deserialize_map","deserialize_map","deserialize_map","deserialize_map","deserialize_map","deserialize_map","deserialize_map","deserialize_map","deserialize_map","deserialize_map","deserialize_map","deserialize_map","deserialize_map","deserialize_map","deserialize_map","deserialize_map","deserialize_map","deserialize_map","deserialize_map","deserialize_map","deserialize_map","deserialize_map","deserialize_map","deserialize_map","deserialize_map","deserialize_map","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_option","deserialize_option","deserialize_option","deserialize_option","deserialize_option","deserialize_option","deserialize_option","deserialize_option","deserialize_option","deserialize_option","deserialize_option","deserialize_option","deserialize_option","deserialize_option","deserialize_option","deserialize_option","deserialize_option","deserialize_option","deserialize_option","deserialize_option","deserialize_option","deserialize_option","deserialize_option","deserialize_option","deserialize_option","deserialize_option","deserialize_option","deserialize_option","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_str","deserialize_str","deserialize_str","deserialize_str","deserialize_str","deserialize_str","deserialize_str","deserialize_str","deserialize_str","deserialize_str","deserialize_str","deserialize_str","deserialize_str","deserialize_str","deserialize_str","deserialize_str","deserialize_str","deserialize_str","deserialize_str","deserialize_str","deserialize_str","deserialize_str","deserialize_str","deserialize_str","deserialize_str","deserialize_str","deserialize_str","deserialize_str","deserialize_string","deserialize_string","deserialize_string","deserialize_string","deserialize_string","deserialize_string","deserialize_string","deserialize_string","deserialize_string","deserialize_string","deserialize_string","deserialize_string","deserialize_string","deserialize_string","deserialize_string","deserialize_string","deserialize_string","deserialize_string","deserialize_string","deserialize_string","deserialize_string","deserialize_string","deserialize_string","deserialize_string","deserialize_string","deserialize_string","deserialize_string","deserialize_string","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","end","end","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","next_element_seed","next_element_seed","next_entry_seed","next_key_seed","next_value_seed","size_hint","size_hint","size_hint","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","variant_seed","variant_seed","variant_seed","variant_seed","variant_seed","variant_seed","Error","Error","Error","Error","Error","Error","Error","Error","Error","Impossible","Ok","Ok","Ok","Ok","Ok","Ok","Ok","Ok","Serialize","SerializeMap","SerializeMap","SerializeSeq","SerializeSeq","SerializeStruct","SerializeStruct","SerializeStructVariant","SerializeStructVariant","SerializeTuple","SerializeTuple","SerializeTupleStruct","SerializeTupleStruct","SerializeTupleVariant","SerializeTupleVariant","Serializer","StdError","borrow","borrow_mut","collect_map","collect_seq","collect_str","custom","end","end","end","end","end","end","end","end","end","end","end","end","end","end","from","into","is_human_readable","serialize","serialize_bool","serialize_bytes","serialize_char","serialize_element","serialize_element","serialize_element","serialize_element","serialize_entry","serialize_f32","serialize_f64","serialize_field","serialize_field","serialize_field","serialize_field","serialize_field","serialize_field","serialize_field","serialize_field","serialize_i128","serialize_i16","serialize_i32","serialize_i64","serialize_i8","serialize_key","serialize_key","serialize_map","serialize_newtype_struct","serialize_newtype_variant","serialize_none","serialize_seq","serialize_some","serialize_str","serialize_struct","serialize_struct_variant","serialize_tuple","serialize_tuple_struct","serialize_tuple_variant","serialize_u128","serialize_u16","serialize_u32","serialize_u64","serialize_u8","serialize_unit","serialize_unit_struct","serialize_unit_variant","serialize_value","serialize_value","skip_field","skip_field","try_from","try_into","type_id"],"q":[[0,"serde"],[87,"serde::de"],[265,"serde::de::value"],[1531,"serde::ser"],[1642,"core::result"],[1643,"core::iter::traits::collect"],[1644,"core::fmt"],[1645,"core::marker"],[1646,"core::option"],[1647,"core::fmt"],[1648,"core::any"],[1649,"alloc::vec"],[1650,"core::iter::traits::iterator"],[1651,"core::clone"],[1652,"core::fmt"]],"d":["A <strong>data structure</strong> that can be deserialized from any data …","Derive macro available if serde is built with …","A <strong>data format</strong> that can deserialize any data structure …","The error type that can be returned if some error occurs …","The error type when some error occurs during serialization.","The output type produced by this <code>Serializer</code> during …","A <strong>data structure</strong> that can be serialized into any data …","Derive macro available if serde is built with …","Type returned from <code>serialize_map</code> for serializing the …","Type returned from <code>serialize_seq</code> for serializing the …","Type returned from <code>serialize_struct</code> for serializing the …","Type returned from <code>serialize_struct_variant</code> for …","Type returned from <code>serialize_tuple</code> for serializing the …","Type returned from <code>serialize_tuple_struct</code> for serializing …","Type returned from <code>serialize_tuple_variant</code> for serializing …","A <strong>data format</strong> that can serialize any data structure …","Collect an iterator as a map.","Collect an iterator as a sequence.","Serialize a string produced by an implementation of <code>Display</code>…","Generic data structure deserialization framework.","Deserialize this value from the given Serde deserializer.","Require the <code>Deserializer</code> to figure out how to drive the …","Hint that the <code>Deserialize</code> type is expecting a <code>bool</code> value.","Hint that the <code>Deserialize</code> type is expecting a byte array …","Hint that the <code>Deserialize</code> type is expecting a byte array …","Hint that the <code>Deserialize</code> type is expecting a <code>char</code> value.","Hint that the <code>Deserialize</code> type is expecting an enum value …","Hint that the <code>Deserialize</code> type is expecting a <code>f32</code> value.","Hint that the <code>Deserialize</code> type is expecting a <code>f64</code> value.","Hint that the <code>Deserialize</code> type is expecting an <code>i128</code> value.","Hint that the <code>Deserialize</code> type is expecting an <code>i16</code> value.","Hint that the <code>Deserialize</code> type is expecting an <code>i32</code> value.","Hint that the <code>Deserialize</code> type is expecting an <code>i64</code> value.","Hint that the <code>Deserialize</code> type is expecting an <code>i8</code> value.","Hint that the <code>Deserialize</code> type is expecting the name of a …","Hint that the <code>Deserialize</code> type needs to deserialize a …","Hint that the <code>Deserialize</code> type is expecting a map of …","Hint that the <code>Deserialize</code> type is expecting a newtype …","Hint that the <code>Deserialize</code> type is expecting an optional …","Hint that the <code>Deserialize</code> type is expecting a sequence of …","Hint that the <code>Deserialize</code> type is expecting a string value …","Hint that the <code>Deserialize</code> type is expecting a string value …","Hint that the <code>Deserialize</code> type is expecting a struct with …","Hint that the <code>Deserialize</code> type is expecting a sequence of …","Hint that the <code>Deserialize</code> type is expecting a tuple struct …","Hint that the <code>Deserialize</code> type is expecting an <code>u128</code> value.","Hint that the <code>Deserialize</code> type is expecting a <code>u16</code> value.","Hint that the <code>Deserialize</code> type is expecting a <code>u32</code> value.","Hint that the <code>Deserialize</code> type is expecting a <code>u64</code> value.","Hint that the <code>Deserialize</code> type is expecting a <code>u8</code> value.","Hint that the <code>Deserialize</code> type is expecting a unit value.","Hint that the <code>Deserialize</code> type is expecting a unit struct …","Helper macro when implementing the <code>Deserializer</code> part of a …","Determine whether <code>Deserialize</code> implementations should …","Determine whether <code>Serialize</code> implementations should …","Generic data structure serialization framework.","Serialize this value into the given Serde serializer.","Serialize a <code>bool</code> value.","Serialize a chunk of raw byte data.","Serialize a character.","Serialize an <code>f32</code> value.","Serialize an <code>f64</code> value.","Serialize an <code>i128</code> value.","Serialize an <code>i16</code> value.","Serialize an <code>i32</code> value.","Serialize an <code>i64</code> value.","Serialize an <code>i8</code> value.","Begin to serialize a map. This call must be followed by …","Serialize a newtype struct like <code>struct Millimeters(u8)</code>.","Serialize a newtype variant like <code>E::N</code> in <code>enum E { N(u8) }</code>.","Serialize a <code>None</code> value.","Begin to serialize a variably sized sequence. This call …","Serialize a <code>Some(T)</code> value.","Serialize a <code>&amp;str</code>.","Begin to serialize a struct like …","Begin to serialize a struct variant like <code>E::S</code> in …","Begin to serialize a statically sized sequence whose …","Begin to serialize a tuple struct like …","Begin to serialize a tuple variant like <code>E::T</code> in …","Serialize a <code>u128</code> value.","Serialize a <code>u16</code> value.","Serialize a <code>u32</code> value.","Serialize a <code>u64</code> value.","Serialize a <code>u8</code> value.","Serialize a <code>()</code> value.","Serialize a unit struct like <code>struct Unit</code> or <code>PhantomData&lt;T&gt;</code>.","Serialize a unit variant like <code>E::A</code> in <code>enum E { A, B }</code>.","The input contained a boolean value that was not expected.","The input contained a <code>&amp;[u8]</code> or <code>Vec&lt;u8&gt;</code> that was not …","The input contained a <code>char</code> that was not expected.","A <strong>data structure</strong> that can be deserialized from any data …","A data structure that can be deserialized without …","<code>DeserializeSeed</code> is the stateful form of the <code>Deserialize</code> …","A <strong>data format</strong> that can deserialize any data structure …","The type of the deserializer being converted into.","The input contained an enum that was not expected.","Provides a <code>Visitor</code> access to the data of an enum in the …","The <code>Error</code> trait allows <code>Deserialize</code> implementations to …","The error type that can be returned if some error occurs …","The error type that can be returned if some error occurs …","The error type that can be returned if some error occurs …","The error type that can be returned if some error occurs …","The error type that can be returned if some error occurs …","<code>Expected</code> represents an explanation of what data a <code>Visitor</code> …","The input contained a floating point <code>f32</code> or <code>f64</code> that was …","An efficient way of discarding data from a deserializer.","Converts an existing value into a <code>Deserializer</code> from which …","The input contained a map that was not expected.","Provides a <code>Visitor</code> access to each entry of a map in the …","The input contained a newtype struct that was not expected.","The input contained a newtype variant that was not …","The input contained an <code>Option&lt;T&gt;</code> that was not expected.","A message stating what uncategorized thing the input …","The input contained a sequence that was not expected.","Provides a <code>Visitor</code> access to each element of a sequence in …","The input contained a signed integer <code>i8</code>, <code>i16</code>, <code>i32</code> or <code>i64</code> …","","The input contained a <code>&amp;str</code> or <code>String</code> that was not expected.","The input contained a struct variant that was not expected.","The input contained a tuple variant that was not expected.","<code>Unexpected</code> represents an unexpected invocation of any one …","The input contained a unit <code>()</code> that was not expected.","The input contained a unit variant that was not expected.","The input contained an unsigned integer <code>u8</code>, <code>u16</code>, <code>u32</code> or <code>u64</code>…","The type produced by using this seed.","The value produced by this visitor.","The <code>Visitor</code> that will be used to deserialize the content …","<code>VariantAccess</code> is a visitor that is created by the …","This trait represents a visitor that walks through a …","","","","","","","","","Raised when there is general error when deserializing a …","","Deserialize this value from the given Serde deserializer.","Equivalent to the more common <code>Deserialize::deserialize</code> …","","Require the <code>Deserializer</code> to figure out how to drive the …","Hint that the <code>Deserialize</code> type is expecting a <code>bool</code> value.","Hint that the <code>Deserialize</code> type is expecting a byte array …","Hint that the <code>Deserialize</code> type is expecting a byte array …","Hint that the <code>Deserialize</code> type is expecting a <code>char</code> value.","Hint that the <code>Deserialize</code> type is expecting an enum value …","Hint that the <code>Deserialize</code> type is expecting a <code>f32</code> value.","Hint that the <code>Deserialize</code> type is expecting a <code>f64</code> value.","Hint that the <code>Deserialize</code> type is expecting an <code>i128</code> value.","Hint that the <code>Deserialize</code> type is expecting an <code>i16</code> value.","Hint that the <code>Deserialize</code> type is expecting an <code>i32</code> value.","Hint that the <code>Deserialize</code> type is expecting an <code>i64</code> value.","Hint that the <code>Deserialize</code> type is expecting an <code>i8</code> value.","Hint that the <code>Deserialize</code> type is expecting the name of a …","Hint that the <code>Deserialize</code> type needs to deserialize a …","Hint that the <code>Deserialize</code> type is expecting a map of …","Hint that the <code>Deserialize</code> type is expecting a newtype …","Hint that the <code>Deserialize</code> type is expecting an optional …","Hint that the <code>Deserialize</code> type is expecting a sequence of …","Hint that the <code>Deserialize</code> type is expecting a string value …","Hint that the <code>Deserialize</code> type is expecting a string value …","Hint that the <code>Deserialize</code> type is expecting a struct with …","Hint that the <code>Deserialize</code> type is expecting a sequence of …","Hint that the <code>Deserialize</code> type is expecting a tuple struct …","Hint that the <code>Deserialize</code> type is expecting an <code>u128</code> value.","Hint that the <code>Deserialize</code> type is expecting a <code>u16</code> value.","Hint that the <code>Deserialize</code> type is expecting a <code>u32</code> value.","Hint that the <code>Deserialize</code> type is expecting a <code>u64</code> value.","Hint that the <code>Deserialize</code> type is expecting a <code>u8</code> value.","Hint that the <code>Deserialize</code> type is expecting a unit value.","Hint that the <code>Deserialize</code> type is expecting a unit struct …","Raised when a <code>Deserialize</code> struct type received more than …","","","Format a message stating what data this Visitor expects to …","","Format an explanation of what data was being expected. …","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Convert this value into a deserializer.","Raised when deserializing a sequence or map and the input …","Raised when a <code>Deserialize</code> receives a type different from …","Raised when a <code>Deserialize</code> receives a value of the right …","Determine whether <code>Deserialize</code> implementations should …","Raised when a <code>Deserialize</code> struct type expected to receive …","Called when deserializing a variant with a single value.","Called when deserializing a variant with a single value.","This returns <code>Ok(Some(value))</code> for the next value in the …","This returns <code>Ok(Some(value))</code> for the next value in the …","This returns <code>Ok(Some((key, value)))</code> for the next …","This returns <code>Ok(Some((key, value)))</code> for the next …","This returns <code>Ok(Some(key))</code> for the next key in the map, or …","This returns <code>Ok(Some(key))</code> for the next key in the map, or …","This returns a <code>Ok(value)</code> for the next value in the map.","This returns a <code>Ok(value)</code> for the next value in the map.","Returns the number of elements remaining in the sequence, …","Returns the number of entries remaining in the map, if …","Called when deserializing a struct-like variant.","","","","","","","","Called when deserializing a tuple-like variant.","","","Called when deserializing a variant with no values.","Raised when a <code>Deserialize</code> struct type received a field …","Raised when a <code>Deserialize</code> enum type received a variant …","Building blocks for deserializing basic values using the …","<code>variant</code> is called to identify which variant to deserialize.","<code>variant</code> is called to identify which variant to deserialize.","The input contains a boolean.","","The input contains a byte array that lives at least as …","The input contains a string that lives at least as long as …","The input contains a byte array and ownership of the byte …","The input contains a byte array. The lifetime of the byte …","","The input contains a <code>char</code>.","The input contains an enum.","","The input contains an <code>f32</code>.","The input contains an <code>f64</code>.","","The input contains a <code>i128</code>.","","The input contains an <code>i16</code>.","The input contains an <code>i32</code>.","The input contains an <code>i64</code>.","","The input contains an <code>i8</code>.","The input contains a key-value map.","","The input contains a newtype struct.","","The input contains an optional that is absent.","","The input contains a sequence of elements.","","The input contains an optional that is present.","","The input contains a string. The lifetime of the string is …","","The input contains a string and ownership of the string is …","The input contains a <code>u128</code>.","","The input contains a <code>u16</code>.","The input contains a <code>u32</code>.","The input contains a <code>u64</code>.","","The input contains a <code>u8</code>.","The input contains a unit <code>()</code>.","","A deserializer holding a <code>bool</code>.","A deserializer holding a <code>&amp;[u8]</code> with a lifetime tied to …","A deserializer holding a <code>&amp;str</code> with a lifetime tied to …","A deserializer holding a <code>&amp;[u8]</code>. Always calls …","A deserializer holding a <code>char</code>.","A deserializer holding a <code>Cow&lt;str&gt;</code>.","A deserializer holding an <code>EnumAccess</code>.","A minimal representation of all possible errors that can …","A deserializer holding an <code>f32</code>.","A deserializer holding an <code>f64</code>.","A deserializer holding an <code>i128</code>.","A deserializer holding an <code>i16</code>.","A deserializer holding an <code>i32</code>.","A deserializer holding an <code>i64</code>.","A deserializer holding an <code>i8</code>.","A deserializer holding an <code>isize</code>.","A deserializer holding a <code>MapAccess</code>.","A deserializer that iterates over a map.","A deserializer holding a <code>SeqAccess</code>.","A deserializer that iterates over a sequence.","A deserializer holding a <code>&amp;str</code>.","A deserializer holding a <code>String</code>.","A deserializer holding a <code>u128</code>.","A deserializer holding a <code>u16</code>.","A deserializer holding a <code>u32</code>.","A deserializer holding a <code>u64</code>.","A deserializer holding a <code>u8</code>.","A deserializer holding a <code>()</code>.","A deserializer holding a <code>usize</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Check for remaining elements after passing a …","Check for remaining elements after passing a …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","Create a new borrowed deserializer from the given string.","","","Create a new deserializer from the given bytes.","Create a new borrowed deserializer from the given borrowed …","Construct a new <code>MapDeserializer&lt;I, E&gt;</code>.","","","","","","","","","","","","","","","","Construct a new <code>SeqDeserializer&lt;I, E&gt;</code>.","Construct a new <code>SeqAccessDeserializer&lt;A&gt;</code>.","Construct a new <code>MapAccessDeserializer&lt;A&gt;</code>.","Construct a new <code>EnumAccessDeserializer&lt;A&gt;</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Trait used by <code>Serialize</code> implementations to generically …","The error type when some error occurs during serialization.","Must match the <code>Error</code> type of our <code>Serializer</code>.","Must match the <code>Error</code> type of our <code>Serializer</code>.","Must match the <code>Error</code> type of our <code>Serializer</code>.","Must match the <code>Error</code> type of our <code>Serializer</code>.","Must match the <code>Error</code> type of our <code>Serializer</code>.","Must match the <code>Error</code> type of our <code>Serializer</code>.","Must match the <code>Error</code> type of our <code>Serializer</code>.","Helper type for implementing a <code>Serializer</code> that does not …","The output type produced by this <code>Serializer</code> during …","Must match the <code>Ok</code> type of our <code>Serializer</code>.","Must match the <code>Ok</code> type of our <code>Serializer</code>.","Must match the <code>Ok</code> type of our <code>Serializer</code>.","Must match the <code>Ok</code> type of our <code>Serializer</code>.","Must match the <code>Ok</code> type of our <code>Serializer</code>.","Must match the <code>Ok</code> type of our <code>Serializer</code>.","Must match the <code>Ok</code> type of our <code>Serializer</code>.","A <strong>data structure</strong> that can be serialized into any data …","Returned from <code>Serializer::serialize_map</code>.","Type returned from <code>serialize_map</code> for serializing the …","Returned from <code>Serializer::serialize_seq</code>.","Type returned from <code>serialize_seq</code> for serializing the …","Returned from <code>Serializer::serialize_struct</code>.","Type returned from <code>serialize_struct</code> for serializing the …","Returned from <code>Serializer::serialize_struct_variant</code>.","Type returned from <code>serialize_struct_variant</code> for …","Returned from <code>Serializer::serialize_tuple</code>.","Type returned from <code>serialize_tuple</code> for serializing the …","Returned from <code>Serializer::serialize_tuple_struct</code>.","Type returned from <code>serialize_tuple_struct</code> for serializing …","Returned from <code>Serializer::serialize_tuple_variant</code>.","Type returned from <code>serialize_tuple_variant</code> for serializing …","A <strong>data format</strong> that can serialize any data structure …","","","","Collect an iterator as a map.","Collect an iterator as a sequence.","Serialize a string produced by an implementation of <code>Display</code>…","Used when a <code>Serialize</code> implementation encounters any error …","Finish serializing a sequence.","Finish serializing a tuple.","Finish serializing a tuple struct.","Finish serializing a tuple variant.","Finish serializing a map.","Finish serializing a struct.","Finish serializing a struct variant.","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Determine whether <code>Serialize</code> implementations should …","Serialize this value into the given Serde serializer.","Serialize a <code>bool</code> value.","Serialize a chunk of raw byte data.","Serialize a character.","Serialize a sequence element.","Serialize a tuple element.","","","Serialize a map entry consisting of a key and a value.","Serialize an <code>f32</code> value.","Serialize an <code>f64</code> value.","Serialize a tuple struct field.","Serialize a tuple variant field.","Serialize a struct field.","Serialize a struct variant field.","","","","","Serialize an <code>i128</code> value.","Serialize an <code>i16</code> value.","Serialize an <code>i32</code> value.","Serialize an <code>i64</code> value.","Serialize an <code>i8</code> value.","Serialize a map key.","","Begin to serialize a map. This call must be followed by …","Serialize a newtype struct like <code>struct Millimeters(u8)</code>.","Serialize a newtype variant like <code>E::N</code> in <code>enum E { N(u8) }</code>.","Serialize a <code>None</code> value.","Begin to serialize a variably sized sequence. This call …","Serialize a <code>Some(T)</code> value.","Serialize a <code>&amp;str</code>.","Begin to serialize a struct like …","Begin to serialize a struct variant like <code>E::S</code> in …","Begin to serialize a statically sized sequence whose …","Begin to serialize a tuple struct like …","Begin to serialize a tuple variant like <code>E::T</code> in …","Serialize a <code>u128</code> value.","Serialize a <code>u16</code> value.","Serialize a <code>u32</code> value.","Serialize a <code>u64</code> value.","Serialize a <code>u8</code> value.","Serialize a <code>()</code> value.","Serialize a unit struct like <code>struct Unit</code> or <code>PhantomData&lt;T&gt;</code>.","Serialize a unit variant like <code>E::A</code> in <code>enum E { A, B }</code>.","Serialize a map value.","","Indicate that a struct field has been skipped.","Indicate that a struct variant field has been skipped.","","",""],"i":[0,0,0,5,11,11,0,0,11,11,11,11,11,11,11,0,11,11,11,0,34,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,0,5,11,0,22,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,28,28,28,0,0,0,0,79,28,0,0,5,42,41,40,80,0,28,0,0,28,0,28,28,28,28,28,0,28,0,28,28,28,0,28,28,28,35,6,40,0,0,27,28,27,28,27,28,27,28,38,27,34,35,27,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,38,27,28,6,27,32,32,27,27,28,28,27,28,27,28,79,38,38,38,5,38,80,80,42,42,41,41,41,41,41,41,42,41,80,27,28,28,27,28,27,28,80,27,28,80,38,38,0,40,40,6,27,6,6,6,6,27,6,6,27,6,6,27,6,27,6,6,6,27,6,6,27,6,27,6,27,6,27,6,27,6,27,6,6,27,6,6,6,27,6,6,27,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,43,44,45,46,47,48,49,50,51,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,43,44,45,46,47,48,49,50,51,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,43,44,45,46,47,48,49,50,51,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,43,44,45,46,47,48,49,50,51,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,54,54,54,43,44,45,46,47,48,49,50,51,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,43,44,45,46,47,48,49,50,51,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,43,44,45,46,47,48,49,50,51,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,43,44,45,46,47,48,49,50,51,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,43,44,45,46,47,48,49,50,51,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,43,44,45,46,47,48,49,50,51,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,43,44,45,46,47,48,49,50,51,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,43,44,45,46,47,48,49,50,51,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,43,44,45,46,47,48,49,50,51,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,43,44,45,46,47,48,49,50,51,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,43,44,45,46,47,48,49,50,51,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,43,44,45,46,47,48,49,50,51,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,43,44,45,46,47,48,49,50,51,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,43,44,45,46,47,48,49,50,51,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,43,44,45,46,47,48,49,50,51,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,43,44,45,46,47,48,49,50,51,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,43,44,45,46,47,48,49,50,51,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,43,44,45,46,47,48,49,50,51,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,43,44,45,46,47,48,49,50,51,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,43,44,45,46,47,48,49,50,51,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,43,44,45,46,47,48,49,50,51,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,43,44,45,46,47,48,49,50,51,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,43,44,45,46,47,48,49,50,51,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,43,44,45,46,47,48,49,50,51,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,43,44,45,46,47,48,49,50,51,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,43,44,45,46,47,48,49,50,51,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,43,44,45,46,47,48,49,50,51,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,43,44,45,46,47,48,49,50,51,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,43,44,45,46,47,48,49,50,51,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,43,44,45,46,47,48,49,50,51,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,43,44,45,46,47,48,49,50,51,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,51,70,54,43,44,45,46,47,48,49,50,51,54,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,43,44,45,46,47,48,49,50,51,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,43,44,45,46,47,48,49,50,51,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,43,44,45,46,47,48,49,50,51,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,51,70,51,51,51,51,51,70,43,44,45,46,47,48,49,50,51,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,54,43,44,45,46,47,48,49,50,51,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,43,44,45,46,47,48,49,50,51,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,43,44,45,46,47,48,49,50,51,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,44,45,46,47,48,72,0,11,81,82,83,84,85,86,87,0,11,81,82,83,84,85,86,87,0,0,11,0,11,0,11,0,11,0,11,0,11,0,11,0,0,77,77,11,11,11,78,81,82,83,84,85,86,87,77,77,77,77,77,77,77,77,77,11,22,11,11,11,81,82,77,77,85,11,11,83,84,86,87,77,77,77,77,11,11,11,11,11,85,77,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,85,77,86,87,77,77,77],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[-1,-2],1,[],2],[[-1,-2],1,[],2],[[-1,-2],1,[],[3,4]],0,[-1,[[1,[-2]]],5,[]],[[-1,-2],1,[],6],[[-1,-2],1,[],6],[[-1,-2],1,[],6],[[-1,-2],1,[],6],[[-1,-2],1,[],6],[[-1,7,[8,[7]],-2],1,[],6],[[-1,-2],1,[],6],[[-1,-2],1,[],6],[[-1,-2],1,[],6],[[-1,-2],1,[],6],[[-1,-2],1,[],6],[[-1,-2],1,[],6],[[-1,-2],1,[],6],[[-1,-2],1,[],6],[[-1,-2],1,[],6],[[-1,-2],1,[],6],[[-1,7,-2],1,[],6],[[-1,-2],1,[],6],[[-1,-2],1,[],6],[[-1,-2],1,[],6],[[-1,-2],1,[],6],[[-1,7,[8,[7]],-2],1,[],6],[[-1,9,-2],1,[],6],[[-1,7,9,-2],1,[],6],[[-1,-2],1,[],6],[[-1,-2],1,[],6],[[-1,-2],1,[],6],[[-1,-2],1,[],6],[[-1,-2],1,[],6],[[-1,-2],1,[],6],[[-1,7,-2],1,[],6],0,[-1,10,[]],[-1,10,[]],0,[[-1,-2],1,[],11],[[-1,10],1,[]],[[-1,[8,[12]]],1,[]],[[-1,13],1,[]],[[-1,14],1,[]],[[-1,15],1,[]],[[-1,16],1,[]],[[-1,17],1,[]],[[-1,18],1,[]],[[-1,19],1,[]],[[-1,20],1,[]],[[-1,[21,[9]]],1,[]],[[-1,7,-2],1,[],[22,4]],[[-1,7,23,7,-2],1,[],[22,4]],[-1,1,[]],[[-1,[21,[9]]],1,[]],[[-1,-2],1,[],[22,4]],[[-1,7],1,[]],[[-1,7,9],1,[]],[[-1,7,23,7,9],1,[]],[[-1,9],1,[]],[[-1,7,9],1,[]],[[-1,7,23,7,9],1,[]],[[-1,24],1,[]],[[-1,25],1,[]],[[-1,23],1,[]],[[-1,26],1,[]],[[-1,12],1,[]],[-1,1,[]],[[-1,7],1,[]],[[-1,7,23,7],1,[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[27,27],[28,28],[[-1,-2],29,[],[]],[[-1,-2],29,[],[]],[-1,-2,3,[]],[[],27],[-1,[[1,[-2]]],5,[]],[[-1,-2],1,[],5],[-1,[[1,[27]]],5],[[-1,-2],1,[],6],[[-1,-2],1,[],6],[[-1,-2],1,[],6],[[-1,-2],1,[],6],[[-1,-2],1,[],6],[[-1,7,[8,[7]],-2],1,[],6],[[-1,-2],1,[],6],[[-1,-2],1,[],6],[[-1,-2],1,[],6],[[-1,-2],1,[],6],[[-1,-2],1,[],6],[[-1,-2],1,[],6],[[-1,-2],1,[],6],[[-1,-2],1,[],6],[[-1,-2],1,[],6],[[-1,-2],1,[],6],[[-1,7,-2],1,[],6],[[-1,-2],1,[],6],[[-1,-2],1,[],6],[[-1,-2],1,[],6],[[-1,-2],1,[],6],[[-1,7,[8,[7]],-2],1,[],6],[[-1,9,-2],1,[],6],[[-1,7,9,-2],1,[],6],[[-1,-2],1,[],6],[[-1,-2],1,[],6],[[-1,-2],1,[],6],[[-1,-2],1,[],6],[[-1,-2],1,[],6],[[-1,-2],1,[],6],[[-1,7,-2],1,[],6],[7,-1,[]],[[27,27],10],[[28,28],10],[[-1,30],31,[]],[[27,30],31],[[-1,30],31,[]],[[32,30],31],[[-1,30],[[1,[29,33]]],[]],[[27,30],31],[[28,30],31],[[28,30],31],[-1,-1,[]],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[],[]],[[9,32],-1,[]],[[28,32],-1,[]],[[28,32],-1,[]],[-1,10,[]],[7,-1,[]],[-1,[[1,[-2]]],[],34],[[-1,-2],1,[],35],[-1,[[1,[[21,[-2]]]]],[],34],[[-1,-2],[[1,[21]]],[],35],[-1,[[1,[[21,[[29,[-2,-3]]]]]]],[],34,34],[[-1,-2,-3],[[1,[[21,[29]]]]],[],35,35],[-1,[[1,[[21,[-2]]]]],[],34],[[-1,-2],[[1,[21]]],[],35],[-1,[[1,[-2]]],[],34],[[-1,-2],1,[],35],[-1,[[21,[9]]],[]],[-1,[[21,[9]]],[]],[[-1,[8,[7]],-2],1,[],6],[-1,-2,[],[]],[-1,-2,[],[]],[-1,36,[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[[-1,9,-2],1,[],6],[-1,37,[]],[-1,37,[]],[-1,[[1,[29]]],[]],[[7,[8,[7]]],-1,[]],[[7,[8,[7]]],-1,[]],0,[-1,[[1,[[29,[-2]]]]],[],34],[[-1,-2],[[1,[29]]],[],35],[[-1,10],[[1,[-2]]],[],38],[[27,10],[[1,[-1]]],[]],[[-1,[8,[12]]],[[1,[-2]]],[],38],[[-1,7],[[1,[-2]]],[],38],[[-1,[39,[12]]],[[1,[-2]]],[],38],[[-1,[8,[12]]],[[1,[-2]]],[],38],[[27,[8,[12]]],[[1,[-1]]],38],[[-1,13],[[1,[-2]]],[],38],[[-1,-2],1,[],40],[[27,-1],1,40],[[-1,14],[[1,[-2]]],[],38],[[-1,15],[[1,[-2]]],[],38],[[27,15],[[1,[-1]]],[]],[[-1,16],[[1,[-2]]],[],38],[[27,16],[[1,[-1]]],[]],[[-1,17],[[1,[-2]]],[],38],[[-1,18],[[1,[-2]]],[],38],[[-1,19],[[1,[-2]]],[],38],[[27,19],[[1,[-1]]],[]],[[-1,20],[[1,[-2]]],[],38],[[-1,-2],1,[],41],[[27,-1],1,41],[[-1,-2],1,[],5],[[27,-1],1,5],[-1,[[1,[-2]]],[],38],[27,[[1,[-1]]],[]],[[-1,-2],1,[],42],[[27,-1],1,42],[[-1,-2],1,[],5],[[27,-1],1,5],[[-1,7],[[1,[-2]]],[],38],[[27,7],[[1,[-1]]],38],[[-1,36],[[1,[-2]]],[],38],[[-1,24],[[1,[-2]]],[],38],[[27,24],[[1,[-1]]],[]],[[-1,25],[[1,[-2]]],[],38],[[-1,23],[[1,[-2]]],[],38],[[-1,26],[[1,[-2]]],[],38],[[27,26],[[1,[-1]]],[]],[[-1,12],[[1,[-2]]],[],38],[-1,[[1,[-2]]],[],38],[27,[[1,[-1]]],[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[43,[-1]]],[[43,[-1]]],[]],[[[44,[-1]]],[[44,[-1]]],[]],[[[45,[-1]]],[[45,[-1]]],[]],[[[46,[-1]]],[[46,[-1]]],[]],[[[47,[-1]]],[[47,[-1]]],[]],[[[48,[-1]]],[[48,[-1]]],[]],[[[49,[-1]]],[[49,[-1]]],[]],[[[50,[-1]]],[[50,[-1]]],[]],[[[51,[-1,-2]]],[[51,[-1,-2]]],[52,53],[]],[54,54],[[[55,[-1]]],[[55,[-1]]],[]],[[[56,[-1]]],[[56,[-1]]],[]],[[[57,[-1]]],[[57,[-1]]],[]],[[[58,[-1]]],[[58,[-1]]],[]],[[[59,[-1]]],[[59,[-1]]],[]],[[[60,[-1]]],[[60,[-1]]],[]],[[[61,[-1]]],[[61,[-1]]],[]],[[[62,[-1]]],[[62,[-1]]],[]],[[[63,[-1]]],[[63,[-1]]],[]],[[[64,[-1]]],[[64,[-1]]],[]],[[[65,[-1]]],[[65,[-1]]],[]],[[[66,[-1]]],[[66,[-1]]],[]],[[[67,[-1]]],[[67,[-1]]],[]],[[[68,[-1]]],[[68,[-1]]],[]],[[[69,[-1]]],[[69,[-1]]],[]],[[[70,[-1,-2]]],[[70,[-1,-2]]],53,53],[[[71,[-1]]],[[71,[-1]]],53],[[[72,[-1]]],[[72,[-1]]],53],[[[73,[-1]]],[[73,[-1]]],53],[[-1,-2],29,[],[]],[[-1,-2],29,[],[]],[[-1,-2],29,[],[]],[[-1,-2],29,[],[]],[[-1,-2],29,[],[]],[[-1,-2],29,[],[]],[[-1,-2],29,[],[]],[[-1,-2],29,[],[]],[[-1,-2],29,[],[]],[[-1,-2],29,[],[]],[[-1,-2],29,[],[]],[[-1,-2],29,[],[]],[[-1,-2],29,[],[]],[[-1,-2],29,[],[]],[[-1,-2],29,[],[]],[[-1,-2],29,[],[]],[[-1,-2],29,[],[]],[[-1,-2],29,[],[]],[[-1,-2],29,[],[]],[[-1,-2],29,[],[]],[[-1,-2],29,[],[]],[[-1,-2],29,[],[]],[[-1,-2],29,[],[]],[[-1,-2],29,[],[]],[[-1,-2],29,[],[]],[[-1,-2],29,[],[]],[[-1,-2],29,[],[]],[[-1,-2],29,[],[]],[[-1,-2],29,[],[]],[-1,54,3],[-1,54,3],[54,7],[[[43,[-1]],-2],1,38,6],[[[44,[-1]],-2],1,38,6],[[[45,[-1]],-2],1,38,6],[[[46,[-1]],-2],1,38,6],[[[47,[-1]],-2],1,38,6],[[[48,[-1]],-2],1,38,6],[[[49,[-1]],-2],1,38,6],[[[50,[-1]],-2],1,38,6],[[[51,[-1,-2]],-3],1,52,38,6],[[[55,[-1]],-2],1,38,6],[[[56,[-1]],-2],1,38,6],[[[57,[-1]],-2],1,38,6],[[[58,[-1]],-2],1,38,6],[[[59,[-1]],-2],1,38,6],[[[60,[-1]],-2],1,38,6],[[[61,[-1]],-2],1,38,6],[[[62,[-1]],-2],1,38,6],[[[63,[-1]],-2],1,38,6],[[[64,[-1]],-2],1,38,6],[[[65,[-1]],-2],1,38,6],[[[66,[-1]],-2],1,38,6],[[[67,[-1]],-2],1,38,6],[[[68,[-1]],-2],1,38,6],[[[69,[-1]],-2],1,38,6],[[[70,[-1,-2]],-3],1,52,38,6],[[[71,[-1]],-2],1,42,6],[[[72,[-1]],-2],1,41,6],[[[73,[-1]],-2],1,40,6],[[[43,[-1]],-2],1,38,6],[[[44,[-1]],-2],1,38,6],[[[45,[-1]],-2],1,38,6],[[[46,[-1]],-2],1,38,6],[[[47,[-1]],-2],1,38,6],[[[48,[-1]],-2],1,38,6],[[[49,[-1]],-2],1,38,6],[[[50,[-1]],-2],1,38,6],[[[51,[-1,-2]],-3],1,52,38,6],[[[55,[-1]],-2],1,38,6],[[[56,[-1]],-2],1,38,6],[[[57,[-1]],-2],1,38,6],[[[58,[-1]],-2],1,38,6],[[[59,[-1]],-2],1,38,6],[[[60,[-1]],-2],1,38,6],[[[61,[-1]],-2],1,38,6],[[[62,[-1]],-2],1,38,6],[[[63,[-1]],-2],1,38,6],[[[64,[-1]],-2],1,38,6],[[[65,[-1]],-2],1,38,6],[[[66,[-1]],-2],1,38,6],[[[67,[-1]],-2],1,38,6],[[[68,[-1]],-2],1,38,6],[[[69,[-1]],-2],1,38,6],[[[70,[-1,-2]],-3],1,52,38,6],[[[71,[-1]],-2],1,42,6],[[[72,[-1]],-2],1,41,6],[[[73,[-1]],-2],1,40,6],[[[43,[-1]],-2],1,38,6],[[[44,[-1]],-2],1,38,6],[[[45,[-1]],-2],1,38,6],[[[46,[-1]],-2],1,38,6],[[[47,[-1]],-2],1,38,6],[[[48,[-1]],-2],1,38,6],[[[49,[-1]],-2],1,38,6],[[[50,[-1]],-2],1,38,6],[[[51,[-1,-2]],-3],1,52,38,6],[[[55,[-1]],-2],1,38,6],[[[56,[-1]],-2],1,38,6],[[[57,[-1]],-2],1,38,6],[[[58,[-1]],-2],1,38,6],[[[59,[-1]],-2],1,38,6],[[[60,[-1]],-2],1,38,6],[[[61,[-1]],-2],1,38,6],[[[62,[-1]],-2],1,38,6],[[[63,[-1]],-2],1,38,6],[[[64,[-1]],-2],1,38,6],[[[65,[-1]],-2],1,38,6],[[[66,[-1]],-2],1,38,6],[[[67,[-1]],-2],1,38,6],[[[68,[-1]],-2],1,38,6],[[[69,[-1]],-2],1,38,6],[[[70,[-1,-2]],-3],1,52,38,6],[[[71,[-1]],-2],1,42,6],[[[72,[-1]],-2],1,41,6],[[[73,[-1]],-2],1,40,6],[[[43,[-1]],-2],1,38,6],[[[44,[-1]],-2],1,38,6],[[[45,[-1]],-2],1,38,6],[[[46,[-1]],-2],1,38,6],[[[47,[-1]],-2],1,38,6],[[[48,[-1]],-2],1,38,6],[[[49,[-1]],-2],1,38,6],[[[50,[-1]],-2],1,38,6],[[[51,[-1,-2]],-3],1,52,38,6],[[[55,[-1]],-2],1,38,6],[[[56,[-1]],-2],1,38,6],[[[57,[-1]],-2],1,38,6],[[[58,[-1]],-2],1,38,6],[[[59,[-1]],-2],1,38,6],[[[60,[-1]],-2],1,38,6],[[[61,[-1]],-2],1,38,6],[[[62,[-1]],-2],1,38,6],[[[63,[-1]],-2],1,38,6],[[[64,[-1]],-2],1,38,6],[[[65,[-1]],-2],1,38,6],[[[66,[-1]],-2],1,38,6],[[[67,[-1]],-2],1,38,6],[[[68,[-1]],-2],1,38,6],[[[69,[-1]],-2],1,38,6],[[[70,[-1,-2]],-3],1,52,38,6],[[[71,[-1]],-2],1,42,6],[[[72,[-1]],-2],1,41,6],[[[73,[-1]],-2],1,40,6],[[[43,[-1]],-2],1,38,6],[[[44,[-1]],-2],1,38,6],[[[45,[-1]],-2],1,38,6],[[[46,[-1]],-2],1,38,6],[[[47,[-1]],-2],1,38,6],[[[48,[-1]],-2],1,38,6],[[[49,[-1]],-2],1,38,6],[[[50,[-1]],-2],1,38,6],[[[51,[-1,-2]],-3],1,52,38,6],[[[55,[-1]],-2],1,38,6],[[[56,[-1]],-2],1,38,6],[[[57,[-1]],-2],1,38,6],[[[58,[-1]],-2],1,38,6],[[[59,[-1]],-2],1,38,6],[[[60,[-1]],-2],1,38,6],[[[61,[-1]],-2],1,38,6],[[[62,[-1]],-2],1,38,6],[[[63,[-1]],-2],1,38,6],[[[64,[-1]],-2],1,38,6],[[[65,[-1]],-2],1,38,6],[[[66,[-1]],-2],1,38,6],[[[67,[-1]],-2],1,38,6],[[[68,[-1]],-2],1,38,6],[[[69,[-1]],-2],1,38,6],[[[70,[-1,-2]],-3],1,52,38,6],[[[71,[-1]],-2],1,42,6],[[[72,[-1]],-2],1,41,6],[[[73,[-1]],-2],1,40,6],[[[43,[-1]],7,[8,[7]],-2],1,38,6],[[[44,[-1]],7,[8,[7]],-2],1,38,6],[[[45,[-1]],7,[8,[7]],-2],1,38,6],[[[46,[-1]],7,[8,[7]],-2],1,38,6],[[[47,[-1]],7,[8,[7]],-2],1,38,6],[[[48,[-1]],7,[8,[7]],-2],1,38,6],[[[49,[-1]],7,[8,[7]],-2],1,38,6],[[[50,[-1]],7,[8,[7]],-2],1,38,6],[[[51,[-1,-2]],7,[8,[7]],-3],1,52,38,6],[[[55,[-1]],7,[8,[7]],-2],1,38,6],[[[56,[-1]],7,[8,[7]],-2],1,38,6],[[[57,[-1]],7,[8,[7]],-2],1,38,6],[[[58,[-1]],7,[8,[7]],-2],1,38,6],[[[59,[-1]],7,[8,[7]],-2],1,38,6],[[[60,[-1]],7,[8,[7]],-2],1,38,6],[[[61,[-1]],7,[8,[7]],-2],1,38,6],[[[62,[-1]],7,[8,[7]],-2],1,38,6],[[[63,[-1]],7,[8,[7]],-2],1,38,6],[[[64,[-1]],7,[8,[7]],-2],1,38,6],[[[65,[-1]],7,[8,[7]],-2],1,38,6],[[[66,[-1]],7,[8,[7]],-2],1,38,6],[[[67,[-1]],7,[8,[7]],-2],1,38,6],[[[68,[-1]],7,[8,[7]],-2],1,38,6],[[[69,[-1]],7,[8,[7]],-2],1,38,6],[[[70,[-1,-2]],7,[8,[7]],-3],1,52,38,6],[[[71,[-1]],7,[8,[7]],-2],1,42,6],[[[72,[-1]],7,[8,[7]],-2],1,41,6],[[[73,[-1]],7,[8,[7]],-2],1,40,6],[[[43,[-1]],-2],1,38,6],[[[44,[-1]],-2],1,38,6],[[[45,[-1]],-2],1,38,6],[[[46,[-1]],-2],1,38,6],[[[47,[-1]],-2],1,38,6],[[[48,[-1]],-2],1,38,6],[[[49,[-1]],-2],1,38,6],[[[50,[-1]],-2],1,38,6],[[[51,[-1,-2]],-3],1,52,38,6],[[[55,[-1]],-2],1,38,6],[[[56,[-1]],-2],1,38,6],[[[57,[-1]],-2],1,38,6],[[[58,[-1]],-2],1,38,6],[[[59,[-1]],-2],1,38,6],[[[60,[-1]],-2],1,38,6],[[[61,[-1]],-2],1,38,6],[[[62,[-1]],-2],1,38,6],[[[63,[-1]],-2],1,38,6],[[[64,[-1]],-2],1,38,6],[[[65,[-1]],-2],1,38,6],[[[66,[-1]],-2],1,38,6],[[[67,[-1]],-2],1,38,6],[[[68,[-1]],-2],1,38,6],[[[69,[-1]],-2],1,38,6],[[[70,[-1,-2]],-3],1,52,38,6],[[[71,[-1]],-2],1,42,6],[[[72,[-1]],-2],1,41,6],[[[73,[-1]],-2],1,40,6],[[[43,[-1]],-2],1,38,6],[[[44,[-1]],-2],1,38,6],[[[45,[-1]],-2],1,38,6],[[[46,[-1]],-2],1,38,6],[[[47,[-1]],-2],1,38,6],[[[48,[-1]],-2],1,38,6],[[[49,[-1]],-2],1,38,6],[[[50,[-1]],-2],1,38,6],[[[51,[-1,-2]],-3],1,52,38,6],[[[55,[-1]],-2],1,38,6],[[[56,[-1]],-2],1,38,6],[[[57,[-1]],-2],1,38,6],[[[58,[-1]],-2],1,38,6],[[[59,[-1]],-2],1,38,6],[[[60,[-1]],-2],1,38,6],[[[61,[-1]],-2],1,38,6],[[[62,[-1]],-2],1,38,6],[[[63,[-1]],-2],1,38,6],[[[64,[-1]],-2],1,38,6],[[[65,[-1]],-2],1,38,6],[[[66,[-1]],-2],1,38,6],[[[67,[-1]],-2],1,38,6],[[[68,[-1]],-2],1,38,6],[[[69,[-1]],-2],1,38,6],[[[70,[-1,-2]],-3],1,52,38,6],[[[71,[-1]],-2],1,42,6],[[[72,[-1]],-2],1,41,6],[[[73,[-1]],-2],1,40,6],[[[43,[-1]],-2],1,38,6],[[[44,[-1]],-2],1,38,6],[[[45,[-1]],-2],1,38,6],[[[46,[-1]],-2],1,38,6],[[[47,[-1]],-2],1,38,6],[[[48,[-1]],-2],1,38,6],[[[49,[-1]],-2],1,38,6],[[[50,[-1]],-2],1,38,6],[[[51,[-1,-2]],-3],1,52,38,6],[[[55,[-1]],-2],1,38,6],[[[56,[-1]],-2],1,38,6],[[[57,[-1]],-2],1,38,6],[[[58,[-1]],-2],1,38,6],[[[59,[-1]],-2],1,38,6],[[[60,[-1]],-2],1,38,6],[[[61,[-1]],-2],1,38,6],[[[62,[-1]],-2],1,38,6],[[[63,[-1]],-2],1,38,6],[[[64,[-1]],-2],1,38,6],[[[65,[-1]],-2],1,38,6],[[[66,[-1]],-2],1,38,6],[[[67,[-1]],-2],1,38,6],[[[68,[-1]],-2],1,38,6],[[[69,[-1]],-2],1,38,6],[[[70,[-1,-2]],-3],1,52,38,6],[[[71,[-1]],-2],1,42,6],[[[72,[-1]],-2],1,41,6],[[[73,[-1]],-2],1,40,6],[[[43,[-1]],-2],1,38,6],[[[44,[-1]],-2],1,38,6],[[[45,[-1]],-2],1,38,6],[[[46,[-1]],-2],1,38,6],[[[47,[-1]],-2],1,38,6],[[[48,[-1]],-2],1,38,6],[[[49,[-1]],-2],1,38,6],[[[50,[-1]],-2],1,38,6],[[[51,[-1,-2]],-3],1,52,38,6],[[[55,[-1]],-2],1,38,6],[[[56,[-1]],-2],1,38,6],[[[57,[-1]],-2],1,38,6],[[[58,[-1]],-2],1,38,6],[[[59,[-1]],-2],1,38,6],[[[60,[-1]],-2],1,38,6],[[[61,[-1]],-2],1,38,6],[[[62,[-1]],-2],1,38,6],[[[63,[-1]],-2],1,38,6],[[[64,[-1]],-2],1,38,6],[[[65,[-1]],-2],1,38,6],[[[66,[-1]],-2],1,38,6],[[[67,[-1]],-2],1,38,6],[[[68,[-1]],-2],1,38,6],[[[69,[-1]],-2],1,38,6],[[[70,[-1,-2]],-3],1,52,38,6],[[[71,[-1]],-2],1,42,6],[[[72,[-1]],-2],1,41,6],[[[73,[-1]],-2],1,40,6],[[[43,[-1]],-2],1,38,6],[[[44,[-1]],-2],1,38,6],[[[45,[-1]],-2],1,38,6],[[[46,[-1]],-2],1,38,6],[[[47,[-1]],-2],1,38,6],[[[48,[-1]],-2],1,38,6],[[[49,[-1]],-2],1,38,6],[[[50,[-1]],-2],1,38,6],[[[51,[-1,-2]],-3],1,52,38,6],[[[55,[-1]],-2],1,38,6],[[[56,[-1]],-2],1,38,6],[[[57,[-1]],-2],1,38,6],[[[58,[-1]],-2],1,38,6],[[[59,[-1]],-2],1,38,6],[[[60,[-1]],-2],1,38,6],[[[61,[-1]],-2],1,38,6],[[[62,[-1]],-2],1,38,6],[[[63,[-1]],-2],1,38,6],[[[64,[-1]],-2],1,38,6],[[[65,[-1]],-2],1,38,6],[[[66,[-1]],-2],1,38,6],[[[67,[-1]],-2],1,38,6],[[[68,[-1]],-2],1,38,6],[[[69,[-1]],-2],1,38,6],[[[70,[-1,-2]],-3],1,52,38,6],[[[71,[-1]],-2],1,42,6],[[[72,[-1]],-2],1,41,6],[[[73,[-1]],-2],1,40,6],[[[43,[-1]],-2],1,38,6],[[[44,[-1]],-2],1,38,6],[[[45,[-1]],-2],1,38,6],[[[46,[-1]],-2],1,38,6],[[[47,[-1]],-2],1,38,6],[[[48,[-1]],-2],1,38,6],[[[49,[-1]],-2],1,38,6],[[[50,[-1]],-2],1,38,6],[[[51,[-1,-2]],-3],1,52,38,6],[[[55,[-1]],-2],1,38,6],[[[56,[-1]],-2],1,38,6],[[[57,[-1]],-2],1,38,6],[[[58,[-1]],-2],1,38,6],[[[59,[-1]],-2],1,38,6],[[[60,[-1]],-2],1,38,6],[[[61,[-1]],-2],1,38,6],[[[62,[-1]],-2],1,38,6],[[[63,[-1]],-2],1,38,6],[[[64,[-1]],-2],1,38,6],[[[65,[-1]],-2],1,38,6],[[[66,[-1]],-2],1,38,6],[[[67,[-1]],-2],1,38,6],[[[68,[-1]],-2],1,38,6],[[[69,[-1]],-2],1,38,6],[[[70,[-1,-2]],-3],1,52,38,6],[[[71,[-1]],-2],1,42,6],[[[72,[-1]],-2],1,41,6],[[[73,[-1]],-2],1,40,6],[[[43,[-1]],-2],1,38,6],[[[44,[-1]],-2],1,38,6],[[[45,[-1]],-2],1,38,6],[[[46,[-1]],-2],1,38,6],[[[47,[-1]],-2],1,38,6],[[[48,[-1]],-2],1,38,6],[[[49,[-1]],-2],1,38,6],[[[50,[-1]],-2],1,38,6],[[[51,[-1,-2]],-3],1,52,38,6],[[[55,[-1]],-2],1,38,6],[[[56,[-1]],-2],1,38,6],[[[57,[-1]],-2],1,38,6],[[[58,[-1]],-2],1,38,6],[[[59,[-1]],-2],1,38,6],[[[60,[-1]],-2],1,38,6],[[[61,[-1]],-2],1,38,6],[[[62,[-1]],-2],1,38,6],[[[63,[-1]],-2],1,38,6],[[[64,[-1]],-2],1,38,6],[[[65,[-1]],-2],1,38,6],[[[66,[-1]],-2],1,38,6],[[[67,[-1]],-2],1,38,6],[[[68,[-1]],-2],1,38,6],[[[69,[-1]],-2],1,38,6],[[[70,[-1,-2]],-3],1,52,38,6],[[[71,[-1]],-2],1,42,6],[[[72,[-1]],-2],1,41,6],[[[73,[-1]],-2],1,40,6],[[[43,[-1]],-2],1,38,6],[[[44,[-1]],-2],1,38,6],[[[45,[-1]],-2],1,38,6],[[[46,[-1]],-2],1,38,6],[[[47,[-1]],-2],1,38,6],[[[48,[-1]],-2],1,38,6],[[[49,[-1]],-2],1,38,6],[[[50,[-1]],-2],1,38,6],[[[51,[-1,-2]],-3],1,52,38,6],[[[55,[-1]],-2],1,38,6],[[[56,[-1]],-2],1,38,6],[[[57,[-1]],-2],1,38,6],[[[58,[-1]],-2],1,38,6],[[[59,[-1]],-2],1,38,6],[[[60,[-1]],-2],1,38,6],[[[61,[-1]],-2],1,38,6],[[[62,[-1]],-2],1,38,6],[[[63,[-1]],-2],1,38,6],[[[64,[-1]],-2],1,38,6],[[[65,[-1]],-2],1,38,6],[[[66,[-1]],-2],1,38,6],[[[67,[-1]],-2],1,38,6],[[[68,[-1]],-2],1,38,6],[[[69,[-1]],-2],1,38,6],[[[70,[-1,-2]],-3],1,52,38,6],[[[71,[-1]],-2],1,42,6],[[[72,[-1]],-2],1,41,6],[[[73,[-1]],-2],1,40,6],[[[43,[-1]],-2],1,38,6],[[[44,[-1]],-2],1,38,6],[[[45,[-1]],-2],1,38,6],[[[46,[-1]],-2],1,38,6],[[[47,[-1]],-2],1,38,6],[[[48,[-1]],-2],1,38,6],[[[49,[-1]],-2],1,38,6],[[[50,[-1]],-2],1,38,6],[[[51,[-1,-2]],-3],1,52,38,6],[[[55,[-1]],-2],1,38,6],[[[56,[-1]],-2],1,38,6],[[[57,[-1]],-2],1,38,6],[[[58,[-1]],-2],1,38,6],[[[59,[-1]],-2],1,38,6],[[[60,[-1]],-2],1,38,6],[[[61,[-1]],-2],1,38,6],[[[62,[-1]],-2],1,38,6],[[[63,[-1]],-2],1,38,6],[[[64,[-1]],-2],1,38,6],[[[65,[-1]],-2],1,38,6],[[[66,[-1]],-2],1,38,6],[[[67,[-1]],-2],1,38,6],[[[68,[-1]],-2],1,38,6],[[[69,[-1]],-2],1,38,6],[[[70,[-1,-2]],-3],1,52,38,6],[[[71,[-1]],-2],1,42,6],[[[72,[-1]],-2],1,41,6],[[[73,[-1]],-2],1,40,6],[[[43,[-1]],-2],1,38,6],[[[44,[-1]],-2],1,38,6],[[[45,[-1]],-2],1,38,6],[[[46,[-1]],-2],1,38,6],[[[47,[-1]],-2],1,38,6],[[[48,[-1]],-2],1,38,6],[[[49,[-1]],-2],1,38,6],[[[50,[-1]],-2],1,38,6],[[[51,[-1,-2]],-3],1,52,38,6],[[[55,[-1]],-2],1,38,6],[[[56,[-1]],-2],1,38,6],[[[57,[-1]],-2],1,38,6],[[[58,[-1]],-2],1,38,6],[[[59,[-1]],-2],1,38,6],[[[60,[-1]],-2],1,38,6],[[[61,[-1]],-2],1,38,6],[[[62,[-1]],-2],1,38,6],[[[63,[-1]],-2],1,38,6],[[[64,[-1]],-2],1,38,6],[[[65,[-1]],-2],1,38,6],[[[66,[-1]],-2],1,38,6],[[[67,[-1]],-2],1,38,6],[[[68,[-1]],-2],1,38,6],[[[69,[-1]],-2],1,38,6],[[[70,[-1,-2]],-3],1,52,38,6],[[[71,[-1]],-2],1,42,6],[[[72,[-1]],-2],1,41,6],[[[73,[-1]],-2],1,40,6],[[[43,[-1]],7,-2],1,38,6],[[[44,[-1]],7,-2],1,38,6],[[[45,[-1]],7,-2],1,38,6],[[[46,[-1]],7,-2],1,38,6],[[[47,[-1]],7,-2],1,38,6],[[[48,[-1]],7,-2],1,38,6],[[[49,[-1]],7,-2],1,38,6],[[[50,[-1]],7,-2],1,38,6],[[[51,[-1,-2]],7,-3],1,52,38,6],[[[55,[-1]],7,-2],1,38,6],[[[56,[-1]],7,-2],1,38,6],[[[57,[-1]],7,-2],1,38,6],[[[58,[-1]],7,-2],1,38,6],[[[59,[-1]],7,-2],1,38,6],[[[60,[-1]],7,-2],1,38,6],[[[61,[-1]],7,-2],1,38,6],[[[62,[-1]],7,-2],1,38,6],[[[63,[-1]],7,-2],1,38,6],[[[64,[-1]],7,-2],1,38,6],[[[65,[-1]],7,-2],1,38,6],[[[66,[-1]],7,-2],1,38,6],[[[67,[-1]],7,-2],1,38,6],[[[68,[-1]],7,-2],1,38,6],[[[69,[-1]],7,-2],1,38,6],[[[70,[-1,-2]],7,-3],1,52,38,6],[[[71,[-1]],7,-2],1,42,6],[[[72,[-1]],7,-2],1,41,6],[[[73,[-1]],7,-2],1,40,6],[[[43,[-1]],-2],1,38,6],[[[44,[-1]],-2],1,38,6],[[[45,[-1]],-2],1,38,6],[[[46,[-1]],-2],1,38,6],[[[47,[-1]],-2],1,38,6],[[[48,[-1]],-2],1,38,6],[[[49,[-1]],-2],1,38,6],[[[50,[-1]],-2],1,38,6],[[[51,[-1,-2]],-3],1,52,38,6],[[[55,[-1]],-2],1,38,6],[[[56,[-1]],-2],1,38,6],[[[57,[-1]],-2],1,38,6],[[[58,[-1]],-2],1,38,6],[[[59,[-1]],-2],1,38,6],[[[60,[-1]],-2],1,38,6],[[[61,[-1]],-2],1,38,6],[[[62,[-1]],-2],1,38,6],[[[63,[-1]],-2],1,38,6],[[[64,[-1]],-2],1,38,6],[[[65,[-1]],-2],1,38,6],[[[66,[-1]],-2],1,38,6],[[[67,[-1]],-2],1,38,6],[[[68,[-1]],-2],1,38,6],[[[69,[-1]],-2],1,38,6],[[[70,[-1,-2]],-3],1,52,38,6],[[[71,[-1]],-2],1,42,6],[[[72,[-1]],-2],1,41,6],[[[73,[-1]],-2],1,40,6],[[[43,[-1]],-2],1,38,6],[[[44,[-1]],-2],1,38,6],[[[45,[-1]],-2],1,38,6],[[[46,[-1]],-2],1,38,6],[[[47,[-1]],-2],1,38,6],[[[48,[-1]],-2],1,38,6],[[[49,[-1]],-2],1,38,6],[[[50,[-1]],-2],1,38,6],[[[51,[-1,-2]],-3],1,52,38,6],[[[55,[-1]],-2],1,38,6],[[[56,[-1]],-2],1,38,6],[[[57,[-1]],-2],1,38,6],[[[58,[-1]],-2],1,38,6],[[[59,[-1]],-2],1,38,6],[[[60,[-1]],-2],1,38,6],[[[61,[-1]],-2],1,38,6],[[[62,[-1]],-2],1,38,6],[[[63,[-1]],-2],1,38,6],[[[64,[-1]],-2],1,38,6],[[[65,[-1]],-2],1,38,6],[[[66,[-1]],-2],1,38,6],[[[67,[-1]],-2],1,38,6],[[[68,[-1]],-2],1,38,6],[[[69,[-1]],-2],1,38,6],[[[70,[-1,-2]],-3],1,52,38,6],[[[71,[-1]],-2],1,42,6],[[[72,[-1]],-2],1,41,6],[[[73,[-1]],-2],1,40,6],[[[43,[-1]],-2],1,38,6],[[[44,[-1]],-2],1,38,6],[[[45,[-1]],-2],1,38,6],[[[46,[-1]],-2],1,38,6],[[[47,[-1]],-2],1,38,6],[[[48,[-1]],-2],1,38,6],[[[49,[-1]],-2],1,38,6],[[[50,[-1]],-2],1,38,6],[[[51,[-1,-2]],-3],1,52,38,6],[[[55,[-1]],-2],1,38,6],[[[56,[-1]],-2],1,38,6],[[[57,[-1]],-2],1,38,6],[[[58,[-1]],-2],1,38,6],[[[59,[-1]],-2],1,38,6],[[[60,[-1]],-2],1,38,6],[[[61,[-1]],-2],1,38,6],[[[62,[-1]],-2],1,38,6],[[[63,[-1]],-2],1,38,6],[[[64,[-1]],-2],1,38,6],[[[65,[-1]],-2],1,38,6],[[[66,[-1]],-2],1,38,6],[[[67,[-1]],-2],1,38,6],[[[68,[-1]],-2],1,38,6],[[[69,[-1]],-2],1,38,6],[[[70,[-1,-2]],-3],1,52,38,6],[[[71,[-1]],-2],1,42,6],[[[72,[-1]],-2],1,41,6],[[[73,[-1]],-2],1,40,6],[[[43,[-1]],-2],1,38,6],[[[44,[-1]],-2],1,38,6],[[[45,[-1]],-2],1,38,6],[[[46,[-1]],-2],1,38,6],[[[47,[-1]],-2],1,38,6],[[[48,[-1]],-2],1,38,6],[[[49,[-1]],-2],1,38,6],[[[50,[-1]],-2],1,38,6],[[[51,[-1,-2]],-3],1,52,38,6],[[[55,[-1]],-2],1,38,6],[[[56,[-1]],-2],1,38,6],[[[57,[-1]],-2],1,38,6],[[[58,[-1]],-2],1,38,6],[[[59,[-1]],-2],1,38,6],[[[60,[-1]],-2],1,38,6],[[[61,[-1]],-2],1,38,6],[[[62,[-1]],-2],1,38,6],[[[63,[-1]],-2],1,38,6],[[[64,[-1]],-2],1,38,6],[[[65,[-1]],-2],1,38,6],[[[66,[-1]],-2],1,38,6],[[[67,[-1]],-2],1,38,6],[[[68,[-1]],-2],1,38,6],[[[69,[-1]],-2],1,38,6],[[[70,[-1,-2]],-3],1,52,38,6],[[[71,[-1]],-2],1,42,6],[[[72,[-1]],-2],1,41,6],[[[73,[-1]],-2],1,40,6],[[[43,[-1]],7,[8,[7]],-2],1,38,6],[[[44,[-1]],7,[8,[7]],-2],1,38,6],[[[45,[-1]],7,[8,[7]],-2],1,38,6],[[[46,[-1]],7,[8,[7]],-2],1,38,6],[[[47,[-1]],7,[8,[7]],-2],1,38,6],[[[48,[-1]],7,[8,[7]],-2],1,38,6],[[[49,[-1]],7,[8,[7]],-2],1,38,6],[[[50,[-1]],7,[8,[7]],-2],1,38,6],[[[51,[-1,-2]],7,[8,[7]],-3],1,52,38,6],[[[55,[-1]],7,[8,[7]],-2],1,38,6],[[[56,[-1]],7,[8,[7]],-2],1,38,6],[[[57,[-1]],7,[8,[7]],-2],1,38,6],[[[58,[-1]],7,[8,[7]],-2],1,38,6],[[[59,[-1]],7,[8,[7]],-2],1,38,6],[[[60,[-1]],7,[8,[7]],-2],1,38,6],[[[61,[-1]],7,[8,[7]],-2],1,38,6],[[[62,[-1]],7,[8,[7]],-2],1,38,6],[[[63,[-1]],7,[8,[7]],-2],1,38,6],[[[64,[-1]],7,[8,[7]],-2],1,38,6],[[[65,[-1]],7,[8,[7]],-2],1,38,6],[[[66,[-1]],7,[8,[7]],-2],1,38,6],[[[67,[-1]],7,[8,[7]],-2],1,38,6],[[[68,[-1]],7,[8,[7]],-2],1,38,6],[[[69,[-1]],7,[8,[7]],-2],1,38,6],[[[70,[-1,-2]],7,[8,[7]],-3],1,52,38,6],[[[71,[-1]],7,[8,[7]],-2],1,42,6],[[[72,[-1]],7,[8,[7]],-2],1,41,6],[[[73,[-1]],7,[8,[7]],-2],1,40,6],[[[43,[-1]],9,-2],1,38,6],[[[44,[-1]],9,-2],1,38,6],[[[45,[-1]],9,-2],1,38,6],[[[46,[-1]],9,-2],1,38,6],[[[47,[-1]],9,-2],1,38,6],[[[48,[-1]],9,-2],1,38,6],[[[49,[-1]],9,-2],1,38,6],[[[50,[-1]],9,-2],1,38,6],[[[51,[-1,-2]],9,-3],1,52,38,6],[[[55,[-1]],9,-2],1,38,6],[[[56,[-1]],9,-2],1,38,6],[[[57,[-1]],9,-2],1,38,6],[[[58,[-1]],9,-2],1,38,6],[[[59,[-1]],9,-2],1,38,6],[[[60,[-1]],9,-2],1,38,6],[[[61,[-1]],9,-2],1,38,6],[[[62,[-1]],9,-2],1,38,6],[[[63,[-1]],9,-2],1,38,6],[[[64,[-1]],9,-2],1,38,6],[[[65,[-1]],9,-2],1,38,6],[[[66,[-1]],9,-2],1,38,6],[[[67,[-1]],9,-2],1,38,6],[[[68,[-1]],9,-2],1,38,6],[[[69,[-1]],9,-2],1,38,6],[[[70,[-1,-2]],9,-3],1,52,38,6],[[[71,[-1]],9,-2],1,42,6],[[[72,[-1]],9,-2],1,41,6],[[[73,[-1]],9,-2],1,40,6],[[[43,[-1]],7,9,-2],1,38,6],[[[44,[-1]],7,9,-2],1,38,6],[[[45,[-1]],7,9,-2],1,38,6],[[[46,[-1]],7,9,-2],1,38,6],[[[47,[-1]],7,9,-2],1,38,6],[[[48,[-1]],7,9,-2],1,38,6],[[[49,[-1]],7,9,-2],1,38,6],[[[50,[-1]],7,9,-2],1,38,6],[[[51,[-1,-2]],7,9,-3],1,52,38,6],[[[55,[-1]],7,9,-2],1,38,6],[[[56,[-1]],7,9,-2],1,38,6],[[[57,[-1]],7,9,-2],1,38,6],[[[58,[-1]],7,9,-2],1,38,6],[[[59,[-1]],7,9,-2],1,38,6],[[[60,[-1]],7,9,-2],1,38,6],[[[61,[-1]],7,9,-2],1,38,6],[[[62,[-1]],7,9,-2],1,38,6],[[[63,[-1]],7,9,-2],1,38,6],[[[64,[-1]],7,9,-2],1,38,6],[[[65,[-1]],7,9,-2],1,38,6],[[[66,[-1]],7,9,-2],1,38,6],[[[67,[-1]],7,9,-2],1,38,6],[[[68,[-1]],7,9,-2],1,38,6],[[[69,[-1]],7,9,-2],1,38,6],[[[70,[-1,-2]],7,9,-3],1,52,38,6],[[[71,[-1]],7,9,-2],1,42,6],[[[72,[-1]],7,9,-2],1,41,6],[[[73,[-1]],7,9,-2],1,40,6],[[[43,[-1]],-2],1,38,6],[[[44,[-1]],-2],1,38,6],[[[45,[-1]],-2],1,38,6],[[[46,[-1]],-2],1,38,6],[[[47,[-1]],-2],1,38,6],[[[48,[-1]],-2],1,38,6],[[[49,[-1]],-2],1,38,6],[[[50,[-1]],-2],1,38,6],[[[51,[-1,-2]],-3],1,52,38,6],[[[55,[-1]],-2],1,38,6],[[[56,[-1]],-2],1,38,6],[[[57,[-1]],-2],1,38,6],[[[58,[-1]],-2],1,38,6],[[[59,[-1]],-2],1,38,6],[[[60,[-1]],-2],1,38,6],[[[61,[-1]],-2],1,38,6],[[[62,[-1]],-2],1,38,6],[[[63,[-1]],-2],1,38,6],[[[64,[-1]],-2],1,38,6],[[[65,[-1]],-2],1,38,6],[[[66,[-1]],-2],1,38,6],[[[67,[-1]],-2],1,38,6],[[[68,[-1]],-2],1,38,6],[[[69,[-1]],-2],1,38,6],[[[70,[-1,-2]],-3],1,52,38,6],[[[71,[-1]],-2],1,42,6],[[[72,[-1]],-2],1,41,6],[[[73,[-1]],-2],1,40,6],[[[43,[-1]],-2],1,38,6],[[[44,[-1]],-2],1,38,6],[[[45,[-1]],-2],1,38,6],[[[46,[-1]],-2],1,38,6],[[[47,[-1]],-2],1,38,6],[[[48,[-1]],-2],1,38,6],[[[49,[-1]],-2],1,38,6],[[[50,[-1]],-2],1,38,6],[[[51,[-1,-2]],-3],1,52,38,6],[[[55,[-1]],-2],1,38,6],[[[56,[-1]],-2],1,38,6],[[[57,[-1]],-2],1,38,6],[[[58,[-1]],-2],1,38,6],[[[59,[-1]],-2],1,38,6],[[[60,[-1]],-2],1,38,6],[[[61,[-1]],-2],1,38,6],[[[62,[-1]],-2],1,38,6],[[[63,[-1]],-2],1,38,6],[[[64,[-1]],-2],1,38,6],[[[65,[-1]],-2],1,38,6],[[[66,[-1]],-2],1,38,6],[[[67,[-1]],-2],1,38,6],[[[68,[-1]],-2],1,38,6],[[[69,[-1]],-2],1,38,6],[[[70,[-1,-2]],-3],1,52,38,6],[[[71,[-1]],-2],1,42,6],[[[72,[-1]],-2],1,41,6],[[[73,[-1]],-2],1,40,6],[[[43,[-1]],-2],1,38,6],[[[44,[-1]],-2],1,38,6],[[[45,[-1]],-2],1,38,6],[[[46,[-1]],-2],1,38,6],[[[47,[-1]],-2],1,38,6],[[[48,[-1]],-2],1,38,6],[[[49,[-1]],-2],1,38,6],[[[50,[-1]],-2],1,38,6],[[[51,[-1,-2]],-3],1,52,38,6],[[[55,[-1]],-2],1,38,6],[[[56,[-1]],-2],1,38,6],[[[57,[-1]],-2],1,38,6],[[[58,[-1]],-2],1,38,6],[[[59,[-1]],-2],1,38,6],[[[60,[-1]],-2],1,38,6],[[[61,[-1]],-2],1,38,6],[[[62,[-1]],-2],1,38,6],[[[63,[-1]],-2],1,38,6],[[[64,[-1]],-2],1,38,6],[[[65,[-1]],-2],1,38,6],[[[66,[-1]],-2],1,38,6],[[[67,[-1]],-2],1,38,6],[[[68,[-1]],-2],1,38,6],[[[69,[-1]],-2],1,38,6],[[[70,[-1,-2]],-3],1,52,38,6],[[[71,[-1]],-2],1,42,6],[[[72,[-1]],-2],1,41,6],[[[73,[-1]],-2],1,40,6],[[[43,[-1]],-2],1,38,6],[[[44,[-1]],-2],1,38,6],[[[45,[-1]],-2],1,38,6],[[[46,[-1]],-2],1,38,6],[[[47,[-1]],-2],1,38,6],[[[48,[-1]],-2],1,38,6],[[[49,[-1]],-2],1,38,6],[[[50,[-1]],-2],1,38,6],[[[51,[-1,-2]],-3],1,52,38,6],[[[55,[-1]],-2],1,38,6],[[[56,[-1]],-2],1,38,6],[[[57,[-1]],-2],1,38,6],[[[58,[-1]],-2],1,38,6],[[[59,[-1]],-2],1,38,6],[[[60,[-1]],-2],1,38,6],[[[61,[-1]],-2],1,38,6],[[[62,[-1]],-2],1,38,6],[[[63,[-1]],-2],1,38,6],[[[64,[-1]],-2],1,38,6],[[[65,[-1]],-2],1,38,6],[[[66,[-1]],-2],1,38,6],[[[67,[-1]],-2],1,38,6],[[[68,[-1]],-2],1,38,6],[[[69,[-1]],-2],1,38,6],[[[70,[-1,-2]],-3],1,52,38,6],[[[71,[-1]],-2],1,42,6],[[[72,[-1]],-2],1,41,6],[[[73,[-1]],-2],1,40,6],[[[43,[-1]],-2],1,38,6],[[[44,[-1]],-2],1,38,6],[[[45,[-1]],-2],1,38,6],[[[46,[-1]],-2],1,38,6],[[[47,[-1]],-2],1,38,6],[[[48,[-1]],-2],1,38,6],[[[49,[-1]],-2],1,38,6],[[[50,[-1]],-2],1,38,6],[[[51,[-1,-2]],-3],1,52,38,6],[[[55,[-1]],-2],1,38,6],[[[56,[-1]],-2],1,38,6],[[[57,[-1]],-2],1,38,6],[[[58,[-1]],-2],1,38,6],[[[59,[-1]],-2],1,38,6],[[[60,[-1]],-2],1,38,6],[[[61,[-1]],-2],1,38,6],[[[62,[-1]],-2],1,38,6],[[[63,[-1]],-2],1,38,6],[[[64,[-1]],-2],1,38,6],[[[65,[-1]],-2],1,38,6],[[[66,[-1]],-2],1,38,6],[[[67,[-1]],-2],1,38,6],[[[68,[-1]],-2],1,38,6],[[[69,[-1]],-2],1,38,6],[[[70,[-1,-2]],-3],1,52,38,6],[[[71,[-1]],-2],1,42,6],[[[72,[-1]],-2],1,41,6],[[[73,[-1]],-2],1,40,6],[[[43,[-1]],-2],1,38,6],[[[44,[-1]],-2],1,38,6],[[[45,[-1]],-2],1,38,6],[[[46,[-1]],-2],1,38,6],[[[47,[-1]],-2],1,38,6],[[[48,[-1]],-2],1,38,6],[[[49,[-1]],-2],1,38,6],[[[50,[-1]],-2],1,38,6],[[[51,[-1,-2]],-3],1,52,38,6],[[[55,[-1]],-2],1,38,6],[[[56,[-1]],-2],1,38,6],[[[57,[-1]],-2],1,38,6],[[[58,[-1]],-2],1,38,6],[[[59,[-1]],-2],1,38,6],[[[60,[-1]],-2],1,38,6],[[[61,[-1]],-2],1,38,6],[[[62,[-1]],-2],1,38,6],[[[63,[-1]],-2],1,38,6],[[[64,[-1]],-2],1,38,6],[[[65,[-1]],-2],1,38,6],[[[66,[-1]],-2],1,38,6],[[[67,[-1]],-2],1,38,6],[[[68,[-1]],-2],1,38,6],[[[69,[-1]],-2],1,38,6],[[[70,[-1,-2]],-3],1,52,38,6],[[[71,[-1]],-2],1,42,6],[[[72,[-1]],-2],1,41,6],[[[73,[-1]],-2],1,40,6],[[[43,[-1]],7,-2],1,38,6],[[[44,[-1]],7,-2],1,38,6],[[[45,[-1]],7,-2],1,38,6],[[[46,[-1]],7,-2],1,38,6],[[[47,[-1]],7,-2],1,38,6],[[[48,[-1]],7,-2],1,38,6],[[[49,[-1]],7,-2],1,38,6],[[[50,[-1]],7,-2],1,38,6],[[[51,[-1,-2]],7,-3],1,52,38,6],[[[55,[-1]],7,-2],1,38,6],[[[56,[-1]],7,-2],1,38,6],[[[57,[-1]],7,-2],1,38,6],[[[58,[-1]],7,-2],1,38,6],[[[59,[-1]],7,-2],1,38,6],[[[60,[-1]],7,-2],1,38,6],[[[61,[-1]],7,-2],1,38,6],[[[62,[-1]],7,-2],1,38,6],[[[63,[-1]],7,-2],1,38,6],[[[64,[-1]],7,-2],1,38,6],[[[65,[-1]],7,-2],1,38,6],[[[66,[-1]],7,-2],1,38,6],[[[67,[-1]],7,-2],1,38,6],[[[68,[-1]],7,-2],1,38,6],[[[69,[-1]],7,-2],1,38,6],[[[70,[-1,-2]],7,-3],1,52,38,6],[[[71,[-1]],7,-2],1,42,6],[[[72,[-1]],7,-2],1,41,6],[[[73,[-1]],7,-2],1,40,6],[[[51,[-1,-2]]],[[1,[29,-2]]],52,38],[[[70,[-1,-2]]],[[1,[29,-2]]],52,38],[[54,54],10],[[[43,[-1]],30],31,[]],[[[44,[-1]],30],31,[]],[[[45,[-1]],30],31,[]],[[[46,[-1]],30],31,[]],[[[47,[-1]],30],31,[]],[[[48,[-1]],30],31,[]],[[[49,[-1]],30],31,[]],[[[50,[-1]],30],31,[]],[[[51,[-1,-2]],30],31,[52,74],[]],[[54,30],31],[[54,30],31],[[[55,[-1]],30],31,[]],[[[56,[-1]],30],31,[]],[[[57,[-1]],30],31,[]],[[[58,[-1]],30],31,[]],[[[59,[-1]],30],31,[]],[[[60,[-1]],30],31,[]],[[[61,[-1]],30],31,[]],[[[62,[-1]],30],31,[]],[[[63,[-1]],30],31,[]],[[[64,[-1]],30],31,[]],[[[65,[-1]],30],31,[]],[[[66,[-1]],30],31,[]],[[[67,[-1]],30],31,[]],[[[68,[-1]],30],31,[]],[[[69,[-1]],30],31,[]],[[[70,[-1,-2]],30],31,74,[]],[[[71,[-1]],30],31,74],[[[72,[-1]],30],31,74],[[[73,[-1]],30],31,74],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[],[[43,[-1]]],[]],[23,[[44,[-1]]],[]],[7,[[45,[-1]]],[]],[7,[[46,[-1]]],[]],[36,[[47,[-1]]],[]],[[[75,[7]]],[[48,[-1]]],[]],[[[8,[12]]],[[49,[-1]]],[]],[[[8,[12]]],[[50,[-1]]],[]],[-1,[[51,[-1,-2]]],52,[]],[10,[[55,[-1]]],[]],[20,[[56,[-1]]],[]],[17,[[57,[-1]]],[]],[18,[[58,[-1]]],[]],[19,[[59,[-1]]],[]],[16,[[60,[-1]]],[]],[76,[[61,[-1]]],[]],[12,[[62,[-1]]],[]],[25,[[63,[-1]]],[]],[26,[[64,[-1]]],[]],[24,[[65,[-1]]],[]],[9,[[66,[-1]]],[]],[14,[[67,[-1]]],[]],[15,[[68,[-1]]],[]],[13,[[69,[-1]]],[]],[-1,[[70,[-1,-2]]],52,[]],[-1,[[71,[-1]]],[]],[-1,[[72,[-1]]],[]],[-1,[[73,[-1]]],[]],[[[51,[-1,-2]],-3],[[1,[21]]],52,38,35],[[[70,[-1,-2]],-3],[[1,[21]]],52,38,35],[[[51,[-1,-2]],-3,-4],[[1,[[21,[29]]]]],52,38,35,35],[[[51,[-1,-2]],-3],[[1,[21]]],52,38,35],[[[51,[-1,-2]],-3],1,52,38,35],[[[51,[-1,-2]]],[[21,[9]]],52,38],[[[51,[-1,-2]]],[[21,[9]]],52,38],[[[70,[-1,-2]]],[[21,[9]]],52,38],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,36,[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,37,[]],[-1,37,[]],[-1,37,[]],[-1,37,[]],[-1,37,[]],[-1,37,[]],[-1,37,[]],[-1,37,[]],[-1,37,[]],[-1,37,[]],[-1,37,[]],[-1,37,[]],[-1,37,[]],[-1,37,[]],[-1,37,[]],[-1,37,[]],[-1,37,[]],[-1,37,[]],[-1,37,[]],[-1,37,[]],[-1,37,[]],[-1,37,[]],[-1,37,[]],[-1,37,[]],[-1,37,[]],[-1,37,[]],[-1,37,[]],[-1,37,[]],[-1,37,[]],[[[44,[-1]],-2],[[1,[29]]],38,35],[[[45,[-1]],-2],[[1,[29]]],38,35],[[[46,[-1]],-2],[[1,[29]]],38,35],[[[47,[-1]],-2],[[1,[29]]],38,35],[[[48,[-1]],-2],[[1,[29]]],38,35],[[[72,[-1]],-2],[[1,[29]]],41,35],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[[-1,-2],1,[],2],[[-1,-2],1,[],2],[[-1,-2],1,[],[3,4]],[-1,-2,3,[]],[-1,1,[]],[-1,1,[]],[-1,1,[]],[-1,1,[]],[-1,1,[]],[-1,1,[]],[-1,1,[]],[[[77,[-1,-2]]],[[1,[-1,-2]]],[],78],[[[77,[-1,-2]]],[[1,[-1,-2]]],[],78],[[[77,[-1,-2]]],[[1,[-1,-2]]],[],78],[[[77,[-1,-2]]],[[1,[-1,-2]]],[],78],[[[77,[-1,-2]]],[[1,[-1,-2]]],[],78],[[[77,[-1,-2]]],[[1,[-1,-2]]],[],78],[[[77,[-1,-2]]],[[1,[-1,-2]]],[],78],[-1,-1,[]],[-1,-2,[],[]],[-1,10,[]],[[-1,-2],1,[],11],[[-1,10],1,[]],[[-1,[8,[12]]],1,[]],[[-1,13],1,[]],[[-1,-2],[[1,[29]]],[],[22,4]],[[-1,-2],[[1,[29]]],[],[22,4]],[[[77,[-1,-2]],-3],[[1,[29,-2]]],[],78,[22,4]],[[[77,[-1,-2]],-3],[[1,[29,-2]]],[],78,[22,4]],[[-1,-2,-3],[[1,[29]]],[],[22,4],[22,4]],[[-1,14],1,[]],[[-1,15],1,[]],[[-1,-2],[[1,[29]]],[],[22,4]],[[-1,-2],[[1,[29]]],[],[22,4]],[[-1,7,-2],[[1,[29]]],[],[22,4]],[[-1,7,-2],[[1,[29]]],[],[22,4]],[[[77,[-1,-2]],7,-3],[[1,[29,-2]]],[],78,[22,4]],[[[77,[-1,-2]],-3],[[1,[29,-2]]],[],78,[22,4]],[[[77,[-1,-2]],-3],[[1,[29,-2]]],[],78,[22,4]],[[[77,[-1,-2]],7,-3],[[1,[29,-2]]],[],78,[22,4]],[[-1,16],1,[]],[[-1,17],1,[]],[[-1,18],1,[]],[[-1,19],1,[]],[[-1,20],1,[]],[[-1,-2],[[1,[29]]],[],[22,4]],[[[77,[-1,-2]],-3],[[1,[29,-2]]],[],78,[22,4]],[[-1,[21,[9]]],1,[]],[[-1,7,-2],1,[],[22,4]],[[-1,7,23,7,-2],1,[],[22,4]],[-1,1,[]],[[-1,[21,[9]]],1,[]],[[-1,-2],1,[],[22,4]],[[-1,7],1,[]],[[-1,7,9],1,[]],[[-1,7,23,7,9],1,[]],[[-1,9],1,[]],[[-1,7,9],1,[]],[[-1,7,23,7,9],1,[]],[[-1,24],1,[]],[[-1,25],1,[]],[[-1,23],1,[]],[[-1,26],1,[]],[[-1,12],1,[]],[-1,1,[]],[[-1,7],1,[]],[[-1,7,23,7],1,[]],[[-1,-2],[[1,[29]]],[],[22,4]],[[[77,[-1,-2]],-3],[[1,[29,-2]]],[],78,[22,4]],[[-1,7],[[1,[29]]],[]],[[-1,7],[[1,[29]]],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,37,[]]],"c":[],"p":[[4,"Result",1642],[8,"IntoIterator",1643],[8,"Display",1644],[8,"Sized",1645],[8,"Deserializer",0],[8,"Visitor",87],[15,"str"],[15,"slice"],[15,"usize"],[15,"bool"],[8,"Serializer",0],[15,"u8"],[15,"char"],[15,"f32"],[15,"f64"],[15,"i128"],[15,"i16"],[15,"i32"],[15,"i64"],[15,"i8"],[4,"Option",1646],[8,"Serialize",0],[15,"u32"],[15,"u128"],[15,"u16"],[15,"u64"],[3,"IgnoredAny",87],[4,"Unexpected",87],[15,"tuple"],[3,"Formatter",1644],[6,"Result",1644],[8,"Expected",87],[3,"Error",1644],[8,"Deserialize",0],[8,"DeserializeSeed",87],[3,"String",1647],[3,"TypeId",1648],[8,"Error",87],[3,"Vec",1649],[8,"EnumAccess",87],[8,"MapAccess",87],[8,"SeqAccess",87],[3,"UnitDeserializer",265],[3,"U32Deserializer",265],[3,"StrDeserializer",265],[3,"BorrowedStrDeserializer",265],[3,"StringDeserializer",265],[3,"CowStrDeserializer",265],[3,"BytesDeserializer",265],[3,"BorrowedBytesDeserializer",265],[3,"MapDeserializer",265],[8,"Iterator",1650],[8,"Clone",1651],[3,"Error",265],[3,"BoolDeserializer",265],[3,"I8Deserializer",265],[3,"I16Deserializer",265],[3,"I32Deserializer",265],[3,"I64Deserializer",265],[3,"I128Deserializer",265],[3,"IsizeDeserializer",265],[3,"U8Deserializer",265],[3,"U16Deserializer",265],[3,"U64Deserializer",265],[3,"U128Deserializer",265],[3,"UsizeDeserializer",265],[3,"F32Deserializer",265],[3,"F64Deserializer",265],[3,"CharDeserializer",265],[3,"SeqDeserializer",265],[3,"SeqAccessDeserializer",265],[3,"MapAccessDeserializer",265],[3,"EnumAccessDeserializer",265],[8,"Debug",1644],[4,"Cow",1652],[15,"isize"],[3,"Impossible",1531],[8,"Error",1531],[8,"IntoDeserializer",87],[8,"VariantAccess",87],[8,"SerializeSeq",1531],[8,"SerializeTuple",1531],[8,"SerializeTupleStruct",1531],[8,"SerializeTupleVariant",1531],[8,"SerializeMap",1531],[8,"SerializeStruct",1531],[8,"SerializeStructVariant",1531]],"b":[[182,"impl-Display-for-Unexpected%3C\'a%3E"],[183,"impl-Debug-for-Unexpected%3C\'a%3E"],[410,"impl-Error-for-Error"],[411,"impl-Error-for-Error"],[1293,"impl-Debug-for-Error"],[1294,"impl-Display-for-Error"],[1405,"impl-SeqAccess%3C\'de%3E-for-MapDeserializer%3C\'de,+I,+E%3E"],[1406,"impl-MapAccess%3C\'de%3E-for-MapDeserializer%3C\'de,+I,+E%3E"],[1579,"impl-SerializeTuple-for-Impossible%3COk,+Error%3E"],[1580,"impl-SerializeSeq-for-Impossible%3COk,+Error%3E"],[1581,"impl-SerializeStructVariant-for-Impossible%3COk,+Error%3E"],[1582,"impl-SerializeTupleStruct-for-Impossible%3COk,+Error%3E"],[1583,"impl-SerializeStruct-for-Impossible%3COk,+Error%3E"],[1584,"impl-SerializeTupleVariant-for-Impossible%3COk,+Error%3E"],[1585,"impl-SerializeMap-for-Impossible%3COk,+Error%3E"],[1595,"impl-SerializeSeq-for-Impossible%3COk,+Error%3E"],[1596,"impl-SerializeTuple-for-Impossible%3COk,+Error%3E"],[1604,"impl-SerializeStruct-for-Impossible%3COk,+Error%3E"],[1605,"impl-SerializeTupleVariant-for-Impossible%3COk,+Error%3E"],[1606,"impl-SerializeTupleStruct-for-Impossible%3COk,+Error%3E"],[1607,"impl-SerializeStructVariant-for-Impossible%3COk,+Error%3E"]]},\
"serde_bytes":{"doc":"Wrapper types to enable optimized handling of <code>&amp;[u8]</code> and …","t":"DDDIILLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFKLLLLLLLLLLLLLLLLL","n":["ByteArray","ByteBuf","Bytes","Deserialize","Serialize","as_mut","as_mut","as_mut","as_ref","as_ref","as_ref","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","cmp","cmp","cmp","default","default","deref","deref","deref","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","eq","eq","eq","fmt","fmt","fmt","from","from","from","hash","hash","hash","into","into","into_array","into_boxed_bytes","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_vec","new","new","new","partial_cmp","partial_cmp","partial_cmp","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","to_owned","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","type_id","with_capacity"],"q":[[0,"serde_bytes"],[98,"core::cmp"],[99,"core::result"],[100,"serde::de"],[101,"core::marker"],[102,"core::borrow"],[103,"core::convert"],[104,"core::fmt"],[105,"core::fmt"],[106,"core::convert"],[107,"alloc::boxed"],[108,"core::option"],[109,"serde::ser"],[110,"core::any"]],"d":["Wrapper around <code>[u8; N]</code> to serialize and deserialize …","Wrapper around <code>Vec&lt;u8&gt;</code> to serialize and deserialize …","Wrapper around <code>[u8]</code> to serialize and deserialize …","Types that can be deserialized via …","Types that can be serialized via …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Serde <code>deserialize_with</code> function to deserialize bytes …","","","","","","","","","","","","","","","","Returns the argument unchanged.","Wrap existing bytes in a <code>ByteBuf</code>.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Unwrap the byte array underlying this <code>ByteArray</code>.","","","","","","","","","","Unwrap the vector of byte underlying this <code>ByteBuf</code>.","Wrap an existing array into a <code>ByteArray</code>.","Wrap an existing <code>&amp;[u8]</code>.","Construct a new, empty <code>ByteBuf</code>.","","","","Serde <code>serialize_with</code> function to serialize bytes …","","","","","","","","","","","","","","","","","","Construct a new, empty <code>ByteBuf</code> with the specified capacity."],"i":[0,0,0,0,0,1,4,6,1,4,6,1,1,1,4,6,6,1,1,1,4,6,6,1,6,1,6,1,4,6,4,6,1,4,6,1,4,6,0,11,1,1,1,1,4,4,6,6,1,4,6,1,4,6,1,6,6,1,4,6,1,6,1,6,1,1,1,4,4,6,6,6,6,1,4,6,1,4,6,0,23,1,1,4,4,6,6,1,4,6,1,6,1,6,1,4,6,6],"f":[0,0,0,0,0,[1,[[3,[2]]]],[4,[[5,[2]]]],[6,[[5,[2]]]],[1,[[3,[2]]]],[4,[[5,[2]]]],[6,[[5,[2]]]],[-1,-2,[],[]],[1,4],[1,[[3,[2]]]],[-1,-2,[],[]],[-1,-2,[],[]],[6,4],[1,[[3,[2]]]],[1,4],[-1,-2,[],[]],[-1,-2,[],[]],[6,4],[-1,-2,[],[]],[1,1],[6,6],[[-1,-2],7,[],[]],[[-1,-2],7,[],[]],[[1,1],8],[[4,4],8],[[6,6],8],[[],4],[[],6],[1],[4],[6],[1],[4],[6],[-1,[[9,[-2]]],10,11],[-1,[[9,[-2]]],10,[]],[-1,[[9,[1]]],10],[-1,[[9,[1]]],10],[-1,[[9,[1]]],10],[-1,[[9,[1]]],10],[-1,[[9,[4]]],10],[-1,[[9,[4]]],10],[-1,[[9,[6]]],10],[-1,[[9,[6]]],10],[[1,-1],12,[13,[14,[[3,[2]]]]]],[[4,-1],12,[13,[15,[[5,[2]]]]]],[[6,-1],12,[13,[15,[[5,[2]]]]]],[[1,16],17],[[4,16],17],[[6,16],17],[-1,-1,[]],[-1,6,[[19,[[18,[2]]]]]],[-1,-1,[]],[[1,-1],7,20],[[4,-1],7,20],[[6,-1],7,20],[-1,-2,[],[]],[-1,-2,[],[]],[1,[[3,[2]]]],[6,[[21,[4]]]],[1],[1],[1],[4],[4],[6],[6],[6],[6,[[18,[2]]]],[[[3,[2]]],1],[[[5,[2]]],4],[[],6],[[1,-1],[[22,[8]]],[13,[14,[[3,[2]]]]]],[[4,-1],[[22,[8]]],[13,[15,[[5,[2]]]]]],[[6,-1],[[22,[8]]],[13,[15,[[5,[2]]]]]],[[-1,-2],9,[13,23],24],[[-1,-2],9,[],24],[[1,-1],9,24],[[1,-1],9,24],[[4,-1],9,24],[[4,-1],9,24],[[6,-1],9,24],[[6,-1],9,24],[-1,-2,[],[]],[4],[-1,-2,[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,25,[]],[-1,25,[]],[-1,25,[]],[26,6]],"c":[],"p":[[3,"ByteArray",0],[15,"u8"],[15,"array"],[3,"Bytes",0],[15,"slice"],[3,"ByteBuf",0],[15,"tuple"],[4,"Ordering",98],[4,"Result",99],[8,"Deserializer",100],[8,"Deserialize",0],[15,"bool"],[8,"Sized",101],[8,"Borrow",102],[8,"AsRef",103],[3,"Formatter",104],[6,"Result",104],[3,"Vec",105],[8,"Into",103],[8,"Hasher",106],[3,"Box",107],[4,"Option",108],[8,"Serialize",0],[8,"Serializer",109],[3,"TypeId",110],[15,"usize"]],"b":[[12,"impl-Borrow%3CBytes%3E-for-ByteArray%3CN%3E"],[13,"impl-Borrow%3C%5Bu8;+N%5D%3E-for-ByteArray%3CN%3E"],[17,"impl-BorrowMut%3C%5Bu8;+N%5D%3E-for-ByteArray%3CN%3E"],[18,"impl-BorrowMut%3CBytes%3E-for-ByteArray%3CN%3E"],[40,"impl-Deserialize%3C\'de%3E-for-%26ByteArray%3CN%3E"],[41,"impl-Deserialize%3C\'de%3E-for-ByteArray%3CN%3E"],[42,"impl-Deserialize%3C\'de%3E-for-ByteArray%3CN%3E"],[43,"impl-Deserialize%3C\'de%3E-for-%26ByteArray%3CN%3E"],[44,"impl-Deserialize%3C\'de%3E-for-%26Bytes"],[45,"impl-Deserialize%3C\'de%3E-for-%26Bytes"],[46,"impl-Deserialize%3C\'de%3E-for-ByteBuf"],[47,"impl-Deserialize%3C\'de%3E-for-ByteBuf"],[64,"impl-IntoIterator-for-%26mut+ByteArray%3CN%3E"],[65,"impl-IntoIterator-for-%26ByteArray%3CN%3E"],[66,"impl-IntoIterator-for-ByteArray%3CN%3E"],[67,"impl-IntoIterator-for-%26Bytes"],[68,"impl-IntoIterator-for-%26mut+Bytes"],[69,"impl-IntoIterator-for-%26ByteBuf"],[70,"impl-IntoIterator-for-%26mut+ByteBuf"],[71,"impl-IntoIterator-for-ByteBuf"],[81,"impl-Serialize-for-ByteArray%3CN%3E"],[82,"impl-Serialize-for-ByteArray%3CN%3E"],[83,"impl-Serialize-for-Bytes"],[84,"impl-Serialize-for-Bytes"],[85,"impl-Serialize-for-ByteBuf"],[86,"impl-Serialize-for-ByteBuf"]]},\
"serde_derive":{"doc":"This crate provides Serde’s two derive macros.","t":"YY","n":["Deserialize","Serialize"],"q":[[0,"serde_derive"]],"d":["",""],"i":[0,0],"f":[0,0],"c":[],"p":[],"b":[]},\
"serde_json":{"doc":"Serde JSON","t":"NNDNDDNDNNNGDDNELLLLLLLLLLLLLLLLLLLLALLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLALLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFFFLFLLLLLLLLLLLLLLLLLOALALLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFLLFFFFFFLLLLLLLLLLLLLLLLLLADDIDDDLLLLLLLLLLLFLFLFLLLLLLLLLLLLLLLLLLLENNNDNNGNLLLLLLLLLLLLLLLLLLLLLLLEDDDDDNDNDDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLNNNEDNINDNNDNNLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFFFFFFLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLNNICNDNNDNELLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFLLLLLL","n":["Array","Bool","Deserializer","Err","Error","Map","Null","Number","Number","Object","Ok","Result","Serializer","StreamDeserializer","String","Value","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_from","clone_into","clone_into","collect_str","custom","custom","de","default","default","deserialize","deserialize","deserialize_any","deserialize_any","deserialize_any","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_char","deserialize_char","deserialize_char","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_map","deserialize_map","deserialize_map","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_option","deserialize_option","deserialize_option","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_str","deserialize_str","deserialize_str","deserialize_string","deserialize_string","deserialize_string","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","error","extend","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_iter","from_iter","from_iter","from_reader","from_slice","from_str","from_str","from_value","index","index","index_mut","index_mut","into","into","into","into","into","into","into_deserializer","into_deserializer","into_iter","into_iter","into_iter","into_iter","invalid_type","json","map","next","ser","serialize","serialize","serialize_bool","serialize_bytes","serialize_char","serialize_f32","serialize_f64","serialize_i128","serialize_i16","serialize_i32","serialize_i64","serialize_i8","serialize_map","serialize_newtype_struct","serialize_newtype_variant","serialize_none","serialize_seq","serialize_some","serialize_str","serialize_struct","serialize_struct_variant","serialize_tuple","serialize_tuple_struct","serialize_tuple_variant","serialize_u128","serialize_u16","serialize_u32","serialize_u64","serialize_u8","serialize_unit","serialize_unit_struct","serialize_unit_variant","source","to_owned","to_owned","to_string","to_string","to_string","to_string_pretty","to_value","to_vec","to_vec_pretty","to_writer","to_writer_pretty","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","value","Deserializer","IoRead","Read","SliceRead","StrRead","StreamDeserializer","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","byte_offset","end","from","from","from","from_reader","from_reader","from_slice","from_slice","from_str","from_str","into","into","into","into_iter","new","new","new","new","new","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","Category","Data","Eof","Err","Error","Io","Ok","Result","Syntax","borrow","borrow_mut","classify","clone","clone_into","column","eq","equivalent","equivalent","equivalent","fmt","from","into","io_error_kind","is_data","is_eof","is_io","is_syntax","line","to_owned","try_from","try_into","type_id","Entry","IntoIter","Iter","IterMut","Keys","Map","Occupied","OccupiedEntry","Vacant","VacantEntry","Values","ValuesMut","and_modify","append","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clear","contains_key","entry","from","from","from","from","from","from","from","from","from","get","get","get_key_value","get_mut","get_mut","insert","insert","insert","into","into","into","into","into","into","into","into","into","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_mut","is_empty","iter","iter_mut","key","key","key","keys","len","len","len","len","len","len","len","new","next","next","next","next","next","next","next_back","next_back","next_back","next_back","next_back","next_back","or_insert","or_insert_with","remove","remove","remove_entry","retain","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","values","values_mut","with_capacity","AsciiControl","Backspace","CarriageReturn","CharEscape","CompactFormatter","FormFeed","Formatter","LineFeed","PrettyFormatter","Quote","ReverseSolidus","Serializer","Solidus","Tab","begin_array","begin_array","begin_array_value","begin_array_value","begin_object","begin_object","begin_object_key","begin_object_key","begin_object_value","begin_object_value","begin_string","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","default","end_array","end_array","end_array_value","end_array_value","end_object","end_object","end_object_key","end_object_value","end_object_value","end_string","fmt","fmt","from","from","from","into","into","into","into_inner","new","new","pretty","to_owned","to_owned","to_string","to_string_pretty","to_vec","to_vec_pretty","to_writer","to_writer_pretty","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","with_formatter","with_indent","write_bool","write_byte_array","write_char_escape","write_f32","write_f64","write_i128","write_i16","write_i32","write_i64","write_i8","write_null","write_number_str","write_raw_fragment","write_string_fragment","write_u128","write_u16","write_u32","write_u64","write_u8","Array","Bool","Index","Map","Null","Number","Number","Object","Serializer","String","Value","as_array","as_array_mut","as_bool","as_f64","as_f64","as_i64","as_i64","as_null","as_number","as_object","as_object_mut","as_str","as_u64","as_u64","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","collect_str","deserialize","deserialize_any","deserialize_any","deserialize_bool","deserialize_bool","deserialize_byte_buf","deserialize_byte_buf","deserialize_bytes","deserialize_bytes","deserialize_char","deserialize_char","deserialize_enum","deserialize_enum","deserialize_f32","deserialize_f32","deserialize_f64","deserialize_f64","deserialize_i128","deserialize_i128","deserialize_i16","deserialize_i16","deserialize_i32","deserialize_i32","deserialize_i64","deserialize_i64","deserialize_i8","deserialize_i8","deserialize_identifier","deserialize_identifier","deserialize_ignored_any","deserialize_ignored_any","deserialize_map","deserialize_map","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_option","deserialize_option","deserialize_seq","deserialize_seq","deserialize_str","deserialize_str","deserialize_string","deserialize_string","deserialize_struct","deserialize_struct","deserialize_tuple","deserialize_tuple","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_u128","deserialize_u128","deserialize_u16","deserialize_u16","deserialize_u32","deserialize_u32","deserialize_u64","deserialize_u64","deserialize_u8","deserialize_u8","deserialize_unit","deserialize_unit","deserialize_unit_struct","deserialize_unit_struct","eq","equivalent","equivalent","equivalent","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from_f64","from_str","from_value","get","get_mut","hash","into","into","is_array","is_boolean","is_f64","is_f64","is_i64","is_i64","is_null","is_number","is_object","is_string","is_u64","is_u64","pointer","pointer_mut","serialize","serialize_bool","serialize_bytes","serialize_char","serialize_f32","serialize_f64","serialize_i128","serialize_i16","serialize_i32","serialize_i64","serialize_i8","serialize_map","serialize_newtype_struct","serialize_newtype_variant","serialize_none","serialize_seq","serialize_some","serialize_str","serialize_struct","serialize_struct_variant","serialize_tuple","serialize_tuple_struct","serialize_tuple_variant","serialize_u128","serialize_u16","serialize_u32","serialize_u64","serialize_u8","serialize_unit","serialize_unit_struct","serialize_unit_variant","take","to_owned","to_string","to_value","try_from","try_from","try_into","try_into","type_id","type_id"],"q":[[0,"serde_json"],[311,"serde_json::de"],[352,"serde_json::error"],[384,"serde_json::map"],[521,"serde_json::ser"],[617,"serde_json::value"],[793,"alloc::string"],[794,"std::io"],[795,"core::marker"],[796,"core::fmt"],[797,"core::result"],[798,"serde::de"],[799,"serde::de"],[800,"core::fmt"],[801,"core::convert"],[802,"alloc::borrow"],[803,"core::clone"],[804,"alloc::vec"],[805,"std::io"],[806,"core::cmp"],[807,"serde::de"],[808,"serde::ser"],[809,"core::any"],[810,"std::io::error"],[811,"core::ops::function"],[812,"core::ops::function"]],"d":["Represents a JSON array.","Represents a JSON boolean.","A structure that deserializes JSON into Rust values.","Contains the error value","This type represents all possible errors that can occur …","Represents a JSON key/value type.","Represents a JSON null value.","Represents a JSON number, whether integer or floating …","Represents a JSON number, whether integer or floating …","Represents a JSON object.","Contains the success value","Alias for a <code>Result</code> with the error type <code>serde_json::Error</code>.","A structure for serializing Rust values into JSON.","Iterator that deserializes a stream into multiple JSON …","Represents a JSON string.","Represents any valid JSON value.","","","","","","","","","","","","","","","","","","","","","Deserialize JSON data to a Rust data structure.","","","","","","","","","","","","","","Parses a JSON string as bytes. Note that this function …","","","","","","Parses an enum as an object like <code>{&quot;$KEY&quot;:$VALUE}</code>, where …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Parses a newtype struct as the underlying value.","","","Parses a <code>null</code> as a None, and any other values as a …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","When serializing or deserializing JSON goes wrong.","","","","","Display a JSON value as a string.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Convert <code>()</code> to <code>Value::Null</code>.","","Convert string slice to <code>Value::String</code>.","Convert copy-on-write string to <code>Value::String</code>.","","Convert a slice to <code>Value::Array</code>.","Convert 32-bit floating point number to <code>Value::Number</code>, or …","","Convert map (with string keys) to <code>Value::Object</code>.","","Convert <code>Number</code> to <code>Value::Number</code>.","","Convert <code>String</code> to <code>Value::String</code>.","Convert 64-bit floating point number to <code>Value::Number</code>, or …","","","","","Convert boolean to <code>Value::Bool</code>.","Convert a <code>Vec</code> to <code>Value::Array</code>.","","Create a <code>Value::Array</code> by collecting an iterator of array …","Create a <code>Value::Object</code> by collecting an iterator of …","Deserialize an instance of type <code>T</code> from an I/O stream of …","Deserialize an instance of type <code>T</code> from bytes of JSON text.","Deserialize an instance of type <code>T</code> from a string of JSON …","","Interpret a <code>serde_json::Value</code> as an instance of type <code>T</code>.","","Index into a <code>serde_json::Value</code> using the syntax <code>value[0]</code> or","","Write into a <code>serde_json::Value</code> using the syntax …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","Construct a <code>serde_json::Value</code> from a JSON literal.","A map of String to serde_json::Value.","","Serialize a Rust data structure into JSON data.","","","","","","","","","","","","","","Serialize newtypes without an object wrapper.","","","","","","","","","","","","","","","","","","","","","","Serialize the given data structure as a String of JSON.","","","Serialize the given data structure as a pretty-printed …","Convert a <code>T</code> into <code>serde_json::Value</code> which is an enum that …","Serialize the given data structure as a JSON byte vector.","Serialize the given data structure as a pretty-printed …","Serialize the given data structure as JSON into the I/O …","Serialize the given data structure as pretty-printed JSON …","","","","","","","","","","","","","","","","","","","The Value enum, a loosely typed way of representing any …","A structure that deserializes JSON into Rust values.","JSON input source that reads from a std::io input stream.","Trait used by the deserializer for iterating over input. …","JSON input source that reads from a slice of bytes.","JSON input source that reads from a UTF-8 string.","Iterator that deserializes a stream into multiple JSON …","","","","","","","Returns the number of bytes so far deserialized into a …","The <code>Deserializer::end</code> method should be called after a …","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Deserialize an instance of type <code>T</code> from an I/O stream of …","Creates a JSON deserializer from an <code>io::Read</code>.","Deserialize an instance of type <code>T</code> from bytes of JSON text.","Creates a JSON deserializer from a <code>&amp;[u8]</code>.","Deserialize an instance of type <code>T</code> from a string of JSON …","Creates a JSON deserializer from a <code>&amp;str</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Turn a JSON deserializer into an iterator over values of …","Create a JSON deserializer from one of the possible …","Create a JSON stream deserializer from one of the possible …","Create a JSON input source to read from a std::io input …","Create a JSON input source to read from a slice of bytes.","Create a JSON input source to read from a UTF-8 string.","","","","","","","","","","Categorizes the cause of a <code>serde_json::Error</code>.","The error was caused by input data that was semantically …","The error was caused by prematurely reaching the end of …","Contains the error value","This type represents all possible errors that can occur …","The error was caused by a failure to read or write bytes …","Contains the success value","Alias for a <code>Result</code> with the error type <code>serde_json::Error</code>.","The error was caused by input that was not syntactically …","","","Categorizes the cause of this error.","","","One-based column number at which the error was detected.","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","The kind reported by the underlying standard library I/O …","Returns true if this error was caused by input data that …","Returns true if this error was caused by prematurely …","Returns true if this error was caused by a failure to read …","Returns true if this error was caused by input that was not","One-based line number at which the error was detected.","","","","","A view into a single entry in a map, which may either be …","An owning iterator over a serde_json::Map’s entries.","An iterator over a serde_json::Map’s entries.","A mutable iterator over a serde_json::Map’s entries.","An iterator over a serde_json::Map’s keys.","Represents a JSON key/value type.","An occupied Entry.","An occupied Entry. It is part of the <code>Entry</code> enum.","A vacant Entry.","A vacant Entry. It is part of the <code>Entry</code> enum.","An iterator over a serde_json::Map’s values.","A mutable iterator over a serde_json::Map’s values.","Provides in-place mutable access to an occupied entry …","Moves all elements from other into self, leaving other …","","","","","","","","","","","","","","","","","","","Clears the map, removing all values.","Returns true if the map contains a value for the specified …","Gets the given key’s corresponding entry in the map for …","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns a reference to the value corresponding to the key.","Gets a reference to the value in the entry.","Returns the key-value pair matching the given key.","Returns a mutable reference to the value corresponding to …","Gets a mutable reference to the value in the entry.","Inserts a key-value pair into the map.","Sets the value of the entry with the VacantEntry’s key, …","Sets the value of the entry with the <code>OccupiedEntry</code>’s …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","Converts the entry into a mutable reference to its value.","Returns true if the map contains no elements.","Gets an iterator over the entries of the map.","Gets a mutable iterator over the entries of the map.","Returns a reference to this entry’s key.","Gets a reference to the key that would be used when …","Gets a reference to the key in the entry.","Gets an iterator over the keys of the map.","Returns the number of elements in the map.","","","","","","","Makes a new empty Map.","","","","","","","","","","","","","Ensures a value is in the entry by inserting the default …","Ensures a value is in the entry by inserting the result of …","Removes a key from the map, returning the value at the key …","Takes the value of the entry out of the map, and returns …","Removes a key from the map, returning the stored key and …","Retains only the elements specified by the predicate.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Gets an iterator over the values of the map.","Gets an iterator over mutable values of the map.","Makes a new empty Map with the given initial capacity.","An escaped ASCII plane control character (usually escaped …","An escaped backspace character (usually escaped as <code>\\\\b</code>)","An escaped carriage return character (usually escaped as <code>\\\\r</code>…","Represents a character escape code in a type-safe manner.","This structure compacts a JSON value with no extra …","An escaped form feed character (usually escaped as <code>\\\\f</code>)","This trait abstracts away serializing the JSON control …","An escaped line feed character (usually escaped as <code>\\\\n</code>)","This structure pretty prints a JSON value to make it human …","An escaped quote <code>&quot;</code>","An escaped reverse solidus <code>\\\\</code>","A structure for serializing Rust values into JSON.","An escaped solidus <code>/</code>","An escaped tab character (usually escaped as <code>\\\\t</code>)","Called before every array.  Writes a <code>[</code> to the specified …","","Called before every array value.  Writes a <code>,</code> if needed to …","","Called before every object.  Writes a <code>{</code> to the specified …","","Called before every object key.","","Called before every object value.  A <code>:</code> should be written to","","Called before each series of <code>write_string_fragment</code> and …","","","","","","","","","","","","Called after every array.  Writes a <code>]</code> to the specified …","","Called after every array value.","","Called after every object.  Writes a <code>}</code> to the specified …","","Called after every object key.  A <code>:</code> should be written to …","Called after every object value.","","Called after each series of <code>write_string_fragment</code> and …","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Unwrap the <code>Writer</code> from the <code>Serializer</code>.","Creates a new JSON serializer.","Construct a pretty printer formatter that defaults to …","Creates a new JSON pretty print serializer.","","","Serialize the given data structure as a String of JSON.","Serialize the given data structure as a pretty-printed …","Serialize the given data structure as a JSON byte vector.","Serialize the given data structure as a pretty-printed …","Serialize the given data structure as JSON into the I/O …","Serialize the given data structure as pretty-printed JSON …","","","","","","","","","","Creates a new JSON visitor whose output will be written to …","Construct a pretty printer formatter that uses the <code>indent</code> …","Writes a <code>true</code> or <code>false</code> value to the specified writer.","Writes the representation of a byte array. Formatters can …","Writes a character escape code to the specified writer.","Writes a floating point value like <code>-31.26e+12</code> to the …","Writes a floating point value like <code>-31.26e+12</code> to the …","Writes an integer value like <code>-123</code> to the specified writer.","Writes an integer value like <code>-123</code> to the specified writer.","Writes an integer value like <code>-123</code> to the specified writer.","Writes an integer value like <code>-123</code> to the specified writer.","Writes an integer value like <code>-123</code> to the specified writer.","Writes a <code>null</code> value to the specified writer.","Writes a number that has already been rendered to a string.","Writes a raw JSON fragment that doesn’t need any …","Writes a string fragment that doesn’t need any escaping …","Writes an integer value like <code>123</code> to the specified writer.","Writes an integer value like <code>123</code> to the specified writer.","Writes an integer value like <code>123</code> to the specified writer.","Writes an integer value like <code>123</code> to the specified writer.","Writes an integer value like <code>123</code> to the specified writer.","Represents a JSON array.","Represents a JSON boolean.","A type that can be used to index into a <code>serde_json::Value</code>.","","Represents a JSON null value.","Represents a JSON number, whether integer or floating …","Represents a JSON number, whether integer or floating …","Represents a JSON object.","Serializer whose output is a <code>Value</code>.","Represents a JSON string.","Represents any valid JSON value.","If the <code>Value</code> is an Array, returns the associated vector. …","If the <code>Value</code> is an Array, returns the associated mutable …","If the <code>Value</code> is a Boolean, returns the associated bool. …","If the <code>Value</code> is a number, represent it as f64 if possible. …","Represents the number as f64 if possible. Returns None …","If the <code>Value</code> is an integer, represent it as i64 if …","If the <code>Number</code> is an integer, represent it as i64 if …","If the <code>Value</code> is a Null, returns (). Returns None otherwise.","If the <code>Value</code> is a Number, returns the associated <code>Number</code>. …","If the <code>Value</code> is an Object, returns the associated Map. …","If the <code>Value</code> is an Object, returns the associated mutable …","If the <code>Value</code> is a String, returns the associated str. …","If the <code>Value</code> is an integer, represent it as u64 if …","If the <code>Number</code> is an integer, represent it as u64 if …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","Converts a finite <code>f64</code> to a <code>Number</code>. Infinite or NaN values …","","Interpret a <code>serde_json::Value</code> as an instance of type <code>T</code>.","Index into a JSON array or map. A string index can be used …","Mutably index into a JSON array or map. A string index can …","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns true if the <code>Value</code> is an Array. Returns false …","Returns true if the <code>Value</code> is a Boolean. Returns false …","Returns true if the <code>Value</code> is a number that can be …","Returns true if the <code>Number</code> can be represented by f64.","Returns true if the <code>Value</code> is an integer between <code>i64::MIN</code> …","Returns true if the <code>Number</code> is an integer between <code>i64::MIN</code> …","Returns true if the <code>Value</code> is a Null. Returns false …","Returns true if the <code>Value</code> is a Number. Returns false …","Returns true if the <code>Value</code> is an Object. Returns false …","Returns true if the <code>Value</code> is a String. Returns false …","Returns true if the <code>Value</code> is an integer between zero and …","Returns true if the <code>Number</code> is an integer between zero and …","Looks up a value by a JSON Pointer.","Looks up a value by a JSON Pointer and returns a mutable …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Takes the value out of the <code>Value</code>, leaving a <code>Null</code> in its …","","","Convert a <code>T</code> into <code>serde_json::Value</code> which is an enum that …","","","","","",""],"i":[2,2,0,6,0,0,2,0,2,2,6,0,0,0,2,0,14,51,11,3,5,2,14,51,11,3,5,2,3,2,3,3,2,5,11,11,0,3,2,3,2,14,2,2,14,2,2,14,2,2,14,2,2,14,2,2,14,2,2,14,2,2,14,2,2,14,2,2,14,2,2,14,2,2,14,2,2,14,2,2,14,2,2,14,2,2,14,2,2,14,2,2,14,2,2,14,2,2,14,2,2,14,2,2,14,2,2,14,2,2,14,2,2,14,2,2,14,2,2,14,2,2,14,2,2,14,2,2,14,2,2,14,2,2,3,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,3,3,3,2,2,2,0,3,11,11,3,2,2,14,51,11,3,5,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,3,2,2,0,0,0,2,0,3,2,3,2,14,51,11,3,5,2,2,2,51,3,3,3,11,0,0,51,0,3,2,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,11,3,2,0,11,2,0,0,0,0,0,0,14,51,11,3,5,2,14,51,11,3,5,2,14,51,11,3,5,2,0,0,0,0,0,0,0,59,60,61,59,60,61,51,14,59,60,61,0,14,0,14,0,14,59,60,61,14,14,51,59,60,61,59,60,61,59,60,61,59,60,61,0,62,62,6,0,62,6,0,62,62,62,11,62,62,11,62,62,62,62,62,62,62,11,11,11,11,11,11,62,62,62,62,0,0,0,0,0,0,64,0,64,0,0,0,64,3,64,67,66,68,69,71,70,72,73,64,67,66,68,69,71,70,72,73,3,3,3,64,67,66,68,69,71,70,72,73,3,66,3,3,66,3,67,66,64,67,66,68,69,71,70,72,73,68,69,71,70,72,73,66,3,3,3,64,67,66,3,3,68,69,71,70,72,73,3,68,69,71,70,72,73,68,69,71,70,72,73,64,64,3,66,3,3,68,69,71,70,72,73,64,67,66,68,69,71,70,72,73,64,67,66,68,69,71,70,72,73,64,67,66,68,69,71,70,72,73,3,3,3,78,78,78,0,0,78,0,78,0,78,78,0,78,78,8,76,8,76,8,76,8,76,8,76,8,78,77,76,78,77,76,77,76,77,76,76,8,76,8,76,8,76,8,8,76,8,77,76,78,77,76,78,77,76,5,5,76,5,77,76,0,0,0,0,0,0,78,77,76,78,77,76,78,77,76,5,76,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,2,2,0,0,2,0,2,2,0,2,0,2,2,2,2,40,2,40,2,2,2,2,2,2,40,79,40,79,40,40,40,79,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,79,40,40,40,40,40,40,40,40,40,40,40,40,40,0,2,2,40,79,40,2,2,2,40,2,40,2,2,2,2,2,40,2,2,40,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,2,40,40,0,79,40,79,40,79,40],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[3,[1,2]]],[[3,[1,2]]]],[2,2],[[[3,[1,2]],[3,[1,2]]],4],[[-1,-2],4,[],[]],[[-1,-2],4,[],[]],[[[5,[-1,-2]],-3],[[6,[4]]],7,8,[9,10]],[-1,11,10],[-1,11,10],0,[[],[[3,[1,2]]]],[[],2],[-1,[[12,[[3,[1,2]]]]],13],[-1,[[12,[2]]],13],[[[14,[-1]],-2],6,15,16],[[2,-1],[[12,[11]]],16],[[2,-1],[[12,[11]]],16],[[[14,[-1]],-2],6,15,16],[[2,-1],[[12,[11]]],16],[[2,-1],[[12,[11]]],16],[[[14,[-1]],-2],6,15,16],[[2,-1],[[12,[11]]],16],[[2,-1],[[12,[11]]],16],[[[14,[-1]],-2],6,15,16],[[2,-1],[[12,[11]]],16],[[2,-1],[[12,[11]]],16],[[[14,[-1]],-2],6,15,16],[[2,-1],[[12,[11]]],16],[[2,-1],[[12,[11]]],16],[[[14,[-1]],17,[18,[17]],-2],6,15,16],[[2,17,[18,[17]],-1],[[12,[11]]],16],[[2,17,[18,[17]],-1],[[12,[11]]],16],[[[14,[-1]],-2],6,15,16],[[2,-1],[[12,[11]]],16],[[2,-1],[[12,[11]]],16],[[[14,[-1]],-2],6,15,16],[[2,-1],[[12,[11]]],16],[[2,-1],[[12,[11]]],16],[[[14,[-1]],-2],6,15,16],[[2,-1],[[12,[11]]],16],[[2,-1],[[12,[11]]],16],[[[14,[-1]],-2],6,15,16],[[2,-1],[[12,[11]]],16],[[2,-1],[[12,[11]]],16],[[[14,[-1]],-2],6,15,16],[[2,-1],[[12,[11]]],16],[[2,-1],[[12,[11]]],16],[[[14,[-1]],-2],6,15,16],[[2,-1],[[12,[11]]],16],[[2,-1],[[12,[11]]],16],[[[14,[-1]],-2],6,15,16],[[2,-1],[[12,[11]]],16],[[2,-1],[[12,[11]]],16],[[[14,[-1]],-2],6,15,16],[[2,-1],[[12,[11]]],16],[[2,-1],[[12,[11]]],16],[[[14,[-1]],-2],6,15,16],[[2,-1],[[12,[11]]],16],[[2,-1],[[12,[11]]],16],[[[14,[-1]],-2],6,15,16],[[2,-1],[[12,[11]]],16],[[2,-1],[[12,[11]]],16],[[[14,[-1]],17,-2],6,15,16],[[2,17,-1],[[12,[11]]],16],[[2,17,-1],[[12,[11]]],16],[[[14,[-1]],-2],6,15,16],[[2,-1],[[12,[11]]],16],[[2,-1],[[12,[11]]],16],[[[14,[-1]],-2],6,15,16],[[2,-1],[[12,[11]]],16],[[2,-1],[[12,[11]]],16],[[[14,[-1]],-2],6,15,16],[[2,-1],[[12,[11]]],16],[[2,-1],[[12,[11]]],16],[[[14,[-1]],-2],6,15,16],[[2,-1],[[12,[11]]],16],[[2,-1],[[12,[11]]],16],[[[14,[-1]],17,[18,[17]],-2],6,15,16],[[2,17,[18,[17]],-1],[[12,[11]]],16],[[2,17,[18,[17]],-1],[[12,[11]]],16],[[[14,[-1]],19,-2],6,15,16],[[2,19,-1],[[12,[11]]],16],[[2,19,-1],[[12,[11]]],16],[[[14,[-1]],17,19,-2],6,15,16],[[2,17,19,-1],[[12,[11]]],16],[[2,17,19,-1],[[12,[11]]],16],[[[14,[-1]],-2],6,15,16],[[2,-1],[[12,[11]]],16],[[2,-1],[[12,[11]]],16],[[[14,[-1]],-2],6,15,16],[[2,-1],[[12,[11]]],16],[[2,-1],[[12,[11]]],16],[[[14,[-1]],-2],6,15,16],[[2,-1],[[12,[11]]],16],[[2,-1],[[12,[11]]],16],[[[14,[-1]],-2],6,15,16],[[2,-1],[[12,[11]]],16],[[2,-1],[[12,[11]]],16],[[[14,[-1]],-2],6,15,16],[[2,-1],[[12,[11]]],16],[[2,-1],[[12,[11]]],16],[[[14,[-1]],-2],6,15,16],[[2,-1],[[12,[11]]],16],[[2,-1],[[12,[11]]],16],[[[14,[-1]],17,-2],6,15,16],[[2,17,-1],[[12,[11]]],16],[[2,17,-1],[[12,[11]]],16],[[[3,[1,2]],[3,[1,2]]],20],[[2,1],20],[[2,21],20],[[2,22],20],[[2,23],20],[[2,24],20],[[2,25],20],[[2,26],20],[[2,21],20],[[2,27],20],[[2,24],20],[[2,24],20],[[2,20],20],[[2,17],20],[[2,28],20],[[2,29],20],[[2,25],20],[[2,17],20],[[2,30],20],[[2,25],20],[[2,23],20],[[2,2],20],[[2,26],20],[[2,27],20],[[2,20],20],[[2,28],20],[[2,19],20],[[2,19],20],[[2,27],20],[[2,30],20],[[2,29],20],[[2,21],20],[[2,23],20],[[2,26],20],[[2,20],20],[[2,29],20],[[2,31],20],[[2,30],20],[[2,19],20],[[2,31],20],[[2,31],20],[[2,22],20],[[2,22],20],[[2,28],20],[[-1,-2],20,[],[]],[[-1,-2],20,[],[]],[[-1,-2],20,[],[]],[[-1,-2],20,[],[]],[[-1,-2],20,[],[]],[[-1,-2],20,[],[]],0,[[[3,[1,2]],-1],4,32],[[11,33],34],[[11,33],34],[[[3,[1,2]],33],[[12,[4,35]]]],[[2,33],34],[[2,33],34],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[[36,[-1]]],2,[[37,[2]]]],[28,2],[4,2],[26,2],[17,2],[[[38,[17]]],2],[25,2],[[[18,[-1]]],2,[39,[37,[2]]]],[31,2],[27,2],[[[3,[1,2]]],2],[19,2],[40,2],[22,2],[1,2],[30,2],[24,2],[23,2],[21,2],[29,2],[20,2],[[[41,[-1]]],2,[[37,[2]]]],[-1,[[3,[1,2]]],32],[-1,2,32],[-1,2,32],[-1,[[6,[-2]]],42,43],[[[18,[24]]],[[6,[-1]]],44],[17,[[6,[-1]]],44],[17,[[12,[2,11]]]],[2,[[12,[-1,11]]],43],[[[3,[1,2]],-1],2,[9,45,46,47]],[[2,-1],2,48],[[[3,[1,2]],-1],2,[9,45,46,47]],[[2,-1],2,48],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[2],[2],[-1,-2,[],[]],[[[3,[1,2]]]],[[[3,[1,2]]]],[[[3,[1,2]]]],[[49,50],11],0,0,[[[51,[-1,-2]]],[[36,[[6,[-2]]]]],15,44],0,[[[3,[1,2]],-1],12,52],[[2,-1],12,52],[[[5,[-1,-2]],20],[[6,[4]]],7,8],[[[5,[-1,-2]],[18,[24]]],[[6,[4]]],7,8],[[[5,[-1,-2]],53],[[6,[4]]],7,8],[[[5,[-1,-2]],31],[[6,[4]]],7,8],[[[5,[-1,-2]],30],[[6,[4]]],7,8],[[[5,[-1,-2]],54],[[6,[4]]],7,8],[[[5,[-1,-2]],21],[[6,[4]]],7,8],[[[5,[-1,-2]],26],[[6,[4]]],7,8],[[[5,[-1,-2]],25],[[6,[4]]],7,8],[[[5,[-1,-2]],22],[[6,[4]]],7,8],[[[5,[-1,-2]],[36,[19]]],6,7,8],[[[5,[-1,-2]],17,-3],[[6,[4]]],7,8,[9,55]],[[[5,[-1,-2]],17,27,17,-3],[[6,[4]]],7,8,[9,55]],[[[5,[-1,-2]]],[[6,[4]]],7,8],[[[5,[-1,-2]],[36,[19]]],6,7,8],[[[5,[-1,-2]],-3],[[6,[4]]],7,8,[9,55]],[[[5,[-1,-2]],17],[[6,[4]]],7,8],[[[5,[-1,-2]],17,19],6,7,8],[[[5,[-1,-2]],17,27,17,19],6,7,8],[[[5,[-1,-2]],19],6,7,8],[[[5,[-1,-2]],17,19],6,7,8],[[[5,[-1,-2]],17,27,17,19],6,7,8],[[[5,[-1,-2]],56],[[6,[4]]],7,8],[[[5,[-1,-2]],28],[[6,[4]]],7,8],[[[5,[-1,-2]],27],[[6,[4]]],7,8],[[[5,[-1,-2]],23],[[6,[4]]],7,8],[[[5,[-1,-2]],24],[[6,[4]]],7,8],[[[5,[-1,-2]]],[[6,[4]]],7,8],[[[5,[-1,-2]],17],[[6,[4]]],7,8],[[[5,[-1,-2]],17,27,17],[[6,[4]]],7,8],[11,[[36,[57]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[6,[1]]],[9,55]],[-1,1,[]],[-1,1,[]],[-1,[[6,[1]]],[9,55]],[-1,[[12,[2,11]]],55],[-1,[[6,[[41,[24]]]]],[9,55]],[-1,[[6,[[41,[24]]]]],[9,55]],[[-1,-2],[[6,[4]]],7,[9,55]],[[-1,-2],[[6,[4]]],7,[9,55]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,58,[]],[-1,58,[]],[-1,58,[]],[-1,58,[]],[-1,58,[]],[-1,58,[]],0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[51,[-1,-2]]],19,15,44],[[[14,[-1]]],[[6,[4]]],15],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,[[6,[-2]]],42,43],[-1,[[14,[[59,[-1]]]]],42],[[[18,[24]]],[[6,[-1]]],44],[[[18,[24]]],[[14,[60]]]],[17,[[6,[-1]]],44],[17,[[14,[61]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[14,[-1]]],[[51,[-1,-2]]],15,44],[-1,[[14,[-1]]],15],[-1,[[51,[-1,-2]]],15,44],[-1,[[59,[-1]]],42],[[[18,[24]]],60],[17,61],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,58,[]],[-1,58,[]],[-1,58,[]],0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[11,62],[62,62],[[-1,-2],4,[],[]],[11,19],[[62,62],20],[[-1,-2],20,[],[]],[[-1,-2],20,[],[]],[[-1,-2],20,[],[]],[[62,33],34],[-1,-1,[]],[-1,-2,[],[]],[11,[[36,[63]]]],[11,20],[11,20],[11,20],[11,20],[11,19],[-1,-2,[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,58,[]],0,0,0,0,0,0,0,0,0,0,0,0,[[64,-1],64,65],[[[3,[1,2]],[3,[1,2]]],4],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[3,[1,2]]],4],[[[3,[1,2]],-1],20,[9,45,46,47]],[[[3,[1,2]],-1],64,[[37,[1]]]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[[3,[1,2]],-1],[[36,[2]]],[9,45,46,47]],[66,2],[[[3,[1,2]],-1],[[36,[[4,[1,2]]]]],[9,45,46,47]],[[[3,[1,2]],-1],[[36,[2]]],[9,45,46,47]],[66,2],[[[3,[1,2]],1,2],[[36,[2]]]],[[67,2],2],[[66,2],2],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[66,2],[[[3,[1,2]]],20],[[[3,[1,2]]],68],[[[3,[1,2]]],69],[64,1],[67,1],[66,1],[[[3,[1,2]]],70],[[[3,[1,2]]],19],[68,19],[69,19],[71,19],[70,19],[72,19],[73,19],[[],[[3,[1,2]]]],[68,36],[69,36],[71,36],[70,36],[72,36],[73,36],[68,36],[69,36],[71,36],[70,36],[72,36],[73,36],[[64,2],2],[[64,-1],2,65],[[[3,[1,2]],-1],[[36,[2]]],[9,45,46,47]],[66,2],[[[3,[1,2]],-1],[[36,[[4,[1,2]]]]],[9,45,46,47]],[[[3,[1,2]],-1],4,74],[68,[[4,[19,[36,[19]]]]]],[69,[[4,[19,[36,[19]]]]]],[71,[[4,[19,[36,[19]]]]]],[70,[[4,[19,[36,[19]]]]]],[72,[[4,[19,[36,[19]]]]]],[73,[[4,[19,[36,[19]]]]]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,58,[]],[-1,58,[]],[-1,58,[]],[-1,58,[]],[-1,58,[]],[-1,58,[]],[-1,58,[]],[-1,58,[]],[-1,58,[]],[[[3,[1,2]]],72],[[[3,[1,2]]],73],[19,[[3,[1,2]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[-1,-2],[[75,[4]]],[],[9,7]],[[76,-1],[[75,[4]]],[9,7]],[[-1,-2,20],[[75,[4]]],[],[9,7]],[[76,-1,20],[[75,[4]]],[9,7]],[[-1,-2],[[75,[4]]],[],[9,7]],[[76,-1],[[75,[4]]],[9,7]],[[-1,-2,20],[[75,[4]]],[],[9,7]],[[76,-1,20],[[75,[4]]],[9,7]],[[-1,-2],[[75,[4]]],[],[9,7]],[[76,-1],[[75,[4]]],[9,7]],[[-1,-2],[[75,[4]]],[],[9,7]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[77,77],[76,76],[[-1,-2],4,[],[]],[[-1,-2],4,[],[]],[[],76],[[-1,-2],[[75,[4]]],[],[9,7]],[[76,-1],[[75,[4]]],[9,7]],[[-1,-2],[[75,[4]]],[],[9,7]],[[76,-1],[[75,[4]]],[9,7]],[[-1,-2],[[75,[4]]],[],[9,7]],[[76,-1],[[75,[4]]],[9,7]],[[-1,-2],[[75,[4]]],[],[9,7]],[[-1,-2],[[75,[4]]],[],[9,7]],[[76,-1],[[75,[4]]],[9,7]],[[-1,-2],[[75,[4]]],[],[9,7]],[[77,33],34],[[76,33],34],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[5,[-1,-2]]],-1,7,8],[-1,[[5,[-1]]],7],[[],76],[-1,[[5,[-1,76]]],7],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[6,[1]]],[9,55]],[-1,[[6,[1]]],[9,55]],[-1,[[6,[[41,[24]]]]],[9,55]],[-1,[[6,[[41,[24]]]]],[9,55]],[[-1,-2],[[6,[4]]],7,[9,55]],[[-1,-2],[[6,[4]]],7,[9,55]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,58,[]],[-1,58,[]],[-1,58,[]],[[-1,-2],[[5,[-1,-2]]],7,8],[[[18,[24]]],76],[[-1,-2,20],[[75,[4]]],[],[9,7]],[[-1,-2,[18,[24]]],[[75,[4]]],[],[9,7]],[[-1,-2,78],[[75,[4]]],[],[9,7]],[[-1,-2,31],[[75,[4]]],[],[9,7]],[[-1,-2,30],[[75,[4]]],[],[9,7]],[[-1,-2,54],[[75,[4]]],[],[9,7]],[[-1,-2,21],[[75,[4]]],[],[9,7]],[[-1,-2,26],[[75,[4]]],[],[9,7]],[[-1,-2,25],[[75,[4]]],[],[9,7]],[[-1,-2,22],[[75,[4]]],[],[9,7]],[[-1,-2],[[75,[4]]],[],[9,7]],[[-1,-2,17],[[75,[4]]],[],[9,7]],[[-1,-2,17],[[75,[4]]],[],[9,7]],[[-1,-2,17],[[75,[4]]],[],[9,7]],[[-1,-2,56],[[75,[4]]],[],[9,7]],[[-1,-2,28],[[75,[4]]],[],[9,7]],[[-1,-2,27],[[75,[4]]],[],[9,7]],[[-1,-2,23],[[75,[4]]],[],[9,7]],[[-1,-2,24],[[75,[4]]],[],[9,7]],0,0,0,0,0,0,0,0,0,0,0,[2,[[36,[[41,[2]]]]]],[2,[[36,[[41,[2]]]]]],[2,[[36,[20]]]],[2,[[36,[30]]]],[40,[[36,[30]]]],[2,[[36,[25]]]],[40,[[36,[25]]]],[2,[[36,[4]]]],[2,[[36,[40]]]],[2,[[36,[[3,[1,2]]]]]],[2,[[36,[[3,[1,2]]]]]],[2,[[36,[17]]]],[2,[[36,[23]]]],[40,[[36,[23]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[40,40],[[-1,-2],4,[],[]],[[79,-1],[[6,[2]]],[9,10]],[-1,[[12,[40]]],13],[[40,-1],[[12,[11]]],16],[[40,-1],[[12,[11]]],16],[[40,-1],12,16],[[40,-1],12,16],[[40,-1],12,16],[[40,-1],12,16],[[40,-1],12,16],[[40,-1],12,16],[[40,-1],12,16],[[40,-1],12,16],[[40,17,[18,[17]],-1],12,16],[[40,17,[18,[17]],-1],12,16],[[40,-1],[[12,[11]]],16],[[40,-1],[[12,[11]]],16],[[40,-1],[[12,[11]]],16],[[40,-1],[[12,[11]]],16],[[40,-1],[[12,[11]]],16],[[40,-1],[[12,[11]]],16],[[40,-1],[[12,[11]]],16],[[40,-1],[[12,[11]]],16],[[40,-1],[[12,[11]]],16],[[40,-1],[[12,[11]]],16],[[40,-1],[[12,[11]]],16],[[40,-1],[[12,[11]]],16],[[40,-1],[[12,[11]]],16],[[40,-1],[[12,[11]]],16],[[40,-1],12,16],[[40,-1],12,16],[[40,-1],12,16],[[40,-1],12,16],[[40,-1],12,16],[[40,-1],12,16],[[40,17,-1],12,16],[[40,17,-1],12,16],[[40,-1],12,16],[[40,-1],12,16],[[40,-1],12,16],[[40,-1],12,16],[[40,-1],12,16],[[40,-1],12,16],[[40,-1],12,16],[[40,-1],12,16],[[40,17,[18,[17]],-1],12,16],[[40,17,[18,[17]],-1],12,16],[[40,19,-1],12,16],[[40,19,-1],12,16],[[40,17,19,-1],12,16],[[40,17,19,-1],12,16],[[40,-1],[[12,[11]]],16],[[40,-1],[[12,[11]]],16],[[40,-1],[[12,[11]]],16],[[40,-1],[[12,[11]]],16],[[40,-1],[[12,[11]]],16],[[40,-1],[[12,[11]]],16],[[40,-1],[[12,[11]]],16],[[40,-1],[[12,[11]]],16],[[40,-1],[[12,[11]]],16],[[40,-1],[[12,[11]]],16],[[40,-1],12,16],[[40,-1],12,16],[[40,17,-1],12,16],[[40,17,-1],12,16],[[40,40],20],[[-1,-2],20,[],[]],[[-1,-2],20,[],[]],[[-1,-2],20,[],[]],[[40,33],34],[[40,33],34],[-1,-1,[]],[-1,-1,[]],[21,40],[22,40],[24,40],[19,40],[26,40],[27,40],[25,40],[28,40],[29,40],[23,40],[30,[[36,[40]]]],[17,[[12,[40]]]],[2,[[12,[-1,11]]],43],[[2,-1],[[36,[2]]],48],[[2,-1],[[36,[2]]],48],[[40,-1],4,80],[-1,-2,[],[]],[-1,-2,[],[]],[2,20],[2,20],[2,20],[40,20],[2,20],[40,20],[2,20],[2,20],[2,20],[2,20],[2,20],[40,20],[[2,17],[[36,[2]]]],[[2,17],[[36,[2]]]],[[40,-1],12,52],[[79,20],[[6,[2]]]],[[79,[18,[24]]],[[6,[2]]]],[[79,53],[[6,[2]]]],[[79,31],[[6,[2]]]],[[79,30],[[6,[2]]]],[[79,54],[[6,[2]]]],[[79,21],[[6,[2]]]],[[79,26],[[6,[2]]]],[[79,25],[[6,[2]]]],[[79,22],[[6,[2]]]],[[79,[36,[19]]],6],[[79,17,-1],[[6,[2]]],[9,55]],[[79,17,27,17,-1],[[6,[2]]],[9,55]],[79,[[6,[2]]]],[[79,[36,[19]]],6],[[79,-1],[[6,[2]]],[9,55]],[[79,17],[[6,[2]]]],[[79,17,19],6],[[79,17,27,17,19],6],[[79,19],6],[[79,17,19],6],[[79,17,27,17,19],6],[[79,56],[[6,[2]]]],[[79,28],[[6,[2]]]],[[79,27],[[6,[2]]]],[[79,23],[[6,[2]]]],[[79,24],[[6,[2]]]],[79,[[6,[2]]]],[[79,17],[[6,[2]]]],[[79,17,27,17],[[6,[2]]]],[2,2],[-1,-2,[],[]],[-1,1,[]],[-1,[[12,[2,11]]],55],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,58,[]],[-1,58,[]]],"c":[],"p":[[3,"String",793],[4,"Value",0],[3,"Map",0],[15,"tuple"],[3,"Serializer",0],[6,"Result",0],[8,"Write",794],[8,"Formatter",521],[8,"Sized",795],[8,"Display",796],[3,"Error",0],[4,"Result",797],[8,"Deserializer",798],[3,"Deserializer",0],[8,"Read",311],[8,"Visitor",798],[15,"str"],[15,"slice"],[15,"usize"],[15,"bool"],[15,"i16"],[15,"i8"],[15,"u64"],[15,"u8"],[15,"i64"],[15,"i32"],[15,"u32"],[15,"u16"],[15,"isize"],[15,"f64"],[15,"f32"],[8,"IntoIterator",799],[3,"Formatter",796],[6,"Result",796],[3,"Error",796],[4,"Option",800],[8,"Into",801],[4,"Cow",802],[8,"Clone",803],[3,"Number",617],[3,"Vec",804],[8,"Read",794],[8,"DeserializeOwned",798],[8,"Deserialize",798],[8,"Ord",805],[8,"Eq",805],[8,"Hash",806],[8,"Index",617],[4,"Unexpected",798],[8,"Expected",798],[3,"StreamDeserializer",0],[8,"Serializer",807],[15,"char"],[15,"i128"],[8,"Serialize",807],[15,"u128"],[8,"Error",808],[3,"TypeId",809],[3,"IoRead",311],[3,"SliceRead",311],[3,"StrRead",311],[4,"Category",352],[4,"ErrorKind",810],[4,"Entry",384],[8,"FnOnce",811],[3,"OccupiedEntry",384],[3,"VacantEntry",384],[3,"Iter",384],[3,"IterMut",384],[3,"Keys",384],[3,"IntoIter",384],[3,"Values",384],[3,"ValuesMut",384],[8,"FnMut",811],[6,"Result",810],[3,"PrettyFormatter",521],[3,"CompactFormatter",521],[4,"CharEscape",521],[3,"Serializer",617],[8,"Hasher",806]],"b":[[34,"impl-Error-for-Error"],[35,"impl-Error-for-Error"],[42,"impl-Deserializer%3C\'de%3E-for-Value"],[43,"impl-Deserializer%3C\'de%3E-for-%26Value"],[45,"impl-Deserializer%3C\'de%3E-for-%26Value"],[46,"impl-Deserializer%3C\'de%3E-for-Value"],[48,"impl-Deserializer%3C\'de%3E-for-Value"],[49,"impl-Deserializer%3C\'de%3E-for-%26Value"],[51,"impl-Deserializer%3C\'de%3E-for-Value"],[52,"impl-Deserializer%3C\'de%3E-for-%26Value"],[54,"impl-Deserializer%3C\'de%3E-for-Value"],[55,"impl-Deserializer%3C\'de%3E-for-%26Value"],[57,"impl-Deserializer%3C\'de%3E-for-Value"],[58,"impl-Deserializer%3C\'de%3E-for-%26Value"],[60,"impl-Deserializer%3C\'de%3E-for-Value"],[61,"impl-Deserializer%3C\'de%3E-for-%26Value"],[63,"impl-Deserializer%3C\'de%3E-for-%26Value"],[64,"impl-Deserializer%3C\'de%3E-for-Value"],[66,"impl-Deserializer%3C\'de%3E-for-%26Value"],[67,"impl-Deserializer%3C\'de%3E-for-Value"],[69,"impl-Deserializer%3C\'de%3E-for-Value"],[70,"impl-Deserializer%3C\'de%3E-for-%26Value"],[72,"impl-Deserializer%3C\'de%3E-for-%26Value"],[73,"impl-Deserializer%3C\'de%3E-for-Value"],[75,"impl-Deserializer%3C\'de%3E-for-%26Value"],[76,"impl-Deserializer%3C\'de%3E-for-Value"],[78,"impl-Deserializer%3C\'de%3E-for-%26Value"],[79,"impl-Deserializer%3C\'de%3E-for-Value"],[81,"impl-Deserializer%3C\'de%3E-for-Value"],[82,"impl-Deserializer%3C\'de%3E-for-%26Value"],[84,"impl-Deserializer%3C\'de%3E-for-%26Value"],[85,"impl-Deserializer%3C\'de%3E-for-Value"],[87,"impl-Deserializer%3C\'de%3E-for-Value"],[88,"impl-Deserializer%3C\'de%3E-for-%26Value"],[90,"impl-Deserializer%3C\'de%3E-for-%26Value"],[91,"impl-Deserializer%3C\'de%3E-for-Value"],[93,"impl-Deserializer%3C\'de%3E-for-Value"],[94,"impl-Deserializer%3C\'de%3E-for-%26Value"],[96,"impl-Deserializer%3C\'de%3E-for-%26Value"],[97,"impl-Deserializer%3C\'de%3E-for-Value"],[99,"impl-Deserializer%3C\'de%3E-for-Value"],[100,"impl-Deserializer%3C\'de%3E-for-%26Value"],[102,"impl-Deserializer%3C\'de%3E-for-Value"],[103,"impl-Deserializer%3C\'de%3E-for-%26Value"],[105,"impl-Deserializer%3C\'de%3E-for-%26Value"],[106,"impl-Deserializer%3C\'de%3E-for-Value"],[108,"impl-Deserializer%3C\'de%3E-for-Value"],[109,"impl-Deserializer%3C\'de%3E-for-%26Value"],[111,"impl-Deserializer%3C\'de%3E-for-Value"],[112,"impl-Deserializer%3C\'de%3E-for-%26Value"],[114,"impl-Deserializer%3C\'de%3E-for-Value"],[115,"impl-Deserializer%3C\'de%3E-for-%26Value"],[117,"impl-Deserializer%3C\'de%3E-for-%26Value"],[118,"impl-Deserializer%3C\'de%3E-for-Value"],[120,"impl-Deserializer%3C\'de%3E-for-%26Value"],[121,"impl-Deserializer%3C\'de%3E-for-Value"],[123,"impl-Deserializer%3C\'de%3E-for-%26Value"],[124,"impl-Deserializer%3C\'de%3E-for-Value"],[126,"impl-Deserializer%3C\'de%3E-for-Value"],[127,"impl-Deserializer%3C\'de%3E-for-%26Value"],[129,"impl-Deserializer%3C\'de%3E-for-Value"],[130,"impl-Deserializer%3C\'de%3E-for-%26Value"],[132,"impl-Deserializer%3C\'de%3E-for-%26Value"],[133,"impl-Deserializer%3C\'de%3E-for-Value"],[135,"impl-PartialEq%3CString%3E-for-Value"],[136,"impl-PartialEq%3Ci16%3E-for-%26mut+Value"],[137,"impl-PartialEq%3Ci8%3E-for-%26Value"],[138,"impl-PartialEq%3Cu64%3E-for-%26Value"],[139,"impl-PartialEq%3Cu8%3E-for-%26mut+Value"],[140,"impl-PartialEq%3Ci64%3E-for-%26Value"],[141,"impl-PartialEq%3Ci32%3E-for-%26Value"],[142,"impl-PartialEq%3Ci16%3E-for-%26Value"],[143,"impl-PartialEq%3Cu32%3E-for-%26Value"],[144,"impl-PartialEq%3Cu8%3E-for-%26Value"],[145,"impl-PartialEq%3Cu8%3E-for-Value"],[146,"impl-PartialEq%3Cbool%3E-for-%26mut+Value"],[147,"impl-PartialEq%3Cstr%3E-for-Value"],[148,"impl-PartialEq%3Cu16%3E-for-%26Value"],[149,"impl-PartialEq%3Cisize%3E-for-Value"],[150,"impl-PartialEq%3Ci64%3E-for-Value"],[151,"impl-PartialEq%3C%26str%3E-for-Value"],[152,"impl-PartialEq%3Cf64%3E-for-%26Value"],[153,"impl-PartialEq%3Ci64%3E-for-%26mut+Value"],[154,"impl-PartialEq%3Cu64%3E-for-Value"],[155,"impl-PartialEq-for-Value"],[156,"impl-PartialEq%3Ci32%3E-for-Value"],[157,"impl-PartialEq%3Cu32%3E-for-%26mut+Value"],[158,"impl-PartialEq%3Cbool%3E-for-%26Value"],[159,"impl-PartialEq%3Cu16%3E-for-%26mut+Value"],[160,"impl-PartialEq%3Cusize%3E-for-Value"],[161,"impl-PartialEq%3Cusize%3E-for-%26Value"],[162,"impl-PartialEq%3Cu32%3E-for-Value"],[163,"impl-PartialEq%3Cf64%3E-for-%26mut+Value"],[164,"impl-PartialEq%3Cisize%3E-for-%26Value"],[165,"impl-PartialEq%3Ci16%3E-for-Value"],[166,"impl-PartialEq%3Cu64%3E-for-%26mut+Value"],[167,"impl-PartialEq%3Ci32%3E-for-%26mut+Value"],[168,"impl-PartialEq%3Cbool%3E-for-Value"],[169,"impl-PartialEq%3Cisize%3E-for-%26mut+Value"],[170,"impl-PartialEq%3Cf32%3E-for-Value"],[171,"impl-PartialEq%3Cf64%3E-for-Value"],[172,"impl-PartialEq%3Cusize%3E-for-%26mut+Value"],[173,"impl-PartialEq%3Cf32%3E-for-%26mut+Value"],[174,"impl-PartialEq%3Cf32%3E-for-%26Value"],[175,"impl-PartialEq%3Ci8%3E-for-Value"],[176,"impl-PartialEq%3Ci8%3E-for-%26mut+Value"],[177,"impl-PartialEq%3Cu16%3E-for-Value"],[186,"impl-Display-for-Error"],[187,"impl-Debug-for-Error"],[189,"impl-Display-for-Value"],[190,"impl-Debug-for-Value"],[197,"impl-From%3COption%3CT%3E%3E-for-Value"],[198,"impl-From%3Cu16%3E-for-Value"],[199,"impl-From%3C()%3E-for-Value"],[200,"impl-From%3Ci32%3E-for-Value"],[201,"impl-From%3C%26str%3E-for-Value"],[202,"impl-From%3CCow%3C\'a,+str%3E%3E-for-Value"],[203,"impl-From%3Ci64%3E-for-Value"],[204,"impl-From%3C%26%5BT%5D%3E-for-Value"],[205,"impl-From%3Cf32%3E-for-Value"],[206,"impl-From%3Cu32%3E-for-Value"],[207,"impl-From%3CMap%3CString,+Value%3E%3E-for-Value"],[208,"impl-From%3Cusize%3E-for-Value"],[209,"impl-From%3CNumber%3E-for-Value"],[210,"impl-From%3Ci8%3E-for-Value"],[211,"impl-From%3CString%3E-for-Value"],[212,"impl-From%3Cf64%3E-for-Value"],[213,"impl-From%3Cu8%3E-for-Value"],[214,"impl-From%3Cu64%3E-for-Value"],[215,"impl-From%3Ci16%3E-for-Value"],[216,"impl-From%3Cisize%3E-for-Value"],[217,"impl-From%3Cbool%3E-for-Value"],[218,"impl-From%3CVec%3CT%3E%3E-for-Value"],[220,"impl-FromIterator%3CT%3E-for-Value"],[221,"impl-FromIterator%3C(K,+V)%3E-for-Value"],[237,"impl-IntoDeserializer%3C\'de,+Error%3E-for-%26Value"],[238,"impl-IntoDeserializer%3C\'de,+Error%3E-for-Value"],[240,"impl-IntoIterator-for-%26Map%3CString,+Value%3E"],[241,"impl-IntoIterator-for-Map%3CString,+Value%3E"],[242,"impl-IntoIterator-for-%26mut+Map%3CString,+Value%3E"],[650,"impl-Deserializer%3C\'de%3E-for-%26Number"],[651,"impl-Deserializer%3C\'de%3E-for-Number"],[652,"impl-Deserializer%3C\'de%3E-for-%26Number"],[653,"impl-Deserializer%3C\'de%3E-for-Number"],[654,"impl-Deserializer%3C\'de%3E-for-%26Number"],[655,"impl-Deserializer%3C\'de%3E-for-Number"],[656,"impl-Deserializer%3C\'de%3E-for-Number"],[657,"impl-Deserializer%3C\'de%3E-for-%26Number"],[658,"impl-Deserializer%3C\'de%3E-for-%26Number"],[659,"impl-Deserializer%3C\'de%3E-for-Number"],[660,"impl-Deserializer%3C\'de%3E-for-Number"],[661,"impl-Deserializer%3C\'de%3E-for-%26Number"],[662,"impl-Deserializer%3C\'de%3E-for-%26Number"],[663,"impl-Deserializer%3C\'de%3E-for-Number"],[664,"impl-Deserializer%3C\'de%3E-for-%26Number"],[665,"impl-Deserializer%3C\'de%3E-for-Number"],[666,"impl-Deserializer%3C\'de%3E-for-Number"],[667,"impl-Deserializer%3C\'de%3E-for-%26Number"],[668,"impl-Deserializer%3C\'de%3E-for-%26Number"],[669,"impl-Deserializer%3C\'de%3E-for-Number"],[670,"impl-Deserializer%3C\'de%3E-for-%26Number"],[671,"impl-Deserializer%3C\'de%3E-for-Number"],[672,"impl-Deserializer%3C\'de%3E-for-%26Number"],[673,"impl-Deserializer%3C\'de%3E-for-Number"],[674,"impl-Deserializer%3C\'de%3E-for-Number"],[675,"impl-Deserializer%3C\'de%3E-for-%26Number"],[676,"impl-Deserializer%3C\'de%3E-for-%26Number"],[677,"impl-Deserializer%3C\'de%3E-for-Number"],[678,"impl-Deserializer%3C\'de%3E-for-%26Number"],[679,"impl-Deserializer%3C\'de%3E-for-Number"],[680,"impl-Deserializer%3C\'de%3E-for-Number"],[681,"impl-Deserializer%3C\'de%3E-for-%26Number"],[682,"impl-Deserializer%3C\'de%3E-for-Number"],[683,"impl-Deserializer%3C\'de%3E-for-%26Number"],[684,"impl-Deserializer%3C\'de%3E-for-Number"],[685,"impl-Deserializer%3C\'de%3E-for-%26Number"],[686,"impl-Deserializer%3C\'de%3E-for-Number"],[687,"impl-Deserializer%3C\'de%3E-for-%26Number"],[688,"impl-Deserializer%3C\'de%3E-for-%26Number"],[689,"impl-Deserializer%3C\'de%3E-for-Number"],[690,"impl-Deserializer%3C\'de%3E-for-Number"],[691,"impl-Deserializer%3C\'de%3E-for-%26Number"],[692,"impl-Deserializer%3C\'de%3E-for-Number"],[693,"impl-Deserializer%3C\'de%3E-for-%26Number"],[694,"impl-Deserializer%3C\'de%3E-for-Number"],[695,"impl-Deserializer%3C\'de%3E-for-%26Number"],[696,"impl-Deserializer%3C\'de%3E-for-%26Number"],[697,"impl-Deserializer%3C\'de%3E-for-Number"],[698,"impl-Deserializer%3C\'de%3E-for-Number"],[699,"impl-Deserializer%3C\'de%3E-for-%26Number"],[700,"impl-Deserializer%3C\'de%3E-for-Number"],[701,"impl-Deserializer%3C\'de%3E-for-%26Number"],[702,"impl-Deserializer%3C\'de%3E-for-%26Number"],[703,"impl-Deserializer%3C\'de%3E-for-Number"],[704,"impl-Deserializer%3C\'de%3E-for-%26Number"],[705,"impl-Deserializer%3C\'de%3E-for-Number"],[706,"impl-Deserializer%3C\'de%3E-for-%26Number"],[707,"impl-Deserializer%3C\'de%3E-for-Number"],[708,"impl-Deserializer%3C\'de%3E-for-Number"],[709,"impl-Deserializer%3C\'de%3E-for-%26Number"],[710,"impl-Deserializer%3C\'de%3E-for-Number"],[711,"impl-Deserializer%3C\'de%3E-for-%26Number"],[716,"impl-Display-for-Number"],[717,"impl-Debug-for-Number"],[720,"impl-From%3Ci16%3E-for-Number"],[721,"impl-From%3Ci8%3E-for-Number"],[722,"impl-From%3Cu8%3E-for-Number"],[723,"impl-From%3Cusize%3E-for-Number"],[724,"impl-From%3Ci32%3E-for-Number"],[725,"impl-From%3Cu32%3E-for-Number"],[726,"impl-From%3Ci64%3E-for-Number"],[727,"impl-From%3Cu16%3E-for-Number"],[728,"impl-From%3Cisize%3E-for-Number"],[729,"impl-From%3Cu64%3E-for-Number"]]},\
"syn":{"doc":"github crates-io docs-rs","t":"DNNNNDNNNDNDNNEDNNDDENNNNNNNNNDNNNNNNNNNNNNDDNNEDDDNNDNNNNNDEDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDNEDEDDNNNEEDNNNDNDNDNNNNNNNNDNNNNDNENDDDDDDDNNDNNENNEEDDNNNNNNNNNNNNNNNNNNNNDDNNNEDDDNNDNNNNNNNGNENNNNNNNNNNONDENNNNNDENNNNDDDDDDDDDEDDDDDDDENNNNNNDNNNNDEDENNMMMMMMMMMMLMMMMMMMMMMMMMMMMMMMMMMMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMMMMMMMMOMMMMOALLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMMMMMMMLLMMOOMLLLMMMMMMMMMMMMMMMMMMLLLLLMMMMMMMMMMMMAMMMMMLLLLLLLLMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMMLMMMMMMLLLLMMMMMMMMMMMMMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMLMMMMLMMMMLMMMMMMMLMMAMMMMMMMMMMMLLLLLLLLLLLLMMMMMMMMMMMMMMMOAFLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFLLLLLLLLOLLLLLOOFLLLLLLMMMMMMMMMMMMAMMMMLLLLMMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMALMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLALLLLLLLMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMLMLLLLLMMMMMMMMMLLLLDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLIKSKDLLLLMLLFMLLLLNDDDNQIDGIIGDLLLLLLLLLLLLLLLLLLLALLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLIIKKNDDDDEDDDNLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLIKDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDIDDDDDDDDDDDDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL","n":["Abi","Add","AddAssign","And","AngleBracketed","AngleBracketedGenericArguments","Array","Array","Assign","AssocConst","AssocConst","AssocType","AssocType","Async","AttrStyle","Attribute","Await","BareFn","BareFnArg","BareVariadic","BinOp","Binary","BitAnd","BitAndAssign","BitOr","BitOrAssign","BitXor","BitXorAssign","Block","Bool","BoundLifetimes","Brace","Bracket","Break","Byte","ByteStr","Call","Cast","Char","Closure","Const","Const","Const","ConstParam","Constraint","Constraint","Continue","Data","DataEnum","DataStruct","DataUnion","Default","Deref","DeriveInput","Div","DivAssign","Enum","Eq","Err","Error","Expr","ExprArray","ExprAssign","ExprAsync","ExprAwait","ExprBinary","ExprBlock","ExprBreak","ExprCall","ExprCast","ExprClosure","ExprConst","ExprContinue","ExprField","ExprForLoop","ExprGroup","ExprIf","ExprIndex","ExprInfer","ExprLet","ExprLit","ExprLoop","ExprMacro","ExprMatch","ExprMethodCall","ExprParen","ExprPath","ExprRange","ExprReference","ExprRepeat","ExprReturn","ExprStruct","ExprTry","ExprTryBlock","ExprTuple","ExprUnary","ExprUnsafe","ExprWhile","ExprYield","Field","Field","FieldMutability","FieldValue","Fields","FieldsNamed","FieldsUnnamed","Float","ForLoop","Ge","GenericArgument","GenericParam","Generics","Group","Group","Gt","Ident","If","ImplGenerics","ImplTrait","Index","Index","Infer","Infer","Inherited","Inner","Int","Le","Let","Lifetime","Lifetime","Lifetime","Lifetime","Lifetime","LifetimeParam","List","Lit","Lit","LitBool","LitByte","LitByteStr","LitChar","LitFloat","LitInt","LitStr","Loop","Lt","Macro","Macro","Macro","MacroDelimiter","Match","Maybe","Member","Meta","MetaList","MetaNameValue","MethodCall","Mul","MulAssign","NameValue","Named","Named","Ne","Neg","Never","None","None","None","Not","Ok","Or","Outer","Paren","Paren","Paren","Parenthesized","ParenthesizedGenericArguments","Path","Path","Path","Path","PathArguments","PathSegment","PredicateLifetime","PredicateType","Ptr","Public","QSelf","Range","Reference","Reference","Rem","RemAssign","Repeat","Restricted","Result","Return","ReturnType","Shl","ShlAssign","Shr","ShrAssign","Slice","Str","Struct","Struct","Sub","SubAssign","Token","Trait","TraitBound","TraitBoundModifier","TraitObject","Try","TryBlock","Tuple","Tuple","Turbofish","Type","Type","Type","Type","Type","TypeArray","TypeBareFn","TypeGenerics","TypeGroup","TypeImplTrait","TypeInfer","TypeMacro","TypeNever","TypeParam","TypeParamBound","TypeParen","TypePath","TypePtr","TypeReference","TypeSlice","TypeTraitObject","TypeTuple","UnOp","Unary","Union","Unit","Unnamed","Unnamed","Unsafe","Variant","Verbatim","Verbatim","Verbatim","Verbatim","VisRestricted","Visibility","WhereClause","WherePredicate","While","Yield","abi","and_token","and_token","apostrophe","args","args","args","arguments","as_token","as_token","as_turbofish","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","bang_token","bang_token","base","base10_digits","base10_digits","base10_parse","base10_parse","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","bounded_ty","bounds","bounds","bounds","bounds","bounds","bounds","bounds","brace_token","brace_token","brace_token","braced","bracket_token","bracket_token","bracket_token","bracket_token","bracketed","buffer","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmp","colon2_token","colon_token","colon_token","colon_token","colon_token","colon_token","colon_token","colon_token","colon_token","comma","const_params","const_params_mut","const_token","const_token","custom_keyword","custom_punctuation","data","default","default","default","default","default","delimiter","delimiter","discriminant","dot2_token","dot_token","dot_token","dots","dyn_token","elem","elem","elem","elem","elem","elem","elems","enum_token","eq","eq","eq","eq","eq","eq_token","eq_token","eq_token","eq_token","eq_token","expr","expr","expr","expr","expr","expr","expr","ext","extern_token","fields","fields","fields","fields","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fn_token","for_token","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","func","generics","generics","generics","generics","get_ident","group_token","group_token","gt_token","gt_token","gt_token","gt_token","hash","hash","hash","hash","ident","ident","ident","ident","ident","ident","ident","ident","ident","ident","impl_token","in_token","index","index","inputs","inputs","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_iter","into_iter","into_iter","is_empty","is_empty","is_ident","is_none","iter","iter_mut","leading_colon","left","len","len","lifetime","lifetime","lifetime","lifetimes","lifetimes","lifetimes","lifetimes","lifetimes","lifetimes_mut","lit","lt_token","lt_token","lt_token","lt_token","mac","mac","make_where_clause","member","member","meta","meta","method","modifier","mutability","mutability","mutability","mutability","name","name","name","named","new","new","new","new","new","new","new","new","new","new","new","new_raw","op","op","output","output","params","paren_token","paren_token","paren_token","paren_token","paren_token","paren_token","paren_token","paren_token","paren_token","paren_token","parenthesized","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse2","parse_any","parse_args","parse_args","parse_args_with","parse_args_with","parse_body","parse_body_with","parse_inner","parse_macro_input","parse_mod_style","parse_named","parse_nested_meta","parse_nested_meta","parse_outer","parse_quote","parse_quote_spanned","parse_str","parse_unnamed","parse_with","partial_cmp","partial_cmp","path","path","path","path","path","path","path","path","path","path","position","pound_token","predicates","pub_token","punctuated","qself","qself","qself","receiver","require_ident","require_list","require_name_value","require_path_only","rest","right","segments","semi_token","semi_token","set_span","set_span","set_span","set_span","set_span","set_span","set_span","set_span","set_span","set_span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","spanned","split_for_impl","star_token","struct_token","style","suffix","suffix","suffix","suffix","suffix","suffix","suffix","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","to_string","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","token","token","token","token","token","token","token","token","tokens","tokens","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","turbofish","ty","ty","ty","ty","ty","ty","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_params","type_params_mut","underscore_token","union_token","unnamed","unraw","unsafety","value","value","value","value","value","value","value","value","variadic","variants","vis","vis","where_clause","where_token","without_plus","without_plus","without_plus","without_plus","Cursor","TokenBuffer","begin","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","empty","eof","eq","from","from","group","ident","into","into","lifetime","literal","new","new2","partial_cmp","punct","span","to_owned","token_stream","token_tree","try_from","try_from","try_into","try_into","type_id","type_id","IdentExt","parse_any","peek_any","unraw","ParseNestedMeta","borrow","borrow_mut","error","from","input","into","parse_nested_meta","parser","path","try_from","try_into","type_id","value","Err","Error","Lookahead1","Nothing","Ok","Output","Parse","ParseBuffer","ParseStream","Parser","Peek","Result","StepCursor","advance_to","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","call","clone","clone","clone_into","clone_into","combine","cursor","deref","discouraged","drop","error","error","error","extend","fmt","fmt","fmt","fmt","fork","from","from","from","from","from","from","into","into","into","into","into","into_compile_error","into_iter","into_iter","is_empty","lookahead1","new","new_spanned","parse","parse","parse","parse","parse2","parse_any_delimiter","parse_str","parse_terminated","peek","peek","peek2","peek3","span","span","step","to_compile_error","to_owned","to_owned","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","AnyDelimiter","Speculative","advance_to","parse_any_delimiter","End","IntoIter","IntoPairs","Iter","IterMut","Pair","Pairs","PairsMut","Punctuated","Punctuated","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clear","clone","clone","clone","clone","clone","clone","clone_from","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cloned","default","empty_or_trailing","extend","extend","first","first_mut","from","from","from","from","from","from","from","from","from_iter","from_iter","index","index_mut","insert","into","into","into","into","into","into","into","into","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_pairs","into_tuple","into_value","is_empty","iter","iter_mut","last","last_mut","len","len","len","len","len","len","len","new","new","next","next","next","next","next","next","next_back","next_back","next_back","next_back","next_back","next_back","pairs","pairs_mut","parse_separated_nonempty","parse_separated_nonempty_with","parse_terminated","parse_terminated_with","pop","pop_punct","punct","punct_mut","push","push_punct","push_value","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","span","span","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_tokens","to_tokens","trailing_punct","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","value","value_mut","Spanned","span","Abstract","And","AndAnd","AndEq","As","Async","At","Auto","Await","Become","Box","Brace","Bracket","Break","Caret","CaretEq","Colon","Comma","Const","Continue","Crate","Default","Do","Dollar","Dot","DotDot","DotDotDot","DotDotEq","Dyn","Else","Enum","Eq","EqEq","Extern","FatArrow","Final","Fn","For","Ge","Group","Gt","If","Impl","In","LArrow","Le","Let","Loop","Lt","Macro","Match","Minus","MinusEq","Mod","Move","Mut","Ne","Not","Or","OrEq","OrOr","Override","Paren","PathSep","Percent","PercentEq","Plus","PlusEq","Pound","Priv","Pub","Question","RArrow","Ref","Return","SelfType","SelfValue","Semi","Shl","ShlEq","Shr","ShrEq","Slash","SlashEq","Star","StarEq","Static","Struct","Super","Tilde","Token","Trait","Try","Type","Typeof","Underscore","Union","Unsafe","Unsized","Use","Virtual","Where","While","Yield","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","surround","surround","surround","surround","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id"],"q":[[0,"syn"],[2121,"syn::buffer"],[2155,"syn::ext"],[2159,"syn::meta"],[2173,"syn::parse"],[2269,"syn::parse::discouraged"],[2273,"syn::punctuated"],[2435,"syn::spanned"],[2437,"syn::token"],[4122,"core::str::traits"],[4123,"core::cmp"],[4124,"core::convert"],[4125,"core::marker"],[4126,"core::fmt"],[4127,"core::fmt"],[4128,"core::fmt"],[4129,"core::convert"],[4130,"core::hash"],[4131,"proc_macro2"],[4132,"proc_macro2"],[4133,"core::ops::function"],[4134,"proc_macro2::extra"],[4135,"alloc::string"],[4136,"core::any"],[4137,"proc_macro2"],[4138,"proc_macro2"],[4139,"core::ops::function"],[4140,"core::default"]],"d":["The binary interface of a function: <code>extern &quot;C&quot;</code>.","The <code>+</code> operator (addition)","The <code>+=</code> operator","The <code>&amp;&amp;</code> operator (logical and)","The <code>&lt;&#39;a, T&gt;</code> in <code>std::slice::iter&lt;&#39;a, T&gt;</code>.","Angle bracketed arguments of a path segment: the <code>&lt;K, V&gt;</code> in …","A slice literal expression: <code>[a, b, c, d]</code>.","A fixed size array type: <code>[T; n]</code>.","An assignment expression: <code>a = compute()</code>.","An equality constraint on an associated constant: the …","An equality constraint on an associated constant: the …","A binding (equality constraint) on an associated type: the …","A binding (equality constraint) on an associated type: the …","An async block: <code>async { ... }</code>.","Distinguishes between attributes that decorate an item and …","An attribute, like <code>#[repr(transparent)]</code>.","An await expression: <code>fut.await</code>.","A bare function type: <code>fn(usize) -&gt; bool</code>.","An argument in a function type: the <code>usize</code> in …","The variadic argument of a function pointer like …","A binary operator: <code>+</code>, <code>+=</code>, <code>&amp;</code>.","A binary operation: <code>a + b</code>, <code>a += b</code>.","The <code>&amp;</code> operator (bitwise and)","The <code>&amp;=</code> operator","The <code>|</code> operator (bitwise or)","The <code>|=</code> operator","The <code>^</code> operator (bitwise xor)","The <code>^=</code> operator","A blocked scope: <code>{ ... }</code>.","A boolean literal: <code>true</code> or <code>false</code>.","A set of bound lifetimes: <code>for&lt;&#39;a, &#39;b, &#39;c&gt;</code>.","","","A <code>break</code>, with an optional label to break and an optional …","A byte literal: <code>b&#39;f&#39;</code>.","A byte string literal: <code>b&quot;foo&quot;</code>.","A function call expression: <code>invoke(a, b)</code>.","A cast expression: <code>foo as f64</code>.","A character literal: <code>&#39;a&#39;</code>.","A closure expression: <code>|a, b| a + b</code>.","A const block: <code>const { ... }</code>.","A const generic parameter: <code>const LENGTH: usize</code>.","A const expression. Must be inside of a block.","A const generic parameter: <code>const LENGTH: usize</code>.","An associated type bound: <code>Iterator&lt;Item: Display&gt;</code>.","An associated type bound: <code>Iterator&lt;Item: Display&gt;</code>.","A <code>continue</code>, with an optional label.","The storage of a struct, enum or union data structure.","An enum input to a <code>proc_macro_derive</code> macro.","A struct input to a <code>proc_macro_derive</code> macro.","An untagged union input to a <code>proc_macro_derive</code> macro.","Return type is not specified.","The <code>*</code> operator for dereferencing","Data structure sent to a <code>proc_macro_derive</code> macro.","The <code>/</code> operator (division)","The <code>/=</code> operator","","The <code>==</code> operator (equality)","Contains the error value","Error returned when a Syn parser cannot parse the input …","A Rust expression.","A slice literal expression: <code>[a, b, c, d]</code>.","An assignment expression: <code>a = compute()</code>.","An async block: <code>async { ... }</code>.","An await expression: <code>fut.await</code>.","A binary operation: <code>a + b</code>, <code>a += b</code>.","A blocked scope: <code>{ ... }</code>.","A <code>break</code>, with an optional label to break and an optional …","A function call expression: <code>invoke(a, b)</code>.","A cast expression: <code>foo as f64</code>.","A closure expression: <code>|a, b| a + b</code>.","A const block: <code>const { ... }</code>.","A <code>continue</code>, with an optional label.","Access of a named struct field (<code>obj.k</code>) or unnamed tuple …","A for loop: <code>for pat in expr { ... }</code>.","An expression contained within invisible delimiters.","An <code>if</code> expression with an optional <code>else</code> block: …","A square bracketed indexing expression: <code>vector[2]</code>.","The inferred value of a const generic argument, denoted <code>_</code>.","A <code>let</code> guard: <code>let Some(x) = opt</code>.","A literal in place of an expression: <code>1</code>, <code>&quot;foo&quot;</code>.","Conditionless loop: <code>loop { ... }</code>.","A macro invocation expression: <code>format!(&quot;{}&quot;, q)</code>.","A <code>match</code> expression: <code>match n { Some(n) =&gt; {}, None =&gt; {} }</code>.","A method call expression: <code>x.foo::&lt;T&gt;(a, b)</code>.","A parenthesized expression: <code>(a + b)</code>.","A path like <code>std::mem::replace</code> possibly containing generic …","A range expression: <code>1..2</code>, <code>1..</code>, <code>..2</code>, <code>1..=2</code>, <code>..=2</code>.","A referencing operation: <code>&amp;a</code> or <code>&amp;mut a</code>.","An array literal constructed from one repeated element: …","A <code>return</code>, with an optional value to be returned.","A struct literal expression: <code>Point { x: 1, y: 1 }</code>.","A try-expression: <code>expr?</code>.","A try block: <code>try { ... }</code>.","A tuple expression: <code>(a, b, c, d)</code>.","A unary operation: <code>!x</code>, <code>*x</code>.","An unsafe block: <code>unsafe { ... }</code>.","A while loop: <code>while expr { ... }</code>.","A yield expression: <code>yield expr</code>.","A field of a struct or enum variant.","Access of a named struct field (<code>obj.k</code>) or unnamed tuple …","Unused, but reserved for RFC 3323 restrictions.","A field-value pair in a struct literal.","Data stored within an enum variant or struct.","Named fields of a struct or struct variant such as …","Unnamed fields of a tuple struct or tuple variant such as …","A floating point literal: <code>1f64</code> or <code>1.0e10f64</code>.","A for loop: <code>for pat in expr { ... }</code>.","The <code>&gt;=</code> operator (greater than or equal to)","An individual generic argument, like <code>&#39;a</code>, <code>T</code>, or <code>Item = T</code>.","A generic type parameter, lifetime, or const generic: …","Lifetimes and type parameters attached to a declaration of …","An expression contained within invisible delimiters.","A type contained within invisible delimiters.","The <code>&gt;</code> operator (greater than)","A word of Rust code, which may be a keyword or legal …","An <code>if</code> expression with an optional <code>else</code> block: …","Returned by <code>Generics::split_for_impl</code>.","An <code>impl Bound1 + Bound2 + Bound3</code> type where <code>Bound</code> is a …","The index of an unnamed tuple struct field.","A square bracketed indexing expression: <code>vector[2]</code>.","The inferred value of a const generic argument, denoted <code>_</code>.","Indication that a type should be inferred by the compiler: …","An inherited visibility, which usually means private.","","An integer literal: <code>1</code> or <code>1u16</code>.","The <code>&lt;=</code> operator (less than or equal to)","A <code>let</code> guard: <code>let Some(x) = opt</code>.","A Rust lifetime: <code>&#39;a</code>.","A lifetime parameter: <code>&#39;a: &#39;b + &#39;c + &#39;d</code>.","","A lifetime predicate in a <code>where</code> clause: <code>&#39;a: &#39;b + &#39;c</code>.","A lifetime argument.","A lifetime definition: <code>&#39;a: &#39;b + &#39;c + &#39;d</code>.","A structured list within an attribute, like …","A Rust literal such as a string or integer or boolean.","A literal in place of an expression: <code>1</code>, <code>&quot;foo&quot;</code>.","A boolean literal: <code>true</code> or <code>false</code>.","A byte literal: <code>b&#39;f&#39;</code>.","A byte string literal: <code>b&quot;foo&quot;</code>.","A character literal: <code>&#39;a&#39;</code>.","A floating point literal: <code>1f64</code> or <code>1.0e10f64</code>.","An integer literal: <code>1</code> or <code>1u16</code>.","A UTF-8 string literal: <code>&quot;foo&quot;</code>.","Conditionless loop: <code>loop { ... }</code>.","The <code>&lt;</code> operator (less than)","A macro invocation: <code>println!(&quot;{}&quot;, mac)</code>.","A macro invocation expression: <code>format!(&quot;{}&quot;, q)</code>.","A macro in the type position.","A grouping token that surrounds a macro body: <code>m!(...)</code> or …","A <code>match</code> expression: <code>match n { Some(n) =&gt; {}, None =&gt; {} }</code>.","","A struct or tuple struct field accessed in a struct …","Content of a compile-time structured attribute.","A structured list within an attribute, like …","A name-value pair within an attribute, like …","A method call expression: <code>x.foo::&lt;T&gt;(a, b)</code>.","The <code>*</code> operator (multiplication)","The <code>*=</code> operator","A name-value pair within an attribute, like …","Named fields of a struct or struct variant such as …","A named field like <code>self.x</code>.","The <code>!=</code> operator (not equal to)","The <code>-</code> operator for negation","The never type: <code>!</code>.","","","","The <code>!</code> operator for logical inversion","Contains the success value","The <code>||</code> operator (logical or)","","A parenthesized expression: <code>(a + b)</code>.","","A parenthesized type equivalent to the inner type.","The <code>(A, B) -&gt; C</code> in <code>Fn(A, B) -&gt; C</code>.","Arguments of a function path segment: the <code>(A, B) -&gt; C</code> in …","A path at which a named item is exported (e.g. …","","A path like <code>std::mem::replace</code> possibly containing generic …","A path like <code>std::slice::Iter</code>, optionally qualified with a …","Angle bracketed or parenthesized arguments of a path …","A segment of a path together with any path arguments on …","A lifetime predicate in a <code>where</code> clause: <code>&#39;a: &#39;b + &#39;c</code>.","A type predicate in a <code>where</code> clause: …","A raw pointer type: <code>*const T</code> or <code>*mut T</code>.","A public visibility level: <code>pub</code>.","The explicit Self type in a qualified path: the <code>T</code> in …","A range expression: <code>1..2</code>, <code>1..</code>, <code>..2</code>, <code>1..=2</code>, <code>..=2</code>.","A referencing operation: <code>&amp;a</code> or <code>&amp;mut a</code>.","A reference type: <code>&amp;&#39;a T</code> or <code>&amp;&#39;a mut T</code>.","The <code>%</code> operator (modulus)","The <code>%=</code> operator","An array literal constructed from one repeated element: …","A visibility level restricted to some path: <code>pub(self)</code> or …","The result of a Syn parser.","A <code>return</code>, with an optional value to be returned.","Return type of a function signature.","The <code>&lt;&lt;</code> operator (shift left)","The <code>&lt;&lt;=</code> operator","The <code>&gt;&gt;</code> operator (shift right)","The <code>&gt;&gt;=</code> operator","A dynamically sized slice type: <code>[T]</code>.","A UTF-8 string literal: <code>&quot;foo&quot;</code>.","","A struct literal expression: <code>Point { x: 1, y: 1 }</code>.","The <code>-</code> operator (subtraction)","The <code>-=</code> operator","A type-macro that expands to the name of the Rust type …","","A trait used as a bound on a type parameter.","A modifier on a trait bound, currently only used for the <code>?</code> …","A trait object type <code>dyn Bound1 + Bound2 + Bound3</code> where …","A try-expression: <code>expr?</code>.","A try block: <code>try { ... }</code>.","A tuple expression: <code>(a, b, c, d)</code>.","A tuple type: <code>(A, B, C, String)</code>.","Returned by <code>TypeGenerics::as_turbofish</code>.","The possible types that a Rust value could have.","A generic type parameter: <code>T: Into&lt;String&gt;</code>.","A type predicate in a <code>where</code> clause: …","A type argument.","A particular type is returned.","A fixed size array type: <code>[T; n]</code>.","A bare function type: <code>fn(usize) -&gt; bool</code>.","Returned by <code>Generics::split_for_impl</code>.","A type contained within invisible delimiters.","An <code>impl Bound1 + Bound2 + Bound3</code> type where <code>Bound</code> is a …","Indication that a type should be inferred by the compiler: …","A macro in the type position.","The never type: <code>!</code>.","A generic type parameter: <code>T: Into&lt;String&gt;</code>.","A trait or lifetime used as a bound on a type parameter.","A parenthesized type equivalent to the inner type.","A path like <code>std::slice::Iter</code>, optionally qualified with a …","A raw pointer type: <code>*const T</code> or <code>*mut T</code>.","A reference type: <code>&amp;&#39;a T</code> or <code>&amp;&#39;a mut T</code>.","A dynamically sized slice type: <code>[T]</code>.","A trait object type <code>dyn Bound1 + Bound2 + Bound3</code> where …","A tuple type: <code>(A, B, C, String)</code>.","A unary operator: <code>*</code>, <code>!</code>, <code>-</code>.","A unary operation: <code>!x</code>, <code>*x</code>.","","Unit struct or unit variant such as <code>None</code>.","Unnamed fields of a tuple struct or tuple variant such as …","An unnamed field like <code>self.0</code>.","An unsafe block: <code>unsafe { ... }</code>.","An enum variant.","Tokens in expression position not interpreted by Syn.","","A raw token literal not interpreted by Syn.","Tokens in type position not interpreted by Syn.","A visibility level restricted to some path: <code>pub(self)</code> or …","The visibility level of an item: inherited or <code>pub</code> or …","A <code>where</code> clause in a definition: …","A single predicate in a <code>where</code> clause: <code>T: Deserialize&lt;&#39;de&gt;</code>.","A while loop: <code>while expr { ... }</code>.","A yield expression: <code>yield expr</code>.","","","","","","","","","","","Turn a type’s generics like <code>&lt;X, Y&gt;</code> into a turbofish like …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Parses the literal into a selected number typehe type being bounded","","","","Trait and lifetime bounds (<code>Clone+Send+&#39;static</code>)","","","","","","","Parse a set of curly braces and expose their content to …","","","","","Parse a set of square brackets and expose their content to …","A stably addressed token buffer supporting efficient …he colon in <code>Struct { x: x }</code>. If written in shorthand like …","","","","","","","","Returns an Iterator&lt;Item = &amp;ConstParam&gt; over the constant …","Returns an Iterator&lt;Item = &amp;mut ConstParam&gt; over the …","","","Define a type that supports parsing and printing a given …","Define a type that supports parsing and printing a …","","","","","","","","","Explicit discriminant: <code>Variant = 1</code>","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Extension traits to provide parsing methods on foreign …","","Content stored in the variant.","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","Returns the argument unchanged.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","If this path consists of a single ident, returns the ident.","","","","","","","","","","","","Name of the variant.","Name of the field, if any.","","","","","","","","","","","","<code>(A, B)</code>","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","Returns <code>true</code> if there are zero fields.","","Determines whether this is a path of length 1 equal to the …","","Get an iterator over the borrowed <code>Field</code> items in this …","Get an iterator over the mutably borrowed <code>Field</code> items in …","","","Returns the number of fields.","","","","","Returns an Iterator&lt;Item = &amp;LifetimeParam&gt; over the …","","The <code>for&lt;&#39;a&gt;</code> in <code>for&lt;&#39;a&gt; Foo&lt;&amp;&#39;a T&gt;</code>","Any lifetimes from a <code>for</code> binding","","Returns an Iterator&lt;Item = &amp;mut LifetimeParam&gt; over the …","","","","","","","","Initializes an empty <code>where</code>-clause if there is not one …","","","Facility for interpreting structured content inside of an …","","","","","","","","","","","","Creates a new <code>Ident</code> with the given <code>string</code> as well as the …","Panics","","Interpret a Syn literal from a proc-macro2 literal.","","","","","","","","Same as <code>Ident::new</code>, but creates a raw identifier (<code>r#ident</code>…","","","<code>C</code>","","","","","","","","","","","","","Parse a set of parentheses and expose their content to …","Parsing interface for parsing a token stream into a syntax …","Parse tokens of source code into the chosen syntax tree …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Parse a syntax tree node from the content of this string …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Parse a proc-macro2 token stream into the chosen syntax …","","Parse the arguments to the attribute as a syntax tree.","See <code>Attribute::parse_args</code>.","Parse the arguments to the attribute using the given …","See <code>Attribute::parse_args_with</code>.","Parse the tokens within the macro invocation’s …","Parse the tokens within the macro invocation’s …","Parses zero or more inner attributes from the stream.","Parse the input TokenStream of a macro, triggering a …","Parse a <code>Path</code> containing no path arguments on any of its …","Parses a named (braced struct) field.","Parse the arguments to the attribute, expecting it to …","See <code>Attribute::parse_nested_meta</code>.","Parses zero or more outer attributes from the stream.","Quasi-quotation macro that accepts input like the <code>quote!</code> …","This macro is <code>parse_quote!</code> + <code>quote_spanned!</code>.","Parse a string of Rust code into the chosen syntax tree …","Parses an unnamed (tuple struct) field.","Invoke parser on the content of this string literal.","","","Returns the path that identifies the interpretation of …","Returns the path that begins this structured meta item.","","","","","The <code>Foo&lt;&amp;&#39;a T&gt;</code> in <code>for&lt;&#39;a&gt; Foo&lt;&amp;&#39;a T&gt;</code>","","","","","","","","A punctuated sequence of syntax tree nodes separated by …","","","","","An error if this path is not a single ident, as defined in …","Error if this is a <code>Meta::Path</code> or <code>Meta::NameValue</code>.","Error if this is a <code>Meta::Path</code> or <code>Meta::List</code>.","Error if this is a <code>Meta::List</code> or <code>Meta::NameValue</code>.","","","","","","Configures the span of this <code>Ident</code>, possibly changing its …","","","","","","","","","","","Returns the span of this <code>Ident</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","A trait that can provide the <code>Span</code> of the complete contents …","Split a type’s generics into the pieces required for impl…okens representing Rust punctuation, keywords, and …eturns an Iterator&lt;Item = &amp;TypeParam&gt; over the type …","Returns an Iterator&lt;Item = &amp;mut TypeParam&gt; over the type …","","","","","","","","","","","","","","","","","","","","In some positions, types may not contain the <code>+</code> character, …","","","","A cheaply copyable cursor into a <code>TokenBuffer</code>.","A buffer that can be efficiently traversed multiple times, …","Creates a cursor referencing the first token in the buffer …","","","","","","","Creates a cursor referencing a static empty TokenStream.","Checks whether the cursor is currently pointing at the end …","","Returns the argument unchanged.","Returns the argument unchanged.","If the cursor is pointing at a <code>Group</code> with the given …","If the cursor is pointing at a <code>Ident</code>, returns it along …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","If the cursor is pointing at a <code>Lifetime</code>, returns it along …","If the cursor is pointing at a <code>Literal</code>, return it along …","Creates a <code>TokenBuffer</code> containing all the tokens from the …","Creates a <code>TokenBuffer</code> containing all the tokens from the …","","If the cursor is pointing at a <code>Punct</code>, returns it along …","Returns the <code>Span</code> of the current token, or <code>Span::call_site()</code>…","","Copies all remaining tokens visible from this cursor into a","If the cursor is pointing at a <code>TokenTree</code>, returns it along …","","","","","","","Additional methods for <code>Ident</code> not provided by proc-macro2 …","Parses any identifier including keywords.","Peeks any identifier including keywords. Usage: …","Strips the raw marker <code>r#</code>, if any, from the beginning of an …","Context for parsing a single property in the conventional …","","","Report that the attribute’s content did not conform to …","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Used when parsing <code>list(...)</code> syntax <strong>if</strong> the content inside …","Make a parser that is usable with <code>parse_macro_input!</code> in a …","","","","","Used when parsing <code>key = &quot;value&quot;</code> syntax.","Contains the error value","Error returned when a Syn parser cannot parse the input …","Support for checking the next token in a stream to decide …","An empty syntax tree node that consumes no tokens when …","Contains the success value","","Parsing interface implemented by all types that can be …","Cursor position within a buffered token stream.","Input to a Syn parser function.","Parser that can parse Rust tokens into a particular syntax …","Types that can be parsed by looking at just one token.","The result of a Syn parser.","Cursor state associated with speculative parsing.","","","","","","","","","","","","Calls the given parser function to parse a syntax tree …","","","","","Add another error message to self such that when …","Provides low-level access to the token representation …","","Extensions to the parsing API with niche applicability.","","Triggers an error at the current position of the parse …","Triggers an error at the current position of the parse …","Triggers an error at the current position of the parse …","","","","","","Forks a parse stream so that parsing tokens out of either …","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Render the error as an invocation of <code>compile_error!</code>.","","","Returns whether there are tokens remaining in this stream.","Constructs a helper for peeking at the next token in this …","Usually the <code>ParseStream::error</code> method will be used …","Creates an error with the specified message spanning the …","","Parses a syntax tree node of type <code>T</code>, advancing the …","Parse tokens of source code into the chosen syntax tree …","","Parse a proc-macro2 token stream into the chosen syntax …","","Parse a string of Rust code into the chosen syntax tree …","Parses zero or more occurrences of <code>T</code> separated by …","Looks at the next token in the parse stream to determine …","Looks at the next token in the parse stream to determine …","Looks at the second-next token in the parse stream.","Looks at the third-next token in the parse stream.","The source location of the error.","Returns the <code>Span</code> of the next token in the parse stream, or …","Speculatively parses tokens from this parse stream, …","Render the error as an invocation of <code>compile_error!</code>.","","","","","","","","","","","","","","","","","","","","Extensions to the <code>ParseStream</code> API to support manipulating …","Extensions to the <code>ParseStream</code> API to support speculative …","Advance this parse stream to the position of a forked …","Returns the delimiter, the span of the delimiter token, …","","An iterator over owned values of type <code>T</code>.","An iterator over owned pairs of type <code>Pair&lt;T, P&gt;</code>.","An iterator over borrowed values of type <code>&amp;T</code>.","An iterator over mutably borrowed values of type <code>&amp;mut T</code>.","A single syntax tree node of type <code>T</code> followed by its …","An iterator over borrowed pairs of type <code>Pair&lt;&amp;T, &amp;P&gt;</code>.","An iterator over mutably borrowed pairs of type …","<strong>A punctuated sequence of syntax tree nodes of type <code>T</code> </strong>…","","","","","","","","","","","","","","","","","","Clears the sequence of all values and punctuation, making …","","","","","","","","","","","","","","","","Returns true if either this <code>Punctuated</code> is empty, or it has …","","","Borrows the first element in this sequence.","Mutably borrows the first element in this sequence.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Inserts an element at position <code>index</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","Returns an iterator over the contents of this sequence as …","Produces this punctuated pair as a tuple of syntax tree …","Extracts the syntax tree node from this punctuated pair, …","Determines whether this punctuated sequence is empty, …","Returns an iterator over borrowed syntax tree nodes of …","Returns an iterator over mutably borrowed syntax tree …","Borrows the last element in this sequence.","Mutably borrows the last element in this sequence.","Returns the number of syntax tree nodes in this punctuated …","","","","","","","Creates an empty punctuated sequence.","Creates a punctuated pair out of a syntax tree node and an …","","","","","","","","","","","","","Returns an iterator over the contents of this sequence as …","Returns an iterator over the contents of this sequence as …","Parses one or more occurrences of <code>T</code> separated by …","Parses one or more occurrences of <code>T</code> using the given parse …","Parses zero or more occurrences of <code>T</code> separated by …","Parses zero or more occurrences of <code>T</code> using the given parse …","Removes the last punctuated pair from this sequence, or …","Removes the trailing punctuation from this punctuated …","Borrows the punctuation from this punctuated pair, unless …","Mutably borrows the punctuation from this punctuated pair, …","Appends a syntax tree node onto the end of this punctuated …","Appends a trailing punctuation onto the end of this …","Appends a syntax tree node onto the end of this punctuated …","","","","","","","","","","","","","","","","","Determines whether this punctuated sequence ends with a …","","","","","","","","","","","","","","","","","","","","","","","","","Borrows the syntax tree node from this punctuated pair.","Mutably borrows the syntax tree node from this punctuated …","A trait that can provide the <code>Span</code> of the complete contents …","Returns a <code>Span</code> covering the complete contents of this …","<code>abstract</code>","<code>&amp;</code>","<code>&amp;&amp;</code>","<code>&amp;=</code>","<code>as</code>","<code>async</code>","<code>@</code>","<code>auto</code>","<code>await</code>","<code>become</code>","<code>box</code>","<code>{</code>…<code>}</code>","<code>[</code>…<code>]</code>","<code>break</code>","<code>^</code>","<code>^=</code>","<code>:</code>","<code>,</code>","<code>const</code>","<code>continue</code>","<code>crate</code>","<code>default</code>","<code>do</code>","<code>$</code>","<code>.</code>","<code>..</code>","<code>...</code>","<code>..=</code>","<code>dyn</code>","<code>else</code>","<code>enum</code>","<code>=</code>","<code>==</code>","<code>extern</code>","<code>=&gt;</code>","<code>final</code>","<code>fn</code>","<code>for</code>","<code>&gt;=</code>","None-delimited group","<code>&gt;</code>","<code>if</code>","<code>impl</code>","<code>in</code>","<code>&lt;-</code>","<code>&lt;=</code>","<code>let</code>","<code>loop</code>","<code>&lt;</code>","<code>macro</code>","<code>match</code>","<code>-</code>","<code>-=</code>","<code>mod</code>","<code>move</code>","<code>mut</code>","<code>!=</code>","<code>!</code>","<code>|</code>","<code>|=</code>","<code>||</code>","<code>override</code>","<code>(</code>…<code>)</code>","<code>::</code>","<code>%</code>","<code>%=</code>","<code>+</code>","<code>+=</code>","<code>#</code>","<code>priv</code>","<code>pub</code>","<code>?</code>","<code>-&gt;</code>","<code>ref</code>","<code>return</code>","<code>Self</code>","<code>self</code>","<code>;</code>","<code>&lt;&lt;</code>","<code>&lt;&lt;=</code>","<code>&gt;&gt;</code>","<code>&gt;&gt;=</code>","<code>/</code>","<code>/=</code>","<code>*</code>","<code>*=</code>","<code>static</code>","<code>struct</code>","<code>super</code>","<code>~</code>","Marker trait for types that represent single tokens.","<code>trait</code>","<code>try</code>","<code>type</code>","<code>typeof</code>","<code>_</code>","<code>union</code>","<code>unsafe</code>","<code>unsized</code>","<code>use</code>","<code>virtual</code>","<code>where</code>","<code>while</code>","<code>yield</codeeturns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</codei":[0,65,65,65,69,0,26,80,26,0,70,0,70,26,0,0,26,80,0,0,0,26,65,65,65,65,65,65,26,57,0,64,64,26,57,57,26,26,57,26,26,45,70,0,0,70,26,0,0,0,0,98,66,0,65,65,22,65,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,26,0,0,0,0,0,57,26,65,0,0,0,26,80,65,0,26,0,80,0,26,26,80,77,12,57,65,26,0,45,50,54,70,0,13,0,26,0,0,0,0,0,0,0,26,65,0,26,80,0,26,52,0,0,0,0,26,65,65,13,17,41,65,66,80,52,69,79,66,6,65,12,26,64,80,69,0,0,13,26,80,0,0,0,0,80,77,0,26,26,80,65,65,26,77,0,26,0,65,65,65,65,80,57,22,26,65,65,0,50,0,0,80,26,26,26,80,0,0,45,54,70,98,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,26,22,17,17,41,26,0,26,50,57,80,0,0,0,0,26,26,82,38,91,10,28,35,71,68,29,76,1,16,20,21,27,28,29,30,31,32,33,34,35,36,37,38,39,40,43,46,47,48,96,97,63,87,30,3,5,3,5,8,9,1,2,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,114,120,126,116,27,131,122,28,29,123,118,124,30,129,31,132,32,136,115,33,121,34,117,35,36,37,127,38,137,135,39,128,134,119,40,125,130,133,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,3,5,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,8,9,1,2,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,114,120,126,116,27,131,122,28,29,123,118,124,30,129,31,132,32,136,115,33,121,34,117,35,36,37,127,38,137,135,39,128,134,119,40,125,130,133,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,3,5,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,56,46,47,55,56,74,84,93,18,24,39,0,11,32,81,92,0,0,8,9,1,2,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,3,5,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,8,9,1,2,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,3,5,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,8,10,71,20,43,46,47,48,55,56,74,97,44,44,48,90,0,0,21,44,49,69,47,48,14,63,16,39,30,35,97,93,81,83,88,90,91,92,94,24,8,8,10,41,42,15,47,48,72,73,29,31,32,36,38,40,43,0,95,16,23,25,39,8,8,8,10,41,42,3,5,82,49,8,8,8,8,8,8,8,9,1,2,10,11,12,13,13,13,13,14,15,16,17,17,17,18,19,20,21,22,23,24,25,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,114,120,126,116,27,131,122,28,29,123,118,124,30,129,31,132,32,136,115,33,121,34,117,35,36,37,127,38,137,135,39,128,134,119,40,125,130,133,41,41,41,41,42,42,43,44,45,45,45,45,46,47,47,48,49,50,50,50,51,52,53,54,54,54,55,56,57,57,57,57,57,57,57,57,58,59,60,61,3,3,5,5,62,63,64,65,66,67,67,68,68,69,70,71,72,73,74,75,76,77,78,79,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,28,21,72,73,74,67,31,83,44,49,71,76,8,10,41,42,10,16,20,21,47,48,68,72,73,74,84,78,32,42,75,82,8,9,1,2,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,114,120,126,116,27,131,122,28,29,123,118,124,30,129,31,132,32,136,115,33,121,34,117,35,36,37,127,38,137,135,39,128,134,119,40,125,130,133,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,3,5,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,17,17,17,17,69,67,69,17,17,67,27,17,81,46,55,91,44,49,51,56,82,44,33,44,49,71,76,34,86,44,30,43,0,11,35,51,20,38,90,91,95,96,97,18,8,10,46,57,58,59,60,61,3,5,62,8,27,40,75,82,44,19,28,35,36,51,75,78,82,88,94,0,0,0,8,10,13,14,15,16,18,19,21,26,33,34,37,39,41,42,43,44,45,46,47,48,49,50,51,52,53,54,57,58,58,59,60,61,3,5,62,63,65,66,67,68,70,71,75,77,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,98,0,8,11,14,11,14,63,63,11,0,67,20,11,14,11,0,0,0,20,58,8,10,11,13,14,15,37,39,51,63,78,89,76,11,53,78,0,37,39,89,35,67,13,13,13,39,27,67,23,81,8,10,57,58,59,60,61,3,5,62,8,8,8,9,1,2,10,10,11,13,14,15,16,17,18,19,20,21,26,114,120,126,116,27,131,122,28,29,123,118,124,30,129,31,132,32,136,115,33,121,34,117,35,36,37,127,38,137,135,39,128,134,119,40,125,130,133,41,41,42,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,57,58,58,59,59,60,60,61,61,3,3,5,5,62,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,42,62,0,44,90,23,11,57,58,59,60,61,3,5,8,9,1,2,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,3,5,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,8,10,3,5,8,9,1,2,10,11,13,14,15,16,17,18,19,20,21,26,114,120,126,116,27,131,122,28,29,123,118,124,30,129,31,132,32,136,115,33,121,34,117,35,36,37,127,38,137,135,39,128,134,119,40,125,130,133,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,3,5,62,63,65,66,67,68,69,70,71,72,73,74,75,77,78,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,0,58,59,60,61,3,5,62,14,63,8,9,1,2,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,114,120,126,116,27,131,122,28,29,123,118,124,30,129,31,132,32,136,115,33,121,34,117,35,36,37,127,38,137,135,39,128,134,119,40,125,130,133,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,3,5,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,8,9,1,2,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,114,120,126,116,27,131,122,28,29,123,118,124,30,129,31,132,32,136,115,33,121,34,117,35,36,37,127,38,137,135,39,128,134,119,40,125,130,133,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,3,5,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,35,20,29,48,72,76,96,8,9,1,2,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,114,120,126,116,27,131,122,28,29,123,118,124,30,129,31,132,32,136,115,33,121,34,117,35,36,37,127,38,137,135,39,128,134,119,40,125,130,133,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,3,5,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,44,44,85,25,19,8,82,58,59,60,61,62,15,62,73,82,24,20,21,44,53,80,84,93,98,0,0,159,159,160,159,160,160,160,160,160,160,159,160,160,160,159,160,160,160,159,159,160,160,160,160,160,160,159,160,159,160,159,160,0,282,282,282,0,164,164,164,164,164,164,164,0,164,164,164,164,164,6,0,0,0,6,153,0,0,0,0,0,0,0,167,165,169,167,168,173,165,169,167,168,173,167,165,168,165,168,165,167,168,0,167,169,167,168,165,165,165,167,167,167,165,165,169,167,168,173,165,169,167,168,173,165,165,165,167,167,165,165,150,167,153,173,153,167,153,167,169,167,167,167,165,167,167,165,165,168,165,167,165,169,167,168,173,165,169,167,168,173,165,169,167,168,173,0,0,283,284,181,0,0,0,0,0,0,0,0,181,174,178,183,179,180,143,144,181,174,178,183,179,180,143,144,181,174,174,178,179,180,143,181,174,174,178,179,180,143,181,181,174,174,174,174,174,174,174,178,183,179,180,143,144,181,174,174,174,174,174,174,178,183,179,180,143,144,181,174,174,174,178,183,179,180,143,144,174,181,181,174,174,174,174,174,174,178,183,179,180,143,144,174,181,178,183,179,180,143,144,178,183,179,180,143,144,174,174,174,174,174,174,174,174,181,181,174,174,174,178,183,179,180,143,144,174,181,174,178,179,180,143,181,174,181,174,174,178,183,179,180,143,144,181,174,178,183,179,180,143,144,181,174,178,183,179,180,143,144,181,181,181,0,285,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,185,109,186,187,188,189,190,191,192,193,194,195,113,196,197,198,199,200,112,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,108,110,219,220,111,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,185,109,186,187,188,189,190,191,192,193,194,195,113,196,197,198,199,200,112,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,108,110,219,220,111,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,185,109,186,187,188,189,190,191,192,193,194,195,113,196,197,198,199,200,112,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,108,110,219,220,111,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,185,109,186,187,188,189,190,191,192,193,194,195,113,196,197,198,199,200,112,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,108,110,219,220,111,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,185,109,186,187,188,189,190,191,192,193,194,195,113,196,197,198,199,200,112,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,108,110,219,220,111,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,109,233,236,237,239,240,241,242,246,250,253,254,257,258,262,264,266,267,269,274,276,278,109,233,236,237,239,240,241,242,246,250,253,254,257,258,262,264,266,267,269,274,276,278,185,109,186,187,188,189,190,191,192,193,194,195,113,196,197,198,199,200,112,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,108,110,219,220,111,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,185,109,186,187,188,189,190,191,192,193,194,195,113,196,197,198,199,200,112,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,108,110,219,220,111,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,109,186,187,188,189,190,191,192,193,194,195,113,196,197,198,199,200,112,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,108,110,219,220,111,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,109,186,187,188,189,190,191,192,193,194,195,113,196,197,198,199,200,112,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,108,110,219,220,111,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,185,186,187,188,189,190,191,192,193,194,195,113,196,197,198,199,200,112,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,108,110,219,220,111,221,222,223,224,225,226,227,228,229,230,231,232,279,280,281,109,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,185,279,280,281,185,109,186,187,188,189,190,191,192,193,194,195,113,196,197,198,199,200,112,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,108,110,219,220,111,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,109,186,187,188,189,190,191,192,193,194,195,113,196,197,198,199,200,112,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,108,110,219,220,111,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,185,109,186,187,188,189,190,191,192,193,194,195,113,196,197,198,199,200,112,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,108,110,219,220,111,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,185,109,186,187,188,189,190,191,192,193,194,195,113,196,197,198,199,200,112,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,108,110,219,220,111,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,185,109,186,187,188,189,190,191,192,193,194,195,113,196,197,198,199,200,112,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,108,110,219,220,111,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281],"fc":[],"p":[[3,"TypeGenerics",0],[3,"Turbofish",0],[3,"LitInt",0],[15,"str"],[3,"LitFloat",0],[6,"Result",2173],[8,"FromStr",4122],[3,"Ident",0],[3,"ImplGenerics",0],[3,"Lifetime",0],[3,"Attribute",0],[4,"AttrStyle",0],[4,"Meta",0],[3,"MetaList",0],[3,"MetaNameValue",0],[3,"Variant",0],[4,"Fields",0],[3,"FieldsNamed",0],[3,"FieldsUnnamed",0],[3,"Field",0],[3,"DeriveInput",0],[4,"Data",0],[3,"DataStruct",0],[3,"DataEnum",0],[3,"DataUnion",0],[4,"Expr",0],[3,"ExprBinary",0],[3,"ExprCall",0],[3,"ExprCast",0],[3,"ExprField",0],[3,"ExprGroup",0],[3,"ExprIndex",0],[3,"ExprLit",0],[3,"ExprMacro",0],[3,"ExprMethodCall",0],[3,"ExprParen",0],[3,"ExprPath",0],[3,"ExprReference",0],[3,"ExprStruct",0],[3,"ExprUnary",0],[4,"Member",0],[3,"Index",0],[3,"FieldValue",0],[3,"Generics",0],[4,"GenericParam",0],[3,"LifetimeParam",0],[3,"TypeParam",0],[3,"ConstParam",0],[3,"BoundLifetimes",0],[4,"TypeParamBound",0],[3,"TraitBound",0],[4,"TraitBoundModifier",0],[3,"WhereClause",0],[4,"WherePredicate",0],[3,"PredicateLifetime",0],[3,"PredicateType",0],[4,"Lit",0],[3,"LitStr",0],[3,"LitByteStr",0],[3,"LitByte",0],[3,"LitChar",0],[3,"LitBool",0],[3,"Macro",0],[4,"MacroDelimiter",0],[4,"BinOp",0],[4,"UnOp",0],[3,"Path",0],[3,"PathSegment",0],[4,"PathArguments",0],[4,"GenericArgument",0],[3,"AngleBracketedGenericArguments",0],[3,"AssocType",0],[3,"AssocConst",0],[3,"Constraint",0],[3,"ParenthesizedGenericArguments",0],[3,"QSelf",0],[4,"Visibility",0],[3,"VisRestricted",0],[4,"FieldMutability",0],[4,"Type",0],[3,"TypeArray",0],[3,"TypeBareFn",0],[3,"TypeGroup",0],[3,"TypeImplTrait",0],[3,"TypeInfer",0],[3,"TypeMacro",0],[3,"TypeNever",0],[3,"TypeParen",0],[3,"TypePath",0],[3,"TypePtr",0],[3,"TypeReference",0],[3,"TypeSlice",0],[3,"TypeTraitObject",0],[3,"TypeTuple",0],[3,"Abi",0],[3,"BareFnArg",0],[3,"BareVariadic",0],[4,"ReturnType",0],[15,"tuple"],[4,"Ordering",4123],[15,"bool"],[8,"AsRef",4124],[8,"Sized",4125],[3,"Formatter",4126],[3,"Error",4126],[4,"Result",4127],[6,"Result",4126],[3,"SelfType",2437],[3,"Underscore",2437],[3,"SelfValue",2437],[3,"Super",2437],[3,"Extern",2437],[3,"Crate",2437],[3,"ExprArray",0],[3,"ExprLet",0],[3,"ExprAwait",0],[3,"ExprMatch",0],[3,"ExprConst",0],[3,"ExprTuple",0],[3,"ExprAssign",0],[3,"ExprLoop",0],[3,"ExprBreak",0],[3,"ExprClosure",0],[3,"ExprContinue",0],[3,"ExprUnsafe",0],[3,"ExprAsync",0],[3,"ExprRange",0],[3,"ExprTry",0],[3,"ExprForLoop",0],[3,"ExprWhile",0],[3,"ExprBlock",0],[3,"ExprIf",0],[3,"ExprYield",0],[3,"ExprTryBlock",0],[3,"ExprReturn",0],[3,"ExprInfer",0],[3,"ExprRepeat",0],[15,"usize"],[3,"Literal",4128],[8,"Into",4124],[4,"Option",4129],[8,"Hasher",4130],[3,"Iter",2273],[3,"IterMut",2273],[3,"Span",4128],[15,"u8"],[15,"slice"],[15,"char"],[3,"TokenStream",4131],[8,"Parse",2173],[6,"ParseStream",2173],[3,"TokenStream",4128],[8,"Parser",2173],[3,"Vec",4132],[8,"FnMut",4133],[3,"DelimSpan",4134],[3,"String",4135],[3,"TypeId",4136],[3,"TokenBuffer",2121],[3,"Cursor",2121],[4,"Delimiter",4128],[3,"Punct",4128],[4,"TokenTree",4128],[3,"ParseNestedMeta",2159],[3,"Error",2173],[8,"Display",4126],[3,"ParseBuffer",2173],[3,"StepCursor",2173],[3,"Lookahead1",2173],[8,"IntoIterator",4137],[3,"LexError",4128],[8,"ToTokens",4138],[3,"Nothing",2173],[3,"Punctuated",2273],[8,"Peek",2173],[8,"FnOnce",4133],[8,"Clone",4139],[3,"Pairs",2273],[3,"IntoPairs",2273],[3,"IntoIter",2273],[4,"Pair",2273],[8,"Default",4140],[3,"PairsMut",2273],[8,"Token",2437],[3,"Group",2437],[3,"Abstract",2437],[3,"As",2437],[3,"Async",2437],[3,"Auto",2437],[3,"Await",2437],[3,"Become",2437],[3,"Box",2437],[3,"Break",2437],[3,"Const",2437],[3,"Continue",2437],[3,"Default",2437],[3,"Do",2437],[3,"Dyn",2437],[3,"Else",2437],[3,"Enum",2437],[3,"Final",2437],[3,"Fn",2437],[3,"For",2437],[3,"If",2437],[3,"Impl",2437],[3,"In",2437],[3,"Let",2437],[3,"Loop",2437],[3,"Macro",2437],[3,"Match",2437],[3,"Mod",2437],[3,"Move",2437],[3,"Mut",2437],[3,"Override",2437],[3,"Priv",2437],[3,"Pub",2437],[3,"Ref",2437],[3,"Return",2437],[3,"Static",2437],[3,"Struct",2437],[3,"Trait",2437],[3,"Try",2437],[3,"Type",2437],[3,"Typeof",2437],[3,"Union",2437],[3,"Unsafe",2437],[3,"Unsized",2437],[3,"Use",2437],[3,"Virtual",2437],[3,"Where",2437],[3,"While",2437],[3,"Yield",2437],[3,"And",2437],[3,"AndAnd",2437],[3,"AndEq",2437],[3,"At",2437],[3,"Caret",2437],[3,"CaretEq",2437],[3,"Colon",2437],[3,"Comma",2437],[3,"Dollar",2437],[3,"Dot",2437],[3,"DotDot",2437],[3,"DotDotDot",2437],[3,"DotDotEq",2437],[3,"Eq",2437],[3,"EqEq",2437],[3,"FatArrow",2437],[3,"Ge",2437],[3,"Gt",2437],[3,"LArrow",2437],[3,"Le",2437],[3,"Lt",2437],[3,"Minus",2437],[3,"MinusEq",2437],[3,"Ne",2437],[3,"Not",2437],[3,"Or",2437],[3,"OrEq",2437],[3,"OrOr",2437],[3,"PathSep",2437],[3,"Percent",2437],[3,"PercentEq",2437],[3,"Plus",2437],[3,"PlusEq",2437],[3,"Pound",2437],[3,"Question",2437],[3,"RArrow",2437],[3,"Semi",2437],[3,"Shl",2437],[3,"ShlEq",2437],[3,"Shr",2437],[3,"ShrEq",2437],[3,"Slash",2437],[3,"SlashEq",2437],[3,"Star",2437],[3,"StarEq",2437],[3,"Tilde",2437],[3,"Brace",2437],[3,"Bracket",2437],[3,"Paren",2437],[8,"IdentExt",2155],[8,"Speculative",2269],[8,"AnyDelimiter",2269],[8,"Spanned",2435]],"b":[[785,"impl-PartialEq-for-Ident"],[786,"impl-PartialEq%3CT%3E-for-Ident"],[808,"impl-Debug-for-Ident"],[809,"impl-IdentFragment-for-Ident"],[810,"impl-Display-for-Ident"],[818,"impl-From%3CSelfType%3E-for-Ident"],[820,"impl-From%3CUnderscore%3E-for-Ident"],[821,"impl-From%3CSelfValue%3E-for-Ident"],[822,"impl-From%3CSuper%3E-for-Ident"],[823,"impl-From%3CExtern%3E-for-Ident"],[824,"impl-From%3CCrate%3E-for-Ident"],[832,"impl-From%3CMetaNameValue%3E-for-Meta"],[833,"impl-From%3CPath%3E-for-Meta"],[834,"impl-From%3CMetaList%3E-for-Meta"],[838,"impl-From%3CFieldsNamed%3E-for-Fields"],[840,"impl-From%3CFieldsUnnamed%3E-for-Fields"],[849,"impl-From%3CExprArray%3E-for-Expr"],[850,"impl-From%3CExprCall%3E-for-Expr"],[851,"impl-From%3CExprLet%3E-for-Expr"],[852,"impl-From%3CExprAwait%3E-for-Expr"],[853,"impl-From%3CExprMatch%3E-for-Expr"],[854,"impl-From%3CExprConst%3E-for-Expr"],[855,"impl-From%3CExprStruct%3E-for-Expr"],[856,"impl-From%3CExprTuple%3E-for-Expr"],[858,"impl-From%3CExprAssign%3E-for-Expr"],[859,"impl-From%3CExprUnary%3E-for-Expr"],[860,"impl-From%3CExprLoop%3E-for-Expr"],[861,"impl-From%3CExprBreak%3E-for-Expr"],[862,"impl-From%3CExprMethodCall%3E-for-Expr"],[863,"impl-From%3CExprClosure%3E-for-Expr"],[864,"impl-From%3CExprContinue%3E-for-Expr"],[865,"impl-From%3CExprIndex%3E-for-Expr"],[866,"impl-From%3CExprUnsafe%3E-for-Expr"],[867,"impl-From%3CExprAsync%3E-for-Expr"],[868,"impl-From%3CExprCast%3E-for-Expr"],[869,"impl-From%3CExprRange%3E-for-Expr"],[870,"impl-From%3CExprGroup%3E-for-Expr"],[871,"impl-From%3CExprTry%3E-for-Expr"],[872,"impl-From%3CExprForLoop%3E-for-Expr"],[873,"impl-From%3CExprWhile%3E-for-Expr"],[874,"impl-From%3CExprField%3E-for-Expr"],[875,"impl-From%3CExprPath%3E-for-Expr"],[876,"impl-From%3CExprBlock%3E-for-Expr"],[877,"impl-From%3CExprMacro%3E-for-Expr"],[878,"impl-From%3CExprIf%3E-for-Expr"],[879,"impl-From%3CExprParen%3E-for-Expr"],[880,"impl-From%3CExprLit%3E-for-Expr"],[881,"impl-From%3CExprReference%3E-for-Expr"],[882,"impl-From%3CExprYield%3E-for-Expr"],[883,"impl-From%3CExprTryBlock%3E-for-Expr"],[884,"impl-From%3CExprBinary%3E-for-Expr"],[885,"impl-From%3CExprReturn%3E-for-Expr"],[886,"impl-From%3CExprInfer%3E-for-Expr"],[887,"impl-From%3CExprRepeat%3E-for-Expr"],[927,"impl-From%3CIndex%3E-for-Member"],[928,"impl-From%3CIdent%3E-for-Member"],[929,"impl-From%3Cusize%3E-for-Member"],[934,"impl-From%3CTypeParam%3E-for-GenericParam"],[936,"impl-From%3CConstParam%3E-for-GenericParam"],[937,"impl-From%3CLifetimeParam%3E-for-GenericParam"],[943,"impl-From%3CLifetime%3E-for-TypeParamBound"],[945,"impl-From%3CTraitBound%3E-for-TypeParamBound"],[950,"impl-From%3CPredicateLifetime%3E-for-WherePredicate"],[951,"impl-From%3CPredicateType%3E-for-WherePredicate"],[954,"impl-From%3CLitStr%3E-for-Lit"],[955,"impl-From%3CLitInt%3E-for-Lit"],[957,"impl-From%3CLitByte%3E-for-Lit"],[958,"impl-From%3CLitChar%3E-for-Lit"],[959,"impl-From%3CLitByteStr%3E-for-Lit"],[960,"impl-From%3CLitBool%3E-for-Lit"],[961,"impl-From%3CLitFloat%3E-for-Lit"],[991,"impl-From%3CTypeParen%3E-for-Type"],[992,"impl-From%3CTypeGroup%3E-for-Type"],[993,"impl-From%3CTypeTraitObject%3E-for-Type"],[994,"impl-From%3CTypeInfer%3E-for-Type"],[995,"impl-From%3CTypeReference%3E-for-Type"],[996,"impl-From%3CTypeSlice%3E-for-Type"],[997,"impl-From%3CTypeMacro%3E-for-Type"],[998,"impl-From%3CTypeImplTrait%3E-for-Type"],[999,"impl-From%3CTypeArray%3E-for-Type"],[1000,"impl-From%3CTypeTuple%3E-for-Type"],[1001,"impl-From%3CTypeNever%3E-for-Type"],[1002,"impl-From%3CTypePath%3E-for-Type"],[1003,"impl-From%3CTypePtr%3E-for-Type"],[1004,"impl-From%3CTypeBareFn%3E-for-Type"],[1174,"impl-IntoIterator-for-Fields"],[1175,"impl-IntoIterator-for-%26Fields"],[1176,"impl-IntoIterator-for-%26mut+Fields"],[1277,"impl-LitStr"],[1278,"impl-Parse-for-LitStr"],[1373,"impl-Ident"],[1374,"impl-IdentFragment-for-Ident"],[2211,"impl-Display-for-Error"],[2212,"impl-Debug-for-Error"],[2213,"impl-Display-for-ParseBuffer%3C\'a%3E"],[2214,"impl-Debug-for-ParseBuffer%3C\'a%3E"],[2228,"impl-IntoIterator-for-Error"],[2229,"impl-IntoIterator-for-%26Error"],[2316,"impl-Extend%3CT%3E-for-Punctuated%3CT,+P%3E"],[2317,"impl-Extend%3CPair%3CT,+P%3E%3E-for-Punctuated%3CT,+P%3E"],[2328,"impl-FromIterator%3CT%3E-for-Punctuated%3CT,+P%3E"],[2329,"impl-FromIterator%3CPair%3CT,+P%3E%3E-for-Punctuated%3CT,+P%3E"],[2341,"impl-IntoIterator-for-%26Punctuated%3CT,+P%3E"],[2342,"impl-IntoIterator-for-%26mut+Punctuated%3CT,+P%3E"],[2343,"impl-IntoIterator-for-Punctuated%3CT,+P%3E"]]},\
"tap":{"doc":"<code>tap</code> – Syntactical Plumb-Lines","t":"IQQIIIIIQALALLLLLLLLLAALLLLLLLLLLKLKLLLKLKLKLLLLLKLKLLIILLILLLLLLLLLIQQIIIIIQLLLLLLLLLLLLLLLLLLLLKLKLLLKLKLKLLLLLKLKLLQQIIIQLLLLLLLLLLKLKLLLKLKLKLLLLLKLKL","n":["Conv","Err","Ok","Pipe","Tap","TapFallible","TapOptional","TryConv","Val","conv","conv","pipe","pipe","pipe_as_mut","pipe_as_ref","pipe_borrow","pipe_borrow_mut","pipe_deref","pipe_deref_mut","pipe_ref","pipe_ref_mut","prelude","tap","tap","tap_borrow","tap_borrow_dbg","tap_borrow_mut","tap_borrow_mut_dbg","tap_dbg","tap_deref","tap_deref_dbg","tap_deref_mut","tap_deref_mut_dbg","tap_err","tap_err_dbg","tap_err_mut","tap_err_mut_dbg","tap_mut","tap_mut_dbg","tap_none","tap_none_dbg","tap_ok","tap_ok_dbg","tap_ok_mut","tap_ok_mut_dbg","tap_ref","tap_ref_dbg","tap_ref_mut","tap_ref_mut_dbg","tap_some","tap_some_dbg","tap_some_mut","tap_some_mut_dbg","try_conv","Conv","TryConv","conv","try_conv","Pipe","pipe","pipe_as_mut","pipe_as_ref","pipe_borrow","pipe_borrow_mut","pipe_deref","pipe_deref_mut","pipe_ref","pipe_ref_mut","Conv","Err","Ok","Pipe","Tap","TapFallible","TapOptional","TryConv","Val","conv","pipe","pipe_as_mut","pipe_as_ref","pipe_borrow","pipe_borrow_mut","pipe_deref","pipe_deref_mut","pipe_ref","pipe_ref_mut","tap","tap_borrow","tap_borrow_dbg","tap_borrow_mut","tap_borrow_mut_dbg","tap_dbg","tap_deref","tap_deref_dbg","tap_deref_mut","tap_deref_mut_dbg","tap_err","tap_err_dbg","tap_err_mut","tap_err_mut_dbg","tap_mut","tap_mut_dbg","tap_none","tap_none_dbg","tap_ok","tap_ok_dbg","tap_ok_mut","tap_ok_mut_dbg","tap_ref","tap_ref_dbg","tap_ref_mut","tap_ref_mut_dbg","tap_some","tap_some_dbg","tap_some_mut","tap_some_mut_dbg","try_conv","Err","Ok","Tap","TapFallible","TapOptional","Val","tap","tap_borrow","tap_borrow_dbg","tap_borrow_mut","tap_borrow_mut_dbg","tap_dbg","tap_deref","tap_deref_dbg","tap_deref_mut","tap_deref_mut_dbg","tap_err","tap_err_dbg","tap_err_mut","tap_err_mut_dbg","tap_mut","tap_mut_dbg","tap_none","tap_none_dbg","tap_ok","tap_ok_dbg","tap_ok_mut","tap_ok_mut_dbg","tap_ref","tap_ref_dbg","tap_ref_mut","tap_ref_mut_dbg","tap_some","tap_some_dbg","tap_some_mut","tap_some_mut_dbg"],"q":[[0,"tap"],[54,"tap::conv"],[58,"tap::pipe"],[68,"tap::prelude"],[118,"tap::tap"],[154,"core::marker"],[155,"core::convert"],[156,"core::ops::function"],[157,"core::convert"],[158,"core::borrow"],[159,"core::ops::deref"],[160,"core::convert"]],"d":["Wraps <code>Into::&lt;T&gt;::into</code> as a method that can be placed in …","The interior type used to indicate a failed construction.","The interior type used to indicate a successful …","Provides universal suffix-position call syntax for any …","Point-free value inspection and modification.","Fallible tapping, conditional on the optional success of …","Optional tapping, conditional on the optional presence of …","Wraps <code>TryInto::&lt;T&gt;::try_into</code> as a method that can be …","The interior type that the container may or may not carry.","Method-Directed Type Conversion","Converts <code>self</code> into <code>T</code> using <code>Into&lt;T&gt;</code>.","Universal Suffix Calls","Pipes by value. This is generally the method you want to …","Mutably borrows <code>self</code>, then passes <code>self.as_mut()</code> into the …","Borrows <code>self</code>, then passes <code>self.as_ref()</code> into the pipe …","Borrows <code>self</code>, then passes <code>self.borrow()</code> into the pipe …","Mutably borrows <code>self</code>, then passes <code>self.borrow_mut()</code> into …","Borrows <code>self</code>, then passes <code>self.deref()</code> into the pipe …","Mutably borrows <code>self</code>, then passes <code>self.deref_mut()</code> into …","Borrows <code>self</code> and passes that borrow into the pipe function.","Mutably borrows <code>self</code> and passes that borrow into the pipe …","Reëxports all traits in one place, for easy import.","Point-Free Inspection","Immutable access to a value.","Immutable access to the <code>Borrow&lt;B&gt;</code> of a value.","Calls <code>.tap_borrow()</code> only in debug builds, and is erased in …","Mutable access to the <code>BorrowMut&lt;B&gt;</code> of a value.","Calls <code>.tap_borrow_mut()</code> only in debug builds, and is …","Calls <code>.tap()</code> only in debug builds, and is erased in …","Immutable access to the <code>Deref::Target</code> of a value.","Calls <code>.tap_deref()</code> only in debug builds, and is erased in …","Mutable access to the <code>Deref::Target</code> of a value.","Calls <code>.tap_deref_mut()</code> only in debug builds, and is erased …","Immutably accesses an interior failure value.","Calls <code>.tap_err()</code> only in debug builds, and is erased in …","Mutably accesses an interior failure value.","Calls <code>.tap_err_mut()</code> only in debug builds, and is erased …","Mutable access to a value.","Calls <code>.tap_mut()</code> only in debug builds, and is erased in …","Runs an effect function when the container is empty.","Calls <code>.tap_none()</code> only in debug builds, and is erased in …","Immutably accesses an interior success value.","Calls <code>.tap_ok()</code> only in debug builds, and is erased in …","Mutably accesses an interior success value.","Calls <code>.tap_ok_mut()</code> only in debug builds, and is erased in …","Immutable access to the <code>AsRef&lt;R&gt;</code> view of a value.","Calls <code>.tap_ref()</code> only in debug builds, and is erased in …","Mutable access to the <code>AsMut&lt;R&gt;</code> view of a value.","Calls <code>.tap_ref_mut()</code> only in debug builds, and is erased …","Immutabily accesses an interior value only when it is …","Calls <code>.tap_some()</code> only in debug builds, and is erased in …","Mutably accesses an interor value only when it is present.","Calls <code>.tap_some_mut()</code> only in debug builds, and is erased …","Attempts to convert <code>self</code> into <code>T</code> using <code>TryInto&lt;T&gt;</code>.","Wraps <code>Into::&lt;T&gt;::into</code> as a method that can be placed in …","Wraps <code>TryInto::&lt;T&gt;::try_into</code> as a method that can be …","Converts <code>self</code> into <code>T</code> using <code>Into&lt;T&gt;</code>.","Attempts to convert <code>self</code> into <code>T</code> using <code>TryInto&lt;T&gt;</code>.","Provides universal suffix-position call syntax for any …","Pipes by value. This is generally the method you want to …","Mutably borrows <code>self</code>, then passes <code>self.as_mut()</code> into the …","Borrows <code>self</code>, then passes <code>self.as_ref()</code> into the pipe …","Borrows <code>self</code>, then passes <code>self.borrow()</code> into the pipe …","Mutably borrows <code>self</code>, then passes <code>self.borrow_mut()</code> into …","Borrows <code>self</code>, then passes <code>self.deref()</code> into the pipe …","Mutably borrows <code>self</code>, then passes <code>self.deref_mut()</code> into …","Borrows <code>self</code> and passes that borrow into the pipe function.","Mutably borrows <code>self</code> and passes that borrow into the pipe …","Wraps <code>Into::&lt;T&gt;::into</code> as a method that can be placed in …","The interior type used to indicate a failed construction.","The interior type used to indicate a successful …","Provides universal suffix-position call syntax for any …","Point-free value inspection and modification.","Fallible tapping, conditional on the optional success of …","Optional tapping, conditional on the optional presence of …","Wraps <code>TryInto::&lt;T&gt;::try_into</code> as a method that can be …","The interior type that the container may or may not carry.","Converts <code>self</code> into <code>T</code> using <code>Into&lt;T&gt;</code>.","Pipes by value. This is generally the method you want to …","Mutably borrows <code>self</code>, then passes <code>self.as_mut()</code> into the …","Borrows <code>self</code>, then passes <code>self.as_ref()</code> into the pipe …","Borrows <code>self</code>, then passes <code>self.borrow()</code> into the pipe …","Mutably borrows <code>self</code>, then passes <code>self.borrow_mut()</code> into …","Borrows <code>self</code>, then passes <code>self.deref()</code> into the pipe …","Mutably borrows <code>self</code>, then passes <code>self.deref_mut()</code> into …","Borrows <code>self</code> and passes that borrow into the pipe function.","Mutably borrows <code>self</code> and passes that borrow into the pipe …","Immutable access to a value.","Immutable access to the <code>Borrow&lt;B&gt;</code> of a value.","Calls <code>.tap_borrow()</code> only in debug builds, and is erased in …","Mutable access to the <code>BorrowMut&lt;B&gt;</code> of a value.","Calls <code>.tap_borrow_mut()</code> only in debug builds, and is …","Calls <code>.tap()</code> only in debug builds, and is erased in …","Immutable access to the <code>Deref::Target</code> of a value.","Calls <code>.tap_deref()</code> only in debug builds, and is erased in …","Mutable access to the <code>Deref::Target</code> of a value.","Calls <code>.tap_deref_mut()</code> only in debug builds, and is erased …","Immutably accesses an interior failure value.","Calls <code>.tap_err()</code> only in debug builds, and is erased in …","Mutably accesses an interior failure value.","Calls <code>.tap_err_mut()</code> only in debug builds, and is erased …","Mutable access to a value.","Calls <code>.tap_mut()</code> only in debug builds, and is erased in …","Runs an effect function when the container is empty.","Calls <code>.tap_none()</code> only in debug builds, and is erased in …","Immutably accesses an interior success value.","Calls <code>.tap_ok()</code> only in debug builds, and is erased in …","Mutably accesses an interior success value.","Calls <code>.tap_ok_mut()</code> only in debug builds, and is erased in …","Immutable access to the <code>AsRef&lt;R&gt;</code> view of a value.","Calls <code>.tap_ref()</code> only in debug builds, and is erased in …","Mutable access to the <code>AsMut&lt;R&gt;</code> view of a value.","Calls <code>.tap_ref_mut()</code> only in debug builds, and is erased …","Immutabily accesses an interior value only when it is …","Calls <code>.tap_some()</code> only in debug builds, and is erased in …","Mutably accesses an interor value only when it is present.","Calls <code>.tap_some_mut()</code> only in debug builds, and is erased …","Attempts to convert <code>self</code> into <code>T</code> using <code>TryInto&lt;T&gt;</code>.","The interior type used to indicate a failed construction.","The interior type used to indicate a successful …","Point-free value inspection and modification.","Fallible tapping, conditional on the optional success of …","Optional tapping, conditional on the optional presence of …","The interior type that the container may or may not carry.","Immutable access to a value.","Immutable access to the <code>Borrow&lt;B&gt;</code> of a value.","Calls <code>.tap_borrow()</code> only in debug builds, and is erased in …","Mutable access to the <code>BorrowMut&lt;B&gt;</code> of a value.","Calls <code>.tap_borrow_mut()</code> only in debug builds, and is …","Calls <code>.tap()</code> only in debug builds, and is erased in …","Immutable access to the <code>Deref::Target</code> of a value.","Calls <code>.tap_deref()</code> only in debug builds, and is erased in …","Mutable access to the <code>Deref::Target</code> of a value.","Calls <code>.tap_deref_mut()</code> only in debug builds, and is erased …","Immutably accesses an interior failure value.","Calls <code>.tap_err()</code> only in debug builds, and is erased in …","Mutably accesses an interior failure value.","Calls <code>.tap_err_mut()</code> only in debug builds, and is erased …","Mutable access to a value.","Calls <code>.tap_mut()</code> only in debug builds, and is erased in …","Runs an effect function when the container is empty.","Calls <code>.tap_none()</code> only in debug builds, and is erased in …","Immutably accesses an interior success value.","Calls <code>.tap_ok()</code> only in debug builds, and is erased in …","Mutably accesses an interior success value.","Calls <code>.tap_ok_mut()</code> only in debug builds, and is erased in …","Immutable access to the <code>AsRef&lt;R&gt;</code> view of a value.","Calls <code>.tap_ref()</code> only in debug builds, and is erased in …","Mutable access to the <code>AsMut&lt;R&gt;</code> view of a value.","Calls <code>.tap_ref_mut()</code> only in debug builds, and is erased …","Immutabily accesses an interior value only when it is …","Calls <code>.tap_some()</code> only in debug builds, and is erased in …","Mutably accesses an interor value only when it is present.","Calls <code>.tap_some_mut()</code> only in debug builds, and is erased …"],"i":[0,12,12,0,0,0,0,0,13,0,14,0,15,15,15,15,15,15,15,15,15,0,0,16,16,16,16,16,16,16,16,16,16,12,12,12,12,16,16,13,13,12,12,12,12,16,16,16,16,13,13,13,13,17,0,0,14,17,0,15,15,15,15,15,15,15,15,15,0,12,12,0,0,0,0,0,13,14,15,15,15,15,15,15,15,15,15,16,16,16,16,16,16,16,16,16,16,12,12,12,12,16,16,13,13,12,12,12,12,16,16,16,16,13,13,13,13,17,12,12,0,0,0,13,16,16,16,16,16,16,16,16,16,16,12,12,12,12,16,16,13,13,12,12,12,12,16,16,16,16,13,13,13,13],"f":[0,0,0,0,0,0,0,0,0,0,[-2,-1,1,[[2,[-1]]]],0,[[-1,-2],-3,1,3,1],[[-2,-3],-4,1,[[4,[-1]]],3,1],[[-2,-3],-4,1,[[5,[-1]]],3,1],[[-2,-3],-4,1,[[6,[-1]]],3,1],[[-2,-3],-4,1,[[7,[-1]]],3,1],[[-1,-2],-3,8,3,1],[[-1,-2],-3,[9,8],3,1],[[-1,-2],-3,[],3,1],[[-1,-2],-3,[],3,1],0,0,[[-1,-2],-1,[],3],[[-2,-3],-2,1,[[6,[-1]]],3],[[-2,-3],-2,1,[[6,[-1]]],3],[[-2,-3],-2,1,[[7,[-1]]],3],[[-2,-3],-2,1,[[7,[-1]]],3],[[-1,-2],-1,[],3],[[-1,-2],-1,8,3],[[-1,-2],-1,8,3],[[-1,-2],-1,[9,8],3],[[-1,-2],-1,[9,8],3],[[-1,-2],-1,[],3],[[-1,-2],-1,[],3],[[-1,-2],-1,[],3],[[-1,-2],-1,[],3],[[-1,-2],-1,[],3],[[-1,-2],-1,[],3],[[-1,-2],-1,[],3],[[-1,-2],-1,[],3],[[-1,-2],-1,[],3],[[-1,-2],-1,[],3],[[-1,-2],-1,[],3],[[-1,-2],-1,[],3],[[-2,-3],-2,1,[[5,[-1]]],3],[[-2,-3],-2,1,[[5,[-1]]],3],[[-2,-3],-2,1,[[4,[-1]]],3],[[-2,-3],-2,1,[[4,[-1]]],3],[[-1,-2],-1,[],3],[[-1,-2],-1,[],3],[[-1,-2],-1,[],3],[[-1,-2],-1,[],3],[-2,[[10,[-1]]],1,[[11,[-1]]]],0,0,[-2,-1,1,[[2,[-1]]]],[-2,[[10,[-1]]],1,[[11,[-1]]]],0,[[-1,-2],-3,1,3,1],[[-2,-3],-4,1,[[4,[-1]]],3,1],[[-2,-3],-4,1,[[5,[-1]]],3,1],[[-2,-3],-4,1,[[6,[-1]]],3,1],[[-2,-3],-4,1,[[7,[-1]]],3,1],[[-1,-2],-3,8,3,1],[[-1,-2],-3,[9,8],3,1],[[-1,-2],-3,[],3,1],[[-1,-2],-3,[],3,1],0,0,0,0,0,0,0,0,0,[-2,-1,1,[[2,[-1]]]],[[-1,-2],-3,1,3,1],[[-2,-3],-4,1,[[4,[-1]]],3,1],[[-2,-3],-4,1,[[5,[-1]]],3,1],[[-2,-3],-4,1,[[6,[-1]]],3,1],[[-2,-3],-4,1,[[7,[-1]]],3,1],[[-1,-2],-3,8,3,1],[[-1,-2],-3,[9,8],3,1],[[-1,-2],-3,[],3,1],[[-1,-2],-3,[],3,1],[[-1,-2],-1,[],3],[[-2,-3],-2,1,[[6,[-1]]],3],[[-2,-3],-2,1,[[6,[-1]]],3],[[-2,-3],-2,1,[[7,[-1]]],3],[[-2,-3],-2,1,[[7,[-1]]],3],[[-1,-2],-1,[],3],[[-1,-2],-1,8,3],[[-1,-2],-1,8,3],[[-1,-2],-1,[9,8],3],[[-1,-2],-1,[9,8],3],[[-1,-2],-1,[],3],[[-1,-2],-1,[],3],[[-1,-2],-1,[],3],[[-1,-2],-1,[],3],[[-1,-2],-1,[],3],[[-1,-2],-1,[],3],[[-1,-2],-1,[],3],[[-1,-2],-1,[],3],[[-1,-2],-1,[],3],[[-1,-2],-1,[],3],[[-1,-2],-1,[],3],[[-1,-2],-1,[],3],[[-2,-3],-2,1,[[5,[-1]]],3],[[-2,-3],-2,1,[[5,[-1]]],3],[[-2,-3],-2,1,[[4,[-1]]],3],[[-2,-3],-2,1,[[4,[-1]]],3],[[-1,-2],-1,[],3],[[-1,-2],-1,[],3],[[-1,-2],-1,[],3],[[-1,-2],-1,[],3],[-2,[[10,[-1]]],1,[[11,[-1]]]],0,0,0,0,0,0,[[-1,-2],-1,[],3],[[-2,-3],-2,1,[[6,[-1]]],3],[[-2,-3],-2,1,[[6,[-1]]],3],[[-2,-3],-2,1,[[7,[-1]]],3],[[-2,-3],-2,1,[[7,[-1]]],3],[[-1,-2],-1,[],3],[[-1,-2],-1,8,3],[[-1,-2],-1,8,3],[[-1,-2],-1,[9,8],3],[[-1,-2],-1,[9,8],3],[[-1,-2],-1,[],3],[[-1,-2],-1,[],3],[[-1,-2],-1,[],3],[[-1,-2],-1,[],3],[[-1,-2],-1,[],3],[[-1,-2],-1,[],3],[[-1,-2],-1,[],3],[[-1,-2],-1,[],3],[[-1,-2],-1,[],3],[[-1,-2],-1,[],3],[[-1,-2],-1,[],3],[[-1,-2],-1,[],3],[[-2,-3],-2,1,[[5,[-1]]],3],[[-2,-3],-2,1,[[5,[-1]]],3],[[-2,-3],-2,1,[[4,[-1]]],3],[[-2,-3],-2,1,[[4,[-1]]],3],[[-1,-2],-1,[],3],[[-1,-2],-1,[],3],[[-1,-2],-1,[],3],[[-1,-2],-1,[],3]],"c":[],"p":[[8,"Sized",154],[8,"Into",155],[8,"FnOnce",156],[8,"AsMut",155],[8,"AsRef",155],[8,"Borrow",157],[8,"BorrowMut",157],[8,"Deref",158],[8,"DerefMut",158],[4,"Result",159],[8,"TryInto",155],[8,"TapFallible",0],[8,"TapOptional",0],[8,"Conv",0],[8,"Pipe",0],[8,"Tap",0],[8,"TryConv",0]],"b":[]},\
"time":{"doc":"Feature flags","t":"NNSDNDNCNNSDNNNSSSSSSSSSSNNNESNNDNDGSNNNNDNSSDSNESLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLALLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLAALLLLLLLLLLLLLLLLLLLLLLLLLLLLLALLLLLALLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLALLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLALLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLALLLLLLLLLLLLLLLLLLLLLLLDDDDDDDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDNNDNDNENENNNNNNENNNDNNNNEENNNENNNNNNLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMMMMMMMMMMIIKKKKKKKKKKKKKKKKENNNNNNNNENNNNNNNNNNNNENNNNNNNLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLAFFFLLLLLLLLLLLLLLADNDNNNDDNNNNNNDNNDENNNNDDDNNDEDDNNNNNNDENNNNDEDEDEDENLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMMMMMMMMMMMMMMMMMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDDDLLLLLLLLLLLLLLLLLLLLLLLLALLLLLLLLLLLLNDSSSSSNENNGENNDNNNSNENSNSSNNENLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMIOOOOOIDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFFFF","n":["April","August","DAY","Date","December","Duration","Err","Error","February","Friday","HOUR","Instant","January","July","June","MAX","MAX","MAX","MICROSECOND","MIDNIGHT","MILLISECOND","MIN","MIN","MIN","MINUTE","March","May","Monday","Month","NANOSECOND","November","October","OffsetDateTime","Ok","PrimitiveDateTime","Result","SECOND","Saturday","September","Sunday","Thursday","Time","Tuesday","UNIX_EPOCH","UTC","UtcOffset","WEEK","Wednesday","Weekday","ZERO","abs","add","add","add","add","add","add","add","add","add","add","add","add","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","as_hms","as_hms","as_hms","as_hms_micro","as_hms_micro","as_hms_milli","as_hms_milli","as_hms_nano","as_hms_nano","as_ref","as_seconds_f32","as_seconds_f64","assume_offset","assume_utc","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","checked_add","checked_add","checked_add","checked_add","checked_add","checked_add_std","checked_div","checked_mul","checked_seconds_f32","checked_seconds_f64","checked_sub","checked_sub","checked_sub","checked_sub","checked_sub","checked_sub_std","checked_to_offset","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmp","cmp","cmp","cmp","cmp","cmp","convert","date","date","day","day","day","days","default","div","div","div","div","div","div","div","div","div","div","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","elapsed","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","error","ext","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt_with_metadata","fmt_with_metadata","fmt_with_metadata","fmt_with_metadata","fmt_with_metadata","format","format","format","format","format","format_description","format_into","format_into","format_into","format_into","format_into","formatting","from","from","from","from","from","from","from","from","from","from","from","from_calendar_date","from_hms","from_hms","from_hms_micro","from_hms_milli","from_hms_nano","from_iso_week_date","from_julian_day","from_ordinal_date","from_str","from_str","from_unix_timestamp","from_unix_timestamp_nanos","from_whole_seconds","hash","hash","hash","hash","hash","hash","hash","hash","hash","hour","hour","hour","hours","into","into","into","into","into","into","into","into","into","into_inner","is_negative","is_negative","is_positive","is_positive","is_utc","is_zero","iso_week","iso_week","iso_week","macros","metadata","metadata","metadata","metadata","metadata","metadata","metadata","microsecond","microsecond","microsecond","microseconds","midnight","millisecond","millisecond","millisecond","milliseconds","minute","minute","minute","minutes","minutes_past_hour","monday_based_week","monday_based_week","monday_based_week","month","month","month","mul","mul","mul","mul","mul","mul","mul","mul","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","nanosecond","nanosecond","nanosecond","nanoseconds","neg","neg","new","new","new_in_offset","new_utc","next","next","next_day","next_occurrence","now","now_utc","nth_next","nth_next","nth_next_occurrence","nth_prev","nth_prev","nth_prev_occurrence","number_days_from_monday","number_days_from_sunday","number_from_monday","number_from_sunday","offset","ordinal","ordinal","ordinal","parse","parse","parse","parse","parse","parsing","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","prev_occurrence","previous","previous","previous_day","replace_date","replace_date","replace_date_time","replace_day","replace_day","replace_day","replace_hour","replace_hour","replace_hour","replace_microsecond","replace_microsecond","replace_microsecond","replace_millisecond","replace_millisecond","replace_millisecond","replace_minute","replace_minute","replace_minute","replace_month","replace_month","replace_month","replace_nanosecond","replace_nanosecond","replace_nanosecond","replace_offset","replace_second","replace_second","replace_second","replace_time","replace_time","replace_year","replace_year","replace_year","saturating_add","saturating_add","saturating_add","saturating_add","saturating_mul","saturating_seconds_f32","saturating_seconds_f64","saturating_sub","saturating_sub","saturating_sub","saturating_sub","second","second","second","seconds","seconds_f32","seconds_f64","seconds_past_minute","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","subsec_microseconds","subsec_milliseconds","subsec_nanoseconds","sum","sum","sunday_based_week","sunday_based_week","sunday_based_week","time","time","time_fn","to_calendar_date","to_calendar_date","to_calendar_date","to_hms","to_hms_micro","to_hms_milli","to_hms_nano","to_iso_week_date","to_iso_week_date","to_iso_week_date","to_julian_day","to_julian_day","to_julian_day","to_offset","to_ordinal_date","to_ordinal_date","to_ordinal_date","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","unix_timestamp","unix_timestamp_nanos","unsigned_abs","util","weekday","weekday","weekday","weeks","whole_days","whole_hours","whole_hours","whole_microseconds","whole_milliseconds","whole_minutes","whole_minutes","whole_nanoseconds","whole_seconds","whole_seconds","whole_weeks","with_hms","with_hms_micro","with_hms_milli","with_hms_nano","with_time","year","year","year","Day","Hour","Microsecond","Millisecond","Minute","Nanosecond","Second","Week","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","into","into","into","into","into","into","into","into","per","per","per","per","per","per","per","per","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","ComponentRange","ComponentRange","ComponentRange","ConversionRange","ConversionRange","DifferentVariant","DifferentVariant","Error","Expected","Format","Format","InsufficientInformation","InsufficientTypeInformation","InvalidComponent","InvalidComponent","InvalidComponentName","InvalidFormatDescription","InvalidFormatDescription","InvalidLiteral","InvalidModifier","InvalidVariant","InvalidVariant","MissingComponentName","MissingRequiredModifier","NotSupported","Parse","ParseFromDescription","ParseFromDescription","ParseFromDescription","StdIo","TryFromParsed","TryFromParsed","TryFromParsed","UnclosedOpeningBracket","UnexpectedTrailingCharacters","UnexpectedTrailingCharacters","UnexpectedTrailingCharacters","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","eq","eq","eq","eq","eq","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","hash","into","into","into","into","into","into","into","into","into","into","is_conditional","name","source","source","source","source","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","context","index","index","index","index","index","index","index","name","name","value","what","what","NumericalDuration","NumericalStdDuration","days","hours","microseconds","milliseconds","minutes","nanoseconds","seconds","std_days","std_hours","std_microseconds","std_milliseconds","std_minutes","std_nanoseconds","std_seconds","std_weeks","weeks","Component","Component","Component","Compound","Compound","Day","End","First","First","FormatItem","Hour","Ignore","Literal","Literal","Minute","Month","OffsetHour","OffsetMinute","OffsetSecond","Optional","Optional","Ordinal","OwnedFormatItem","Period","Second","Subsecond","UnixTimestamp","WeekNumber","Weekday","Year","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","eq","eq","eq","eq","eq","eq","eq","eq","eq","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","into","into","into","modifier","parse","parse_borrowed","parse_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","well_known","Day","Eight","End","Five","Four","Full","Hour","Ignore","Iso","LastTwo","Long","Long","Microsecond","Millisecond","Minute","Monday","Monday","Month","MonthRepr","Nanosecond","Nine","None","Numerical","OffsetHour","OffsetMinute","OffsetSecond","One","OneOrMore","Ordinal","Padding","Period","Second","Second","Seven","Short","Short","Six","Space","Subsecond","SubsecondDigits","Sunday","Sunday","Three","Two","UnixTimestamp","UnixTimestampPrecision","WeekNumber","WeekNumberRepr","Weekday","WeekdayRepr","Year","YearRepr","Zero","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","case_sensitive","case_sensitive","case_sensitive","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","count","count","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","digits","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","is_12_hour_clock","is_uppercase","iso_week_based","one_indexed","padding","padding","padding","padding","padding","padding","padding","padding","padding","padding","padding","precision","repr","repr","repr","repr","sign_is_mandatory","sign_is_mandatory","sign_is_mandatory","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","Iso8601","Rfc2822","Rfc3339","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","eq","eq","eq","fmt","fmt","fmt","from","from","from","into","into","into","iso8601","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","Calendar","Config","DATE","DATE_TIME","DATE_TIME_OFFSET","DEFAULT","DEFAULT","Date","DateKind","DateTime","DateTimeOffset","EncodedConfig","FormattedComponents","Hour","Hour","Iso8601","Minute","Minute","None","OFFSET","Offset","OffsetPrecision","Ordinal","PARSING","Second","TIME","TIME_OFFSET","Time","TimeOffset","TimePrecision","Week","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","encode","eq","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","into","into","into","into","into","set_date_kind","set_formatted_components","set_offset_precision","set_time_precision","set_use_separators","set_year_is_six_digits","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","decimal_digits","decimal_digits","decimal_digits","Formattable","date","datetime","format_description","offset","time","Parsable","Parsed","borrow","borrow_mut","clone","clone_into","day","fmt","from","hour_12","hour_12_is_pm","hour_24","into","iso_week_number","iso_year","iso_year_last_two","minute","monday_week_number","month","new","offset_hour","offset_minute_signed","offset_second_signed","ordinal","parse_component","parse_item","parse_items","parse_literal","second","set_day","set_hour_12","set_hour_12_is_pm","set_hour_24","set_iso_week_number","set_iso_year","set_iso_year_last_two","set_minute","set_monday_week_number","set_month","set_offset_hour","set_offset_minute_signed","set_offset_second_signed","set_ordinal","set_second","set_subsecond","set_sunday_week_number","set_unix_timestamp_nanos","set_weekday","set_year","set_year_last_two","subsecond","sunday_week_number","to_owned","try_from","try_into","type_id","unix_timestamp_nanos","weekday","with_day","with_hour_12","with_hour_12_is_pm","with_hour_24","with_iso_week_number","with_iso_year","with_iso_year_last_two","with_minute","with_monday_week_number","with_month","with_offset_hour","with_offset_minute_signed","with_offset_second_signed","with_ordinal","with_second","with_subsecond","with_sunday_week_number","with_unix_timestamp_nanos","with_weekday","with_year","with_year_last_two","year","year_last_two","days_in_year","days_in_year_month","is_leap_year","weeks_in_year"],"q":[[0,"time"],[566,"time::convert"],[670,"time::error"],[871,"time::error::InvalidFormatDescription"],[884,"time::ext"],[902,"time::format_description"],[990,"time::format_description::modifier"],[1399,"time::format_description::well_known"],[1439,"time::format_description::well_known::iso8601"],[1533,"time::format_description::well_known::iso8601::TimePrecision"],[1536,"time::formatting"],[1537,"time::macros"],[1542,"time::parsing"],[1623,"time::util"],[1627,"core::time"],[1628,"std::time"],[1629,"core::option"],[1630,"core::cmp"],[1631,"std::time"],[1632,"core::fmt"],[1633,"core::fmt"],[1634,"alloc::string"],[1635,"core::marker"],[1636,"std::io"],[1637,"core::hash"],[1638,"powerfmt::smart_display"],[1639,"core::ops::function"],[1640,"core::any"],[1641,"core::marker"],[1642,"core::error"],[1643,"alloc::vec"],[1644,"alloc::boxed"],[1645,"core::convert"],[1646,"core::num::nonzero"],[1647,"core::num::nonzero"]],"d":["","","Equivalent to <code>1.days()</code>.","Date in the proleptic Gregorian calendar.","","A span of time with nanosecond precision.","Contains the error value","","","","Equivalent to <code>1.hours()</code>.","A measurement of a monotonically non-decreasing clock. …","","","","The maximum valid <code>Date</code>.","The maximum possible duration. Adding any positive …","The largest value that can be represented by …","Equivalent to <code>1.microseconds()</code>.","Create a <code>Time</code> that is exactly midnight.","Equivalent to <code>1.milliseconds()</code>.","The minimum valid <code>Date</code>.","The minimum possible duration. Adding any negative …","The smallest value that can be represented by …","Equivalent to <code>1.minutes()</code>.","","","","Months of the year.","Equivalent to <code>1.nanoseconds()</code>.","","","A <code>PrimitiveDateTime</code> with a <code>UtcOffset</code>.","Contains the success value","Combined date and time.","An alias for <code>std::result::Result</code> with a generic error from …","Equivalent to <code>1.seconds()</code>.","","","","","The clock time within a given date. Nanosecond precision.","","Midnight, 1 January, 1970 (UTC).","A <code>UtcOffset</code> that is UTC.","An offset from UTC.","Equivalent to <code>1.weeks()</code>.","","Days of the week.","Equivalent to <code>0.seconds()</code>.","Get the absolute value of the duration.","Panics","Panics","Panics","Panics","Panics","","","","","","Add the sub-day time of the <code>std::time::Duration</code> to the <code>Time</code>…","Add the sub-day time of the <code>Duration</code> to the <code>Time</code>. Wraps on …","","","","","","","","","","","","","Get the clock hour, minute, and second.","Get the clock hour, minute, and second.","Obtain the UTC offset as its hours, minutes, and seconds. …","Get the clock hour, minute, second, and microsecond.","Get the clock hour, minute, second, and microsecond.","Get the clock hour, minute, second, and millisecond.","Get the clock hour, minute, second, and millisecond.","Get the clock hour, minute, second, and nanosecond.","Get the clock hour, minute, second, and nanosecond.","","Get the number of fractional seconds in the duration.","Get the number of fractional seconds in the duration.","Assuming that the existing <code>PrimitiveDateTime</code> represents a …","Assuming that the existing <code>PrimitiveDateTime</code> represents a …","","","","","","","","","","","","","","","","","","","","Computes <code>self + duration</code>, returning <code>None</code> if an overflow …","Computes <code>self + rhs</code>, returning <code>None</code> if an overflow …","Returns <code>Some(t)</code> where <code>t</code> is the time <code>self + duration</code> if <code>t</code> …","Computes <code>self + duration</code>, returning <code>None</code> if an overflow …","Computes <code>self + duration</code>, returning <code>None</code> if an overflow …","Computes <code>self + duration</code>, returning <code>None</code> if an overflow …","Computes <code>self / rhs</code>, returning <code>None</code> if <code>rhs == 0</code> or if the …","Computes <code>self * rhs</code>, returning <code>None</code> if an overflow …","Creates a new <code>Duration</code> from the specified number of seconds","Creates a new <code>Duration</code> from the specified number of seconds","Computes <code>self - duration</code>, returning <code>None</code> if an overflow …","Computes <code>self - rhs</code>, returning <code>None</code> if an overflow …","Returns <code>Some(t)</code> where <code>t</code> is the time <code>self - duration</code> if <code>t</code> …","Computes <code>self - duration</code>, returning <code>None</code> if an overflow …","Computes <code>self - duration</code>, returning <code>None</code> if an overflow …","Computes <code>self - duration</code>, returning <code>None</code> if an overflow …","Convert the <code>OffsetDateTime</code> from the current <code>UtcOffset</code> to …","","","","","","","","","","","","","","","","","","","","","","","","","","Conversion between units of time.","Get the <code>Date</code> in the stored offset.","Get the <code>Date</code> component of the <code>PrimitiveDateTime</code>.","Get the day of the month.","Get the day of the date in the stored offset.","Get the day of the date.","Create a new <code>Duration</code> with the given number of days. …","","","","","","","","","","","","","","","","","","","","Returns the amount of time elapsed since this instant was …","","","","","","","","","","","","","Various error types returned by methods in the time crate.","Extension traits.","","","","","","","","","","","","","","","","","","","","","","","","","Format the <code>Date</code> using the provided format description.","Format the <code>OffsetDateTime</code> using the provided format …","Format the <code>PrimitiveDateTime</code> using the provided format …","Format the <code>Time</code> using the provided format description.","Format the <code>UtcOffset</code> using the provided format description.","Description of how types should be formatted and parsed.","Format the <code>Date</code> using the provided format description.","Format the <code>OffsetDateTime</code> using the provided format …","Format the <code>PrimitiveDateTime</code> using the provided format …","Format the <code>Time</code> using the provided format description.","Format the <code>UtcOffset</code> using the provided format description.","Formatting for various types.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Attempt to create a <code>Date</code> from the year, month, and day.","Attempt to create a <code>Time</code> from the hour, minute, and second.","Create a <code>UtcOffset</code> representing an offset by the number of …","Attempt to create a <code>Time</code> from the hour, minute, second, …","Attempt to create a <code>Time</code> from the hour, minute, second, …","Attempt to create a <code>Time</code> from the hour, minute, second, …","Attempt to create a <code>Date</code> from the ISO year, week, and …","Create a <code>Date</code> from the Julian day.","Attempt to create a <code>Date</code> from the year and ordinal day …","","","Create an <code>OffsetDateTime</code> from the provided Unix timestamp. …","Construct an <code>OffsetDateTime</code> from the provided Unix …","Create a <code>UtcOffset</code> representing an offset by the number of …","","","","","","","","","","Get the clock hour in the stored offset.","Get the clock hour.","Get the clock hour.","Create a new <code>Duration</code> with the given number of hours. …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Obtain the inner <code>std::time::Instant</code>.","Check if a duration is negative.","Check if the offset is negative, or west of UTC.","Check if a duration is positive.","Check if the offset is positive, or east of UTC.","Check if the offset is exactly UTC.","Check if a duration is exactly zero.","Get the ISO week number.","Get the ISO week number of the date in the stored offset.","Get the ISO week number.","Macros to construct statically known values.","","","","","","","","Get the microseconds within the second in the stored …","Get the microseconds within the second.","Get the microseconds within the second.","Create a new <code>Duration</code> with the given number of …","Create a <code>PrimitiveDateTime</code> using the existing date. The …","Get the milliseconds within the second in the stored …","Get the milliseconds within the second.","Get the milliseconds within the second.","Create a new <code>Duration</code> with the given number of …","Get the minute within the hour in the stored offset.","Get the minute within the hour.","Get the minute within the hour.","Create a new <code>Duration</code> with the given number of minutes. …","Obtain the number of minutes past the hour the offset is …","Get the week number where week 1 begins on the first …","Get the week number where week 1 begins on the first …","Get the week number where week 1 begins on the first …","Get the month.","Get the month of the date in the stored offset.","Get the month of the date.","","","","","","","","","","","","","","","","","Get the nanoseconds within the second in the stored offset.","Get the nanoseconds within the second.","Get the nanoseconds within the second.","Create a new <code>Duration</code> with the given number of nanoseconds.","","","Create a new <code>Duration</code> with the provided seconds and …","Create a new <code>PrimitiveDateTime</code> from the provided <code>Date</code> and …","Create a new <code>OffsetDateTime</code> with the given <code>Date</code>, <code>Time</code>, and …","Create a new <code>OffsetDateTime</code> with the given <code>Date</code> and <code>Time</code> …","Get the next month.","Get the next weekday.","Get the next calendar date.","Calculates the first occurrence of a weekday that is …","Returns an <code>Instant</code> corresponding to “now”.","Create a new <code>OffsetDateTime</code> with the current date and time …","Get n-th next month.","Get n-th next day.","Calculates the <code>n</code>th occurrence of a weekday that is …","Get n-th previous month.","Get n-th previous day.","Calculates the <code>n</code>th occurrence of a weekday that is …","Get the zero-indexed number of days from Monday.","Get the zero-indexed number of days from Sunday.","Get the one-indexed number of days from Monday.","Get the one-indexed number of days from Sunday.","Get the <code>UtcOffset</code>.","Get the day of the year.","Get the day of the year of the date in the stored offset.","Get the day of the year.","Parse a <code>Date</code> from the input using the provided format …","Parse an <code>OffsetDateTime</code> from the input using the provided …","Parse a <code>PrimitiveDateTime</code> from the input using the …","Parse a <code>Time</code> from the input using the provided format …","Parse a <code>UtcOffset</code> from the input using the provided format …","Parsing for various types.","","","","","","","","","","","Calculates the first occurrence of a weekday that is …","Get the previous month.","Get the previous weekday.","Get the previous calendar date.","Replace the date, which is assumed to be in the stored …","Replace the date, preserving the time.","Replace the date and time, which are assumed to be in the …","Replace the day of the month.","Replace the day of the month.","Replace the day of the month.","Replace the clock hour.","Replace the clock hour.","Replace the clock hour.","Replace the microseconds within the second.","Replace the microseconds within the second.","Replace the microseconds within the second.","Replace the milliseconds within the second.","Replace the milliseconds within the second.","Replace the milliseconds within the second.","Replace the minutes within the hour.","Replace the minutes within the hour.","Replace the minutes within the hour.","Replace the month of the year.","Replace the month of the year.","Replace the month of the year.","Replace the nanoseconds within the second.","Replace the nanoseconds within the second.","Replace the nanoseconds within the second.","Replace the offset. The date and time components remain …","Replace the seconds within the minute.","Replace the seconds within the minute.","Replace the seconds within the minute.","Replace the time, which is assumed to be in the stored …","Replace the time, preserving the date.","Replace the year. The month and day will be unchanged.","Replace the year. The month and day will be unchanged.","Replace the year. The month and day will be unchanged.","Computes <code>self + duration</code>, saturating value on overflow.","Computes <code>self + rhs</code>, saturating if an overflow occurred.","Computes <code>self + duration</code>, saturating value on overflow.","Computes <code>self + duration</code>, saturating value on overflow.","Computes <code>self * rhs</code>, saturating if an overflow occurred.","Creates a new <code>Duration</code> from the specified number of seconds","Creates a new <code>Duration</code> from the specified number of seconds","Computes <code>self - duration</code>, saturating value on overflow.","Computes <code>self - rhs</code>, saturating if an overflow occurred.","Computes <code>self - duration</code>, saturating value on overflow.","Computes <code>self - duration</code>, saturating value on overflow.","Get the second within the minute in the stored offset.","Get the second within the minute.","Get the second within the minute.","Create a new <code>Duration</code> with the given number of seconds.","Creates a new <code>Duration</code> from the specified number of …","Creates a new <code>Duration</code> from the specified number of …","Obtain the number of seconds past the minute the offset is …","","Panics","Panics","Panics","Panics","Panics","","Panics","Panics","","","","","","","","Subtract the sub-day time of the <code>std::time::Duration</code> from …","Subtract the sub-day time of the <code>Duration</code> from the <code>Time</code>. …","Subtract two <code>Time</code>s, returning the <code>Duration</code> between. This …","","","","","","","","","","","","","Get the number of microseconds past the number of whole …","Get the number of milliseconds past the number of whole …","Get the number of nanoseconds past the number of whole …","","","Get the week number where week 1 begins on the first …","Get the week number where week 1 begins on the first …","Get the week number where week 1 begins on the first …","Get the <code>Time</code> in the stored offset.","Get the <code>Time</code> component of the <code>PrimitiveDateTime</code>.","Runs a closure, returning the duration of time it took to …","Get the year, month, and day.","Get the year, month, and day.","Get the year, month, and day.","Get the clock hour, minute, and second.","Get the clock hour, minute, second, and microsecond.","Get the clock hour, minute, second, and millisecond.","Get the clock hour, minute, second, and nanosecond.","Get the ISO 8601 year, week number, and weekday.","Get the ISO 8601 year, week number, and weekday.","Get the ISO 8601 year, week number, and weekday.","Get the Julian day for the date.","Get the Julian day for the date. The time is not taken …","Get the Julian day for the date. The time is not taken …","Convert the <code>OffsetDateTime</code> from the current <code>UtcOffset</code> to …","Get the year and ordinal day number.","Get the year and ordinal day number.","Get the year and ordinal day number.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Get the Unix timestamp.","Get the Unix timestamp in nanoseconds.","Convert the existing <code>Duration</code> to a <code>std::time::Duration</code> and …","Utility functions.","Get the weekday.","Get the weekday of the date in the stored offset.","Get the weekday.","Create a new <code>Duration</code> with the given number of weeks. …","Get the number of whole days in the duration.","Get the number of whole hours in the duration.","Obtain the number of whole hours the offset is from UTC. A …","Get the number of whole microseconds in the duration.","Get the number of whole milliseconds in the duration.","Get the number of whole minutes in the duration.","Obtain the number of whole minutes the offset is from UTC. …","Get the number of nanoseconds in the duration.","Get the number of whole seconds in the duration.","Obtain the number of whole seconds the offset is from UTC. …","Get the number of whole weeks in the duration.","Attempt to create a <code>PrimitiveDateTime</code> using the existing …","Attempt to create a <code>PrimitiveDateTime</code> using the existing …","Attempt to create a <code>PrimitiveDateTime</code> using the existing …","Attempt to create a <code>PrimitiveDateTime</code> using the existing …","Create a <code>PrimitiveDateTime</code> using the existing date and the …","Get the year of the date.","Get the year of the date in the stored offset.","Get the year of the date.","A unit of time representing exactly one day.","A unit of time representing exactly one hour.","A unit of time representing exactly one microsecond.","A unit of time representing exactly one millisecond.","A unit of time representing exactly one minute.","A unit of time representing exactly one nanosecond.","A unit of time representing exactly one second.","A unit of time representing exactly one week.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Obtain the number of times <code>Nanosecond</code> can fit into <code>T</code>. If <code>T</code> …","Obtain the number of times <code>Microsecond</code> can fit into <code>T</code>. If <code>T</code>…","Obtain the number of times <code>Millisecond</code> can fit into <code>T</code>. If <code>T</code>…","Obtain the number of times <code>Second</code> can fit into <code>T</code>. If <code>T</code> is …","Obtain the number of times <code>Minute</code> can fit into <code>T</code>. If <code>T</code> is …","Obtain the number of times <code>Hour</code> can fit into <code>T</code>. If <code>T</code> is …","Obtain the number of times <code>Day</code> can fit into <code>T</code>. If <code>T</code> is …","Obtain the number of times <code>Week</code> can fit into <code>T</code>. If <code>T</code> is …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","An error type indicating that a component provided to a …","Some component contained an invalid value for the type.","","An error type indicating that a conversion failed because …","","An error type indicating that a <code>TryFrom</code> call failed …","","A unified error type for anything returned by a method in …","Something was expected, but not found.","An error occurred when formatting.","","The <code>Parsed</code> did not include enough information to construct …","The type being formatted does not contain sufficient …","The component named has a value that cannot be formatted …","A dynamic component was not valid.","A component name is not valid.","The format description provided was not valid.","","A string literal was not what was expected.","A modifier is not valid.","An error type indicating that a <code>FromStr</code> call failed …","","A component name is missing.","A required modifier is missing.","Certain behavior is not supported in the given context.","An error that occurred at some stage of parsing.","An error that occurred while parsing the input into a …","","","A value of <code>std::io::Error</code> was returned internally.","An error that occurred when converting a <code>Parsed</code> to another …","","","There was a bracket pair that was opened but not closed.","The input should have ended, but there were characters …","The input was expected to have ended, but there are …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Whether the value’s permitted range is conditional, i.e. …","Obtain the name of the component whose value was out of …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The context in which the behavior is not supported.","The zero-based index of the opening bracket.","The zero-based index the component name starts at.","The zero-based index the modifier starts at.","The zero-based index where the component name should start.","The zero-based index of the component.","The zero-based index the item was expected to be found at.","The zero-based index the error occurred at.","The name of the invalid component name.","The name of the modifier that is missing.","The value of the invalid modifier.","What was expected to be present, but wasn’t.","The behavior that is not supported.","Create <code>Duration</code>s from numeric literals.","Create <code>std::time::Duration</code>s from numeric literals.","Create a <code>Duration</code> from the number of days.","Create a <code>Duration</code> from the number of hours.","Create a <code>Duration</code> from the number of microseconds.","Create a <code>Duration</code> from the number of milliseconds.","Create a <code>Duration</code> from the number of minutes.","Create a <code>Duration</code> from the number of nanoseconds.","Create a <code>Duration</code> from the number of seconds.","Create a <code>std::time::Duration</code> from the number of days.","Create a <code>std::time::Duration</code> from the number of hours.","Create a <code>std::time::Duration</code> from the number of …","Create a <code>std::time::Duration</code> from the number of …","Create a <code>std::time::Duration</code> from the number of minutes.","Create a <code>std::time::Duration</code> from the number of …","Create a <code>std::time::Duration</code> from the number of seconds.","Create a <code>std::time::Duration</code> from the number of weeks.","Create a <code>Duration</code> from the number of weeks.","A component of a larger format description.","A minimal representation of a single non-literal item.","A minimal representation of a single non-literal item.","A series of literals or components that collectively form …","A series of literals or components that collectively form …","Day of the month.","The end of input. Parsing this component will fail if …","A series of <code>FormatItem</code>s where, when parsing, the first …","A series of <code>FormatItem</code>s where, when parsing, the first …","A complete description of how to format and parse a type.","Hour of the day.","A number of bytes to ignore when parsing. This has no …","Bytes that are formatted as-is.","Bytes that are formatted as-is.","Minute within the hour.","Month of the year.","Hour of the UTC offset.","Minute within the hour of the UTC offset.","Second within the minute of the UTC offset.","A <code>FormatItem</code> that may or may not be present when parsing. …","A <code>FormatItem</code> that may or may not be present when parsing. …","Ordinal day of the year.","A complete description of how to format and parse a type.","AM/PM part of the time.","Second within the minute.","Subsecond within the second.","A Unix timestamp.","Week within the year.","Day of the week.","Year of the date.","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Various modifiers for components.","Parse a sequence of items from the format description.","Parse a sequence of items from the format description.","Parse a sequence of items from the format description.","","","","","","","","","","","","","","","Well-known formats, typically standards.","Day of the month.","Exactly eight digits.","The end of input.","Exactly five digits.","Exactly four digits.","The full value of the year.","Hour of the day.","Ignore some number of bytes.","Week 1 is the week that contains January 4.","Only the last two digits of the year.","The long form of the month name (e.g. “January”).","The long form of the weekday (e.g. “Monday”).","Microseconds since the Unix epoch.","Milliseconds since the Unix epoch.","Minute within the hour.","A numerical representation using Monday as the first day …","Week 1 begins on the first Monday of the calendar year.","Month of the year.","The representation of a month.","Nanoseconds since the Unix epoch.","Exactly nine digits.","There is no padding. This can result in a width below the …","The number of the month (January is 1, December is 12).","Hour of the UTC offset.","Minute within the hour of the UTC offset.","Second within the minute of the UTC offset.","Exactly one digit.","Any number of digits (up to nine) that is at least one. …","Ordinal day of the year.","Type of padding to ensure a minimum width.","AM/PM part of the time.","Second within the minute.","Seconds since the Unix epoch.","Exactly seven digits.","The short form of the month name (e.g. “Jan”).","The short form of the weekday (e.g. “Mon”).","Exactly six digits.","A space character (<code> </code>) should be used as padding.","Subsecond within the second.","The number of digits present in a subsecond representation.","A numerical representation using Sunday as the first day …","Week 1 begins on the first Sunday of the calendar year.","Exactly three digits.","Exactly two digits.","A Unix timestamp.","The precision of a Unix timestamp.","Week within the year.","The representation used for the week number.","Day of the week.","The representation used for the day of the week.","Year of the date.","The representation used for a year value.","A zero character (<code>0</code>) should be used as padding.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Is the value case sensitive when parsing?","Is the value case sensitive when parsing?","Is the value case sensitive when parsing?","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Create an instance of <code>Ignore</code> with the provided number of …","The number of bytes to ignore.","","Creates a modifier that indicates the value is padded with …","","","Creates an instance of this type that indicates the value …","Creates a modifier that indicates the value is padded with …","","","","Creates a modifier that indicates the value uses the <code>Long</code> …","","","Creates a modifier that indicates that the value is padded …","","Creates a modifier that indicates the value uses the <code>Full</code> …","","Creates a modifier that indicates the value is padded with …","","","Creates a modifier that indicates the value is padded with …","Creates a modifier that indicates the value uses the …","","","Creates a modifier that indicates the value is padded with …","","Creates a modifier that indicates the stringified value …","","","Creates a modifier that indicates the value only uses a …","","Creates a modifier that indicates the value is padded with …","Creates a modifier that indicates the value is padded with …","","","","","Creates a modifier that indicates the value represents the …","","Creates a modifier used to represent the end of input.","How many digits are present in the component?","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Is the hour displayed using a 12 or 24-hour clock?","Is the period uppercase or lowercase?","Whether the value is based on the ISO week number or the …","When using a numerical representation, should it be zero …","The padding to obtain the minimum width.","The padding to obtain the minimum width.","The padding to obtain the minimum width.","The padding to obtain the minimum width.","The padding to obtain the minimum width.","The padding to obtain the minimum width.","The padding to obtain the minimum width.","The padding to obtain the minimum width.","The padding to obtain the minimum width.","The padding to obtain the minimum width.","The padding to obtain the minimum width.","The precision of the timestamp.","What form of representation should be used?","What form of representation should be used?","What kind of representation should be used?","What kind of representation should be used?","Whether the <code>+</code> sign is present when a positive year …","Whether the <code>+</code> sign is present on positive values.","Whether the <code>+</code> sign must be present for a non-negative …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The format described in ISO 8601.","The format described in RFC 2822.","The format described in RFC 3339.","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","The format described in ISO 8601.","","","","","","","","","","","","","Use the year-month-day format.","Configuration for <code>Iso8601</code>.","An <code>Iso8601</code> that handles only the date, but is otherwise …","An <code>Iso8601</code> that handles the date and time, but is …","An <code>Iso8601</code> that handles the date, time, and UTC offset. …","An <code>Iso8601</code> with the default configuration.","A configuration for the <code>Iso8601</code> format.","Format only the date.","Which format to use for the date.","Format the date and time.","Format the date, time, and UTC offset.","An encoded <code>Config</code> that can be used as a const parameter to …","Which components to format.","Format the hour only. Minutes, seconds, and nanoseconds …","Format only the offset hour. Requires the offset minute to …","The format described in ISO 8601.","Format the hour and minute. Seconds and nanoseconds will …","Format both the offset hour and minute.","The configuration can only be used for parsing. Using this …","An <code>Iso8601</code> that handles only the UTC offset, but is …","Format only the UTC offset.","The precision for the UTC offset.","Use the week-ordinal format.","An <code>Iso8601</code> that can only be used for parsing. Using this …","Format the hour, minute, and second. Nanoseconds will be …","An <code>Iso8601</code> that handles only the time, but is otherwise …","An <code>Iso8601</code> that handles the time and UTC offset, but is …","Format only the time.","Format the time and UTC offset.","The precision and number of decimal digits present for the …","Use the year-week-weekday format.","","","","","","","","","","","","","","","","","","","Encode the configuration, permitting it to be used as a …","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Set the format used for the date.","Set whether the format the date, time, and/or UTC offset.","Set the precision for the UTC offset.","Set the precision and number of decimal digits present for …","Set whether the format contains separators (such as <code>-</code> or <code>:</code>…","Set whether the year is six digits.","","","","","","","","","","","","","","","","","","","","","","","A type that describes a format.","Construct a <code>Date</code> with a statically known value.","Construct a <code>PrimitiveDateTime</code> or <code>OffsetDateTime</code> with a …","Equivalent of performing <code>format_description::parse()</code> at …","Construct a <code>UtcOffset</code> with a statically known value.","Construct a <code>Time</code> with a statically known value.","A type that can be parsed.","All information parsed.","","","","","Obtain the <code>day</code> component.","","Returns the argument unchanged.","Obtain the <code>hour_12</code> component.","Obtain the <code>hour_12_is_pm</code> component.","Obtain the <code>hour_24</code> component.","Calls <code>U::from(self)</code>.","Obtain the <code>iso_week_number</code> component.","Obtain the <code>iso_year</code> component.","Obtain the <code>iso_year_last_two</code> component.","Obtain the <code>minute</code> component.","Obtain the <code>monday_week_number</code> component.","Obtain the <code>month</code> component.","Create a new instance of <code>Parsed</code> with no information known.","Obtain the <code>offset_hour</code> component.","Obtain the <code>offset_minute</code> component.","Obtain the <code>offset_second</code> component.","Obtain the <code>ordinal</code> component.","Parse a single component, mutating the struct. The …","Parse a single <code>FormatItem</code> or <code>OwnedFormatItem</code>, mutating the …","Parse a sequence of <code>FormatItem</code>s or <code>OwnedFormatItem</code>s, …","Parse a literal byte sequence. The remaining input is …","Obtain the <code>second</code> component.","Set the <code>set_day</code> component.","Set the <code>set_hour_12</code> component.","Set the <code>set_hour_12_is_pm</code> component.","Set the <code>set_hour_24</code> component.","Set the <code>set_iso_week_number</code> component.","Set the <code>set_iso_year</code> component.","Set the <code>set_iso_year_last_two</code> component.","Set the <code>set_minute</code> component.","Set the <code>set_monday_week_number</code> component.","Set the <code>set_month</code> component.","Set the <code>set_offset_hour</code> component.","Set the <code>set_offset_minute_signed</code> component.","Set the <code>set_offset_second_signed</code> component.","Set the <code>set_ordinal</code> component.","Set the <code>set_second</code> component.","Set the <code>set_subsecond</code> component.","Set the <code>set_sunday_week_number</code> component.","Set the <code>set_unix_timestamp_nanos</code> component.","Set the <code>set_weekday</code> component.","Set the <code>set_year</code> component.","Set the <code>set_year_last_two</code> component.","Obtain the <code>subsecond</code> component.","Obtain the <code>sunday_week_number</code> component.","","","","","Obtain the <code>unix_timestamp_nanos</code> component.","Obtain the <code>weekday</code> component.","Set the <code>day</code> component and return <code>self</code>.","Set the <code>hour_12</code> component and return <code>self</code>.","Set the <code>hour_12_is_pm</code> component and return <code>self</code>.","Set the <code>hour_24</code> component and return <code>self</code>.","Set the <code>iso_week_number</code> component and return <code>self</code>.","Set the <code>iso_year</code> component and return <code>self</code>.","Set the <code>iso_year_last_two</code> component and return <code>self</code>.","Set the <code>minute</code> component and return <code>self</code>.","Set the <code>monday_week_number</code> component and return <code>self</code>.","Set the <code>month</code> component and return <code>self</code>.","Set the <code>offset_hour</code> component and return <code>self</code>.","Set the <code>offset_minute</code> component and return <code>self</code>.","Set the <code>offset_second</code> component and return <code>self</code>.","Set the <code>ordinal</code> component and return <code>self</code>.","Set the <code>second</code> component and return <code>self</code>.","Set the <code>subsecond</code> component and return <code>self</code>.","Set the <code>sunday_week_number</code> component and return <code>self</code>.","Set the <code>unix_timestamp_nanos</code> component and return <code>self</code>.","Set the <code>weekday</code> component and return <code>self</code>.","Set the <code>year</code> component and return <code>self</code>.","Set the <code>year_last_two</code> component and return <code>self</code>.","Obtain the <code>year</code> component.","Obtain the <code>year_last_two</code> component.","Get the number of calendar days in a given year.","Get the number of days in the month of a given year.","Returns if the provided year is a leap year in the …","Get the number of weeks in the ISO year."],"i":[19,19,1,0,19,0,108,0,19,20,1,0,19,19,19,2,1,6,1,7,1,2,1,6,1,19,19,20,0,1,19,19,0,108,0,0,1,20,19,20,20,0,20,5,10,0,1,20,0,1,1,2,2,1,1,4,4,5,5,6,6,7,7,2,2,1,1,4,4,5,5,6,6,7,7,6,7,10,6,7,6,7,6,7,4,1,1,6,6,2,1,4,4,19,5,6,7,10,20,2,1,4,19,5,6,7,10,20,2,1,4,5,6,2,1,1,1,1,2,1,4,5,6,2,5,2,1,4,19,5,6,7,10,20,2,1,4,19,5,6,7,10,20,2,1,4,5,6,7,10,0,5,6,2,5,6,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,4,2,1,1,4,4,19,5,5,6,7,10,20,0,0,2,2,1,1,4,19,19,19,5,5,6,6,7,7,10,10,20,20,20,2,5,6,7,10,2,5,6,7,10,0,2,5,6,7,10,0,2,1,4,4,19,5,5,6,7,10,20,2,7,10,7,7,7,2,2,2,19,20,5,5,10,2,1,4,19,5,6,7,10,20,5,6,7,1,2,1,4,19,5,6,7,10,20,4,1,10,1,10,10,1,2,5,6,0,2,19,5,6,7,10,20,5,6,7,1,2,5,6,7,1,5,6,7,1,10,2,5,6,2,5,6,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,5,6,7,1,1,10,1,6,5,5,19,20,2,2,4,5,19,20,2,19,20,2,20,20,20,20,5,2,5,6,2,5,6,7,10,0,2,1,1,4,4,5,5,6,7,10,2,19,20,2,5,6,5,2,5,6,5,6,7,5,6,7,5,6,7,5,6,7,2,5,6,5,6,7,5,5,6,7,5,6,2,5,6,2,1,5,6,1,1,1,2,1,5,6,5,6,7,1,1,1,10,2,2,2,1,1,4,4,4,4,5,5,5,5,6,6,6,7,7,7,2,2,1,1,4,4,5,5,6,6,7,7,1,1,1,1,1,2,5,6,5,6,1,2,5,6,5,5,5,5,2,5,6,2,5,6,5,2,5,6,2,1,4,19,5,6,7,10,20,2,1,19,5,6,7,10,20,2,2,1,1,4,19,19,5,5,6,6,7,7,10,10,20,2,1,4,19,5,6,7,10,20,2,1,4,19,5,6,7,10,20,5,5,1,0,2,5,6,1,1,1,10,1,1,1,10,1,1,10,1,2,2,2,2,2,2,5,6,0,0,0,0,0,0,0,0,49,50,51,52,53,54,55,56,49,50,51,52,53,54,55,56,49,50,51,52,53,54,55,56,49,50,51,52,53,54,55,56,49,50,51,52,53,54,55,56,49,50,51,52,53,54,55,56,49,50,51,52,53,54,55,56,49,50,51,52,53,54,55,56,49,50,51,52,53,54,55,56,49,50,51,52,53,54,55,56,49,50,51,52,53,54,55,56,49,50,51,52,53,54,55,56,0,62,63,0,63,0,63,0,59,0,63,62,32,32,61,59,0,63,61,59,0,63,59,59,59,0,0,42,63,32,0,42,63,59,42,61,63,37,47,58,32,59,60,42,61,62,63,37,47,58,32,59,60,42,61,62,63,37,47,58,59,60,42,61,62,37,47,58,59,60,42,61,62,37,47,58,59,60,42,61,62,37,37,47,47,58,58,32,32,59,59,60,60,42,42,61,61,62,62,63,63,37,47,58,32,32,59,60,42,42,42,61,62,62,63,63,63,63,63,63,63,63,63,63,37,37,47,58,32,59,60,42,61,62,63,37,37,32,42,62,63,37,47,58,59,60,42,61,62,37,47,58,32,59,60,42,61,62,63,37,37,37,47,47,58,58,32,32,59,59,60,60,42,42,61,61,61,62,62,62,63,37,47,58,32,59,60,42,61,62,63,37,47,58,32,59,60,42,61,62,63,109,110,111,112,113,114,115,109,111,114,112,115,109,0,0,116,116,116,116,116,116,116,117,117,117,117,117,117,117,117,116,0,66,68,66,68,67,67,66,68,0,67,67,66,68,67,67,67,67,67,66,68,67,0,67,67,67,67,67,67,67,66,67,68,66,67,68,66,67,68,66,67,68,66,66,66,67,67,67,68,68,68,66,67,68,66,66,66,67,68,68,68,68,68,68,68,68,66,67,68,0,0,0,0,66,67,68,66,67,67,67,68,66,67,68,66,67,68,0,0,87,0,87,87,81,0,0,79,81,74,77,94,94,0,77,79,0,0,94,87,92,74,0,0,0,87,87,0,0,0,0,94,87,74,77,87,92,0,0,77,79,87,87,0,0,0,0,0,0,0,0,92,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,75,78,85,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,93,93,73,73,74,75,75,76,76,77,78,78,79,80,80,81,82,82,83,83,84,84,85,85,86,86,87,88,88,89,89,90,90,91,91,92,94,95,95,96,96,88,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,83,85,82,78,73,75,76,80,82,83,84,86,89,90,91,95,75,78,80,82,82,89,95,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,0,0,0,98,99,100,98,99,100,98,99,100,98,99,100,98,99,100,98,99,100,98,99,100,98,99,100,0,98,99,100,98,99,100,98,99,100,98,99,100,102,0,98,98,98,98,105,101,0,101,101,0,0,103,104,0,103,104,101,98,101,0,102,98,103,98,98,101,101,0,102,101,102,103,104,105,101,102,103,104,105,101,102,103,104,101,102,103,104,105,101,102,103,104,101,102,103,104,105,101,102,103,104,105,101,102,103,104,105,105,105,105,105,105,105,101,102,103,104,101,102,103,104,105,101,102,103,104,105,101,102,103,104,105,118,119,120,0,0,0,0,0,0,0,0,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,0,0,0,0],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[1,1],[[2,1]],[[2,3]],[[1,3]],[[1,1]],[[4,1]],[[4,3]],[[5,3]],[[5,1]],[[6,3]],[[6,1]],[[7,3]],[[7,1]],[[2,1],8],[[2,3],8],[[1,1],8],[[1,3],8],[[4,3],8],[[4,1],8],[[5,1],8],[[5,3],8],[[6,1],8],[[6,3],8],[[7,1],8],[[7,3],8],[6,[[8,[9,9,9]]]],[7,[[8,[9,9,9]]]],[10,[[8,[11,11,11]]]],[6,[[8,[9,9,9,12]]]],[7,[[8,[9,9,9,12]]]],[6,[[8,[9,9,9,13]]]],[7,[[8,[9,9,9,13]]]],[6,[[8,[9,9,9,12]]]],[7,[[8,[9,9,9,12]]]],[4,14],[1,15],[1,16],[[6,10],5],[6,5],[-1,-2,[],[]],[-1,-2,[],[]],[4,14],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[2,1],[[17,[2]]]],[[1,1],[[17,[1]]]],[[4,1],[[17,[4]]]],[[5,1],[[17,[5]]]],[[6,1],[[17,[6]]]],[[2,3],[[17,[2]]]],[[1,18],[[17,[1]]]],[[1,18],[[17,[1]]]],[15,[[17,[1]]]],[16,[[17,[1]]]],[[2,1],[[17,[2]]]],[[1,1],[[17,[1]]]],[[4,1],[[17,[4]]]],[[5,1],[[17,[5]]]],[[6,1],[[17,[6]]]],[[2,3],[[17,[2]]]],[[5,10],[[17,[5]]]],[2,2],[1,1],[4,4],[19,19],[5,5],[6,6],[7,7],[10,10],[20,20],[[-1,-2],8,[],[]],[[-1,-2],8,[],[]],[[-1,-2],8,[],[]],[[-1,-2],8,[],[]],[[-1,-2],8,[],[]],[[-1,-2],8,[],[]],[[-1,-2],8,[],[]],[[-1,-2],8,[],[]],[[-1,-2],8,[],[]],[[2,2],21],[[1,1],21],[[4,4],21],[[5,5],21],[[6,6],21],[[7,7],21],[[10,10],21],0,[5,2],[6,2],[2,9],[5,9],[6,9],[22,1],[[],1],[[1,18]],[[1,15]],[[1,13]],[[1,16]],[[1,9]],[[1,1]],[[1,3]],[[1,23]],[[1,11]],[[1,12]],[[1,11],8],[[1,16],8],[[1,9],8],[[1,23],8],[[1,15],8],[[1,18],8],[[1,12],8],[[1,13],8],[4,1],[[2,2],24],[[1,3],24],[[1,1],24],[[4,14],24],[[4,4],24],[[19,19],24],[[5,5],24],[[5,25],24],[[6,6],24],[[7,7],24],[[10,10],24],[[20,20],24],0,0,[[2,26],[[28,[8,27]]]],[[2,26],29],[[1,26],29],[[1,26],29],[[4,26],29],[[19,26],29],[[19,26],29],[[19,26],29],[[5,26],29],[[5,26],29],[[6,26],29],[[6,26],29],[[7,26],29],[[7,26],29],[[10,26],29],[[10,26],29],[[20,26],29],[[20,26],29],[[20,26],29],[[2,26,[30,[2]]],29],[[5,26,[30,[5]]],29],[[6,26,[30,[6]]],29],[[7,26,[30,[7]]],29],[[10,26,[30,[10]]],29],[[2,-1],[[28,[31,32]]],[33,34]],[[5,-1],[[28,[31,32]]],[33,34]],[[6,-1],[[28,[31,32]]],[33,34]],[[7,-1],[[28,[31,32]]],[33,34]],[[10,-1],[[28,[31,32]]],[33,34]],0,[[2,-1,-2],[[28,[35,32]]],36,[33,34]],[[5,-1,-2],[[28,[35,32]]],36,[33,34]],[[6,-1,-2],[[28,[35,32]]],36,[33,34]],[[7,-1,-2],[[28,[35,32]]],36,[33,34]],[[10,-1,-2],[[28,[35,32]]],36,[33,34]],0,[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[14,4],[-1,-1,[]],[-1,-1,[]],[25,5],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[18,19,9],[[28,[2,37]]]],[[9,9,9],[[28,[7,37]]]],[[11,11,11],[[28,[10,37]]]],[[9,9,9,12],[[28,[7,37]]]],[[9,9,9,13],[[28,[7,37]]]],[[9,9,9,12],[[28,[7,37]]]],[[18,9,20],[[28,[2,37]]]],[18,[[28,[2,37]]]],[[18,13],[[28,[2,37]]]],[38,[[28,[19]]]],[38,[[28,[20]]]],[22,[[28,[5,37]]]],[39,[[28,[5,37]]]],[18,[[28,[10,37]]]],[[2,-1],8,40],[[1,-1],8,40],[[4,-1],8,40],[[19,-1],8,40],[[5,-1],8,40],[[6,-1],8,40],[[7,-1],8,40],[[10,-1],8,40],[[20,-1],8,40],[5,9],[6,9],[7,9],[22,1],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[4,14],[1,24],[10,24],[1,24],[10,24],[10,24],[1,24],[2,9],[5,9],[6,9],0,[[2,41],[[30,[2]]]],[[19,41],[[30,[19]]]],[[5,41],[[30,[5]]]],[[6,41],[[30,[6]]]],[[7,41],[[30,[7]]]],[[10,41],[[30,[10]]]],[[20,41],[[30,[20]]]],[5,12],[6,12],[7,12],[22,1],[2,6],[5,13],[6,13],[7,13],[22,1],[5,9],[6,9],[7,9],[22,1],[10,11],[2,9],[5,9],[6,9],[2,19],[5,19],[6,19],[[1,16]],[[1,18]],[[1,9]],[[1,11]],[[1,23]],[[1,15]],[[1,13]],[[1,12]],[[1,13],8],[[1,23],8],[[1,11],8],[[1,18],8],[[1,15],8],[[1,12],8],[[1,16],8],[[1,9],8],[5,12],[6,12],[7,12],[22,1],[1],[10],[[22,18],1],[[2,7],6],[[2,7,10],5],[[2,7],5],[19,19],[20,20],[2,[[17,[2]]]],[[2,20],2],[[],4],[[],5],[[19,9],19],[[20,9],20],[[2,20,9],2],[[19,9],19],[[20,9],20],[[2,20,9],2],[20,9],[20,9],[20,9],[20,9],[5,10],[2,13],[5,13],[6,13],[[38,-1],[[28,[2,42]]],[43,34]],[[38,-1],[[28,[5,42]]],[43,34]],[[38,-1],[[28,[6,42]]],[43,34]],[[38,-1],[[28,[7,42]]],[43,34]],[[38,-1],[[28,[10,42]]],[43,34]],0,[[2,2],[[17,[21]]]],[[1,3],[[17,[21]]]],[[1,1],[[17,[21]]]],[[4,14],[[17,[21]]]],[[4,4],[[17,[21]]]],[[5,5],[[17,[21]]]],[[5,25],[[17,[21]]]],[[6,6],[[17,[21]]]],[[7,7],[[17,[21]]]],[[10,10],[[17,[21]]]],[[2,20],2],[19,19],[20,20],[2,[[17,[2]]]],[[5,2],5],[[6,2],6],[[5,6],5],[[2,9],[[28,[2,37]]]],[[5,9],[[28,[5,37]]]],[[6,9],[[28,[6,37]]]],[[5,9],[[28,[5,37]]]],[[6,9],[[28,[6,37]]]],[[7,9],[[28,[7,37]]]],[[5,12],[[28,[5,37]]]],[[6,12],[[28,[6,37]]]],[[7,12],[[28,[7,37]]]],[[5,13],[[28,[5,37]]]],[[6,13],[[28,[6,37]]]],[[7,13],[[28,[7,37]]]],[[5,9],[[28,[5,37]]]],[[6,9],[[28,[6,37]]]],[[7,9],[[28,[7,37]]]],[[2,19],[[28,[2,37]]]],[[5,19],[[28,[5,37]]]],[[6,19],[[28,[6,37]]]],[[5,12],[[28,[5,37]]]],[[6,12],[[28,[6,37]]]],[[7,12],[[28,[7,37]]]],[[5,10],5],[[5,9],[[28,[5,37]]]],[[6,9],[[28,[6,37]]]],[[7,9],[[28,[7,37]]]],[[5,7],5],[[6,7],6],[[2,18],[[28,[2,37]]]],[[5,18],[[28,[5,37]]]],[[6,18],[[28,[6,37]]]],[[2,1],2],[[1,1],1],[[5,1],5],[[6,1],6],[[1,18],1],[15,1],[16,1],[[2,1],2],[[1,1],1],[[5,1],5],[[6,1],6],[5,9],[6,9],[7,9],[22,1],[15,1],[16,1],[10,11],[[2,2]],[[2,3]],[[2,1]],[[1,1]],[[1,3]],[[4,1]],[[4,14]],[[4,3]],[[4,4]],[[5,3]],[[5,5]],[[5,1]],[[5,25]],[[6,1]],[[6,3]],[[6,6]],[[7,3]],[[7,1]],[[7,7]],[[2,1],8],[[2,3],8],[[1,3],8],[[1,1],8],[[4,1],8],[[4,3],8],[[5,3],8],[[5,1],8],[[6,3],8],[[6,1],8],[[7,3],8],[[7,1],8],[1,18],[1,23],[1,18],[-1,1,44],[-1,1,44],[2,9],[5,9],[6,9],[5,7],[6,7],[-1,[[8,[1,-2]]],45,[]],[2,[[8,[18,19,9]]]],[5,[[8,[18,19,9]]]],[6,[[8,[18,19,9]]]],[5,[[8,[9,9,9]]]],[5,[[8,[9,9,9,12]]]],[5,[[8,[9,9,9,13]]]],[5,[[8,[9,9,9,12]]]],[2,[[8,[18,9,20]]]],[5,[[8,[18,9,20]]]],[6,[[8,[18,9,20]]]],[2,18],[5,18],[6,18],[[5,10],5],[2,[[8,[18,13]]]],[5,[[8,[18,13]]]],[6,[[8,[18,13]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,31,[]],[-1,31,[]],[-1,31,[]],[-1,31,[]],[-1,31,[]],[-1,31,[]],[-1,31,[]],[-1,31,[]],[46,[[28,[2]]]],[-1,[[28,[-2]]],[],[]],[3,[[28,[1,47]]]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[9,[[28,[19]]]],[-1,[[28,[-2]]],[],[]],[46,[[28,[5]]]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[46,[[28,[6]]]],[-1,[[28,[-2]]],[],[]],[46,[[28,[7]]]],[-1,[[28,[-2]]],[],[]],[46,[[28,[10]]]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,48,[]],[-1,48,[]],[-1,48,[]],[-1,48,[]],[-1,48,[]],[-1,48,[]],[-1,48,[]],[-1,48,[]],[-1,48,[]],[5,22],[5,39],[1,3],0,[2,20],[5,20],[6,20],[22,1],[1,22],[1,22],[10,11],[1,39],[1,39],[1,22],[10,23],[1,39],[1,22],[10,18],[1,22],[[2,9,9,9],[[28,[6,37]]]],[[2,9,9,9,12],[[28,[6,37]]]],[[2,9,9,9,13],[[28,[6,37]]]],[[2,9,9,9,12],[[28,[6,37]]]],[[2,7],6],[2,18],[5,18],[6,18],0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[49,49],[50,50],[51,51],[52,52],[53,53],[54,54],[55,55],[56,56],[[-1,-2],8,[],[]],[[-1,-2],8,[],[]],[[-1,-2],8,[],[]],[[-1,-2],8,[],[]],[[-1,-2],8,[],[]],[[-1,-2],8,[],[]],[[-1,-2],8,[],[]],[[-1,-2],8,[],[]],[[49,26],[[28,[8,27]]]],[[50,26],[[28,[8,27]]]],[[51,26],[[28,[8,27]]]],[[52,26],[[28,[8,27]]]],[[53,26],[[28,[8,27]]]],[[54,26],[[28,[8,27]]]],[[55,26],[[28,[8,27]]]],[[56,26],[[28,[8,27]]]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[],57],[-1,[],57],[-1,[],57],[-1,[],57],[-1,[],57],[-1,[],57],[-1,[],57],[-1,[],57],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,48,[]],[-1,48,[]],[-1,48,[]],[-1,48,[]],[-1,48,[]],[-1,48,[]],[-1,48,[]],[-1,48,[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[37,37],[47,47],[58,58],[59,59],[60,60],[42,42],[61,61],[62,62],[[-1,-2],8,[],[]],[[-1,-2],8,[],[]],[[-1,-2],8,[],[]],[[-1,-2],8,[],[]],[[-1,-2],8,[],[]],[[-1,-2],8,[],[]],[[-1,-2],8,[],[]],[[-1,-2],8,[],[]],[[37,37],24],[[47,47],24],[[58,58],24],[[59,59],24],[[60,60],24],[[42,42],24],[[61,61],24],[[62,62],24],[[37,26],29],[[37,26],29],[[47,26],29],[[47,26],29],[[58,26],29],[[58,26],29],[[32,26],29],[[32,26],29],[[59,26],29],[[59,26],29],[[60,26],29],[[60,26],29],[[42,26],29],[[42,26],29],[[61,26],29],[[61,26],29],[[62,26],29],[[62,26],29],[[63,26],29],[[63,26],29],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[64,32],[-1,-1,[]],[-1,-1,[]],[62,42],[61,42],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[37,62],[60,63],[32,63],[59,63],[58,63],[61,63],[47,63],[37,63],[62,63],[-1,-1,[]],[42,63],[[37,-1],8,40],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[37,24],[37,38],[32,[[17,[65]]]],[42,[[17,[65]]]],[62,[[17,[65]]]],[63,[[17,[65]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,31,[]],[-1,31,[]],[-1,31,[]],[-1,31,[]],[-1,31,[]],[-1,31,[]],[-1,31,[]],[-1,31,[]],[-1,31,[]],[-1,31,[]],[62,[[28,[37]]]],[63,[[28,[37]]]],[-1,[[28,[-2]]],[],[]],[63,[[28,[47]]]],[-1,[[28,[-2]]],[],[]],[63,[[28,[58]]]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[63,[[28,[32]]]],[63,[[28,[59]]]],[-1,[[28,[-2]]],[],[]],[63,[[28,[60]]]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[63,[[28,[42]]]],[42,[[28,[61]]]],[63,[[28,[61]]]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[42,[[28,[62]]]],[63,[[28,[62]]]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,48,[]],[-1,48,[]],[-1,48,[]],[-1,48,[]],[-1,48,[]],[-1,48,[]],[-1,48,[]],[-1,48,[]],[-1,48,[]],[-1,48,[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,1,[]],[-1,1,[]],[-1,1,[]],[-1,1,[]],[-1,1,[]],[-1,1,[]],[-1,1,[]],[-1,3,[]],[-1,3,[]],[-1,3,[]],[-1,3,[]],[-1,3,[]],[-1,3,[]],[-1,3,[]],[-1,3,[]],[-1,1,[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[66,66],[67,67],[68,68],[[-1,-2],8,[],[]],[[-1,-2],8,[],[]],[[-1,-2],8,[],[]],[[66,[69,[66]]],24],[[66,67],24],[[66,66],24],[[67,68],24],[[67,66],24],[[67,67],24],[[68,[69,[68]]],24],[[68,67],24],[[68,68],24],[[66,26],29],[[67,26],29],[[68,26],29],[67,66],[-1,-1,[]],[[[69,[66]]],66],[-1,-1,[]],[-1,-1,[]],[[[70,[68]]],68],[66,68],[[[71,[[69,[0]]]]],68],[[[70,[66]]],68],[-1,68,[[72,[[69,[66]]]],34]],[66,68],[67,68],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[38,[[28,[[70,[66]],59]]]],[38,[[28,[[70,[66]],59]]]],[38,[[28,[68,59]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[68,[[28,[67]]]],[66,[[28,[67]]]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,48,[]],[-1,48,[]],[-1,48,[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,[73,73],[74,74],[75,75],[76,76],[77,77],[78,78],[79,79],[80,80],[81,81],[82,82],[83,83],[84,84],[85,85],[86,86],[87,87],[88,88],[89,89],[90,90],[91,91],[92,92],[93,93],[94,94],[95,95],[96,96],[[-1,-2],8,[],[]],[[-1,-2],8,[],[]],[[-1,-2],8,[],[]],[[-1,-2],8,[],[]],[[-1,-2],8,[],[]],[[-1,-2],8,[],[]],[[-1,-2],8,[],[]],[[-1,-2],8,[],[]],[[-1,-2],8,[],[]],[[-1,-2],8,[],[]],[[-1,-2],8,[],[]],[[-1,-2],8,[],[]],[[-1,-2],8,[],[]],[[-1,-2],8,[],[]],[[-1,-2],8,[],[]],[[-1,-2],8,[],[]],[[-1,-2],8,[],[]],[[-1,-2],8,[],[]],[[-1,-2],8,[],[]],[[-1,-2],8,[],[]],[[-1,-2],8,[],[]],[[-1,-2],8,[],[]],[[-1,-2],8,[],[]],[[-1,-2],8,[],[]],[97,93],0,[[],73],[[],73],[[],74],[[],75],[[],75],[[],76],[[],76],[[],77],[[],78],[[],78],[[],79],[[],80],[[],80],[[],81],[[],82],[[],82],[[],83],[[],83],[[],84],[[],84],[[],85],[[],85],[[],86],[[],86],[[],87],[[],88],[[],88],[[],89],[[],89],[[],90],[[],90],[[],91],[[],91],[[],92],[[],94],[[],95],[[],95],[[],96],[[],96],0,[[73,73],24],[[74,74],24],[[75,75],24],[[76,76],24],[[77,77],24],[[78,78],24],[[79,79],24],[[80,80],24],[[81,81],24],[[82,82],24],[[83,83],24],[[84,84],24],[[85,85],24],[[86,86],24],[[87,87],24],[[88,88],24],[[89,89],24],[[90,90],24],[[91,91],24],[[92,92],24],[[93,93],24],[[94,94],24],[[95,95],24],[[96,96],24],[[73,26],29],[[74,26],29],[[75,26],29],[[76,26],29],[[77,26],29],[[78,26],29],[[79,26],29],[[80,26],29],[[81,26],29],[[82,26],29],[[83,26],29],[[84,26],29],[[85,26],29],[[86,26],29],[[87,26],29],[[88,26],29],[[89,26],29],[[90,26],29],[[91,26],29],[[92,26],29],[[93,26],29],[[94,26],29],[[95,26],29],[[96,26],29],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,48,[]],[-1,48,[]],[-1,48,[]],[-1,48,[]],[-1,48,[]],[-1,48,[]],[-1,48,[]],[-1,48,[]],[-1,48,[]],[-1,48,[]],[-1,48,[]],[-1,48,[]],[-1,48,[]],[-1,48,[]],[-1,48,[]],[-1,48,[]],[-1,48,[]],[-1,48,[]],[-1,48,[]],[-1,48,[]],[-1,48,[]],[-1,48,[]],[-1,48,[]],[-1,48,[]],0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[98,98],[99,99],[100,100],[[-1,-2],8,[],[]],[[-1,-2],8,[],[]],[[-1,-2],8,[],[]],[[98,98],24],[[99,99],24],[[100,100],24],[[98,26],29],[[99,26],29],[[100,26],29],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,48,[]],[-1,48,[]],[-1,48,[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[101,101],[102,102],[103,103],[104,104],[[-1,-2],8,[],[]],[[-1,-2],8,[],[]],[[-1,-2],8,[],[]],[[-1,-2],8,[],[]],[105,106],[[101,101],24],[[102,102],24],[[103,103],24],[[104,104],24],[[101,26],29],[[102,26],29],[[103,26],29],[[104,26],29],[[105,26],29],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[105,102],105],[[105,101],105],[[105,104],105],[[105,103],105],[[105,24],105],[[105,24],105],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,48,[]],[-1,48,[]],[-1,48,[]],[-1,48,[]],[-1,48,[]],0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[46,46],[[-1,-2],8,[],[]],[46,[[17,[107]]]],[[46,26],29],[-1,-1,[]],[46,[[17,[107]]]],[46,[[17,[24]]]],[46,[[17,[9]]]],[-1,-2,[],[]],[46,[[17,[107]]]],[46,[[17,[18]]]],[46,[[17,[9]]]],[46,[[17,[9]]]],[46,[[17,[9]]]],[46,[[17,[19]]]],[[],46],[46,[[17,[11]]]],[46,[[17,[11]]]],[46,[[17,[11]]]],[46,[[17,[97]]]],[[46,[69,[9]],67],[[28,[[69,[9]],61]]]],[[46,[69,[9]],-1],[[28,[[69,[9]],61]]],0],[[46,[69,[9]],[69,[-1]]],[[28,[[69,[9]],61]]],0],[[[69,[9]],[69,[9]]],[[28,[[69,[9]],61]]]],[46,[[17,[9]]]],[[46,107],[[17,[8]]]],[[46,107],[[17,[8]]]],[[46,24],[[17,[8]]]],[[46,9],[[17,[8]]]],[[46,107],[[17,[8]]]],[[46,18],[[17,[8]]]],[[46,9],[[17,[8]]]],[[46,9],[[17,[8]]]],[[46,9],[[17,[8]]]],[[46,19],[[17,[8]]]],[[46,11],[[17,[8]]]],[[46,11],[[17,[8]]]],[[46,11],[[17,[8]]]],[[46,97],[[17,[8]]]],[[46,9],[[17,[8]]]],[[46,12],[[17,[8]]]],[[46,9],[[17,[8]]]],[[46,39],[[17,[8]]]],[[46,20],[[17,[8]]]],[[46,18],[[17,[8]]]],[[46,9],[[17,[8]]]],[46,[[17,[12]]]],[46,[[17,[9]]]],[-1,-2,[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,48,[]],[46,[[17,[39]]]],[46,[[17,[20]]]],[[46,107],[[17,[46]]]],[[46,107],[[17,[46]]]],[[46,24],[[17,[46]]]],[[46,9],[[17,[46]]]],[[46,107],[[17,[46]]]],[[46,18],[[17,[46]]]],[[46,9],[[17,[46]]]],[[46,9],[[17,[46]]]],[[46,9],[[17,[46]]]],[[46,19],[[17,[46]]]],[[46,11],[[17,[46]]]],[[46,11],[[17,[46]]]],[[46,11],[[17,[46]]]],[[46,97],[[17,[46]]]],[[46,9],[[17,[46]]]],[[46,12],[[17,[46]]]],[[46,9],[[17,[46]]]],[[46,39],[[17,[46]]]],[[46,20],[[17,[46]]]],[[46,18],[[17,[46]]]],[[46,9],[[17,[46]]]],[46,[[17,[18]]]],[46,[[17,[9]]]],[18,13],[[18,19],9],[18,24],[18,9]],"c":[704,706],"p":[[3,"Duration",0],[3,"Date",0],[3,"Duration",1627],[3,"Instant",0],[3,"OffsetDateTime",0],[3,"PrimitiveDateTime",0],[3,"Time",0],[15,"tuple"],[15,"u8"],[3,"UtcOffset",0],[15,"i8"],[15,"u32"],[15,"u16"],[3,"Instant",1628],[15,"f32"],[15,"f64"],[4,"Option",1629],[15,"i32"],[4,"Month",0],[4,"Weekday",0],[4,"Ordering",1630],[15,"i64"],[15,"i16"],[15,"bool"],[3,"SystemTime",1628],[3,"Formatter",1631],[3,"Error",1631],[4,"Result",1632],[6,"Result",1631],[3,"Metadata",1633],[3,"String",1634],[4,"Format",670],[8,"Formattable",1536],[8,"Sized",1635],[15,"usize"],[8,"Write",1636],[3,"ComponentRange",670],[15,"str"],[15,"i128"],[8,"Hasher",1637],[3,"FormatterOptions",1633],[4,"Parse",670],[8,"Parsable",1542],[8,"Iterator",1638],[8,"FnOnce",1639],[3,"Parsed",1542],[3,"ConversionRange",670],[3,"TypeId",1640],[3,"Nanosecond",566],[3,"Microsecond",566],[3,"Millisecond",566],[3,"Second",566],[3,"Minute",566],[3,"Hour",566],[3,"Day",566],[3,"Week",566],[8,"Copy",1635],[3,"DifferentVariant",670],[4,"InvalidFormatDescription",670],[3,"InvalidVariant",670],[4,"ParseFromDescription",670],[4,"TryFromParsed",670],[4,"Error",670],[3,"Error",1641],[8,"Error",1642],[4,"FormatItem",902],[4,"Component",902],[4,"OwnedFormatItem",902],[15,"slice"],[3,"Vec",1643],[3,"Box",1644],[8,"AsRef",1645],[3,"Day",990],[4,"MonthRepr",990],[3,"Month",990],[3,"Ordinal",990],[4,"WeekdayRepr",990],[3,"Weekday",990],[4,"WeekNumberRepr",990],[3,"WeekNumber",990],[4,"YearRepr",990],[3,"Year",990],[3,"Hour",990],[3,"Minute",990],[3,"Period",990],[3,"Second",990],[4,"SubsecondDigits",990],[3,"Subsecond",990],[3,"OffsetHour",990],[3,"OffsetMinute",990],[3,"OffsetSecond",990],[4,"Padding",990],[3,"Ignore",990],[4,"UnixTimestampPrecision",990],[3,"UnixTimestamp",990],[3,"End",990],[3,"NonZeroU16",1646],[3,"Iso8601",1399],[3,"Rfc2822",1399],[3,"Rfc3339",1399],[4,"FormattedComponents",1439],[4,"DateKind",1439],[4,"TimePrecision",1439],[4,"OffsetPrecision",1439],[3,"Config",1439],[6,"EncodedConfig",1439],[3,"NonZeroU8",1646],[6,"Result",0],[13,"NotSupported",871],[13,"UnclosedOpeningBracket",871],[13,"InvalidComponentName",871],[13,"InvalidModifier",871],[13,"MissingComponentName",871],[13,"MissingRequiredModifier",871],[13,"Expected",871],[8,"NumericalDuration",884],[8,"NumericalStdDuration",884],[13,"Hour",1533],[13,"Minute",1533],[13,"Second",1533]],"b":[[51,"impl-Add%3CDuration%3E-for-Date"],[52,"impl-Add%3CDuration%3E-for-Date"],[53,"impl-Add%3CDuration%3E-for-Duration"],[54,"impl-Add-for-Duration"],[55,"impl-Add%3CDuration%3E-for-Instant"],[56,"impl-Add%3CDuration%3E-for-Instant"],[57,"impl-Add%3CDuration%3E-for-OffsetDateTime"],[58,"impl-Add%3CDuration%3E-for-OffsetDateTime"],[59,"impl-Add%3CDuration%3E-for-PrimitiveDateTime"],[60,"impl-Add%3CDuration%3E-for-PrimitiveDateTime"],[61,"impl-Add%3CDuration%3E-for-Time"],[62,"impl-Add%3CDuration%3E-for-Time"],[63,"impl-AddAssign%3CDuration%3E-for-Date"],[64,"impl-AddAssign%3CDuration%3E-for-Date"],[65,"impl-AddAssign-for-Duration"],[66,"impl-AddAssign%3CDuration%3E-for-Duration"],[67,"impl-AddAssign%3CDuration%3E-for-Instant"],[68,"impl-AddAssign%3CDuration%3E-for-Instant"],[69,"impl-AddAssign%3CDuration%3E-for-OffsetDateTime"],[70,"impl-AddAssign%3CDuration%3E-for-OffsetDateTime"],[71,"impl-AddAssign%3CDuration%3E-for-PrimitiveDateTime"],[72,"impl-AddAssign%3CDuration%3E-for-PrimitiveDateTime"],[73,"impl-AddAssign%3CDuration%3E-for-Time"],[74,"impl-AddAssign%3CDuration%3E-for-Time"],[158,"impl-Div%3Ci32%3E-for-Duration"],[159,"impl-Div%3Cf32%3E-for-Duration"],[160,"impl-Div%3Cu16%3E-for-Duration"],[161,"impl-Div%3Cf64%3E-for-Duration"],[162,"impl-Div%3Cu8%3E-for-Duration"],[163,"impl-Div-for-Duration"],[164,"impl-Div%3CDuration%3E-for-Duration"],[165,"impl-Div%3Ci16%3E-for-Duration"],[166,"impl-Div%3Ci8%3E-for-Duration"],[167,"impl-Div%3Cu32%3E-for-Duration"],[168,"impl-DivAssign%3Ci8%3E-for-Duration"],[169,"impl-DivAssign%3Cf64%3E-for-Duration"],[170,"impl-DivAssign%3Cu8%3E-for-Duration"],[171,"impl-DivAssign%3Ci16%3E-for-Duration"],[172,"impl-DivAssign%3Cf32%3E-for-Duration"],[173,"impl-DivAssign%3Ci32%3E-for-Duration"],[174,"impl-DivAssign%3Cu32%3E-for-Duration"],[175,"impl-DivAssign%3Cu16%3E-for-Duration"],[178,"impl-PartialEq%3CDuration%3E-for-Duration"],[179,"impl-PartialEq-for-Duration"],[180,"impl-PartialEq%3CInstant%3E-for-Instant"],[181,"impl-PartialEq-for-Instant"],[183,"impl-PartialEq-for-OffsetDateTime"],[184,"impl-PartialEq%3CSystemTime%3E-for-OffsetDateTime"],[191,"impl-Debug-for-Date"],[192,"impl-Display-for-Date"],[193,"impl-Display-for-Duration"],[194,"impl-Debug-for-Duration"],[196,"impl-Debug-for-Month"],[197,"impl-SmartDisplay-for-Month"],[198,"impl-Display-for-Month"],[199,"impl-Display-for-OffsetDateTime"],[200,"impl-Debug-for-OffsetDateTime"],[201,"impl-Display-for-PrimitiveDateTime"],[202,"impl-Debug-for-PrimitiveDateTime"],[203,"impl-Debug-for-Time"],[204,"impl-Display-for-Time"],[205,"impl-Debug-for-UtcOffset"],[206,"impl-Display-for-UtcOffset"],[207,"impl-Debug-for-Weekday"],[208,"impl-SmartDisplay-for-Weekday"],[209,"impl-Display-for-Weekday"],[312,"impl-Mul%3Cf64%3E-for-Duration"],[313,"impl-Mul%3Ci32%3E-for-Duration"],[314,"impl-Mul%3Cu8%3E-for-Duration"],[315,"impl-Mul%3Ci8%3E-for-Duration"],[316,"impl-Mul%3Ci16%3E-for-Duration"],[317,"impl-Mul%3Cf32%3E-for-Duration"],[318,"impl-Mul%3Cu16%3E-for-Duration"],[319,"impl-Mul%3Cu32%3E-for-Duration"],[320,"impl-MulAssign%3Cu16%3E-for-Duration"],[321,"impl-MulAssign%3Ci16%3E-for-Duration"],[322,"impl-MulAssign%3Ci8%3E-for-Duration"],[323,"impl-MulAssign%3Ci32%3E-for-Duration"],[324,"impl-MulAssign%3Cf32%3E-for-Duration"],[325,"impl-MulAssign%3Cu32%3E-for-Duration"],[326,"impl-MulAssign%3Cf64%3E-for-Duration"],[327,"impl-MulAssign%3Cu8%3E-for-Duration"],[365,"impl-PartialOrd%3CDuration%3E-for-Duration"],[366,"impl-PartialOrd-for-Duration"],[367,"impl-PartialOrd%3CInstant%3E-for-Instant"],[368,"impl-PartialOrd-for-Instant"],[369,"impl-PartialOrd-for-OffsetDateTime"],[370,"impl-PartialOrd%3CSystemTime%3E-for-OffsetDateTime"],[429,"impl-Sub-for-Date"],[430,"impl-Sub%3CDuration%3E-for-Date"],[431,"impl-Sub%3CDuration%3E-for-Date"],[432,"impl-Sub-for-Duration"],[433,"impl-Sub%3CDuration%3E-for-Duration"],[434,"impl-Sub%3CDuration%3E-for-Instant"],[435,"impl-Sub%3CInstant%3E-for-Instant"],[436,"impl-Sub%3CDuration%3E-for-Instant"],[437,"impl-Sub-for-Instant"],[438,"impl-Sub%3CDuration%3E-for-OffsetDateTime"],[439,"impl-Sub-for-OffsetDateTime"],[440,"impl-Sub%3CDuration%3E-for-OffsetDateTime"],[441,"impl-Sub%3CSystemTime%3E-for-OffsetDateTime"],[442,"impl-Sub%3CDuration%3E-for-PrimitiveDateTime"],[443,"impl-Sub%3CDuration%3E-for-PrimitiveDateTime"],[444,"impl-Sub-for-PrimitiveDateTime"],[445,"impl-Sub%3CDuration%3E-for-Time"],[446,"impl-Sub%3CDuration%3E-for-Time"],[447,"impl-Sub-for-Time"],[448,"impl-SubAssign%3CDuration%3E-for-Date"],[449,"impl-SubAssign%3CDuration%3E-for-Date"],[450,"impl-SubAssign%3CDuration%3E-for-Duration"],[451,"impl-SubAssign-for-Duration"],[452,"impl-SubAssign%3CDuration%3E-for-Instant"],[453,"impl-SubAssign%3CDuration%3E-for-Instant"],[454,"impl-SubAssign%3CDuration%3E-for-OffsetDateTime"],[455,"impl-SubAssign%3CDuration%3E-for-OffsetDateTime"],[456,"impl-SubAssign%3CDuration%3E-for-PrimitiveDateTime"],[457,"impl-SubAssign%3CDuration%3E-for-PrimitiveDateTime"],[458,"impl-SubAssign%3CDuration%3E-for-Time"],[459,"impl-SubAssign%3CDuration%3E-for-Time"],[463,"impl-Sum-for-Duration"],[464,"impl-Sum%3C%26Duration%3E-for-Duration"],[751,"impl-Debug-for-ComponentRange"],[752,"impl-Display-for-ComponentRange"],[753,"impl-Debug-for-ConversionRange"],[754,"impl-Display-for-ConversionRange"],[755,"impl-Display-for-DifferentVariant"],[756,"impl-Debug-for-DifferentVariant"],[757,"impl-Display-for-Format"],[758,"impl-Debug-for-Format"],[759,"impl-Display-for-InvalidFormatDescription"],[760,"impl-Debug-for-InvalidFormatDescription"],[761,"impl-Debug-for-InvalidVariant"],[762,"impl-Display-for-InvalidVariant"],[763,"impl-Display-for-Parse"],[764,"impl-Debug-for-Parse"],[765,"impl-Display-for-ParseFromDescription"],[766,"impl-Debug-for-ParseFromDescription"],[767,"impl-Debug-for-TryFromParsed"],[768,"impl-Display-for-TryFromParsed"],[769,"impl-Display-for-Error"],[770,"impl-Debug-for-Error"],[778,"impl-From%3CTryFromParsed%3E-for-Parse"],[779,"impl-From%3CParseFromDescription%3E-for-Parse"],[784,"impl-From%3CInvalidVariant%3E-for-Error"],[785,"impl-From%3CFormat%3E-for-Error"],[786,"impl-From%3CInvalidFormatDescription%3E-for-Error"],[787,"impl-From%3CDifferentVariant%3E-for-Error"],[788,"impl-From%3CParseFromDescription%3E-for-Error"],[789,"impl-From%3CConversionRange%3E-for-Error"],[790,"impl-From%3CComponentRange%3E-for-Error"],[791,"impl-From%3CTryFromParsed%3E-for-Error"],[793,"impl-From%3CParse%3E-for-Error"],[829,"impl-TryFrom%3CTryFromParsed%3E-for-ComponentRange"],[830,"impl-TryFrom%3CError%3E-for-ComponentRange"],[844,"impl-TryFrom%3CParse%3E-for-ParseFromDescription"],[845,"impl-TryFrom%3CError%3E-for-ParseFromDescription"],[848,"impl-TryFrom%3CParse%3E-for-TryFromParsed"],[849,"impl-TryFrom%3CError%3E-for-TryFromParsed"],[944,"impl-PartialEq%3C%26%5BBorrowedFormatItem%3C\'_%3E%5D%3E-for-BorrowedFormatItem%3C\'_%3E"],[945,"impl-PartialEq%3CComponent%3E-for-BorrowedFormatItem%3C\'_%3E"],[946,"impl-PartialEq-for-BorrowedFormatItem%3C\'a%3E"],[947,"impl-PartialEq%3COwnedFormatItem%3E-for-Component"],[948,"impl-PartialEq%3CBorrowedFormatItem%3C\'_%3E%3E-for-Component"],[949,"impl-PartialEq-for-Component"],[950,"impl-PartialEq%3C%26%5BOwnedFormatItem%5D%3E-for-OwnedFormatItem"],[951,"impl-PartialEq%3CComponent%3E-for-OwnedFormatItem"],[952,"impl-PartialEq-for-OwnedFormatItem"],[956,"impl-From%3CComponent%3E-for-BorrowedFormatItem%3C\'_%3E"],[958,"impl-From%3C%26%5BBorrowedFormatItem%3C\'_%3E%5D%3E-for-BorrowedFormatItem%3C\'a%3E"],[961,"impl-From%3CVec%3COwnedFormatItem%3E%3E-for-OwnedFormatItem"],[962,"impl-From%3C%26BorrowedFormatItem%3C\'_%3E%3E-for-OwnedFormatItem"],[963,"impl-From%3CBox%3C%5BItem%3C\'a%3E%5D%3E%3E-for-OwnedFormatItem"],[964,"impl-From%3CVec%3CBorrowedFormatItem%3C\'_%3E%3E%3E-for-OwnedFormatItem"],[965,"impl-From%3C%26T%3E-for-OwnedFormatItem"],[966,"impl-From%3CBorrowedFormatItem%3C\'_%3E%3E-for-OwnedFormatItem"],[967,"impl-From%3CComponent%3E-for-OwnedFormatItem"],[980,"impl-TryFrom%3COwnedFormatItem%3E-for-Component"],[981,"impl-TryFrom%3CBorrowedFormatItem%3C\'_%3E%3E-for-Component"],[1144,"impl-Default-for-Day"],[1145,"impl-Day"],[1147,"impl-Default-for-Month"],[1148,"impl-Month"],[1149,"impl-Ordinal"],[1150,"impl-Default-for-Ordinal"],[1152,"impl-Default-for-Weekday"],[1153,"impl-Weekday"],[1155,"impl-Default-for-WeekNumber"],[1156,"impl-WeekNumber"],[1158,"impl-Year"],[1159,"impl-Default-for-Year"],[1160,"impl-Hour"],[1161,"impl-Default-for-Hour"],[1162,"impl-Default-for-Minute"],[1163,"impl-Minute"],[1164,"impl-Period"],[1165,"impl-Default-for-Period"],[1166,"impl-Default-for-Second"],[1167,"impl-Second"],[1169,"impl-Subsecond"],[1170,"impl-Default-for-Subsecond"],[1171,"impl-Default-for-OffsetHour"],[1172,"impl-OffsetHour"],[1173,"impl-Default-for-OffsetMinute"],[1174,"impl-OffsetMinute"],[1175,"impl-OffsetSecond"],[1176,"impl-Default-for-OffsetSecond"],[1179,"impl-Default-for-UnixTimestamp"],[1180,"impl-UnixTimestamp"],[1181,"impl-Default-for-End"],[1182,"impl-End"]],"a":{"encodedconfig":[1440],"from_julian_date":[245],"iso_weekday_number":[352],"parseable":[1542]}},\
"time_core":{"doc":"Core items for <code>time</code>.","t":"AADDDDDDDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFFF","n":["convert","util","Day","Hour","Microsecond","Millisecond","Minute","Nanosecond","Second","Week","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone","clone","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","into","into","into","into","into","into","into","into","per","per","per","per","per","per","per","per","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","days_in_year","is_leap_year","weeks_in_year"],"q":[[0,"time_core"],[2,"time_core::convert"],[90,"time_core::util"],[93,"core::fmt"],[94,"core::fmt"],[95,"core::result"],[96,"core::any"]],"d":["Conversion between units of time.","Utility functions.","A unit of time representing exactly one day.","A unit of time representing exactly one hour.","A unit of time representing exactly one microsecond.","A unit of time representing exactly one millisecond.","A unit of time representing exactly one minute.","A unit of time representing exactly one nanosecond.","A unit of time representing exactly one second.","A unit of time representing exactly one week.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Obtain the number of times <code>Nanosecond</code> can fit into <code>T</code>. If <code>T</code> …","Obtain the number of times <code>Microsecond</code> can fit into <code>T</code>. If <code>T</code>…","Obtain the number of times <code>Millisecond</code> can fit into <code>T</code>. If <code>T</code>…","Obtain the number of times <code>Second</code> can fit into <code>T</code>. If <code>T</code> is …","Obtain the number of times <code>Minute</code> can fit into <code>T</code>. If <code>T</code> is …","Obtain the number of times <code>Hour</code> can fit into <code>T</code>. If <code>T</code> is …","Obtain the number of times <code>Day</code> can fit into <code>T</code>. If <code>T</code> is …","Obtain the number of times <code>Week</code> can fit into <code>T</code>. If <code>T</code> is …","","","","","","","","","","","","","","","","","","","","","","","","","Get the number of calendar days in a given year.","Returns if the provided year is a leap year in the …","Get the number of weeks in the ISO year."],"i":[0,0,0,0,0,0,0,0,0,0,1,2,3,4,5,6,7,8,1,2,3,4,5,6,7,8,1,2,3,4,5,6,7,8,1,2,3,4,5,6,7,8,1,2,3,4,5,6,7,8,1,2,3,4,5,6,7,8,1,2,3,4,5,6,7,8,1,2,3,4,5,6,7,8,1,2,3,4,5,6,7,8,1,2,3,4,5,6,7,8,0,0,0],"f":[0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[1,1],[2,2],[3,3],[4,4],[5,5],[6,6],[7,7],[8,8],[[1,9],10],[[2,9],10],[[3,9],10],[[4,9],10],[[5,9],10],[[6,9],10],[[7,9],10],[[8,9],10],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[],11],[-1,[],11],[-1,[],11],[-1,[],11],[-1,[],11],[-1,[],11],[-1,[],11],[-1,[],11],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,13,[]],[-1,13,[]],[-1,13,[]],[-1,13,[]],[-1,13,[]],[-1,13,[]],[-1,13,[]],[-1,13,[]],[14,15],[14,16],[14,17]],"c":[],"p":[[3,"Nanosecond",2],[3,"Microsecond",2],[3,"Millisecond",2],[3,"Second",2],[3,"Minute",2],[3,"Hour",2],[3,"Day",2],[3,"Week",2],[3,"Formatter",93],[6,"Result",93],[8,"Copy",94],[4,"Result",95],[3,"TypeId",96],[15,"i32"],[15,"u16"],[15,"bool"],[15,"u8"]],"b":[]},\
"time_macros":{"doc":"","t":"OOOOO","n":["date","datetime","format_description","offset","time"],"q":[[0,"time_macros"]],"d":["","","","",""],"i":[0,0,0,0,0],"f":[0,0,0,0,0],"c":[],"p":[],"b":[]},\
"unicode_ident":{"doc":"github crates-io docs-rs","t":"FF","n":["is_xid_continue","is_xid_start"],"q":[[0,"unicode_ident"]],"d":["",""],"i":[0,0],"f":[[1,2],[1,2]],"c":[],"p":[[15,"char"],[15,"bool"]],"b":[]},\
"uuid":{"doc":"Generate and parse universally unique identifiers (UUIDs).","t":"DGCNNDNNNNNSSSSNNCNNNNNCDEELLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLALLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLALLLLALLLLLLLLLLLLLLLLLLLLLLLLLLLLLLOLLDDSSSSDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLAFFIQDRLLLLALLLLLKLLLLLLLLLDLLLLLLLLLLLLL","n":["Builder","Bytes","ClockSequence","Custom","Dce","Error","Future","Mac","Max","Md5","Microsoft","NAMESPACE_DNS","NAMESPACE_OID","NAMESPACE_URL","NAMESPACE_X500","NCS","Nil","NoContext","RFC4122","Random","Sha1","SortMac","SortRand","Timestamp","Uuid","Variant","Version","as_braced","as_bytes","as_fields","as_hyphenated","as_ref","as_simple","as_u128","as_u64_pair","as_urn","as_uuid","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","braced","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","cmp","default","deserialize","encode_buffer","eq","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from_bytes","from_bytes","from_bytes_le","from_bytes_le","from_bytes_ref","from_custom_bytes","from_fields","from_fields","from_fields_le","from_fields_le","from_md5_bytes","from_random_bytes","from_rfc4122_timestamp","from_sha1_bytes","from_slice","from_slice","from_slice_le","from_slice_le","from_sorted_rfc4122_timestamp","from_str","from_u128","from_u128","from_u128_le","from_u128_le","from_u64_pair","from_unix_timestamp_millis","get_timestamp","get_variant","get_version","get_version_num","hash","hash","hyphenated","into","into","into","into","into","into_bytes","into_uuid","is_max","is_nil","max","new_v4","nil","nil","parse_str","partial_cmp","serde","serialize","set_variant","set_version","simple","timestamp","to_bytes_le","to_fields_le","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","to_u128_le","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_parse","try_parse_ascii","type_id","type_id","type_id","type_id","type_id","urn","uuid","with_variant","with_version","Braced","Hyphenated","LENGTH","LENGTH","LENGTH","LENGTH","Simple","Urn","as_ref","as_ref","as_ref","as_ref","as_uuid","as_uuid","as_uuid","as_uuid","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","cmp","cmp","cmp","cmp","default","default","default","default","encode_lower","encode_lower","encode_lower","encode_lower","encode_upper","encode_upper","encode_upper","encode_upper","eq","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from_uuid","from_uuid","from_uuid","from_uuid","hash","hash","hash","hash","into","into","into","into","into_uuid","into_uuid","into_uuid","into_uuid","partial_cmp","partial_cmp","partial_cmp","partial_cmp","serialize","serialize","serialize","serialize","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","compact","deserialize","serialize","ClockSequence","Output","Timestamp","UUID_TICKS_BETWEEN_EPOCHS","borrow","borrow_mut","clone","clone_into","context","eq","fmt","from","from_rfc4122","from_unix","generate_sequence","hash","into","now","to_owned","to_unix","to_unix_nanos","try_from","try_into","type_id","NoContext","borrow","borrow_mut","clone","clone_into","default","fmt","from","generate_sequence","into","to_owned","try_from","try_into","type_id"],"q":[[0,"uuid"],[171,"uuid::fmt"],[295,"uuid::serde"],[296,"uuid::serde::compact"],[298,"uuid::timestamp"],[322,"uuid::timestamp::context"],[336,"core::cmp"],[337,"core::result"],[338,"serde::de"],[339,"core::fmt"],[340,"core::fmt"],[341,"core::hash"],[342,"serde::ser"],[343,"alloc::string"],[344,"alloc::vec"],[345,"core::any"]],"d":["A builder for creating a UUID.","A 128-bit (16 byte) buffer containing the UUID.","","Version 8: Custom.","Version 2: DCE Security.","A general error that can occur when working with UUIDs.","Reserved for future expansion.","Version 1: Timestamp and node ID.","The “max” (all ones) UUID.","Version 3: MD5 hash.","Reserved by Microsoft for backward compatibility.","UUID namespace for Domain Name System (DNS).","UUID namespace for ISO Object Identifiers (OIDs).","UUID namespace for Uniform Resource Locators (URLs).","UUID namespace for X.500 Distinguished Names (DNs).","Reserved by the NCS for backward compatibility.","The “nil” (all zeros) UUID.","","As described in the RFC4122 Specification (default).","Version 4: Random.","Version 5: SHA-1 hash.","Version 6: Sortable Timestamp and node ID.","Version 7: Timestamp and random.","","A Universally Unique Identifier (UUID).","The reserved variants of UUIDs.","The version of the UUID, denoting the generating algorithm.","Get a borrowed <code>Braced</code> formatter.","Returns a slice of 16 octets containing the value.","Returns the four field values of the UUID.","Get a borrowed <code>Hyphenated</code> formatter.","","Get a borrowed <code>Simple</code> formatter.","Returns a 128bit value containing the value.","Returns two 64bit values containing the value.","Get a borrowed <code>Urn</code> formatter.","Get a reference to the underlying <code>Uuid</code>.","","","","","","","","","","","Get a <code>Braced</code> formatter.","","","","","","","","","","","","A buffer that can be used for <code>encode_...</code> calls, that is …","","","","","Adapters for alternative string formats.","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Returns the argument unchanged.","Creates a <code>Builder</code> using the supplied bytes.","Creates a UUID using the supplied bytes.","Creates a <code>Builder</code> using the supplied bytes in little …","Creates a UUID using the supplied bytes in little endian …","Creates a reference to a UUID from a reference to the …","Creates a <code>Builder</code> for a version 8 UUID using the supplied …","Creates a <code>Builder</code> from four field values.","Creates a UUID from four field values.","Creates a <code>Builder</code> from four field values.","Creates a UUID from four field values in little-endian …","Creates a <code>Builder</code> for a version 3 UUID using the supplied …","Creates a <code>Builder</code> for a version 4 UUID using the supplied …","Creates a <code>Builder</code> for a version 1 UUID using the supplied …","Creates a <code>Builder</code> for a version 5 UUID using the supplied …","Creates a <code>Builder</code> using the supplied bytes.","Creates a UUID using the supplied bytes.","Creates a <code>Builder</code> using the supplied bytes in little …","Creates a UUID using the supplied bytes in little endian …","Creates a <code>Builder</code> for a version 6 UUID using the supplied …","","Creates a <code>Builder</code> from a 128bit value.","Creates a UUID from a 128bit value.","Creates a UUID from a 128bit value in little-endian order.","Creates a UUID from a 128bit value in little-endian order.","Creates a UUID from two 64bit values.","Creates a <code>Builder</code> for a version 7 UUID using the supplied …","If the UUID is the correct version (v1, v6, or v7) this …","Returns the variant of the UUID structure.","Returns the version of the UUID.","Returns the version number of the UUID.","","","Get a <code>Hyphenated</code> formatter.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Consumes self and returns the underlying byte value of the …","Convert the builder into a <code>Uuid</code>.","Tests if the UUID is max (all ones).","Tests if the UUID is nil (all zeros).","The ‘max UUID’ (all ones).","Creates a random UUID.","Creates a <code>Builder</code> with an initial <code>Uuid::nil</code>.","The ‘nil UUID’ (all zeros).","Parses a <code>Uuid</code> from a string of hexadecimal digits with …","","Adapters for alternative <code>serde</code> formats.","","Specifies the variant of the UUID.","Specifies the version number of the UUID.","Get a <code>Simple</code> formatter.","Generating UUIDs from timestamps.","Returns the bytes of the UUID in little-endian order.","Returns the four field values of the UUID in little-endian …","","","","","","","","Returns a 128bit little-endian value containing the value.","","","","","","","","","","","","","Parses a <code>Uuid</code> from a string of hexadecimal digits with …","Parses a <code>Uuid</code> from a string of hexadecimal digits with …","","","","","","Get a <code>Urn</code> formatter.","Parse <code>Uuid</code>s from string literals at compile time.","Specifies the variant of the UUID.","Specifies the version number of the UUID.","Format a <code>Uuid</code> as a braced hyphenated string, like …","Format a <code>Uuid</code> as a hyphenated string, like …","The length of a hyphenated <code>Uuid</code> string.","The length of a simple <code>Uuid</code> string.","The length of a URN <code>Uuid</code> string.","The length of a braced <code>Uuid</code> string.","Format a <code>Uuid</code> as a simple string, like …","Format a <code>Uuid</code> as a URN string, like …","","","","","Get a reference to the underlying <code>Uuid</code>.","Get a reference to the underlying <code>Uuid</code>.","Get a reference to the underlying <code>Uuid</code>.","Get a reference to the underlying <code>Uuid</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Writes the <code>Uuid</code> as a lower-case hyphenated string to <code>buffer</code>…","Writes the <code>Uuid</code> as a lower-case simple string to <code>buffer</code>, …","Writes the <code>Uuid</code> as a lower-case URN string to <code>buffer</code>, and …","Writes the <code>Uuid</code> as a lower-case hyphenated string …","Writes the <code>Uuid</code> as an upper-case hyphenated string to …","Writes the <code>Uuid</code> as an upper-case simple string to <code>buffer</code>, …","Writes the <code>Uuid</code> as an upper-case URN string to <code>buffer</code>, and …","Writes the <code>Uuid</code> as an upper-case hyphenated string …","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","Creates a <code>Hyphenated</code> from a <code>Uuid</code>.","Creates a <code>Simple</code> from a <code>Uuid</code>.","Creates a <code>Urn</code> from a <code>Uuid</code>.","Creates a <code>Braced</code> from a <code>Uuid</code>.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Consumes the <code>Hyphenated</code>, returning the underlying <code>Uuid</code>.","Consumes the <code>Simple</code>, returning the underlying <code>Uuid</code>.","Consumes the <code>Urn</code>, returning the underlying <code>Uuid</code>.","Consumes the <code>Braced</code>, returning the underlying <code>Uuid</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Serialize a <code>Uuid</code> as a <code>[u8; 16]</code>.","Deserialize a <code>[u8; 16]</code> as a <code>Uuid</code>","Serialize from a <code>Uuid</code> as a <code>[u8; 16]</code>","A counter that can be used by version 1 and version 6 …","The type of sequence returned by this counter.","A timestamp that can be encoded into a UUID.","The number of 100 nanosecond ticks between the RFC4122 …","","","","","Default implementations for the <code>ClockSequence</code> trait.","","","Returns the argument unchanged.","Construct a <code>Timestamp</code> from an RFC4122 timestamp and …","Construct a <code>Timestamp</code> from a Unix timestamp, as used in …","Get the next value in the sequence to feed into a …","","Calls <code>U::from(self)</code>.","Get a timestamp representing the current system time.","","Get the value of the timestamp as a Unix timestamp, as …","Get the number of fractional nanoseconds in the Unix …","","","","An empty counter that will always return the value <code>0</code>.","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","",""],"i":[0,0,0,17,17,0,18,17,17,17,18,1,1,1,1,18,17,0,18,17,17,17,17,0,0,0,0,1,1,1,1,1,1,1,1,1,15,15,16,17,18,1,15,16,17,18,1,1,16,17,18,1,16,17,18,1,1,1,1,1,16,17,18,1,0,15,16,16,17,18,18,1,1,1,1,15,16,17,18,1,1,1,1,1,15,1,15,1,1,15,15,1,15,1,15,15,15,15,15,1,15,1,15,1,15,1,15,1,1,15,1,1,1,1,16,1,1,15,16,17,18,1,1,15,1,1,1,1,15,1,1,1,0,1,15,15,1,0,1,1,16,17,18,1,16,18,1,1,15,16,17,18,1,1,1,15,16,17,18,1,1,1,15,16,17,18,1,1,0,15,15,0,0,9,11,14,2,0,0,9,11,14,2,9,11,14,2,9,9,11,11,14,14,2,2,9,11,14,2,9,11,14,2,9,11,14,2,9,11,14,2,9,11,14,2,9,11,14,2,9,11,14,2,9,11,14,2,9,9,9,9,11,11,11,11,14,14,14,14,2,2,2,2,9,9,11,11,14,14,2,2,9,11,14,2,9,11,14,2,9,11,14,2,9,11,14,2,9,11,14,2,9,11,14,2,9,11,14,2,9,11,14,2,9,11,14,2,9,11,14,2,9,11,14,2,0,0,0,0,34,0,0,26,26,26,26,0,26,26,26,26,26,34,26,26,26,26,26,26,26,26,26,0,35,35,35,35,35,35,35,35,35,35,35,35,35],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[1,2],[1,3],[1,[[8,[4,5,5,[7,[6]]]]]],[1,9],[1,[[10,[6]]]],[1,11],[1,12],[1,[[8,[13,13]]]],[1,14],[15,1],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[1,2],[16,16],[17,17],[18,18],[1,1],[[-1,-2],8,[],[]],[[-1,-2],8,[],[]],[[-1,-2],8,[],[]],[[-1,-2],8,[],[]],[[1,1],19],[[],1],[-1,[[20,[1]]],21],[[],[[7,[6]]]],[[16,16],22],[[17,17],22],[[18,18],22],[[1,1],22],0,[[15,23],24],[[16,23],24],[[16,23],24],[[17,23],24],[[18,23],24],[[18,23],24],[[1,23],24],[[1,23],24],[[1,23],24],[[1,23],24],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[9,1],[2,1],[11,1],[14,1],[-1,-1,[]],[3,15],[3,1],[3,15],[3,1],[3,1],[3,15],[[4,5,5,[7,[6]]],15],[[4,5,5,[7,[6]]],1],[[4,5,5,[7,[6]]],15],[[4,5,5,[7,[6]]],1],[3,15],[3,15],[[13,5,[7,[6]]],15],[3,15],[[[10,[6]]],[[20,[15,16]]]],[[[10,[6]]],[[20,[1,16]]]],[[[10,[6]]],[[20,[15,16]]]],[[[10,[6]]],[[20,[1,16]]]],[[13,5,[7,[6]]],15],[25,[[20,[1]]]],[12,15],[12,1],[12,15],[12,1],[[13,13],1],[[13,[7,[6]]],15],[1,[[27,[26]]]],[1,18],[1,[[27,[17]]]],[1,28],[[16,-1],8,29],[[1,-1],8,29],[1,9],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[1,3],[15,1],[1,22],[1,22],[[],1],[[],1],[[],15],[[],1],[25,[[20,[1,16]]]],[[1,1],[[27,[19]]]],0,[[1,-1],20,30],[[15,18],15],[[15,17],15],[1,11],0,[1,3],[1,[[8,[4,5,5,[7,[6]]]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,31,[]],[-1,31,[]],[-1,31,[]],[1,12],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[[[32,[6]]],[[20,[1]]]],[-1,[[20,[-2]]],[],[]],[25,[[20,[1]]]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[25,[[20,[1,16]]]],[[[10,[6]]],[[20,[1,16]]]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[1,14],0,[[15,18],15],[[15,17],15],0,0,0,0,0,0,0,0,[9,1],[11,1],[14,1],[2,1],[9,1],[11,1],[14,1],[2,1],[9,1],[-1,-2,[],[]],[11,1],[-1,-2,[],[]],[-1,-2,[],[]],[14,1],[-1,-2,[],[]],[2,1],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[9,9],[11,11],[14,14],[2,2],[[-1,-2],8,[],[]],[[-1,-2],8,[],[]],[[-1,-2],8,[],[]],[[-1,-2],8,[],[]],[[9,9],19],[[11,11],19],[[14,14],19],[[2,2],19],[[],9],[[],11],[[],14],[[],2],[[9,[10,[6]]],25],[[11,[10,[6]]],25],[[14,[10,[6]]],25],[[2,[10,[6]]],25],[[9,[10,[6]]],25],[[11,[10,[6]]],25],[[14,[10,[6]]],25],[[2,[10,[6]]],25],[[9,9],22],[[11,11],22],[[14,14],22],[[2,2],22],[[9,23],24],[[9,23],24],[[9,23],24],[[9,23],24],[[11,23],24],[[11,23],24],[[11,23],24],[[11,23],24],[[14,23],24],[[14,23],24],[[14,23],24],[[14,23],24],[[2,23],24],[[2,23],24],[[2,23],24],[[2,23],24],[1,9],[-1,-1,[]],[1,11],[-1,-1,[]],[1,14],[-1,-1,[]],[1,2],[-1,-1,[]],[1,9],[1,11],[1,14],[1,2],[[9,-1],8,29],[[11,-1],8,29],[[14,-1],8,29],[[2,-1],8,29],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[9,1],[11,1],[14,1],[2,1],[[9,9],[[27,[19]]]],[[11,11],[[27,[19]]]],[[14,14],[[27,[19]]]],[[2,2],[[27,[19]]]],[[9,-1],20,30],[[11,-1],20,30],[[14,-1],20,30],[[2,-1],20,30],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,31,[]],[-1,31,[]],[-1,31,[]],[-1,31,[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],0,[-1,[[20,[1]]],21],[[1,-1],20,30],0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[26,26],[[-1,-2],8,[],[]],0,[[26,26],22],[[26,23],24],[-1,-1,[]],[[13,5],26],[[-1,13,4],26,34],[[-1,13,4],[],[]],[[26,-1],8,29],[-1,-2,[],[]],[-1,26,34],[-1,-2,[],[]],[26,[[8,[13,4]]]],[26,4],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,33,[]],0,[-1,-2,[],[]],[-1,-2,[],[]],[35,35],[[-1,-2],8,[],[]],[[],35],[[35,23],24],[-1,-1,[]],[[35,13,4]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,33,[]]],"c":[318],"p":[[3,"Uuid",0],[3,"Braced",171],[6,"Bytes",0],[15,"u32"],[15,"u16"],[15,"u8"],[15,"array"],[15,"tuple"],[3,"Hyphenated",171],[15,"slice"],[3,"Simple",171],[15,"u128"],[15,"u64"],[3,"Urn",171],[3,"Builder",0],[3,"Error",0],[4,"Version",0],[4,"Variant",0],[4,"Ordering",336],[4,"Result",337],[8,"Deserializer",338],[15,"bool"],[3,"Formatter",339],[6,"Result",339],[15,"str"],[3,"Timestamp",298],[4,"Option",340],[15,"usize"],[8,"Hasher",341],[8,"Serializer",342],[3,"String",343],[3,"Vec",344],[3,"TypeId",345],[8,"ClockSequence",298],[3,"NoContext",322]],"b":[[66,"impl-Debug-for-Error"],[67,"impl-Display-for-Error"],[69,"impl-Debug-for-Variant"],[70,"impl-Display-for-Variant"],[71,"impl-UpperHex-for-Uuid"],[72,"impl-Display-for-Uuid"],[73,"impl-Debug-for-Uuid"],[74,"impl-LowerHex-for-Uuid"],[79,"impl-From%3CHyphenated%3E-for-Uuid"],[80,"impl-From%3CBraced%3E-for-Uuid"],[81,"impl-From%3CSimple%3E-for-Uuid"],[82,"impl-From%3CUrn%3E-for-Uuid"],[152,"impl-TryFrom%3CVec%3Cu8%3E%3E-for-Uuid"],[154,"impl-TryFrom%3C%26str%3E-for-Uuid"],[227,"impl-Display-for-Hyphenated"],[228,"impl-LowerHex-for-Hyphenated"],[229,"impl-Debug-for-Hyphenated"],[230,"impl-UpperHex-for-Hyphenated"],[231,"impl-UpperHex-for-Simple"],[232,"impl-LowerHex-for-Simple"],[233,"impl-Debug-for-Simple"],[234,"impl-Display-for-Simple"],[235,"impl-Debug-for-Urn"],[236,"impl-LowerHex-for-Urn"],[237,"impl-UpperHex-for-Urn"],[238,"impl-Display-for-Urn"],[239,"impl-LowerHex-for-Braced"],[240,"impl-Debug-for-Braced"],[241,"impl-Display-for-Braced"],[242,"impl-UpperHex-for-Braced"]]},\
"wyz":{"doc":"<code>wyz</code> – myrrlyn’s wyzyrdly library","t":"AAAADILLLLLLLLLLLLLLLLLLDSDSQDDIDSSQGISILLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLDDIDDDDDDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLIKKK","n":["bidi","comu","fmt","range","Bidi","BidiIterator","bidi","borrow","borrow_mut","count","from","into","into_iter","last","len","new","next","next_back","nth","nth_back","size_hint","try_from","try_into","type_id","Address","CONTAINS_MUTABILITY","Const","DANGLING","ElementAddr","Frozen","Mut","Mutability","NullPtrError","PEANO_NUMBER","RENDER","Ref","Reference","Referential","SELF","SliceReferential","add","align_offset","as_mut","as_ref","assert_mut","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","cast","clone","clone","clone","clone","clone","cmp","cmp","cmp","cmp","cmp","copy_from","copy_from_nonoverlapping","copy_to","copy_to_nonoverlapping","default","default","default","default","drop_in_place","eq","eq","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","freeze","freeze","from","from","from","from","from","from","from","from_raw_parts","from_raw_parts","from_raw_parts","from_raw_parts","from_ref","from_ref","from_ref","from_ref","hash","hash","hash","hash","hash","immut","into","into","into","into","into","into_inner","new","offset","offset_from","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","read","read_unaligned","read_volatile","replace","sub","swap","thaw","thaw","to_const","to_mut","to_ref","to_ref","to_ref","to_ref","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","wrapping_add","wrapping_offset","wrapping_sub","write","write_unaligned","write_volatile","FmtBinary","FmtDisplay","FmtForward","FmtList","FmtLowerExp","FmtLowerHex","FmtOctal","FmtPointer","FmtUpperExp","FmtUpperHex","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt_binary","fmt_display","fmt_list","fmt_lower_exp","fmt_lower_hex","fmt_octal","fmt_pointer","fmt_upper_exp","fmt_upper_hex","from","from","from","from","from","from","from","from","from","into","into","into","into","into","into","into","into","into","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","RangeExt","intersection","normalize","union"],"q":[[0,"wyz"],[4,"wyz::bidi"],[24,"wyz::comu"],[161,"wyz::fmt"],[359,"wyz::range"],[363,"core::iter::traits::double_ended"],[364,"core::option"],[365,"core::iter::traits::exact_size"],[366,"core::iter::traits::collect"],[367,"core::result"],[368,"core::any"],[369,"core::marker"],[370,"core::clone"],[371,"core::cmp"],[372,"core::cmp"],[373,"core::cmp"],[374,"core::fmt"],[375,"core::hash"],[376,"core::cmp"],[377,"core::convert"]],"d":["A bidirectional iterator that only checks its direction …","Trait-level <code>co</code>nst/<code>mu</code>table tracking.","Format forwarding","Range utilities.","An iterator that conditionally reverses itself upon …","Extension trait that provides <code>.bidi()</code> for all double-ended …","Conditionally reverses the direction of iteration.","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","Applies the <code>Bidi</code> adapter to a double-ended iterator and …","","","","","","","","","A generic non-null pointer with type-system mutability …","Marks whether this type contains mutability permissions …","A basic <code>const</code> marker.","The dangling pointer.","The type of the element pointer.","A frozen wrapper over some other <code>Mutability</code> marker.","A basic <code>mut</code> marker.","Generalized mutability permissions.","<code>Address</code> cannot be constructed over null pointers.","Counts the layers of <code>Frozen&lt;&gt;</code> wrapping around a base <code>Const</code> …","One of <code>*const</code> or <code>*mut</code>.","The created reference type. Must be one of <code>&amp;T</code> or <code>&amp;mut T</code>.","A generically-mutable reference.","Allows an <code>Address</code> to produce an ordinary reference.","Allow instances to be constructed generically.","Allows an <code>Address&lt;M, [T]&gt;</code> to produce an ordinary slice …","Applies <code>&lt;*T&gt;::add</code>.","Applies <code>&lt;*T&gt;::align_offset</code>.","Applies <code>&lt;*T&gt;::as_mut</code>.","Applies <code>&lt;*T&gt;::as_ref</code>.","Force an <code>Address&lt;Const&gt;</code> to be <code>Address&lt;Mut&gt;</code>.","","","","","","","","","","","Applies <code>&lt;*T&gt;::cast</code>.","","","","","","","","","","","Applies <code>&lt;*T&gt;::copy_from</code>.","Applies <code>&lt;*T&gt;::copy_from_nonoverlapping</code>.","Applies <code>&lt;*T&gt;::copy_to</code>.","Applies <code>&lt;*T&gt;::copy_to_nonoverlapping</code>.","","","","","Applies <code>&lt;*T&gt;::drop_in_place</code>.","","","","","","","","","","","","","Freeze this type, wrapping it in a <code>const</code> marker that may …","Freezes the <code>Address</code> so that it is read-only.","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Constructs an ordinary slice reference from a base-address …","","","","Converts a reference back into an <code>Address</code>.","","","","","","","","","Permanently converts an <code>Address&lt;_&gt;</code> into an <code>Address&lt;Const&gt;</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Removes the <code>Address</code> type marker, returning the original …","Constructs a new <code>Address</code> over some pointer value.","Applies <code>&lt;*T&gt;::offset</code>.","Applies <code>&lt;*T&gt;::offset_from</code>.","","","","","","Applies <code>&lt;*T&gt;::read</code>.","Applies <code>&lt;*T&gt;::read_unaligned</code>.","Applies <code>&lt;*T&gt;::read_volatile</code>.","Applies <code>&lt;*T&gt;::replace</code>.","Applies <code>&lt;*T&gt;::sub</code>.","Applies <code>&lt;*T&gt;::swap</code>.","Thaw a previously-frozen type, removing its <code>Frozen</code> marker …","Thaws the <code>Address</code> to its original mutability permission.","Gets the address as a read-only pointer.","Gets the address as a write-capable pointer.","Converts the <code>Address</code> to a reference.","","","","","","","","","","","","","","","","","","","","","Applies <code>&lt;*T&gt;::wrapping_add</code>.","Applies <code>&lt;*T&gt;::wrapping_offset</code>.","Applies <code>&lt;*T&gt;::wrapping_sub</code>.","Applies <code>&lt;*T&gt;::write</code>.","Applies <code>&lt;*T&gt;::write_unaligned</code>.","Applies <code>&lt;*T&gt;::write_volatile</code>.","Forwards a type’s <code>Binary</code> formatting implementation to …","Forwards a type’s <code>Display</code> formatting implementation to …","Wraps any value with a format-forward to <code>Debug</code>.","Renders each element of a stream into a list.","Forwards a type’s <code>LowerExp</code> formatting implementation to …","Forwards a type’s <code>LowerHex</code> formatting implementation to …","Forwards a type’s <code>Octal</code> formatting implementation to …","Forwards a type’s <code>Pointer</code> formatting implementation to …","Forwards a type’s <code>UpperExp</code> formatting implementation to …","Forwards a type’s <code>UpperHex</code> formatting implementation to …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Causes <code>self</code> to use its <code>Binary</code> implementation when <code>Debug</code>…","Causes <code>self</code> to use its <code>Display</code> implementation when <code>Debug</code>…","Formats each item in a sequence.","Causes <code>self</code> to use its <code>LowerExp</code> implementation when <code>Debug</code>…","Causes <code>self</code> to use its <code>LowerHex</code> implementation when <code>Debug</code>…","Causes <code>self</code> to use its <code>Octal</code> implementation when <code>Debug</code>…","Causes <code>self</code> to use its <code>Pointer</code> implementation when <code>Debug</code>…","Causes <code>self</code> to use its <code>UpperExp</code> implementation when <code>Debug</code>…","Causes <code>self</code> to use its <code>UpperHex</code> implementation when <code>Debug</code>…","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","Extension methods for working with various range types.","Finds the intersection between two range-likes. The …","Normalizes a range-like type to a canonical half-open <code>Range</code>…","Finds the union between two range-likes. The produced <code>Range</code>…"],"i":[0,0,0,0,0,0,51,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,12,0,11,52,0,0,0,0,12,12,53,0,0,12,0,11,11,11,11,11,11,15,13,16,18,11,15,13,16,18,11,11,15,13,16,18,11,15,13,16,18,11,11,11,11,15,13,16,18,11,11,15,13,16,18,11,11,15,13,16,18,18,12,11,11,11,11,15,13,16,18,52,11,11,11,53,11,11,11,11,15,13,16,18,11,11,15,13,16,18,11,11,11,11,11,15,13,16,18,11,11,11,11,11,11,12,11,11,11,53,11,11,11,11,11,11,15,13,16,18,11,15,13,16,18,11,15,13,16,18,11,11,11,11,11,11,0,0,0,0,0,0,0,0,0,0,31,33,35,36,38,40,42,44,46,31,33,35,36,38,40,42,44,46,31,33,35,36,38,40,42,44,46,31,33,35,36,38,40,42,44,46,31,33,35,36,38,40,42,44,46,31,33,35,36,38,40,42,44,46,31,31,31,31,31,31,31,31,31,33,33,33,33,33,33,33,33,33,35,35,35,35,35,35,35,35,36,36,36,36,36,36,36,36,36,38,38,38,38,38,38,38,38,38,40,40,40,40,40,40,40,40,40,42,42,42,42,42,42,42,42,42,44,44,44,44,44,44,44,44,44,46,46,46,46,46,46,46,46,46,54,54,54,54,54,54,54,54,54,31,33,35,36,38,40,42,44,46,31,33,35,36,38,40,42,44,46,31,33,35,36,38,40,42,44,46,31,33,35,36,38,40,42,44,46,31,33,35,36,38,40,42,44,46,0,49,49,49],"f":[0,0,0,0,0,0,[[-1,1],2,[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[2,[-1]]],3,4],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[2,[-1]]],5,4],[[[2,[-1]]],3,[4,6]],[[-1,1],[[2,[-2]]],7,4],[[[2,[-1]]],5,4],[[[2,[-1]]],5,4],[[[2,[-1]],3],5,4],[[[2,[-1]],3],5,4],[[[2,[-1]]],[[8,[3,[5,[3]]]]],4],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,10,[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[[11,[-1,-2]],3],[[11,[-1,-2]]],12,[]],[[[11,[-1,-2]],3],3,12,[]],[[[11,[13,-1]]],[[5,[-1]]],14],[[[11,[-1,-2]]],[[5,[-2]]],12,14],[[[11,[-1,-2]]],[[11,[13,-2]]],12,14],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[11,[-1,-2]]],[[11,[-1,-3]]],12,[],[]],[[[11,[-1,-2]]],[[11,[-1,-2]]],12,14],[15,15],[13,13],[[[16,[-1]]],[[16,[-1]]],[12,17]],[18,18],[[[11,[-1,-2]],[11,[-1,-2]]],19,12,[]],[[15,15],19],[[13,13],19],[[[16,[-1]],[16,[-1]]],19,[12,20]],[[18,18],19],[[[11,[13,-1]],[11,[-2,-1]],3],8,[],12],[[[11,[13,-1]],[11,[-2,-1]],3],8,[],12],[[[11,[-1,-2]],[11,[13,-2]],3],8,12,[]],[[[11,[-1,-2]],[11,[13,-2]],3],8,12,[]],[[],15],[[],13],[[],[[16,[-1]]],[12,21]],[[],18],[[[11,[13,-1]]],8,14],[[[11,[-1,-2]],[11,[-3,-4]]],1,12,[],12,[]],[[15,15],1],[[13,13],1],[[[16,[-1]],[16,[-1]]],1,[12,22]],[[18,18],1],[[[11,[-1,-2]],23],24,12,14],[[[11,[-1,-2]],23],24,12,14],[[15,23],24],[[13,23],24],[[[16,[-1]],23],24,[12,25]],[[18,23],24],[[18,23],24],[-1,[[16,[-1]]],[]],[[[11,[-1,-2]]],[[11,[[16,[-1]],-2]]],12,14],[-1,[[11,[13,-1]]],14],[-1,[[11,[15,-1]]],14],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[3],[3],[3],[3],[[],-1,[]],[[],[[11,[15,-1]]],14],[[],[[11,[[16,[-1]],-2]]],12,14],[[],[[11,[13,-1]]],14],[[[11,[-1,-2]],-3],8,12,14,26],[[15,-1],8,26],[[13,-1],8,26],[[[16,[-1]],-2],8,[12,27],26],[[18,-1],8,26],[[[11,[-1,-2]]],[[11,[15,-2]]],12,14],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[11,[-1,-2]]],[[28,[-2]]],12,14],[[[28,[-1]]],[[11,[-2,-1]]],14,12],[[[11,[-1,-2]],29],[[11,[-1,-2]]],12,[]],[[[11,[-1,-2]],[11,[-1,-2]]],29,12,[]],[[[11,[-1,-2]],[11,[-3,-4]]],[[5,[19]]],12,[],12,[]],[[15,15],[[5,[19]]]],[[13,13],[[5,[19]]]],[[[16,[-1]],[16,[-1]]],[[5,[19]]],[12,30]],[[18,18],[[5,[19]]]],[[[11,[-1,-2]]],-2,12,[]],[[[11,[-1,-2]]],-2,12,[]],[[[11,[-1,-2]]],-2,12,[]],[[[11,[13,-1]],-1],-1,[]],[[[11,[-1,-2]],3],[[11,[-1,-2]]],12,[]],[[[11,[13,-1]],[11,[13,-1]]],8,[]],[[[16,[-1]]],-1,[]],[[[11,[[16,[-1]],-2]]],[[11,[-1,-2]]],12,14],[[[11,[-1,-2]]],[],12,14],[[[11,[13,-1]]],[],[]],[-1,[],[]],[[[11,[15,-1]]],[],14],[[[11,[[16,[-1]],-2]]],[],12,14],[[[11,[13,-1]]],[],14],[[],[[9,[[11,[13,-1]]]]],14],[-1,[[9,[-2]]],[],[]],[[],[[9,[[11,[15,-1]]]]],14],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,10,[]],[-1,10,[]],[-1,10,[]],[-1,10,[]],[-1,10,[]],[[[11,[-1,-2]],3],[[11,[-1,-2]]],12,[]],[[[11,[-1,-2]],29],[[11,[-1,-2]]],12,[]],[[[11,[-1,-2]],3],[[11,[-1,-2]]],12,[]],[[[11,[13,-1]],-1],8,[]],[[[11,[13,-1]],-1],8,[]],[[[11,[13,-1]],-1],8,[]],0,0,0,0,0,0,0,0,0,0,[[[31,[-1]]],-1,32],[[[33,[-1]]],-1,34],[[[35,[-1]]],-1,[]],[[[36,[-1]]],-1,37],[[[38,[-1]]],-1,39],[[[40,[-1]]],-1,41],[[[42,[-1]]],-1,43],[[[44,[-1]]],-1,45],[[[46,[-1]]],-1,47],[[[31,[-1]]],-1,32],[[[33,[-1]]],-1,34],[[[35,[-1]]],-1,[]],[[[36,[-1]]],-1,37],[[[38,[-1]]],-1,39],[[[40,[-1]]],-1,41],[[[42,[-1]]],-1,43],[[[44,[-1]]],-1,45],[[[46,[-1]]],-1,47],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[31,[-1]]],[],32],[[[33,[-1]]],[],34],[[[35,[-1]]],[],[]],[[[36,[-1]]],[],37],[[[38,[-1]]],[],39],[[[40,[-1]]],[],41],[[[42,[-1]]],[],43],[[[44,[-1]]],[],45],[[[46,[-1]]],[],47],[[[31,[-1]]],[],32],[[[33,[-1]]],[],34],[[[35,[-1]]],[],[]],[[[36,[-1]]],[],37],[[[38,[-1]]],[],39],[[[40,[-1]]],[],41],[[[42,[-1]]],[],43],[[[44,[-1]]],[],45],[[[46,[-1]]],[],47],[[[31,[-1]],23],24,[32,47]],[[[31,[-1]],23],24,[32,32]],[[[31,[-1]],23],24,[32,43]],[[[31,[-1]],23],24,[32,37]],[[[31,[-1]],23],24,32],[[[31,[-1]],23],24,[32,41]],[[[31,[-1]],23],24,[32,34]],[[[31,[-1]],23],24,[32,45]],[[[31,[-1]],23],24,[32,39]],[[[33,[-1]],23],24,[34,41]],[[[33,[-1]],23],24,[34,39]],[[[33,[-1]],23],24,[34,43]],[[[33,[-1]],23],24,[34,32]],[[[33,[-1]],23],24,[34,34]],[[[33,[-1]],23],24,[34,37]],[[[33,[-1]],23],24,34],[[[33,[-1]],23],24,[34,47]],[[[33,[-1]],23],24,[34,45]],[[[35,[-1]],23],24,[]],[[[35,[-1]],23],24,[]],[[[35,[-1]],23],24,[]],[[[35,[-1]],23],24,[]],[[[35,[-1]],23],24,[]],[[[35,[-1]],23],24,[]],[[[35,[-1]],23],24,[]],[[[35,[-1]],23],24,[]],[[[36,[-1]],23],24,[37,45]],[[[36,[-1]],23],24,[37,43]],[[[36,[-1]],23],24,[37,41]],[[[36,[-1]],23],24,37],[[[36,[-1]],23],24,[37,37]],[[[36,[-1]],23],24,[37,47]],[[[36,[-1]],23],24,[37,34]],[[[36,[-1]],23],24,[37,32]],[[[36,[-1]],23],24,[37,39]],[[[38,[-1]],23],24,[39,45]],[[[38,[-1]],23],24,39],[[[38,[-1]],23],24,[39,39]],[[[38,[-1]],23],24,[39,43]],[[[38,[-1]],23],24,[39,34]],[[[38,[-1]],23],24,[39,47]],[[[38,[-1]],23],24,[39,37]],[[[38,[-1]],23],24,[39,41]],[[[38,[-1]],23],24,[39,32]],[[[40,[-1]],23],24,[41,41]],[[[40,[-1]],23],24,[41,34]],[[[40,[-1]],23],24,41],[[[40,[-1]],23],24,[41,47]],[[[40,[-1]],23],24,[41,32]],[[[40,[-1]],23],24,[41,43]],[[[40,[-1]],23],24,[41,39]],[[[40,[-1]],23],24,[41,45]],[[[40,[-1]],23],24,[41,37]],[[[42,[-1]],23],24,[43,45]],[[[42,[-1]],23],24,[43,47]],[[[42,[-1]],23],24,43],[[[42,[-1]],23],24,[43,43]],[[[42,[-1]],23],24,[43,37]],[[[42,[-1]],23],24,[43,39]],[[[42,[-1]],23],24,[43,34]],[[[42,[-1]],23],24,[43,32]],[[[42,[-1]],23],24,[43,41]],[[[44,[-1]],23],24,[45,34]],[[[44,[-1]],23],24,[45,45]],[[[44,[-1]],23],24,[45,37]],[[[44,[-1]],23],24,[45,41]],[[[44,[-1]],23],24,45],[[[44,[-1]],23],24,[45,32]],[[[44,[-1]],23],24,[45,43]],[[[44,[-1]],23],24,[45,39]],[[[44,[-1]],23],24,[45,47]],[[[46,[-1]],23],24,[47,39]],[[[46,[-1]],23],24,47],[[[46,[-1]],23],24,[47,32]],[[[46,[-1]],23],24,[47,43]],[[[46,[-1]],23],24,[47,34]],[[[46,[-1]],23],24,[47,37]],[[[46,[-1]],23],24,[47,47]],[[[46,[-1]],23],24,[47,45]],[[[46,[-1]],23],24,[47,41]],[-1,[[31,[-1]]],32],[-1,[[33,[-1]]],34],[-1,[[35,[-1]]],[]],[-1,[[36,[-1]]],37],[-1,[[38,[-1]]],39],[-1,[[40,[-1]]],41],[-1,[[42,[-1]]],43],[-1,[[44,[-1]]],45],[-1,[[46,[-1]]],47],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,10,[]],[-1,10,[]],[-1,10,[]],[-1,10,[]],[-1,10,[]],[-1,10,[]],[-1,10,[]],[-1,10,[]],[-1,10,[]],0,[[-1,-3],[[5,[[48,[-2]]]]],[],[],[[49,[-2]]]],[[-1,-3,-4],[[48,[-2]]],[],[],[[50,[[5,[-2]]]]],[[50,[[5,[-2]]]]]],[[-1,-3],[[5,[[48,[-2]]]]],[],[],[[49,[-2]]]]],"c":[],"p":[[15,"bool"],[3,"Bidi",4],[15,"usize"],[8,"DoubleEndedIterator",363],[4,"Option",364],[8,"ExactSizeIterator",365],[8,"IntoIterator",366],[15,"tuple"],[4,"Result",367],[3,"TypeId",368],[3,"Address",24],[8,"Mutability",24],[3,"Mut",24],[8,"Sized",369],[3,"Const",24],[3,"Frozen",24],[8,"Clone",370],[3,"NullPtrError",24],[4,"Ordering",371],[8,"Ord",371],[8,"Default",372],[8,"PartialEq",371],[3,"Formatter",373],[6,"Result",373],[8,"Debug",373],[8,"Hasher",374],[8,"Hash",374],[3,"NonNull",375],[15,"isize"],[8,"PartialOrd",371],[3,"FmtBinary",161],[8,"Binary",373],[3,"FmtDisplay",161],[8,"Display",373],[3,"FmtList",161],[3,"FmtLowerExp",161],[8,"LowerExp",373],[3,"FmtLowerHex",161],[8,"LowerHex",373],[3,"FmtOctal",161],[8,"Octal",373],[3,"FmtPointer",161],[8,"Pointer",373],[3,"FmtUpperExp",161],[8,"UpperExp",373],[3,"FmtUpperHex",161],[8,"UpperHex",373],[3,"Range",376],[8,"RangeExt",359],[8,"Into",377],[8,"BidiIterator",4],[8,"SliceReferential",24],[8,"Referential",24],[8,"FmtForward",161]],"b":[[80,"impl-Pointer-for-Address%3CM,+T%3E"],[81,"impl-Debug-for-Address%3CM,+T%3E"],[85,"impl-Display-for-NullPtrError"],[86,"impl-Debug-for-NullPtrError"],[89,"impl-From%3C%26mut+T%3E-for-Address%3CMut,+T%3E"],[90,"impl-From%3C%26T%3E-for-Address%3CConst,+T%3E"],[97,"impl-SliceReferential%3C\'a%3E-for-Address%3CMut,+%5BT%5D%3E"],[98,"impl-SliceReferential%3C\'a%3E-for-Address%3CFrozen%3CM%3E,+%5BT%5D%3E"],[99,"impl-SliceReferential%3C\'a%3E-for-Address%3CConst,+%5BT%5D%3E"],[101,"impl-Referential%3C\'a%3E-for-Address%3CConst,+T%3E"],[102,"impl-Referential%3C\'a%3E-for-Address%3CFrozen%3CM%3E,+T%3E"],[103,"impl-Referential%3C\'a%3E-for-Address%3CMut,+T%3E"],[135,"impl-Referential%3C\'a%3E-for-Address%3CConst,+T%3E"],[136,"impl-Referential%3C\'a%3E-for-Address%3CFrozen%3CM%3E,+T%3E"],[137,"impl-Referential%3C\'a%3E-for-Address%3CMut,+T%3E"],[138,"impl-TryFrom%3C*mut+T%3E-for-Address%3CMut,+T%3E"],[140,"impl-TryFrom%3C*const+T%3E-for-Address%3CConst,+T%3E"],[225,"impl-UpperHex-for-FmtBinary%3CT%3E"],[226,"impl-Binary-for-FmtBinary%3CT%3E"],[227,"impl-Pointer-for-FmtBinary%3CT%3E"],[228,"impl-LowerExp-for-FmtBinary%3CT%3E"],[229,"impl-Debug-for-FmtBinary%3CT%3E"],[230,"impl-Octal-for-FmtBinary%3CT%3E"],[231,"impl-Display-for-FmtBinary%3CT%3E"],[232,"impl-UpperExp-for-FmtBinary%3CT%3E"],[233,"impl-LowerHex-for-FmtBinary%3CT%3E"],[234,"impl-Octal-for-FmtDisplay%3CT%3E"],[235,"impl-LowerHex-for-FmtDisplay%3CT%3E"],[236,"impl-Pointer-for-FmtDisplay%3CT%3E"],[237,"impl-Binary-for-FmtDisplay%3CT%3E"],[238,"impl-Display-for-FmtDisplay%3CT%3E"],[239,"impl-LowerExp-for-FmtDisplay%3CT%3E"],[240,"impl-Debug-for-FmtDisplay%3CT%3E"],[241,"impl-UpperHex-for-FmtDisplay%3CT%3E"],[242,"impl-UpperExp-for-FmtDisplay%3CT%3E"],[243,"impl-Debug-for-FmtList%3CT%3E"],[244,"impl-Binary-for-FmtList%3CT%3E"],[245,"impl-LowerHex-for-FmtList%3CT%3E"],[246,"impl-UpperHex-for-FmtList%3CT%3E"],[247,"impl-LowerExp-for-FmtList%3CT%3E"],[248,"impl-Display-for-FmtList%3CT%3E"],[249,"impl-Octal-for-FmtList%3CT%3E"],[250,"impl-UpperExp-for-FmtList%3CT%3E"],[251,"impl-UpperExp-for-FmtLowerExp%3CT%3E"],[252,"impl-Pointer-for-FmtLowerExp%3CT%3E"],[253,"impl-Octal-for-FmtLowerExp%3CT%3E"],[254,"impl-Debug-for-FmtLowerExp%3CT%3E"],[255,"impl-LowerExp-for-FmtLowerExp%3CT%3E"],[256,"impl-UpperHex-for-FmtLowerExp%3CT%3E"],[257,"impl-Display-for-FmtLowerExp%3CT%3E"],[258,"impl-Binary-for-FmtLowerExp%3CT%3E"],[259,"impl-LowerHex-for-FmtLowerExp%3CT%3E"],[260,"impl-UpperExp-for-FmtLowerHex%3CT%3E"],[261,"impl-Debug-for-FmtLowerHex%3CT%3E"],[262,"impl-LowerHex-for-FmtLowerHex%3CT%3E"],[263,"impl-Pointer-for-FmtLowerHex%3CT%3E"],[264,"impl-Display-for-FmtLowerHex%3CT%3E"],[265,"impl-UpperHex-for-FmtLowerHex%3CT%3E"],[266,"impl-LowerExp-for-FmtLowerHex%3CT%3E"],[267,"impl-Octal-for-FmtLowerHex%3CT%3E"],[268,"impl-Binary-for-FmtLowerHex%3CT%3E"],[269,"impl-Octal-for-FmtOctal%3CT%3E"],[270,"impl-Display-for-FmtOctal%3CT%3E"],[271,"impl-Debug-for-FmtOctal%3CT%3E"],[272,"impl-UpperHex-for-FmtOctal%3CT%3E"],[273,"impl-Binary-for-FmtOctal%3CT%3E"],[274,"impl-Pointer-for-FmtOctal%3CT%3E"],[275,"impl-LowerHex-for-FmtOctal%3CT%3E"],[276,"impl-UpperExp-for-FmtOctal%3CT%3E"],[277,"impl-LowerExp-for-FmtOctal%3CT%3E"],[278,"impl-UpperExp-for-FmtPointer%3CT%3E"],[279,"impl-UpperHex-for-FmtPointer%3CT%3E"],[280,"impl-Debug-for-FmtPointer%3CT%3E"],[281,"impl-Pointer-for-FmtPointer%3CT%3E"],[282,"impl-LowerExp-for-FmtPointer%3CT%3E"],[283,"impl-LowerHex-for-FmtPointer%3CT%3E"],[284,"impl-Display-for-FmtPointer%3CT%3E"],[285,"impl-Binary-for-FmtPointer%3CT%3E"],[286,"impl-Octal-for-FmtPointer%3CT%3E"],[287,"impl-Display-for-FmtUpperExp%3CT%3E"],[288,"impl-UpperExp-for-FmtUpperExp%3CT%3E"],[289,"impl-LowerExp-for-FmtUpperExp%3CT%3E"],[290,"impl-Octal-for-FmtUpperExp%3CT%3E"],[291,"impl-Debug-for-FmtUpperExp%3CT%3E"],[292,"impl-Binary-for-FmtUpperExp%3CT%3E"],[293,"impl-Pointer-for-FmtUpperExp%3CT%3E"],[294,"impl-LowerHex-for-FmtUpperExp%3CT%3E"],[295,"impl-UpperHex-for-FmtUpperExp%3CT%3E"],[296,"impl-LowerHex-for-FmtUpperHex%3CT%3E"],[297,"impl-Debug-for-FmtUpperHex%3CT%3E"],[298,"impl-Binary-for-FmtUpperHex%3CT%3E"],[299,"impl-Pointer-for-FmtUpperHex%3CT%3E"],[300,"impl-Display-for-FmtUpperHex%3CT%3E"],[301,"impl-LowerExp-for-FmtUpperHex%3CT%3E"],[302,"impl-UpperHex-for-FmtUpperHex%3CT%3E"],[303,"impl-UpperExp-for-FmtUpperHex%3CT%3E"],[304,"impl-Octal-for-FmtUpperHex%3CT%3E"]]},\
"zerocopy":{"doc":"<em>Want to help improve zerocopy? Fill out our user survey!</em>","t":"IIIIIDDILLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLOLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKOOOLLLLLLLLLLLLLL","n":["AsBytes","ByteSlice","ByteSliceMut","FromBytes","FromZeroes","Ref","Unalign","Unaligned","as_bytes","as_bytes_mut","as_mut_ptr","as_ptr","borrow","borrow","borrow_mut","borrow_mut","bytes","bytes_mut","clone","cmp","cmp","cmp","default","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut_unchecked","deref_unchecked","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","from","from","get","get_mut_ptr","get_ptr","hash","include_value","into","into","into_inner","into_mut","into_mut_slice","into_ref","into_slice","mut_from","mut_from_prefix","mut_from_suffix","mut_slice_from","mut_slice_from_prefix","mut_slice_from_suffix","new","new","new_from_prefix","new_from_prefix_zeroed","new_from_suffix","new_from_suffix_zeroed","new_slice","new_slice_from_prefix","new_slice_from_prefix_zeroed","new_slice_from_suffix","new_slice_from_suffix_zeroed","new_slice_unaligned","new_slice_unaligned_from_prefix","new_slice_unaligned_from_prefix_zeroed","new_slice_unaligned_from_suffix","new_slice_unaligned_from_suffix_zeroed","new_slice_unaligned_zeroed","new_slice_zeroed","new_unaligned","new_unaligned_from_prefix","new_unaligned_from_prefix_zeroed","new_unaligned_from_suffix","new_unaligned_from_suffix_zeroed","new_unaligned_zeroed","new_zeroed","new_zeroed","partial_cmp","partial_cmp","partial_cmp","read","read_from","read_from_prefix","read_from_suffix","ref_from","ref_from_prefix","ref_from_suffix","set","slice_from","slice_from_prefix","slice_from_suffix","split_at","transmute","transmute_mut","transmute_ref","try_deref","try_deref_mut","try_from","try_from","try_into","try_into","type_id","type_id","update","write","write_to","write_to_prefix","write_to_suffix","zero"],"q":[[0,"zerocopy"],[118,"core::marker"],[119,"core::marker"],[120,"core::cmp"],[121,"core::cmp"],[122,"core::fmt"],[123,"core::hash"],[124,"core::cmp"],[125,"core::any"],[126,"core::ops::function"]],"d":["Types that can be viewed as an immutable slice of …","A mutable or immutable reference to a byte slice.","A mutable reference to a byte slice.","Types for which any bit pattern is valid.","Types for which a sequence of bytes all set to zero …","A typed reference derived from a byte slice.","A type with no alignment requirement.","Types with no alignment requirement.","Gets the bytes of this value.","Gets the bytes of this value mutably.","Gets a mutable raw pointer to the first byte in the slice.","Gets a raw pointer to the first byte in the slice.","","","","","Gets the underlying bytes.","Gets the underlying bytes mutably.","","","","","","","","","","","","Returns a mutable reference to the wrapped <code>T</code> without …","Returns a reference to the wrapped <code>T</code> without checking …","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Gets a copy of the inner <code>T</code>.","Gets an unaligned mutable raw pointer to the inner <code>T</code>.","Gets an unaligned raw pointer to the inner <code>T</code>.","","Includes a file and safely transmutes it to a value of an …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Consumes <code>self</code>, returning the inner <code>T</code>.","Converts this <code>Ref</code> into a mutable reference.","Converts this <code>Ref</code> into a mutable slice reference.","Converts this <code>Ref</code> into a reference.","Converts this <code>Ref</code> into a slice reference.","Interprets the given <code>bytes</code> as a <code>&amp;mut Self</code> without copying.","Interprets the prefix of the given <code>bytes</code> as a <code>&amp;mut Self</code> …","Interprets the suffix of the given <code>bytes</code> as a <code>&amp;mut Self</code> …","Interprets the given <code>bytes</code> as a <code>&amp;mut [Self]</code> without …","Interprets the prefix of the given <code>bytes</code> as a <code>&amp;mut [Self]</code> …","Interprets the suffix of the given <code>bytes</code> as a <code>&amp;mut [Self]</code> …","Constructs a new <code>Ref</code>.","Constructs a new <code>Unalign</code>.","Constructs a new <code>Ref</code> from the prefix of a byte slice.","Constructs a new <code>Ref</code> from the prefix of a byte slice, …","Constructs a new <code>Ref</code> from the suffix of a byte slice.","Constructs a new <code>Ref</code> from the suffix of a byte slice, …","Constructs a new <code>Ref</code> of a slice type.","Constructs a new <code>Ref</code> of a slice type from the prefix of a …","Constructs a new <code>Ref</code> of a slice type from the prefix of a …","Constructs a new <code>Ref</code> of a slice type from the suffix of a …","Constructs a new <code>Ref</code> of a slice type from the prefix of a …","Constructs a new <code>Ref</code> of a slice type with no alignment …","Constructs a new <code>Ref</code> of a slice type with no alignment …","Constructs a new <code>Ref</code> of a slice type with no alignment …","Constructs a new <code>Ref</code> of a slice type with no alignment …","Constructs a new <code>Ref</code> of a slice type with no alignment …","Constructs a new <code>Ref</code> for a slice type with no alignment …","Constructs a new <code>Ref</code> of a slice type after zeroing the …","Constructs a new <code>Ref</code> for a type with no alignment …","Constructs a new <code>Ref</code> from the prefix of a byte slice for a …","Constructs a new <code>Ref</code> from the prefix of a byte slice for a …","Constructs a new <code>Ref</code> from the suffix of a byte slice for a …","Constructs a new <code>Ref</code> from the suffix of a byte slice for a …","Constructs a new <code>Ref</code> for a type with no alignment …","Creates an instance of <code>Self</code> from zeroed bytes.","Constructs a new <code>Ref</code> after zeroing the bytes.","","","","Reads a copy of <code>T</code>.","Reads a copy of <code>Self</code> from <code>bytes</code>.","Reads a copy of <code>Self</code> from the prefix of <code>bytes</code>.","Reads a copy of <code>Self</code> from the suffix of <code>bytes</code>.","Interprets the given <code>bytes</code> as a <code>&amp;Self</code> without copying.","Interprets the prefix of the given <code>bytes</code> as a <code>&amp;Self</code> …","Interprets the suffix of the given <code>bytes</code> as a <code>&amp;Self</code> …","Sets the inner <code>T</code>, dropping the previous value.","Interprets the given <code>bytes</code> as a <code>&amp;[Self]</code> without copying.","Interprets the prefix of the given <code>bytes</code> as a <code>&amp;[Self]</code> with …","Interprets the suffix of the given <code>bytes</code> as a <code>&amp;[Self]</code> with …","Splits the slice at the midpoint.","Safely transmutes a value of one type to a value of …","Safely transmutes a mutable reference of one type to an …","Safely transmutes a mutable or immutable reference of one …","Attempts to return a reference to the wrapped <code>T</code>, failing …","Attempts to return a mutable reference to the wrapped <code>T</code>, …","","","","","","","Updates the inner <code>T</code> by calling a function on it.","Writes the bytes of <code>t</code> and then forgets <code>t</code>.","Writes a copy of <code>self</code> to <code>bytes</code>.","Writes a copy of <code>self</code> to the prefix of <code>bytes</code>.","Writes a copy of <code>self</code> to the suffix of <code>bytes</code>.","Overwrites <code>self</code> with zeroes."],"i":[0,0,0,0,0,0,0,0,14,14,7,5,4,8,4,8,4,4,8,4,4,8,8,4,4,8,4,4,8,8,8,4,4,8,4,4,4,4,8,8,4,8,8,8,8,8,0,4,8,8,4,4,4,4,3,3,3,3,3,3,4,8,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,30,4,4,4,8,4,3,3,3,3,3,3,8,3,3,3,5,0,0,0,8,8,4,8,4,8,4,8,8,4,14,14,14,30],"f":[0,0,0,0,0,0,0,0,[-1,[[2,[1]]],[]],[-1,[[2,[1]]],3],[-1,1,[]],[-1,1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[4,[-1,-2]]],[[2,[1]]],5,6],[[[4,[-1,-2]]],[[2,[1]]],7,6],[[[8,[-1]]],[[8,[-1]]],9],[[[4,[-1,-2]],[4,[-1,-2]]],10,5,[3,11]],[[[4,[-1,[2,[-2]]]],[4,[-1,[2,[-2]]]]],10,5,[3,11]],[[[8,[-1]],[8,[-1]]],10,[12,11]],[[],[[8,[-1]]],13],[[[4,[-1,-2]]],-2,5,3],[[[4,[-1,[2,[-2]]]]],[[2,[-2]]],5,3],[[[8,[-1]]],-1,12],[[[4,[-1,[2,[-2]]]]],[[2,[-2]]],7,[3,14]],[[[4,[-1,-2]]],-2,7,[3,14]],[[[8,[-1]]],-1,12],[[[8,[-1]]],-1,[]],[[[8,[-1]]],-1,[]],[[[4,[-1,-2]],[4,[-1,-2]]],15,5,[3,16]],[[[4,[-1,[2,[-2]]]],[4,[-1,[2,[-2]]]]],15,5,[3,16]],[[[8,[-1]],[8,[-1]]],15,[12,16]],[[[4,[-1,[2,[-2]]]],17],18,5,3],[[[4,[-1,-2]],17],18,5,[3,19]],[[[4,[-1,-2]],17],18,5,[3,20]],[[[4,[-1,[2,[-2]]]],17],18,5,[3,19]],[[[8,[-1]],17],18,[12,20]],[[[8,[-1]],17],18,[12,19]],[-1,-1,[]],[-1,-1,[]],[[[8,[-1]]],-1,9],[[[8,[-1]]],[],[]],[[[8,[-1]]],[],[]],[[[8,[-1]],-2],21,[12,22],23],0,[-1,-2,[],[]],[-1,-2,[],[]],[[[8,[-1]]],-1,[]],[[[4,[-1,-2]]],-2,7,[3,14]],[[[4,[-1,[2,[-2]]]]],[[2,[-2]]],7,[3,14]],[[[4,[-1,-2]]],-2,5,3],[[[4,[-1,[2,[-2]]]]],[[2,[-2]]],5,3],[[[2,[1]]],[[24,[-1]]],[6,14]],[[[2,[1]]],[[24,[-1]]],[6,14]],[[[2,[1]]],[[24,[-1]]],[6,14]],[[[2,[1]]],[[24,[[2,[-1]]]]],[6,14]],[[[2,[1]],25],[[24,[[21,[[2,[-1]],[2,[1]]]]]]],[6,14]],[[[2,[1]],25],[[24,[[21,[[2,[1]],[2,[-1]]]]]]],[6,14]],[-1,[[24,[[4,[-1,-2]]]]],5,[]],[-1,[[8,[-1]]],[]],[-1,[[24,[[21,[[4,[-1,-2]],-1]]]]],5,[]],[-1,[[24,[[21,[[4,[-1,-2]],-1]]]]],7,[]],[-1,[[24,[[21,[-1,[4,[-1,-2]]]]]]],5,[]],[-1,[[24,[[21,[-1,[4,[-1,-2]]]]]]],7,[]],[-1,[[24,[[4,[-1,[2,[-2]]]]]]],5,[]],[[-1,25],[[24,[[21,[[4,[-1,[2,[-2]]]],-1]]]]],5,[]],[[-1,25],[[24,[[21,[[4,[-1,[2,[-2]]]],-1]]]]],7,[]],[[-1,25],[[24,[[21,[-1,[4,[-1,[2,[-2]]]]]]]]],5,[]],[[-1,25],[[24,[[21,[-1,[4,[-1,[2,[-2]]]]]]]]],7,[]],[-1,[[24,[[4,[-1,[2,[-2]]]]]]],5,12],[[-1,25],[[24,[[21,[[4,[-1,[2,[-2]]]],-1]]]]],5,12],[[-1,25],[[24,[[21,[[4,[-1,[2,[-2]]]],-1]]]]],7,12],[[-1,25],[[24,[[21,[-1,[4,[-1,[2,[-2]]]]]]]]],5,12],[[-1,25],[[24,[[21,[-1,[4,[-1,[2,[-2]]]]]]]]],7,12],[-1,[[24,[[4,[-1,[2,[-2]]]]]]],7,12],[-1,[[24,[[4,[-1,[2,[-2]]]]]]],7,[]],[-1,[[24,[[4,[-1,-2]]]]],5,12],[-1,[[24,[[21,[[4,[-1,-2]],-1]]]]],5,12],[-1,[[24,[[21,[[4,[-1,-2]],-1]]]]],7,12],[-1,[[24,[[21,[-1,[4,[-1,-2]]]]]]],5,12],[-1,[[24,[[21,[-1,[4,[-1,-2]]]]]]],7,12],[-1,[[24,[[4,[-1,-2]]]]],7,12],[[],-1,6],[-1,[[24,[[4,[-1,-2]]]]],7,[]],[[[4,[-1,-2]],[4,[-1,-2]]],[[24,[10]]],5,[3,26]],[[[4,[-1,[2,[-2]]]],[4,[-1,[2,[-2]]]]],[[24,[10]]],5,[3,26]],[[[8,[-1]],[8,[-1]]],[[24,[10]]],[12,26]],[[[4,[-1,-2]]],-2,5,3],[[[2,[1]]],[[24,[-1]]],6],[[[2,[1]]],[[24,[-1]]],6],[[[2,[1]]],[[24,[-1]]],6],[[[2,[1]]],[[24,[-1]]],6],[[[2,[1]]],[[24,[-1]]],6],[[[2,[1]]],[[24,[-1]]],6],[[[8,[-1]],-1],21,[]],[[[2,[1]]],[[24,[[2,[-1]]]]],6],[[[2,[1]],25],[[24,[[21,[[2,[-1]],[2,[1]]]]]]],6],[[[2,[1]],25],[[24,[[21,[[2,[1]],[2,[-1]]]]]]],6],[[-1,25],[[21,[-1,-1]]],[]],0,0,0,[[[8,[-1]]],[[24,[-1]]],[]],[[[8,[-1]]],[[24,[-1]]],[]],[-1,[[27,[-2]]],[],[]],[-1,[[27,[-2]]],[],[]],[-1,[[27,[-2]]],[],[]],[-1,[[27,[-2]]],[],[]],[-1,28,[]],[-1,28,[]],[[[8,[-1]],-2],-3,[],29,[]],[[[4,[-1,-2]],-2],21,7,14],[[-1,[2,[1]]],[[24,[21]]],[]],[[-1,[2,[1]]],[[24,[21]]],[]],[[-1,[2,[1]]],[[24,[21]]],[]],[-1,21,[]]],"c":[],"p":[[15,"u8"],[15,"slice"],[8,"FromBytes",0],[3,"Ref",0],[8,"ByteSlice",0],[8,"Sized",118],[8,"ByteSliceMut",0],[3,"Unalign",0],[8,"Copy",118],[4,"Ordering",119],[8,"Ord",119],[8,"Unaligned",0],[8,"Default",120],[8,"AsBytes",0],[15,"bool"],[8,"PartialEq",119],[3,"Formatter",121],[6,"Result",121],[8,"Debug",121],[8,"Display",121],[15,"tuple"],[8,"Hash",122],[8,"Hasher",122],[4,"Option",123],[15,"usize"],[8,"PartialOrd",119],[4,"Result",124],[3,"TypeId",125],[8,"FnOnce",126],[8,"FromZeroes",0]],"b":[[19,"impl-Ord-for-Ref%3CB,+T%3E"],[20,"impl-Ord-for-Ref%3CB,+%5BT%5D%3E"],[23,"impl-Deref-for-Ref%3CB,+T%3E"],[24,"impl-Deref-for-Ref%3CB,+%5BT%5D%3E"],[26,"impl-DerefMut-for-Ref%3CB,+%5BT%5D%3E"],[27,"impl-DerefMut-for-Ref%3CB,+T%3E"],[31,"impl-PartialEq-for-Ref%3CB,+T%3E"],[32,"impl-PartialEq-for-Ref%3CB,+%5BT%5D%3E"],[34,"impl-Display-for-Ref%3CB,+%5BT%5D%3E"],[35,"impl-Debug-for-Ref%3CB,+T%3E"],[36,"impl-Display-for-Ref%3CB,+T%3E"],[37,"impl-Debug-for-Ref%3CB,+%5BT%5D%3E"],[38,"impl-Display-for-Unalign%3CT%3E"],[39,"impl-Debug-for-Unalign%3CT%3E"],[86,"impl-PartialOrd-for-Ref%3CB,+T%3E"],[87,"impl-PartialOrd-for-Ref%3CB,+%5BT%5D%3E"]],"a":{"include_bytes":[46],"include_data":[46],"include_type":[46]}}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
